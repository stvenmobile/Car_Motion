
Car_Motion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010548  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  08010730  08010730  00011730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f4c  08010f4c  00011f4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08010f4c  08010f4c  00011f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f54  08010f54  000121dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f54  08010f54  00011f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010f58  08010f58  00011f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08010f5c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  200001e0  08011138  000121e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007bc  08011138  000127bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000121dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167cc  00000000  00000000  00012205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f36  00000000  00000000  000289d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  0002c908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d8b  00000000  00000000  0002dac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d4e5  00000000  00000000  0002e853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e9a8  00000000  00000000  0004bd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ca2a  00000000  00000000  0006a6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010710a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004378  00000000  00000000  00107150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00009d27  00000000  00000000  0010b4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  001151ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	080106ec 	.word	0x080106ec

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	080106ec 	.word	0x080106ec

08000228 <_stack_init>:
 8000228:	f5a3 3a80 	sub.w	sl, r3, #65536	@ 0x10000
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <_mainCRTStartup>:
 8000230:	4b17      	ldr	r3, [pc, #92]	@ (8000290 <_mainCRTStartup+0x60>)
 8000232:	2b00      	cmp	r3, #0
 8000234:	bf08      	it	eq
 8000236:	4b13      	ldreq	r3, [pc, #76]	@ (8000284 <_mainCRTStartup+0x54>)
 8000238:	469d      	mov	sp, r3
 800023a:	f7ff fff5 	bl	8000228 <_stack_init>
 800023e:	2100      	movs	r1, #0
 8000240:	468b      	mov	fp, r1
 8000242:	460f      	mov	r7, r1
 8000244:	4813      	ldr	r0, [pc, #76]	@ (8000294 <_mainCRTStartup+0x64>)
 8000246:	4a14      	ldr	r2, [pc, #80]	@ (8000298 <_mainCRTStartup+0x68>)
 8000248:	1a12      	subs	r2, r2, r0
 800024a:	f00d f88b 	bl	800d364 <memset>
 800024e:	4b0e      	ldr	r3, [pc, #56]	@ (8000288 <_mainCRTStartup+0x58>)
 8000250:	2b00      	cmp	r3, #0
 8000252:	d000      	beq.n	8000256 <_mainCRTStartup+0x26>
 8000254:	4798      	blx	r3
 8000256:	4b0d      	ldr	r3, [pc, #52]	@ (800028c <_mainCRTStartup+0x5c>)
 8000258:	2b00      	cmp	r3, #0
 800025a:	d000      	beq.n	800025e <_mainCRTStartup+0x2e>
 800025c:	4798      	blx	r3
 800025e:	2000      	movs	r0, #0
 8000260:	2100      	movs	r1, #0
 8000262:	0004      	movs	r4, r0
 8000264:	000d      	movs	r5, r1
 8000266:	480d      	ldr	r0, [pc, #52]	@ (800029c <_mainCRTStartup+0x6c>)
 8000268:	2800      	cmp	r0, #0
 800026a:	d002      	beq.n	8000272 <_mainCRTStartup+0x42>
 800026c:	480c      	ldr	r0, [pc, #48]	@ (80002a0 <_mainCRTStartup+0x70>)
 800026e:	f3af 8000 	nop.w
 8000272:	f00d f92b 	bl	800d4cc <__libc_init_array>
 8000276:	0020      	movs	r0, r4
 8000278:	0029      	movs	r1, r5
 800027a:	f002 fa9f 	bl	80027bc <main>
 800027e:	f00c f8f5 	bl	800c46c <exit>
 8000282:	bf00      	nop
 8000284:	00080000 	.word	0x00080000
	...
 8000294:	200001e0 	.word	0x200001e0
 8000298:	200007bc 	.word	0x200007bc
	...
 80002a4:	08010f5c 	.word	0x08010f5c
 80002a8:	20000000 	.word	0x20000000
 80002ac:	200001dc 	.word	0x200001dc
 80002b0:	200001e0 	.word	0x200001e0
 80002b4:	200007bc 	.word	0x200007bc

080002b8 <strcmp>:
 80002b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c0:	2a01      	cmp	r2, #1
 80002c2:	bf28      	it	cs
 80002c4:	429a      	cmpcs	r2, r3
 80002c6:	d0f7      	beq.n	80002b8 <strcmp>
 80002c8:	1ad0      	subs	r0, r2, r3
 80002ca:	4770      	bx	lr

080002cc <strlen>:
 80002cc:	4603      	mov	r3, r0
 80002ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	d1fb      	bne.n	80002ce <strlen+0x2>
 80002d6:	1a18      	subs	r0, r3, r0
 80002d8:	3801      	subs	r0, #1
 80002da:	4770      	bx	lr
 80002dc:	b570      	push	{r4, r5, r6, lr}
 80002de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ea:	bf1d      	ittte	ne
 80002ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002f0:	ea94 0f0c 	teqne	r4, ip
 80002f4:	ea95 0f0c 	teqne	r5, ip
 80002f8:	f000 f8de 	bleq	80004b8 <strlen+0x1ec>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea81 0603 	eor.w	r6, r1, r3
 8000302:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000306:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800030a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800030e:	bf18      	it	ne
 8000310:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000314:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000318:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800031c:	d038      	beq.n	8000390 <strlen+0xc4>
 800031e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000322:	f04f 0500 	mov.w	r5, #0
 8000326:	fbe1 e502 	umlal	lr, r5, r1, r2
 800032a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800032e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000332:	f04f 0600 	mov.w	r6, #0
 8000336:	fbe1 5603 	umlal	r5, r6, r1, r3
 800033a:	f09c 0f00 	teq	ip, #0
 800033e:	bf18      	it	ne
 8000340:	f04e 0e01 	orrne.w	lr, lr, #1
 8000344:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000348:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800034c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000350:	d204      	bcs.n	800035c <strlen+0x90>
 8000352:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000356:	416d      	adcs	r5, r5
 8000358:	eb46 0606 	adc.w	r6, r6, r6
 800035c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000360:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000364:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000368:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800036c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000370:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000374:	bf88      	it	hi
 8000376:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800037a:	d81e      	bhi.n	80003ba <strlen+0xee>
 800037c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	bd70      	pop	{r4, r5, r6, pc}
 8000390:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000394:	ea46 0101 	orr.w	r1, r6, r1
 8000398:	ea40 0002 	orr.w	r0, r0, r2
 800039c:	ea81 0103 	eor.w	r1, r1, r3
 80003a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80003a4:	bfc2      	ittt	gt
 80003a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80003aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003ae:	bd70      	popgt	{r4, r5, r6, pc}
 80003b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80003b4:	f04f 0e00 	mov.w	lr, #0
 80003b8:	3c01      	subs	r4, #1
 80003ba:	f300 80ab 	bgt.w	8000514 <strlen+0x248>
 80003be:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003c2:	bfde      	ittt	le
 80003c4:	2000      	movle	r0, #0
 80003c6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd70      	pople	{r4, r5, r6, pc}
 80003cc:	f1c4 0400 	rsb	r4, r4, #0
 80003d0:	3c20      	subs	r4, #32
 80003d2:	da35      	bge.n	8000440 <strlen+0x174>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc1b      	bgt.n	8000410 <strlen+0x144>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0520 	rsb	r5, r4, #32
 80003e0:	fa00 f305 	lsl.w	r3, r0, r5
 80003e4:	fa20 f004 	lsr.w	r0, r0, r4
 80003e8:	fa01 f205 	lsl.w	r2, r1, r5
 80003ec:	ea40 0002 	orr.w	r0, r0, r2
 80003f0:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000400:	eb42 0106 	adc.w	r1, r2, r6
 8000404:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000408:	bf08      	it	eq
 800040a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040e:	bd70      	pop	{r4, r5, r6, pc}
 8000410:	f1c4 040c 	rsb	r4, r4, #12
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f304 	lsl.w	r3, r0, r4
 800041c:	fa20 f005 	lsr.w	r0, r0, r5
 8000420:	fa01 f204 	lsl.w	r2, r1, r4
 8000424:	ea40 0002 	orr.w	r0, r0, r2
 8000428:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800042c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000430:	f141 0100 	adc.w	r1, r1, #0
 8000434:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000438:	bf08      	it	eq
 800043a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043e:	bd70      	pop	{r4, r5, r6, pc}
 8000440:	f1c4 0520 	rsb	r5, r4, #32
 8000444:	fa00 f205 	lsl.w	r2, r0, r5
 8000448:	ea4e 0e02 	orr.w	lr, lr, r2
 800044c:	fa20 f304 	lsr.w	r3, r0, r4
 8000450:	fa01 f205 	lsl.w	r2, r1, r5
 8000454:	ea43 0302 	orr.w	r3, r3, r2
 8000458:	fa21 f004 	lsr.w	r0, r1, r4
 800045c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000460:	fa21 f204 	lsr.w	r2, r1, r4
 8000464:	ea20 0002 	bic.w	r0, r0, r2
 8000468:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800046c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000470:	bf08      	it	eq
 8000472:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000476:	bd70      	pop	{r4, r5, r6, pc}
 8000478:	f094 0f00 	teq	r4, #0
 800047c:	d10f      	bne.n	800049e <strlen+0x1d2>
 800047e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000482:	0040      	lsls	r0, r0, #1
 8000484:	eb41 0101 	adc.w	r1, r1, r1
 8000488:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800048c:	bf08      	it	eq
 800048e:	3c01      	subeq	r4, #1
 8000490:	d0f7      	beq.n	8000482 <strlen+0x1b6>
 8000492:	ea41 0106 	orr.w	r1, r1, r6
 8000496:	f095 0f00 	teq	r5, #0
 800049a:	bf18      	it	ne
 800049c:	4770      	bxne	lr
 800049e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80004a2:	0052      	lsls	r2, r2, #1
 80004a4:	eb43 0303 	adc.w	r3, r3, r3
 80004a8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80004ac:	bf08      	it	eq
 80004ae:	3d01      	subeq	r5, #1
 80004b0:	d0f7      	beq.n	80004a2 <strlen+0x1d6>
 80004b2:	ea43 0306 	orr.w	r3, r3, r6
 80004b6:	4770      	bx	lr
 80004b8:	ea94 0f0c 	teq	r4, ip
 80004bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004c0:	bf18      	it	ne
 80004c2:	ea95 0f0c 	teqne	r5, ip
 80004c6:	d00c      	beq.n	80004e2 <strlen+0x216>
 80004c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004cc:	bf18      	it	ne
 80004ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d2:	d1d1      	bne.n	8000478 <strlen+0x1ac>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd70      	pop	{r4, r5, r6, pc}
 80004e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004e6:	bf06      	itte	eq
 80004e8:	4610      	moveq	r0, r2
 80004ea:	4619      	moveq	r1, r3
 80004ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004f0:	d019      	beq.n	8000526 <strlen+0x25a>
 80004f2:	ea94 0f0c 	teq	r4, ip
 80004f6:	d102      	bne.n	80004fe <strlen+0x232>
 80004f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004fc:	d113      	bne.n	8000526 <strlen+0x25a>
 80004fe:	ea95 0f0c 	teq	r5, ip
 8000502:	d105      	bne.n	8000510 <strlen+0x244>
 8000504:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000508:	bf1c      	itt	ne
 800050a:	4610      	movne	r0, r2
 800050c:	4619      	movne	r1, r3
 800050e:	d10a      	bne.n	8000526 <strlen+0x25a>
 8000510:	ea81 0103 	eor.w	r1, r1, r3
 8000514:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800051c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000520:	f04f 0000 	mov.w	r0, #0
 8000524:	bd70      	pop	{r4, r5, r6, pc}
 8000526:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800052a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800052e:	bd70      	pop	{r4, r5, r6, pc}
 8000530:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000534:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000538:	bf1e      	ittt	ne
 800053a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800053e:	ea92 0f0c 	teqne	r2, ip
 8000542:	ea93 0f0c 	teqne	r3, ip
 8000546:	d06f      	beq.n	8000628 <strlen+0x35c>
 8000548:	441a      	add	r2, r3
 800054a:	ea80 0c01 	eor.w	ip, r0, r1
 800054e:	0240      	lsls	r0, r0, #9
 8000550:	bf18      	it	ne
 8000552:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000556:	d01e      	beq.n	8000596 <strlen+0x2ca>
 8000558:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800055c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000560:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000564:	fba0 3101 	umull	r3, r1, r0, r1
 8000568:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800056c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000570:	bf3e      	ittt	cc
 8000572:	0049      	lslcc	r1, r1, #1
 8000574:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000578:	005b      	lslcc	r3, r3, #1
 800057a:	ea40 0001 	orr.w	r0, r0, r1
 800057e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000582:	2afd      	cmp	r2, #253	@ 0xfd
 8000584:	d81d      	bhi.n	80005c2 <strlen+0x2f6>
 8000586:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800058a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800058e:	bf08      	it	eq
 8000590:	f020 0001 	biceq.w	r0, r0, #1
 8000594:	4770      	bx	lr
 8000596:	f090 0f00 	teq	r0, #0
 800059a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800059e:	bf08      	it	eq
 80005a0:	0249      	lsleq	r1, r1, #9
 80005a2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80005aa:	3a7f      	subs	r2, #127	@ 0x7f
 80005ac:	bfc2      	ittt	gt
 80005ae:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80005b2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005b6:	4770      	bxgt	lr
 80005b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005bc:	f04f 0300 	mov.w	r3, #0
 80005c0:	3a01      	subs	r2, #1
 80005c2:	dc5d      	bgt.n	8000680 <strlen+0x3b4>
 80005c4:	f112 0f19 	cmn.w	r2, #25
 80005c8:	bfdc      	itt	le
 80005ca:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80005ce:	4770      	bxle	lr
 80005d0:	f1c2 0200 	rsb	r2, r2, #0
 80005d4:	0041      	lsls	r1, r0, #1
 80005d6:	fa21 f102 	lsr.w	r1, r1, r2
 80005da:	f1c2 0220 	rsb	r2, r2, #32
 80005de:	fa00 fc02 	lsl.w	ip, r0, r2
 80005e2:	ea5f 0031 	movs.w	r0, r1, rrx
 80005e6:	f140 0000 	adc.w	r0, r0, #0
 80005ea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80005ee:	bf08      	it	eq
 80005f0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005f4:	4770      	bx	lr
 80005f6:	f092 0f00 	teq	r2, #0
 80005fa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005fe:	bf02      	ittt	eq
 8000600:	0040      	lsleq	r0, r0, #1
 8000602:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000606:	3a01      	subeq	r2, #1
 8000608:	d0f9      	beq.n	80005fe <strlen+0x332>
 800060a:	ea40 000c 	orr.w	r0, r0, ip
 800060e:	f093 0f00 	teq	r3, #0
 8000612:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	bf02      	ittt	eq
 8000618:	0049      	lsleq	r1, r1, #1
 800061a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800061e:	3b01      	subeq	r3, #1
 8000620:	d0f9      	beq.n	8000616 <strlen+0x34a>
 8000622:	ea41 010c 	orr.w	r1, r1, ip
 8000626:	e78f      	b.n	8000548 <strlen+0x27c>
 8000628:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800062c:	ea92 0f0c 	teq	r2, ip
 8000630:	bf18      	it	ne
 8000632:	ea93 0f0c 	teqne	r3, ip
 8000636:	d00a      	beq.n	800064e <strlen+0x382>
 8000638:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800063c:	bf18      	it	ne
 800063e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000642:	d1d8      	bne.n	80005f6 <strlen+0x32a>
 8000644:	ea80 0001 	eor.w	r0, r0, r1
 8000648:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f090 0f00 	teq	r0, #0
 8000652:	bf17      	itett	ne
 8000654:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000658:	4608      	moveq	r0, r1
 800065a:	f091 0f00 	teqne	r1, #0
 800065e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000662:	d014      	beq.n	800068e <strlen+0x3c2>
 8000664:	ea92 0f0c 	teq	r2, ip
 8000668:	d101      	bne.n	800066e <strlen+0x3a2>
 800066a:	0242      	lsls	r2, r0, #9
 800066c:	d10f      	bne.n	800068e <strlen+0x3c2>
 800066e:	ea93 0f0c 	teq	r3, ip
 8000672:	d103      	bne.n	800067c <strlen+0x3b0>
 8000674:	024b      	lsls	r3, r1, #9
 8000676:	bf18      	it	ne
 8000678:	4608      	movne	r0, r1
 800067a:	d108      	bne.n	800068e <strlen+0x3c2>
 800067c:	ea80 0001 	eor.w	r0, r0, r1
 8000680:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000684:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000688:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800068c:	4770      	bx	lr
 800068e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000692:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000696:	4770      	bx	lr

08000698 <__aeabi_drsub>:
 8000698:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	e002      	b.n	80006a4 <__adddf3>
 800069e:	bf00      	nop

080006a0 <__aeabi_dsub>:
 80006a0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080006a4 <__adddf3>:
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80006aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80006ae:	ea94 0f05 	teq	r4, r5
 80006b2:	bf08      	it	eq
 80006b4:	ea90 0f02 	teqeq	r0, r2
 80006b8:	bf1f      	itttt	ne
 80006ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80006be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80006c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80006c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006ca:	f000 80e2 	beq.w	8000892 <__adddf3+0x1ee>
 80006ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80006d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80006d6:	bfb8      	it	lt
 80006d8:	426d      	neglt	r5, r5
 80006da:	dd0c      	ble.n	80006f6 <__adddf3+0x52>
 80006dc:	442c      	add	r4, r5
 80006de:	ea80 0202 	eor.w	r2, r0, r2
 80006e2:	ea81 0303 	eor.w	r3, r1, r3
 80006e6:	ea82 0000 	eor.w	r0, r2, r0
 80006ea:	ea83 0101 	eor.w	r1, r3, r1
 80006ee:	ea80 0202 	eor.w	r2, r0, r2
 80006f2:	ea81 0303 	eor.w	r3, r1, r3
 80006f6:	2d36      	cmp	r5, #54	@ 0x36
 80006f8:	bf88      	it	hi
 80006fa:	bd30      	pophi	{r4, r5, pc}
 80006fc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000700:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000704:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000708:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800070c:	d002      	beq.n	8000714 <__adddf3+0x70>
 800070e:	4240      	negs	r0, r0
 8000710:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000714:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000718:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800071c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000720:	d002      	beq.n	8000728 <__adddf3+0x84>
 8000722:	4252      	negs	r2, r2
 8000724:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000728:	ea94 0f05 	teq	r4, r5
 800072c:	f000 80a7 	beq.w	800087e <__adddf3+0x1da>
 8000730:	f1a4 0401 	sub.w	r4, r4, #1
 8000734:	f1d5 0e20 	rsbs	lr, r5, #32
 8000738:	db0d      	blt.n	8000756 <__adddf3+0xb2>
 800073a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800073e:	fa22 f205 	lsr.w	r2, r2, r5
 8000742:	1880      	adds	r0, r0, r2
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	fa03 f20e 	lsl.w	r2, r3, lr
 800074c:	1880      	adds	r0, r0, r2
 800074e:	fa43 f305 	asr.w	r3, r3, r5
 8000752:	4159      	adcs	r1, r3
 8000754:	e00e      	b.n	8000774 <__adddf3+0xd0>
 8000756:	f1a5 0520 	sub.w	r5, r5, #32
 800075a:	f10e 0e20 	add.w	lr, lr, #32
 800075e:	2a01      	cmp	r2, #1
 8000760:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000764:	bf28      	it	cs
 8000766:	f04c 0c02 	orrcs.w	ip, ip, #2
 800076a:	fa43 f305 	asr.w	r3, r3, r5
 800076e:	18c0      	adds	r0, r0, r3
 8000770:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000774:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000778:	d507      	bpl.n	800078a <__adddf3+0xe6>
 800077a:	f04f 0e00 	mov.w	lr, #0
 800077e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000782:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000786:	eb6e 0101 	sbc.w	r1, lr, r1
 800078a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800078e:	d31b      	bcc.n	80007c8 <__adddf3+0x124>
 8000790:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000794:	d30c      	bcc.n	80007b0 <__adddf3+0x10c>
 8000796:	0849      	lsrs	r1, r1, #1
 8000798:	ea5f 0030 	movs.w	r0, r0, rrx
 800079c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80007a0:	f104 0401 	add.w	r4, r4, #1
 80007a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80007a8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80007ac:	f080 809a 	bcs.w	80008e4 <__adddf3+0x240>
 80007b0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80007b4:	bf08      	it	eq
 80007b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80007ba:	f150 0000 	adcs.w	r0, r0, #0
 80007be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007c2:	ea41 0105 	orr.w	r1, r1, r5
 80007c6:	bd30      	pop	{r4, r5, pc}
 80007c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80007cc:	4140      	adcs	r0, r0
 80007ce:	eb41 0101 	adc.w	r1, r1, r1
 80007d2:	3c01      	subs	r4, #1
 80007d4:	bf28      	it	cs
 80007d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80007da:	d2e9      	bcs.n	80007b0 <__adddf3+0x10c>
 80007dc:	f091 0f00 	teq	r1, #0
 80007e0:	bf04      	itt	eq
 80007e2:	4601      	moveq	r1, r0
 80007e4:	2000      	moveq	r0, #0
 80007e6:	fab1 f381 	clz	r3, r1
 80007ea:	bf08      	it	eq
 80007ec:	3320      	addeq	r3, #32
 80007ee:	f1a3 030b 	sub.w	r3, r3, #11
 80007f2:	f1b3 0220 	subs.w	r2, r3, #32
 80007f6:	da0c      	bge.n	8000812 <__adddf3+0x16e>
 80007f8:	320c      	adds	r2, #12
 80007fa:	dd08      	ble.n	800080e <__adddf3+0x16a>
 80007fc:	f102 0c14 	add.w	ip, r2, #20
 8000800:	f1c2 020c 	rsb	r2, r2, #12
 8000804:	fa01 f00c 	lsl.w	r0, r1, ip
 8000808:	fa21 f102 	lsr.w	r1, r1, r2
 800080c:	e00c      	b.n	8000828 <__adddf3+0x184>
 800080e:	f102 0214 	add.w	r2, r2, #20
 8000812:	bfd8      	it	le
 8000814:	f1c2 0c20 	rsble	ip, r2, #32
 8000818:	fa01 f102 	lsl.w	r1, r1, r2
 800081c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000820:	bfdc      	itt	le
 8000822:	ea41 010c 	orrle.w	r1, r1, ip
 8000826:	4090      	lslle	r0, r2
 8000828:	1ae4      	subs	r4, r4, r3
 800082a:	bfa2      	ittt	ge
 800082c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000830:	4329      	orrge	r1, r5
 8000832:	bd30      	popge	{r4, r5, pc}
 8000834:	ea6f 0404 	mvn.w	r4, r4
 8000838:	3c1f      	subs	r4, #31
 800083a:	da1c      	bge.n	8000876 <__adddf3+0x1d2>
 800083c:	340c      	adds	r4, #12
 800083e:	dc0e      	bgt.n	800085e <__adddf3+0x1ba>
 8000840:	f104 0414 	add.w	r4, r4, #20
 8000844:	f1c4 0220 	rsb	r2, r4, #32
 8000848:	fa20 f004 	lsr.w	r0, r0, r4
 800084c:	fa01 f302 	lsl.w	r3, r1, r2
 8000850:	ea40 0003 	orr.w	r0, r0, r3
 8000854:	fa21 f304 	lsr.w	r3, r1, r4
 8000858:	ea45 0103 	orr.w	r1, r5, r3
 800085c:	bd30      	pop	{r4, r5, pc}
 800085e:	f1c4 040c 	rsb	r4, r4, #12
 8000862:	f1c4 0220 	rsb	r2, r4, #32
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 f304 	lsl.w	r3, r1, r4
 800086e:	ea40 0003 	orr.w	r0, r0, r3
 8000872:	4629      	mov	r1, r5
 8000874:	bd30      	pop	{r4, r5, pc}
 8000876:	fa21 f004 	lsr.w	r0, r1, r4
 800087a:	4629      	mov	r1, r5
 800087c:	bd30      	pop	{r4, r5, pc}
 800087e:	f094 0f00 	teq	r4, #0
 8000882:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000886:	bf06      	itte	eq
 8000888:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800088c:	3401      	addeq	r4, #1
 800088e:	3d01      	subne	r5, #1
 8000890:	e74e      	b.n	8000730 <__adddf3+0x8c>
 8000892:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000896:	bf18      	it	ne
 8000898:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800089c:	d029      	beq.n	80008f2 <__adddf3+0x24e>
 800089e:	ea94 0f05 	teq	r4, r5
 80008a2:	bf08      	it	eq
 80008a4:	ea90 0f02 	teqeq	r0, r2
 80008a8:	d005      	beq.n	80008b6 <__adddf3+0x212>
 80008aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80008ae:	bf04      	itt	eq
 80008b0:	4619      	moveq	r1, r3
 80008b2:	4610      	moveq	r0, r2
 80008b4:	bd30      	pop	{r4, r5, pc}
 80008b6:	ea91 0f03 	teq	r1, r3
 80008ba:	bf1e      	ittt	ne
 80008bc:	2100      	movne	r1, #0
 80008be:	2000      	movne	r0, #0
 80008c0:	bd30      	popne	{r4, r5, pc}
 80008c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80008c6:	d105      	bne.n	80008d4 <__adddf3+0x230>
 80008c8:	0040      	lsls	r0, r0, #1
 80008ca:	4149      	adcs	r1, r1
 80008cc:	bf28      	it	cs
 80008ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80008d2:	bd30      	pop	{r4, r5, pc}
 80008d4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80008d8:	bf3c      	itt	cc
 80008da:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80008de:	bd30      	popcc	{r4, r5, pc}
 80008e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80008e4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd30      	pop	{r4, r5, pc}
 80008f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80008f6:	bf1a      	itte	ne
 80008f8:	4619      	movne	r1, r3
 80008fa:	4610      	movne	r0, r2
 80008fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000900:	bf1c      	itt	ne
 8000902:	460b      	movne	r3, r1
 8000904:	4602      	movne	r2, r0
 8000906:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800090a:	bf06      	itte	eq
 800090c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000910:	ea91 0f03 	teqeq	r1, r3
 8000914:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000918:	bd30      	pop	{r4, r5, pc}
 800091a:	bf00      	nop

0800091c <__aeabi_ui2d>:
 800091c:	f090 0f00 	teq	r0, #0
 8000920:	bf04      	itt	eq
 8000922:	2100      	moveq	r1, #0
 8000924:	4770      	bxeq	lr
 8000926:	b530      	push	{r4, r5, lr}
 8000928:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800092c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000930:	f04f 0500 	mov.w	r5, #0
 8000934:	f04f 0100 	mov.w	r1, #0
 8000938:	e750      	b.n	80007dc <__adddf3+0x138>
 800093a:	bf00      	nop

0800093c <__aeabi_i2d>:
 800093c:	f090 0f00 	teq	r0, #0
 8000940:	bf04      	itt	eq
 8000942:	2100      	moveq	r1, #0
 8000944:	4770      	bxeq	lr
 8000946:	b530      	push	{r4, r5, lr}
 8000948:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800094c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000950:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000954:	bf48      	it	mi
 8000956:	4240      	negmi	r0, r0
 8000958:	f04f 0100 	mov.w	r1, #0
 800095c:	e73e      	b.n	80007dc <__adddf3+0x138>
 800095e:	bf00      	nop

08000960 <__aeabi_f2d>:
 8000960:	0042      	lsls	r2, r0, #1
 8000962:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000966:	ea4f 0131 	mov.w	r1, r1, rrx
 800096a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800096e:	bf1f      	itttt	ne
 8000970:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000974:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000978:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800097c:	4770      	bxne	lr
 800097e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000982:	bf08      	it	eq
 8000984:	4770      	bxeq	lr
 8000986:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800098a:	bf04      	itt	eq
 800098c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000990:	4770      	bxeq	lr
 8000992:	b530      	push	{r4, r5, lr}
 8000994:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000998:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800099c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80009a0:	e71c      	b.n	80007dc <__adddf3+0x138>
 80009a2:	bf00      	nop

080009a4 <__aeabi_ul2d>:
 80009a4:	ea50 0201 	orrs.w	r2, r0, r1
 80009a8:	bf08      	it	eq
 80009aa:	4770      	bxeq	lr
 80009ac:	b530      	push	{r4, r5, lr}
 80009ae:	f04f 0500 	mov.w	r5, #0
 80009b2:	e00a      	b.n	80009ca <__aeabi_l2d+0x16>

080009b4 <__aeabi_l2d>:
 80009b4:	ea50 0201 	orrs.w	r2, r0, r1
 80009b8:	bf08      	it	eq
 80009ba:	4770      	bxeq	lr
 80009bc:	b530      	push	{r4, r5, lr}
 80009be:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80009c2:	d502      	bpl.n	80009ca <__aeabi_l2d+0x16>
 80009c4:	4240      	negs	r0, r0
 80009c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009ca:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80009ce:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80009d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80009d6:	f43f aed8 	beq.w	800078a <__adddf3+0xe6>
 80009da:	f04f 0203 	mov.w	r2, #3
 80009de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80009e2:	bf18      	it	ne
 80009e4:	3203      	addne	r2, #3
 80009e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80009ea:	bf18      	it	ne
 80009ec:	3203      	addne	r2, #3
 80009ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000a02:	ea40 000e 	orr.w	r0, r0, lr
 8000a06:	fa21 f102 	lsr.w	r1, r1, r2
 8000a0a:	4414      	add	r4, r2
 8000a0c:	e6bd      	b.n	800078a <__adddf3+0xe6>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dmul>:
 8000a10:	b570      	push	{r4, r5, r6, lr}
 8000a12:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000a16:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000a1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a1e:	bf1d      	ittte	ne
 8000a20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000a24:	ea94 0f0c 	teqne	r4, ip
 8000a28:	ea95 0f0c 	teqne	r5, ip
 8000a2c:	f000 f8de 	bleq	8000bec <__aeabi_dmul+0x1dc>
 8000a30:	442c      	add	r4, r5
 8000a32:	ea81 0603 	eor.w	r6, r1, r3
 8000a36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000a3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000a3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000a42:	bf18      	it	ne
 8000a44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000a48:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000a50:	d038      	beq.n	8000ac4 <__aeabi_dmul+0xb4>
 8000a52:	fba0 ce02 	umull	ip, lr, r0, r2
 8000a56:	f04f 0500 	mov.w	r5, #0
 8000a5a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000a5e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000a62:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000a66:	f04f 0600 	mov.w	r6, #0
 8000a6a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000a6e:	f09c 0f00 	teq	ip, #0
 8000a72:	bf18      	it	ne
 8000a74:	f04e 0e01 	orrne.w	lr, lr, #1
 8000a78:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000a7c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000a80:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000a84:	d204      	bcs.n	8000a90 <__aeabi_dmul+0x80>
 8000a86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000a8a:	416d      	adcs	r5, r5
 8000a8c:	eb46 0606 	adc.w	r6, r6, r6
 8000a90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000a94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000a98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000a9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000aa0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000aa4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000aa8:	bf88      	it	hi
 8000aaa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000aae:	d81e      	bhi.n	8000aee <__aeabi_dmul+0xde>
 8000ab0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000aba:	f150 0000 	adcs.w	r0, r0, #0
 8000abe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000ac8:	ea46 0101 	orr.w	r1, r6, r1
 8000acc:	ea40 0002 	orr.w	r0, r0, r2
 8000ad0:	ea81 0103 	eor.w	r1, r1, r3
 8000ad4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000ad8:	bfc2      	ittt	gt
 8000ada:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ade:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ae2:	bd70      	popgt	{r4, r5, r6, pc}
 8000ae4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae8:	f04f 0e00 	mov.w	lr, #0
 8000aec:	3c01      	subs	r4, #1
 8000aee:	f300 80ab 	bgt.w	8000c48 <__aeabi_dmul+0x238>
 8000af2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000af6:	bfde      	ittt	le
 8000af8:	2000      	movle	r0, #0
 8000afa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000afe:	bd70      	pople	{r4, r5, r6, pc}
 8000b00:	f1c4 0400 	rsb	r4, r4, #0
 8000b04:	3c20      	subs	r4, #32
 8000b06:	da35      	bge.n	8000b74 <__aeabi_dmul+0x164>
 8000b08:	340c      	adds	r4, #12
 8000b0a:	dc1b      	bgt.n	8000b44 <__aeabi_dmul+0x134>
 8000b0c:	f104 0414 	add.w	r4, r4, #20
 8000b10:	f1c4 0520 	rsb	r5, r4, #32
 8000b14:	fa00 f305 	lsl.w	r3, r0, r5
 8000b18:	fa20 f004 	lsr.w	r0, r0, r4
 8000b1c:	fa01 f205 	lsl.w	r2, r1, r5
 8000b20:	ea40 0002 	orr.w	r0, r0, r2
 8000b24:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000b28:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000b2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000b30:	fa21 f604 	lsr.w	r6, r1, r4
 8000b34:	eb42 0106 	adc.w	r1, r2, r6
 8000b38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000b3c:	bf08      	it	eq
 8000b3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000b42:	bd70      	pop	{r4, r5, r6, pc}
 8000b44:	f1c4 040c 	rsb	r4, r4, #12
 8000b48:	f1c4 0520 	rsb	r5, r4, #32
 8000b4c:	fa00 f304 	lsl.w	r3, r0, r4
 8000b50:	fa20 f005 	lsr.w	r0, r0, r5
 8000b54:	fa01 f204 	lsl.w	r2, r1, r4
 8000b58:	ea40 0002 	orr.w	r0, r0, r2
 8000b5c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000b60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000b64:	f141 0100 	adc.w	r1, r1, #0
 8000b68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000b6c:	bf08      	it	eq
 8000b6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000b72:	bd70      	pop	{r4, r5, r6, pc}
 8000b74:	f1c4 0520 	rsb	r5, r4, #32
 8000b78:	fa00 f205 	lsl.w	r2, r0, r5
 8000b7c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000b80:	fa20 f304 	lsr.w	r3, r0, r4
 8000b84:	fa01 f205 	lsl.w	r2, r1, r5
 8000b88:	ea43 0302 	orr.w	r3, r3, r2
 8000b8c:	fa21 f004 	lsr.w	r0, r1, r4
 8000b90:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000b94:	fa21 f204 	lsr.w	r2, r1, r4
 8000b98:	ea20 0002 	bic.w	r0, r0, r2
 8000b9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000ba0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000ba4:	bf08      	it	eq
 8000ba6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000baa:	bd70      	pop	{r4, r5, r6, pc}
 8000bac:	f094 0f00 	teq	r4, #0
 8000bb0:	d10f      	bne.n	8000bd2 <__aeabi_dmul+0x1c2>
 8000bb2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000bb6:	0040      	lsls	r0, r0, #1
 8000bb8:	eb41 0101 	adc.w	r1, r1, r1
 8000bbc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000bc0:	bf08      	it	eq
 8000bc2:	3c01      	subeq	r4, #1
 8000bc4:	d0f7      	beq.n	8000bb6 <__aeabi_dmul+0x1a6>
 8000bc6:	ea41 0106 	orr.w	r1, r1, r6
 8000bca:	f095 0f00 	teq	r5, #0
 8000bce:	bf18      	it	ne
 8000bd0:	4770      	bxne	lr
 8000bd2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000bd6:	0052      	lsls	r2, r2, #1
 8000bd8:	eb43 0303 	adc.w	r3, r3, r3
 8000bdc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000be0:	bf08      	it	eq
 8000be2:	3d01      	subeq	r5, #1
 8000be4:	d0f7      	beq.n	8000bd6 <__aeabi_dmul+0x1c6>
 8000be6:	ea43 0306 	orr.w	r3, r3, r6
 8000bea:	4770      	bx	lr
 8000bec:	ea94 0f0c 	teq	r4, ip
 8000bf0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000bf4:	bf18      	it	ne
 8000bf6:	ea95 0f0c 	teqne	r5, ip
 8000bfa:	d00c      	beq.n	8000c16 <__aeabi_dmul+0x206>
 8000bfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c00:	bf18      	it	ne
 8000c02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c06:	d1d1      	bne.n	8000bac <__aeabi_dmul+0x19c>
 8000c08:	ea81 0103 	eor.w	r1, r1, r3
 8000c0c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	bd70      	pop	{r4, r5, r6, pc}
 8000c16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c1a:	bf06      	itte	eq
 8000c1c:	4610      	moveq	r0, r2
 8000c1e:	4619      	moveq	r1, r3
 8000c20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c24:	d019      	beq.n	8000c5a <__aeabi_dmul+0x24a>
 8000c26:	ea94 0f0c 	teq	r4, ip
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_dmul+0x222>
 8000c2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000c30:	d113      	bne.n	8000c5a <__aeabi_dmul+0x24a>
 8000c32:	ea95 0f0c 	teq	r5, ip
 8000c36:	d105      	bne.n	8000c44 <__aeabi_dmul+0x234>
 8000c38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000c3c:	bf1c      	itt	ne
 8000c3e:	4610      	movne	r0, r2
 8000c40:	4619      	movne	r1, r3
 8000c42:	d10a      	bne.n	8000c5a <__aeabi_dmul+0x24a>
 8000c44:	ea81 0103 	eor.w	r1, r1, r3
 8000c48:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000c4c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000c50:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000c54:	f04f 0000 	mov.w	r0, #0
 8000c58:	bd70      	pop	{r4, r5, r6, pc}
 8000c5a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000c5e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000c62:	bd70      	pop	{r4, r5, r6, pc}

08000c64 <__aeabi_ddiv>:
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c6a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000c6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000c72:	bf1d      	ittte	ne
 8000c74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000c78:	ea94 0f0c 	teqne	r4, ip
 8000c7c:	ea95 0f0c 	teqne	r5, ip
 8000c80:	f000 f8a7 	bleq	8000dd2 <__aeabi_ddiv+0x16e>
 8000c84:	eba4 0405 	sub.w	r4, r4, r5
 8000c88:	ea81 0e03 	eor.w	lr, r1, r3
 8000c8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c90:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000c94:	f000 8088 	beq.w	8000da8 <__aeabi_ddiv+0x144>
 8000c98:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000c9c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000ca0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000ca4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000ca8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000cac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000cb0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000cb4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000cb8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000cbc:	429d      	cmp	r5, r3
 8000cbe:	bf08      	it	eq
 8000cc0:	4296      	cmpeq	r6, r2
 8000cc2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000cc6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000cca:	d202      	bcs.n	8000cd2 <__aeabi_ddiv+0x6e>
 8000ccc:	085b      	lsrs	r3, r3, #1
 8000cce:	ea4f 0232 	mov.w	r2, r2, rrx
 8000cd2:	1ab6      	subs	r6, r6, r2
 8000cd4:	eb65 0503 	sbc.w	r5, r5, r3
 8000cd8:	085b      	lsrs	r3, r3, #1
 8000cda:	ea4f 0232 	mov.w	r2, r2, rrx
 8000cde:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000ce2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000ce6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000cea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000cee:	bf22      	ittt	cs
 8000cf0:	1ab6      	subcs	r6, r6, r2
 8000cf2:	4675      	movcs	r5, lr
 8000cf4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000cf8:	085b      	lsrs	r3, r3, #1
 8000cfa:	ea4f 0232 	mov.w	r2, r2, rrx
 8000cfe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d06:	bf22      	ittt	cs
 8000d08:	1ab6      	subcs	r6, r6, r2
 8000d0a:	4675      	movcs	r5, lr
 8000d0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d10:	085b      	lsrs	r3, r3, #1
 8000d12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d1e:	bf22      	ittt	cs
 8000d20:	1ab6      	subcs	r6, r6, r2
 8000d22:	4675      	movcs	r5, lr
 8000d24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d28:	085b      	lsrs	r3, r3, #1
 8000d2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d36:	bf22      	ittt	cs
 8000d38:	1ab6      	subcs	r6, r6, r2
 8000d3a:	4675      	movcs	r5, lr
 8000d3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d40:	ea55 0e06 	orrs.w	lr, r5, r6
 8000d44:	d018      	beq.n	8000d78 <__aeabi_ddiv+0x114>
 8000d46:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000d4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000d4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000d52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000d56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000d5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000d5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000d62:	d1c0      	bne.n	8000ce6 <__aeabi_ddiv+0x82>
 8000d64:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000d68:	d10b      	bne.n	8000d82 <__aeabi_ddiv+0x11e>
 8000d6a:	ea41 0100 	orr.w	r1, r1, r0
 8000d6e:	f04f 0000 	mov.w	r0, #0
 8000d72:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000d76:	e7b6      	b.n	8000ce6 <__aeabi_ddiv+0x82>
 8000d78:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000d7c:	bf04      	itt	eq
 8000d7e:	4301      	orreq	r1, r0
 8000d80:	2000      	moveq	r0, #0
 8000d82:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000d86:	bf88      	it	hi
 8000d88:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000d8c:	f63f aeaf 	bhi.w	8000aee <__aeabi_dmul+0xde>
 8000d90:	ebb5 0c03 	subs.w	ip, r5, r3
 8000d94:	bf04      	itt	eq
 8000d96:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000d9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000d9e:	f150 0000 	adcs.w	r0, r0, #0
 8000da2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000da6:	bd70      	pop	{r4, r5, r6, pc}
 8000da8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000dac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000db0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000db4:	bfc2      	ittt	gt
 8000db6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000dba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000dbe:	bd70      	popgt	{r4, r5, r6, pc}
 8000dc0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000dc4:	f04f 0e00 	mov.w	lr, #0
 8000dc8:	3c01      	subs	r4, #1
 8000dca:	e690      	b.n	8000aee <__aeabi_dmul+0xde>
 8000dcc:	ea45 0e06 	orr.w	lr, r5, r6
 8000dd0:	e68d      	b.n	8000aee <__aeabi_dmul+0xde>
 8000dd2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000dd6:	ea94 0f0c 	teq	r4, ip
 8000dda:	bf08      	it	eq
 8000ddc:	ea95 0f0c 	teqeq	r5, ip
 8000de0:	f43f af3b 	beq.w	8000c5a <__aeabi_dmul+0x24a>
 8000de4:	ea94 0f0c 	teq	r4, ip
 8000de8:	d10a      	bne.n	8000e00 <__aeabi_ddiv+0x19c>
 8000dea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000dee:	f47f af34 	bne.w	8000c5a <__aeabi_dmul+0x24a>
 8000df2:	ea95 0f0c 	teq	r5, ip
 8000df6:	f47f af25 	bne.w	8000c44 <__aeabi_dmul+0x234>
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	e72c      	b.n	8000c5a <__aeabi_dmul+0x24a>
 8000e00:	ea95 0f0c 	teq	r5, ip
 8000e04:	d106      	bne.n	8000e14 <__aeabi_ddiv+0x1b0>
 8000e06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000e0a:	f43f aefd 	beq.w	8000c08 <__aeabi_dmul+0x1f8>
 8000e0e:	4610      	mov	r0, r2
 8000e10:	4619      	mov	r1, r3
 8000e12:	e722      	b.n	8000c5a <__aeabi_dmul+0x24a>
 8000e14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000e18:	bf18      	it	ne
 8000e1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000e1e:	f47f aec5 	bne.w	8000bac <__aeabi_dmul+0x19c>
 8000e22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000e26:	f47f af0d 	bne.w	8000c44 <__aeabi_dmul+0x234>
 8000e2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000e2e:	f47f aeeb 	bne.w	8000c08 <__aeabi_dmul+0x1f8>
 8000e32:	e712      	b.n	8000c5a <__aeabi_dmul+0x24a>

08000e34 <__gedf2>:
 8000e34:	f04f 3cff 	mov.w	ip, #4294967295
 8000e38:	e006      	b.n	8000e48 <__cmpdf2+0x4>
 8000e3a:	bf00      	nop

08000e3c <__ledf2>:
 8000e3c:	f04f 0c01 	mov.w	ip, #1
 8000e40:	e002      	b.n	8000e48 <__cmpdf2+0x4>
 8000e42:	bf00      	nop

08000e44 <__cmpdf2>:
 8000e44:	f04f 0c01 	mov.w	ip, #1
 8000e48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e58:	bf18      	it	ne
 8000e5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000e5e:	d01b      	beq.n	8000e98 <__cmpdf2+0x54>
 8000e60:	b001      	add	sp, #4
 8000e62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000e66:	bf0c      	ite	eq
 8000e68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000e6c:	ea91 0f03 	teqne	r1, r3
 8000e70:	bf02      	ittt	eq
 8000e72:	ea90 0f02 	teqeq	r0, r2
 8000e76:	2000      	moveq	r0, #0
 8000e78:	4770      	bxeq	lr
 8000e7a:	f110 0f00 	cmn.w	r0, #0
 8000e7e:	ea91 0f03 	teq	r1, r3
 8000e82:	bf58      	it	pl
 8000e84:	4299      	cmppl	r1, r3
 8000e86:	bf08      	it	eq
 8000e88:	4290      	cmpeq	r0, r2
 8000e8a:	bf2c      	ite	cs
 8000e8c:	17d8      	asrcs	r0, r3, #31
 8000e8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000e92:	f040 0001 	orr.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ea0:	d102      	bne.n	8000ea8 <__cmpdf2+0x64>
 8000ea2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ea6:	d107      	bne.n	8000eb8 <__cmpdf2+0x74>
 8000ea8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000eac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000eb0:	d1d6      	bne.n	8000e60 <__cmpdf2+0x1c>
 8000eb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000eb6:	d0d3      	beq.n	8000e60 <__cmpdf2+0x1c>
 8000eb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <__aeabi_cdrcmple>:
 8000ec0:	4684      	mov	ip, r0
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	4662      	mov	r2, ip
 8000ec6:	468c      	mov	ip, r1
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4663      	mov	r3, ip
 8000ecc:	e000      	b.n	8000ed0 <__aeabi_cdcmpeq>
 8000ece:	bf00      	nop

08000ed0 <__aeabi_cdcmpeq>:
 8000ed0:	b501      	push	{r0, lr}
 8000ed2:	f7ff ffb7 	bl	8000e44 <__cmpdf2>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	bf48      	it	mi
 8000eda:	f110 0f00 	cmnmi.w	r0, #0
 8000ede:	bd01      	pop	{r0, pc}

08000ee0 <__aeabi_dcmpeq>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff fff4 	bl	8000ed0 <__aeabi_cdcmpeq>
 8000ee8:	bf0c      	ite	eq
 8000eea:	2001      	moveq	r0, #1
 8000eec:	2000      	movne	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_dcmplt>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffea 	bl	8000ed0 <__aeabi_cdcmpeq>
 8000efc:	bf34      	ite	cc
 8000efe:	2001      	movcc	r0, #1
 8000f00:	2000      	movcs	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_dcmple>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffe0 	bl	8000ed0 <__aeabi_cdcmpeq>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_dcmpge>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffce 	bl	8000ec0 <__aeabi_cdrcmple>
 8000f24:	bf94      	ite	ls
 8000f26:	2001      	movls	r0, #1
 8000f28:	2000      	movhi	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_dcmpgt>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffc4 	bl	8000ec0 <__aeabi_cdrcmple>
 8000f38:	bf34      	ite	cc
 8000f3a:	2001      	movcc	r0, #1
 8000f3c:	2000      	movcs	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_dcmpun>:
 8000f44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000f48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f4c:	d102      	bne.n	8000f54 <__aeabi_dcmpun+0x10>
 8000f4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000f52:	d10a      	bne.n	8000f6a <__aeabi_dcmpun+0x26>
 8000f54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000f58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f5c:	d102      	bne.n	8000f64 <__aeabi_dcmpun+0x20>
 8000f5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000f62:	d102      	bne.n	8000f6a <__aeabi_dcmpun+0x26>
 8000f64:	f04f 0000 	mov.w	r0, #0
 8000f68:	4770      	bx	lr
 8000f6a:	f04f 0001 	mov.w	r0, #1
 8000f6e:	4770      	bx	lr

08000f70 <__aeabi_d2iz>:
 8000f70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000f74:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000f78:	d215      	bcs.n	8000fa6 <__aeabi_d2iz+0x36>
 8000f7a:	d511      	bpl.n	8000fa0 <__aeabi_d2iz+0x30>
 8000f7c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000f80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f84:	d912      	bls.n	8000fac <__aeabi_d2iz+0x3c>
 8000f86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f92:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000f96:	fa23 f002 	lsr.w	r0, r3, r2
 8000f9a:	bf18      	it	ne
 8000f9c:	4240      	negne	r0, r0
 8000f9e:	4770      	bx	lr
 8000fa0:	f04f 0000 	mov.w	r0, #0
 8000fa4:	4770      	bx	lr
 8000fa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000faa:	d105      	bne.n	8000fb8 <__aeabi_d2iz+0x48>
 8000fac:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000fb0:	bf08      	it	eq
 8000fb2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000fb6:	4770      	bx	lr
 8000fb8:	f04f 0000 	mov.w	r0, #0
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <__aeabi_d2f>:
 8000fc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000fc4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000fc8:	bf24      	itt	cs
 8000fca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000fce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000fd2:	d90d      	bls.n	8000ff0 <__aeabi_d2f+0x30>
 8000fd4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fd8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000fdc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000fe0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000fe4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000fe8:	bf08      	it	eq
 8000fea:	f020 0001 	biceq.w	r0, r0, #1
 8000fee:	4770      	bx	lr
 8000ff0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ff4:	d121      	bne.n	800103a <__aeabi_d2f+0x7a>
 8000ff6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ffa:	bfbc      	itt	lt
 8000ffc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8001000:	4770      	bxlt	lr
 8001002:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8001006:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800100a:	f1c2 0218 	rsb	r2, r2, #24
 800100e:	f1c2 0c20 	rsb	ip, r2, #32
 8001012:	fa10 f30c 	lsls.w	r3, r0, ip
 8001016:	fa20 f002 	lsr.w	r0, r0, r2
 800101a:	bf18      	it	ne
 800101c:	f040 0001 	orrne.w	r0, r0, #1
 8001020:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001024:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8001028:	fa03 fc0c 	lsl.w	ip, r3, ip
 800102c:	ea40 000c 	orr.w	r0, r0, ip
 8001030:	fa23 f302 	lsr.w	r3, r3, r2
 8001034:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001038:	e7cc      	b.n	8000fd4 <__aeabi_d2f+0x14>
 800103a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800103e:	d107      	bne.n	8001050 <__aeabi_d2f+0x90>
 8001040:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8001044:	bf1e      	ittt	ne
 8001046:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800104a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800104e:	4770      	bxne	lr
 8001050:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8001054:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8001058:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <__aeabi_frsub>:
 8001060:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8001064:	e002      	b.n	800106c <__addsf3>
 8001066:	bf00      	nop

08001068 <__aeabi_fsub>:
 8001068:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800106c <__addsf3>:
 800106c:	0042      	lsls	r2, r0, #1
 800106e:	bf1f      	itttt	ne
 8001070:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8001074:	ea92 0f03 	teqne	r2, r3
 8001078:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800107c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001080:	d06a      	beq.n	8001158 <__addsf3+0xec>
 8001082:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8001086:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800108a:	bfc1      	itttt	gt
 800108c:	18d2      	addgt	r2, r2, r3
 800108e:	4041      	eorgt	r1, r0
 8001090:	4048      	eorgt	r0, r1
 8001092:	4041      	eorgt	r1, r0
 8001094:	bfb8      	it	lt
 8001096:	425b      	neglt	r3, r3
 8001098:	2b19      	cmp	r3, #25
 800109a:	bf88      	it	hi
 800109c:	4770      	bxhi	lr
 800109e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80010a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80010aa:	bf18      	it	ne
 80010ac:	4240      	negne	r0, r0
 80010ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80010b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80010b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80010ba:	bf18      	it	ne
 80010bc:	4249      	negne	r1, r1
 80010be:	ea92 0f03 	teq	r2, r3
 80010c2:	d03f      	beq.n	8001144 <__addsf3+0xd8>
 80010c4:	f1a2 0201 	sub.w	r2, r2, #1
 80010c8:	fa41 fc03 	asr.w	ip, r1, r3
 80010cc:	eb10 000c 	adds.w	r0, r0, ip
 80010d0:	f1c3 0320 	rsb	r3, r3, #32
 80010d4:	fa01 f103 	lsl.w	r1, r1, r3
 80010d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80010dc:	d502      	bpl.n	80010e4 <__addsf3+0x78>
 80010de:	4249      	negs	r1, r1
 80010e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80010e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80010e8:	d313      	bcc.n	8001112 <__addsf3+0xa6>
 80010ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80010ee:	d306      	bcc.n	80010fe <__addsf3+0x92>
 80010f0:	0840      	lsrs	r0, r0, #1
 80010f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80010f6:	f102 0201 	add.w	r2, r2, #1
 80010fa:	2afe      	cmp	r2, #254	@ 0xfe
 80010fc:	d251      	bcs.n	80011a2 <__addsf3+0x136>
 80010fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8001102:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001106:	bf08      	it	eq
 8001108:	f020 0001 	biceq.w	r0, r0, #1
 800110c:	ea40 0003 	orr.w	r0, r0, r3
 8001110:	4770      	bx	lr
 8001112:	0049      	lsls	r1, r1, #1
 8001114:	eb40 0000 	adc.w	r0, r0, r0
 8001118:	3a01      	subs	r2, #1
 800111a:	bf28      	it	cs
 800111c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8001120:	d2ed      	bcs.n	80010fe <__addsf3+0x92>
 8001122:	fab0 fc80 	clz	ip, r0
 8001126:	f1ac 0c08 	sub.w	ip, ip, #8
 800112a:	ebb2 020c 	subs.w	r2, r2, ip
 800112e:	fa00 f00c 	lsl.w	r0, r0, ip
 8001132:	bfaa      	itet	ge
 8001134:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8001138:	4252      	neglt	r2, r2
 800113a:	4318      	orrge	r0, r3
 800113c:	bfbc      	itt	lt
 800113e:	40d0      	lsrlt	r0, r2
 8001140:	4318      	orrlt	r0, r3
 8001142:	4770      	bx	lr
 8001144:	f092 0f00 	teq	r2, #0
 8001148:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800114c:	bf06      	itte	eq
 800114e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8001152:	3201      	addeq	r2, #1
 8001154:	3b01      	subne	r3, #1
 8001156:	e7b5      	b.n	80010c4 <__addsf3+0x58>
 8001158:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800115c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001160:	bf18      	it	ne
 8001162:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001166:	d021      	beq.n	80011ac <__addsf3+0x140>
 8001168:	ea92 0f03 	teq	r2, r3
 800116c:	d004      	beq.n	8001178 <__addsf3+0x10c>
 800116e:	f092 0f00 	teq	r2, #0
 8001172:	bf08      	it	eq
 8001174:	4608      	moveq	r0, r1
 8001176:	4770      	bx	lr
 8001178:	ea90 0f01 	teq	r0, r1
 800117c:	bf1c      	itt	ne
 800117e:	2000      	movne	r0, #0
 8001180:	4770      	bxne	lr
 8001182:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8001186:	d104      	bne.n	8001192 <__addsf3+0x126>
 8001188:	0040      	lsls	r0, r0, #1
 800118a:	bf28      	it	cs
 800118c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8001190:	4770      	bx	lr
 8001192:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8001196:	bf3c      	itt	cc
 8001198:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800119c:	4770      	bxcc	lr
 800119e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80011a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80011a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80011aa:	4770      	bx	lr
 80011ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80011b0:	bf16      	itet	ne
 80011b2:	4608      	movne	r0, r1
 80011b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80011b8:	4601      	movne	r1, r0
 80011ba:	0242      	lsls	r2, r0, #9
 80011bc:	bf06      	itte	eq
 80011be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80011c2:	ea90 0f01 	teqeq	r0, r1
 80011c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80011ca:	4770      	bx	lr

080011cc <__aeabi_ui2f>:
 80011cc:	f04f 0300 	mov.w	r3, #0
 80011d0:	e004      	b.n	80011dc <__aeabi_i2f+0x8>
 80011d2:	bf00      	nop

080011d4 <__aeabi_i2f>:
 80011d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80011d8:	bf48      	it	mi
 80011da:	4240      	negmi	r0, r0
 80011dc:	ea5f 0c00 	movs.w	ip, r0
 80011e0:	bf08      	it	eq
 80011e2:	4770      	bxeq	lr
 80011e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80011e8:	4601      	mov	r1, r0
 80011ea:	f04f 0000 	mov.w	r0, #0
 80011ee:	e01c      	b.n	800122a <__aeabi_l2f+0x2a>

080011f0 <__aeabi_ul2f>:
 80011f0:	ea50 0201 	orrs.w	r2, r0, r1
 80011f4:	bf08      	it	eq
 80011f6:	4770      	bxeq	lr
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	e00a      	b.n	8001214 <__aeabi_l2f+0x14>
 80011fe:	bf00      	nop

08001200 <__aeabi_l2f>:
 8001200:	ea50 0201 	orrs.w	r2, r0, r1
 8001204:	bf08      	it	eq
 8001206:	4770      	bxeq	lr
 8001208:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800120c:	d502      	bpl.n	8001214 <__aeabi_l2f+0x14>
 800120e:	4240      	negs	r0, r0
 8001210:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001214:	ea5f 0c01 	movs.w	ip, r1
 8001218:	bf02      	ittt	eq
 800121a:	4684      	moveq	ip, r0
 800121c:	4601      	moveq	r1, r0
 800121e:	2000      	moveq	r0, #0
 8001220:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8001224:	bf08      	it	eq
 8001226:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800122a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800122e:	fabc f28c 	clz	r2, ip
 8001232:	3a08      	subs	r2, #8
 8001234:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8001238:	db10      	blt.n	800125c <__aeabi_l2f+0x5c>
 800123a:	fa01 fc02 	lsl.w	ip, r1, r2
 800123e:	4463      	add	r3, ip
 8001240:	fa00 fc02 	lsl.w	ip, r0, r2
 8001244:	f1c2 0220 	rsb	r2, r2, #32
 8001248:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800124c:	fa20 f202 	lsr.w	r2, r0, r2
 8001250:	eb43 0002 	adc.w	r0, r3, r2
 8001254:	bf08      	it	eq
 8001256:	f020 0001 	biceq.w	r0, r0, #1
 800125a:	4770      	bx	lr
 800125c:	f102 0220 	add.w	r2, r2, #32
 8001260:	fa01 fc02 	lsl.w	ip, r1, r2
 8001264:	f1c2 0220 	rsb	r2, r2, #32
 8001268:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800126c:	fa21 f202 	lsr.w	r2, r1, r2
 8001270:	eb43 0002 	adc.w	r0, r3, r2
 8001274:	bf08      	it	eq
 8001276:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800127a:	4770      	bx	lr

0800127c <__aeabi_fmul>:
 800127c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8001280:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001284:	bf1e      	ittt	ne
 8001286:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800128a:	ea92 0f0c 	teqne	r2, ip
 800128e:	ea93 0f0c 	teqne	r3, ip
 8001292:	d06f      	beq.n	8001374 <__aeabi_fmul+0xf8>
 8001294:	441a      	add	r2, r3
 8001296:	ea80 0c01 	eor.w	ip, r0, r1
 800129a:	0240      	lsls	r0, r0, #9
 800129c:	bf18      	it	ne
 800129e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80012a2:	d01e      	beq.n	80012e2 <__aeabi_fmul+0x66>
 80012a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80012a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80012ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80012b0:	fba0 3101 	umull	r3, r1, r0, r1
 80012b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80012b8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80012bc:	bf3e      	ittt	cc
 80012be:	0049      	lslcc	r1, r1, #1
 80012c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80012c4:	005b      	lslcc	r3, r3, #1
 80012c6:	ea40 0001 	orr.w	r0, r0, r1
 80012ca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80012ce:	2afd      	cmp	r2, #253	@ 0xfd
 80012d0:	d81d      	bhi.n	800130e <__aeabi_fmul+0x92>
 80012d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80012d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80012da:	bf08      	it	eq
 80012dc:	f020 0001 	biceq.w	r0, r0, #1
 80012e0:	4770      	bx	lr
 80012e2:	f090 0f00 	teq	r0, #0
 80012e6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80012ea:	bf08      	it	eq
 80012ec:	0249      	lsleq	r1, r1, #9
 80012ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80012f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80012f6:	3a7f      	subs	r2, #127	@ 0x7f
 80012f8:	bfc2      	ittt	gt
 80012fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80012fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001302:	4770      	bxgt	lr
 8001304:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	3a01      	subs	r2, #1
 800130e:	dc5d      	bgt.n	80013cc <__aeabi_fmul+0x150>
 8001310:	f112 0f19 	cmn.w	r2, #25
 8001314:	bfdc      	itt	le
 8001316:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800131a:	4770      	bxle	lr
 800131c:	f1c2 0200 	rsb	r2, r2, #0
 8001320:	0041      	lsls	r1, r0, #1
 8001322:	fa21 f102 	lsr.w	r1, r1, r2
 8001326:	f1c2 0220 	rsb	r2, r2, #32
 800132a:	fa00 fc02 	lsl.w	ip, r0, r2
 800132e:	ea5f 0031 	movs.w	r0, r1, rrx
 8001332:	f140 0000 	adc.w	r0, r0, #0
 8001336:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800133a:	bf08      	it	eq
 800133c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8001340:	4770      	bx	lr
 8001342:	f092 0f00 	teq	r2, #0
 8001346:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800134a:	bf02      	ittt	eq
 800134c:	0040      	lsleq	r0, r0, #1
 800134e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001352:	3a01      	subeq	r2, #1
 8001354:	d0f9      	beq.n	800134a <__aeabi_fmul+0xce>
 8001356:	ea40 000c 	orr.w	r0, r0, ip
 800135a:	f093 0f00 	teq	r3, #0
 800135e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001362:	bf02      	ittt	eq
 8001364:	0049      	lsleq	r1, r1, #1
 8001366:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800136a:	3b01      	subeq	r3, #1
 800136c:	d0f9      	beq.n	8001362 <__aeabi_fmul+0xe6>
 800136e:	ea41 010c 	orr.w	r1, r1, ip
 8001372:	e78f      	b.n	8001294 <__aeabi_fmul+0x18>
 8001374:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001378:	ea92 0f0c 	teq	r2, ip
 800137c:	bf18      	it	ne
 800137e:	ea93 0f0c 	teqne	r3, ip
 8001382:	d00a      	beq.n	800139a <__aeabi_fmul+0x11e>
 8001384:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001388:	bf18      	it	ne
 800138a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800138e:	d1d8      	bne.n	8001342 <__aeabi_fmul+0xc6>
 8001390:	ea80 0001 	eor.w	r0, r0, r1
 8001394:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8001398:	4770      	bx	lr
 800139a:	f090 0f00 	teq	r0, #0
 800139e:	bf17      	itett	ne
 80013a0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80013a4:	4608      	moveq	r0, r1
 80013a6:	f091 0f00 	teqne	r1, #0
 80013aa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80013ae:	d014      	beq.n	80013da <__aeabi_fmul+0x15e>
 80013b0:	ea92 0f0c 	teq	r2, ip
 80013b4:	d101      	bne.n	80013ba <__aeabi_fmul+0x13e>
 80013b6:	0242      	lsls	r2, r0, #9
 80013b8:	d10f      	bne.n	80013da <__aeabi_fmul+0x15e>
 80013ba:	ea93 0f0c 	teq	r3, ip
 80013be:	d103      	bne.n	80013c8 <__aeabi_fmul+0x14c>
 80013c0:	024b      	lsls	r3, r1, #9
 80013c2:	bf18      	it	ne
 80013c4:	4608      	movne	r0, r1
 80013c6:	d108      	bne.n	80013da <__aeabi_fmul+0x15e>
 80013c8:	ea80 0001 	eor.w	r0, r0, r1
 80013cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80013d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80013d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80013d8:	4770      	bx	lr
 80013da:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80013de:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80013e2:	4770      	bx	lr

080013e4 <__aeabi_fdiv>:
 80013e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80013e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80013ec:	bf1e      	ittt	ne
 80013ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80013f2:	ea92 0f0c 	teqne	r2, ip
 80013f6:	ea93 0f0c 	teqne	r3, ip
 80013fa:	d069      	beq.n	80014d0 <__aeabi_fdiv+0xec>
 80013fc:	eba2 0203 	sub.w	r2, r2, r3
 8001400:	ea80 0c01 	eor.w	ip, r0, r1
 8001404:	0249      	lsls	r1, r1, #9
 8001406:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800140a:	d037      	beq.n	800147c <__aeabi_fdiv+0x98>
 800140c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001410:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001414:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001418:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800141c:	428b      	cmp	r3, r1
 800141e:	bf38      	it	cc
 8001420:	005b      	lslcc	r3, r3, #1
 8001422:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8001426:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800142a:	428b      	cmp	r3, r1
 800142c:	bf24      	itt	cs
 800142e:	1a5b      	subcs	r3, r3, r1
 8001430:	ea40 000c 	orrcs.w	r0, r0, ip
 8001434:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001438:	bf24      	itt	cs
 800143a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800143e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001442:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001446:	bf24      	itt	cs
 8001448:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800144c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001450:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001454:	bf24      	itt	cs
 8001456:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800145a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	bf18      	it	ne
 8001462:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001466:	d1e0      	bne.n	800142a <__aeabi_fdiv+0x46>
 8001468:	2afd      	cmp	r2, #253	@ 0xfd
 800146a:	f63f af50 	bhi.w	800130e <__aeabi_fmul+0x92>
 800146e:	428b      	cmp	r3, r1
 8001470:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001474:	bf08      	it	eq
 8001476:	f020 0001 	biceq.w	r0, r0, #1
 800147a:	4770      	bx	lr
 800147c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001480:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001484:	327f      	adds	r2, #127	@ 0x7f
 8001486:	bfc2      	ittt	gt
 8001488:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800148c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001490:	4770      	bxgt	lr
 8001492:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	3a01      	subs	r2, #1
 800149c:	e737      	b.n	800130e <__aeabi_fmul+0x92>
 800149e:	f092 0f00 	teq	r2, #0
 80014a2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80014a6:	bf02      	ittt	eq
 80014a8:	0040      	lsleq	r0, r0, #1
 80014aa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80014ae:	3a01      	subeq	r2, #1
 80014b0:	d0f9      	beq.n	80014a6 <__aeabi_fdiv+0xc2>
 80014b2:	ea40 000c 	orr.w	r0, r0, ip
 80014b6:	f093 0f00 	teq	r3, #0
 80014ba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80014be:	bf02      	ittt	eq
 80014c0:	0049      	lsleq	r1, r1, #1
 80014c2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80014c6:	3b01      	subeq	r3, #1
 80014c8:	d0f9      	beq.n	80014be <__aeabi_fdiv+0xda>
 80014ca:	ea41 010c 	orr.w	r1, r1, ip
 80014ce:	e795      	b.n	80013fc <__aeabi_fdiv+0x18>
 80014d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80014d4:	ea92 0f0c 	teq	r2, ip
 80014d8:	d108      	bne.n	80014ec <__aeabi_fdiv+0x108>
 80014da:	0242      	lsls	r2, r0, #9
 80014dc:	f47f af7d 	bne.w	80013da <__aeabi_fmul+0x15e>
 80014e0:	ea93 0f0c 	teq	r3, ip
 80014e4:	f47f af70 	bne.w	80013c8 <__aeabi_fmul+0x14c>
 80014e8:	4608      	mov	r0, r1
 80014ea:	e776      	b.n	80013da <__aeabi_fmul+0x15e>
 80014ec:	ea93 0f0c 	teq	r3, ip
 80014f0:	d104      	bne.n	80014fc <__aeabi_fdiv+0x118>
 80014f2:	024b      	lsls	r3, r1, #9
 80014f4:	f43f af4c 	beq.w	8001390 <__aeabi_fmul+0x114>
 80014f8:	4608      	mov	r0, r1
 80014fa:	e76e      	b.n	80013da <__aeabi_fmul+0x15e>
 80014fc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001500:	bf18      	it	ne
 8001502:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001506:	d1ca      	bne.n	800149e <__aeabi_fdiv+0xba>
 8001508:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800150c:	f47f af5c 	bne.w	80013c8 <__aeabi_fmul+0x14c>
 8001510:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001514:	f47f af3c 	bne.w	8001390 <__aeabi_fmul+0x114>
 8001518:	e75f      	b.n	80013da <__aeabi_fmul+0x15e>
 800151a:	bf00      	nop

0800151c <__gesf2>:
 800151c:	f04f 3cff 	mov.w	ip, #4294967295
 8001520:	e006      	b.n	8001530 <__cmpsf2+0x4>
 8001522:	bf00      	nop

08001524 <__lesf2>:
 8001524:	f04f 0c01 	mov.w	ip, #1
 8001528:	e002      	b.n	8001530 <__cmpsf2+0x4>
 800152a:	bf00      	nop

0800152c <__cmpsf2>:
 800152c:	f04f 0c01 	mov.w	ip, #1
 8001530:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001534:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001538:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800153c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001540:	bf18      	it	ne
 8001542:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001546:	d011      	beq.n	800156c <__cmpsf2+0x40>
 8001548:	b001      	add	sp, #4
 800154a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800154e:	bf18      	it	ne
 8001550:	ea90 0f01 	teqne	r0, r1
 8001554:	bf58      	it	pl
 8001556:	ebb2 0003 	subspl.w	r0, r2, r3
 800155a:	bf88      	it	hi
 800155c:	17c8      	asrhi	r0, r1, #31
 800155e:	bf38      	it	cc
 8001560:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001564:	bf18      	it	ne
 8001566:	f040 0001 	orrne.w	r0, r0, #1
 800156a:	4770      	bx	lr
 800156c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001570:	d102      	bne.n	8001578 <__cmpsf2+0x4c>
 8001572:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001576:	d105      	bne.n	8001584 <__cmpsf2+0x58>
 8001578:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800157c:	d1e4      	bne.n	8001548 <__cmpsf2+0x1c>
 800157e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001582:	d0e1      	beq.n	8001548 <__cmpsf2+0x1c>
 8001584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop

0800158c <__aeabi_cfrcmple>:
 800158c:	4684      	mov	ip, r0
 800158e:	4608      	mov	r0, r1
 8001590:	4661      	mov	r1, ip
 8001592:	e7ff      	b.n	8001594 <__aeabi_cfcmpeq>

08001594 <__aeabi_cfcmpeq>:
 8001594:	b50f      	push	{r0, r1, r2, r3, lr}
 8001596:	f7ff ffc9 	bl	800152c <__cmpsf2>
 800159a:	2800      	cmp	r0, #0
 800159c:	bf48      	it	mi
 800159e:	f110 0f00 	cmnmi.w	r0, #0
 80015a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080015a4 <__aeabi_fcmpeq>:
 80015a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80015a8:	f7ff fff4 	bl	8001594 <__aeabi_cfcmpeq>
 80015ac:	bf0c      	ite	eq
 80015ae:	2001      	moveq	r0, #1
 80015b0:	2000      	movne	r0, #0
 80015b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80015b6:	bf00      	nop

080015b8 <__aeabi_fcmplt>:
 80015b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80015bc:	f7ff ffea 	bl	8001594 <__aeabi_cfcmpeq>
 80015c0:	bf34      	ite	cc
 80015c2:	2001      	movcc	r0, #1
 80015c4:	2000      	movcs	r0, #0
 80015c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80015ca:	bf00      	nop

080015cc <__aeabi_fcmple>:
 80015cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80015d0:	f7ff ffe0 	bl	8001594 <__aeabi_cfcmpeq>
 80015d4:	bf94      	ite	ls
 80015d6:	2001      	movls	r0, #1
 80015d8:	2000      	movhi	r0, #0
 80015da:	f85d fb08 	ldr.w	pc, [sp], #8
 80015de:	bf00      	nop

080015e0 <__aeabi_fcmpge>:
 80015e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80015e4:	f7ff ffd2 	bl	800158c <__aeabi_cfrcmple>
 80015e8:	bf94      	ite	ls
 80015ea:	2001      	movls	r0, #1
 80015ec:	2000      	movhi	r0, #0
 80015ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80015f2:	bf00      	nop

080015f4 <__aeabi_fcmpgt>:
 80015f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80015f8:	f7ff ffc8 	bl	800158c <__aeabi_cfrcmple>
 80015fc:	bf34      	ite	cc
 80015fe:	2001      	movcc	r0, #1
 8001600:	2000      	movcs	r0, #0
 8001602:	f85d fb08 	ldr.w	pc, [sp], #8
 8001606:	bf00      	nop

08001608 <__aeabi_f2iz>:
 8001608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800160c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001610:	d30f      	bcc.n	8001632 <__aeabi_f2iz+0x2a>
 8001612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800161a:	d90d      	bls.n	8001638 <__aeabi_f2iz+0x30>
 800161c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001624:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001628:	fa23 f002 	lsr.w	r0, r3, r2
 800162c:	bf18      	it	ne
 800162e:	4240      	negne	r0, r0
 8001630:	4770      	bx	lr
 8001632:	f04f 0000 	mov.w	r0, #0
 8001636:	4770      	bx	lr
 8001638:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800163c:	d101      	bne.n	8001642 <__aeabi_f2iz+0x3a>
 800163e:	0242      	lsls	r2, r0, #9
 8001640:	d105      	bne.n	800164e <__aeabi_f2iz+0x46>
 8001642:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001646:	bf08      	it	eq
 8001648:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800164c:	4770      	bx	lr
 800164e:	f04f 0000 	mov.w	r0, #0
 8001652:	4770      	bx	lr

08001654 <Bsp_Led_Show_State_Handle>:
#include "bsp_uart.h"


// The LED displays the current operating status, which is invoked every 10 milliseconds, and the LED blinks every 200 milliseconds.  
static void Bsp_Led_Show_State_Handle(void)
{
 8001654:	b508      	push	{r3, lr}
	static uint8_t led_count = 0;
	led_count++;
 8001656:	4a08      	ldr	r2, [pc, #32]	@ (8001678 <Bsp_Led_Show_State_Handle+0x24>)
 8001658:	7813      	ldrb	r3, [r2, #0]
 800165a:	3301      	adds	r3, #1
 800165c:	b2db      	uxtb	r3, r3
 800165e:	7013      	strb	r3, [r2, #0]
	if (led_count > 20)
 8001660:	2b14      	cmp	r3, #20
 8001662:	d800      	bhi.n	8001666 <Bsp_Led_Show_State_Handle+0x12>
	{
		led_count = 0;
		LED_TOGGLE();
	}
}
 8001664:	bd08      	pop	{r3, pc}
		led_count = 0;
 8001666:	4613      	mov	r3, r2
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
		LED_TOGGLE();
 800166c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001670:	4802      	ldr	r0, [pc, #8]	@ (800167c <Bsp_Led_Show_State_Handle+0x28>)
 8001672:	f003 fe5e 	bl	8005332 <HAL_GPIO_TogglePin>
}
 8001676:	e7f5      	b.n	8001664 <Bsp_Led_Show_State_Handle+0x10>
 8001678:	200001fc 	.word	0x200001fc
 800167c:	40011000 	.word	0x40011000

08001680 <Bsp_Init>:


// The peripheral device is initialized
void Bsp_Init(void)
{
 8001680:	b508      	push	{r3, lr}
	//Beep_On_Time(50);
	Motor_Init();
 8001682:	f000 fc95 	bl	8001fb0 <Motor_Init>
	Encoder_Init();
 8001686:	f000 f93b 	bl	8001900 <Encoder_Init>
	PID_Param_Init();
 800168a:	f000 fd51 	bl	8002130 <PID_Param_Init>
}
 800168e:	bd08      	pop	{r3, pc}

08001690 <Bsp_Loop>:
// This function is called in a loop in main.c to avoid multiple modifications to the main.c file



void Bsp_Loop(void)
{
 8001690:	b508      	push	{r3, lr}
	Bsp_Led_Show_State_Handle();
 8001692:	f7ff ffdf 	bl	8001654 <Bsp_Led_Show_State_Handle>
	//Beep_Timeout_Close_Handle();
	Encoder_Update_Count();
 8001696:	f000 f8b7 	bl	8001808 <Encoder_Update_Count>
	Motion_Handle();
 800169a:	f000 fb43 	bl	8001d24 <Motion_Handle>
	//Command_Handler();
	HAL_Delay(10);
 800169e:	200a      	movs	r0, #10
 80016a0:	f001 febe 	bl	8003420 <HAL_Delay>
}
 80016a4:	bd08      	pop	{r3, pc}
	...

080016a8 <Beep_Set_Time>:

// 刷新蜂鸣器打开的时间
// Refreshes the buzzer time
static void Beep_Set_Time(uint16_t time)
{
	beep_on_time = time;
 80016a8:	4b01      	ldr	r3, [pc, #4]	@ (80016b0 <Beep_Set_Time+0x8>)
 80016aa:	8018      	strh	r0, [r3, #0]
}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000206 	.word	0x20000206

080016b4 <Beep_Get_Time>:
// 获取当前蜂鸣器打开的剩余时间
// Gets the remaining time of the current buzzer on
static uint16_t Beep_Get_Time(void)
{
	return beep_on_time;
}
 80016b4:	4b01      	ldr	r3, [pc, #4]	@ (80016bc <Beep_Get_Time+0x8>)
 80016b6:	8818      	ldrh	r0, [r3, #0]
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000206 	.word	0x20000206

080016c0 <Beep_Set_State>:

// 刷新蜂鸣器的状态
// Refreshes the buzzer status
static void Beep_Set_State(uint8_t state)
{
	beep_state = state;
 80016c0:	4b01      	ldr	r3, [pc, #4]	@ (80016c8 <Beep_Set_State+0x8>)
 80016c2:	7018      	strb	r0, [r3, #0]
}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	20000204 	.word	0x20000204

080016cc <Beep_Get_State>:
// 获取蜂鸣器的状态
// Gets the status of the buzzer
static uint8_t Beep_Get_State(void)
{
	return beep_state;
}
 80016cc:	4b01      	ldr	r3, [pc, #4]	@ (80016d4 <Beep_Get_State+0x8>)
 80016ce:	7818      	ldrb	r0, [r3, #0]
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000204 	.word	0x20000204

080016d8 <Beep_On_Time>:

// 设置蜂鸣器开启时间，time=0时关闭，time=1时一直响，time>=10，延迟xx毫秒后自动关闭
// Set the buzzer start time. The buzzer is disabled when time is 0, keeps ringing when time is 1, and automatically shuts down after time>=10  
void Beep_On_Time(uint16_t time)
{
 80016d8:	b510      	push	{r4, lr}
	if (time == BEEP_STATE_ON_ALWAYS)
 80016da:	2801      	cmp	r0, #1
 80016dc:	d004      	beq.n	80016e8 <Beep_On_Time+0x10>
 80016de:	4604      	mov	r4, r0
	{
		Beep_Set_State(BEEP_STATE_ON_ALWAYS);
		Beep_Set_Time(0);
		BEEP_ON();
	}
	else if (time == BEEP_STATE_OFF)
 80016e0:	b170      	cbz	r0, 8001700 <Beep_On_Time+0x28>
		Beep_Set_Time(0);
		BEEP_OFF();
	}
	else
	{
		if (time >= 10)
 80016e2:	2809      	cmp	r0, #9
 80016e4:	d818      	bhi.n	8001718 <Beep_On_Time+0x40>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
			Beep_Set_Time(time / 10);
			BEEP_ON();
		}
	}
}
 80016e6:	bd10      	pop	{r4, pc}
		Beep_Set_State(BEEP_STATE_ON_ALWAYS);
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff ffe9 	bl	80016c0 <Beep_Set_State>
		Beep_Set_Time(0);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff ffda 	bl	80016a8 <Beep_Set_Time>
		BEEP_ON();
 80016f4:	2201      	movs	r2, #1
 80016f6:	2120      	movs	r1, #32
 80016f8:	480f      	ldr	r0, [pc, #60]	@ (8001738 <Beep_On_Time+0x60>)
 80016fa:	f003 fe14 	bl	8005326 <HAL_GPIO_WritePin>
 80016fe:	e7f2      	b.n	80016e6 <Beep_On_Time+0xe>
		Beep_Set_State(BEEP_STATE_OFF);
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff ffdd 	bl	80016c0 <Beep_Set_State>
		Beep_Set_Time(0);
 8001706:	2000      	movs	r0, #0
 8001708:	f7ff ffce 	bl	80016a8 <Beep_Set_Time>
		BEEP_OFF();
 800170c:	2200      	movs	r2, #0
 800170e:	2120      	movs	r1, #32
 8001710:	4809      	ldr	r0, [pc, #36]	@ (8001738 <Beep_On_Time+0x60>)
 8001712:	f003 fe08 	bl	8005326 <HAL_GPIO_WritePin>
 8001716:	e7e6      	b.n	80016e6 <Beep_On_Time+0xe>
			Beep_Set_State(BEEP_STATE_ON_DELAY);
 8001718:	2002      	movs	r0, #2
 800171a:	f7ff ffd1 	bl	80016c0 <Beep_Set_State>
			Beep_Set_Time(time / 10);
 800171e:	4b07      	ldr	r3, [pc, #28]	@ (800173c <Beep_On_Time+0x64>)
 8001720:	fba3 3004 	umull	r3, r0, r3, r4
 8001724:	08c0      	lsrs	r0, r0, #3
 8001726:	f7ff ffbf 	bl	80016a8 <Beep_Set_Time>
			BEEP_ON();
 800172a:	2201      	movs	r2, #1
 800172c:	2120      	movs	r1, #32
 800172e:	4802      	ldr	r0, [pc, #8]	@ (8001738 <Beep_On_Time+0x60>)
 8001730:	f003 fdf9 	bl	8005326 <HAL_GPIO_WritePin>
}
 8001734:	e7d7      	b.n	80016e6 <Beep_On_Time+0xe>
 8001736:	bf00      	nop
 8001738:	40011000 	.word	0x40011000
 800173c:	cccccccd 	.word	0xcccccccd

08001740 <Beep_Timeout_Close_Handle>:


// Buzzer timeout automatically shut down the program, 10 milliseconds to call once
void Beep_Timeout_Close_Handle(void)
{
 8001740:	b508      	push	{r3, lr}
	if (Beep_Get_State() == BEEP_STATE_ON_DELAY)
 8001742:	f7ff ffc3 	bl	80016cc <Beep_Get_State>
 8001746:	2802      	cmp	r0, #2
 8001748:	d000      	beq.n	800174c <Beep_Timeout_Close_Handle+0xc>
		{
			BEEP_OFF();
			Beep_Set_State(BEEP_STATE_OFF);
		}
	}
}
 800174a:	bd08      	pop	{r3, pc}
		if (Beep_Get_Time())
 800174c:	f7ff ffb2 	bl	80016b4 <Beep_Get_Time>
 8001750:	b120      	cbz	r0, 800175c <Beep_Timeout_Close_Handle+0x1c>
			beep_on_time--;
 8001752:	4a07      	ldr	r2, [pc, #28]	@ (8001770 <Beep_Timeout_Close_Handle+0x30>)
 8001754:	8813      	ldrh	r3, [r2, #0]
 8001756:	3b01      	subs	r3, #1
 8001758:	8013      	strh	r3, [r2, #0]
 800175a:	e7f6      	b.n	800174a <Beep_Timeout_Close_Handle+0xa>
			BEEP_OFF();
 800175c:	2200      	movs	r2, #0
 800175e:	2120      	movs	r1, #32
 8001760:	4804      	ldr	r0, [pc, #16]	@ (8001774 <Beep_Timeout_Close_Handle+0x34>)
 8001762:	f003 fde0 	bl	8005326 <HAL_GPIO_WritePin>
			Beep_Set_State(BEEP_STATE_OFF);
 8001766:	2000      	movs	r0, #0
 8001768:	f7ff ffaa 	bl	80016c0 <Beep_Set_State>
}
 800176c:	e7ed      	b.n	800174a <Beep_Timeout_Close_Handle+0xa>
 800176e:	bf00      	nop
 8001770:	20000206 	.word	0x20000206
 8001774:	40011000 	.word	0x40011000

08001778 <Encoder_Read_CNT>:
// Read the encoder count, call every 10 milliseconds

static int16_t Encoder_Read_CNT(uint8_t Motor_id)
{
	int16_t Encoder_TIM = 0;
	switch(Motor_id)
 8001778:	2803      	cmp	r0, #3
 800177a:	d81c      	bhi.n	80017b6 <Encoder_Read_CNT+0x3e>
 800177c:	e8df f000 	tbb	[pc, r0]
 8001780:	150f0902 	.word	0x150f0902
	{
	case MOTOR_ID_M1:  Encoder_TIM = (short)TIM2 -> CNT; TIM2 -> CNT = 0; break;
 8001784:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001788:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800178a:	b200      	sxth	r0, r0
 800178c:	2200      	movs	r2, #0
 800178e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001790:	4770      	bx	lr
	case MOTOR_ID_M2:  Encoder_TIM = (short)TIM4 -> CNT; TIM4 -> CNT = 0; break;
 8001792:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <Encoder_Read_CNT+0x44>)
 8001794:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001796:	b200      	sxth	r0, r0
 8001798:	2200      	movs	r2, #0
 800179a:	625a      	str	r2, [r3, #36]	@ 0x24
 800179c:	4770      	bx	lr
	case MOTOR_ID_M3:  Encoder_TIM = (short)TIM5 -> CNT; TIM5 -> CNT = 0; break;
 800179e:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <Encoder_Read_CNT+0x48>)
 80017a0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80017a2:	b200      	sxth	r0, r0
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80017a8:	4770      	bx	lr
	case MOTOR_ID_M4:  Encoder_TIM = (short)TIM3 -> CNT; TIM3 -> CNT = 0; break;
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <Encoder_Read_CNT+0x4c>)
 80017ac:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80017ae:	b200      	sxth	r0, r0
 80017b0:	2200      	movs	r2, #0
 80017b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80017b4:	4770      	bx	lr
	switch(Motor_id)
 80017b6:	2000      	movs	r0, #0
	default:  break;
	}
	return Encoder_TIM;
}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40000800 	.word	0x40000800
 80017c0:	40000c00 	.word	0x40000c00
 80017c4:	40000400 	.word	0x40000400

080017c8 <Encoder_Get_ALL>:
// Get the total four - way encoder count up to now

void Encoder_Get_ALL(int32_t* Encoder_all)
{
	static uint32_t loop_count = 0;
	Encoder_all[0] = g_Encoder_M1_Now;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <Encoder_Get_ALL+0x2c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6003      	str	r3, [r0, #0]
	Encoder_all[1] = g_Encoder_M2_Now;
 80017ce:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <Encoder_Get_ALL+0x30>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6043      	str	r3, [r0, #4]
	Encoder_all[2] = g_Encoder_M3_Now;
 80017d4:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <Encoder_Get_ALL+0x34>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6083      	str	r3, [r0, #8]
	Encoder_all[3] = g_Encoder_M4_Now;
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <Encoder_Get_ALL+0x38>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	60c3      	str	r3, [r0, #12]

	loop_count++;
 80017e0:	4a08      	ldr	r2, [pc, #32]	@ (8001804 <Encoder_Get_ALL+0x3c>)
 80017e2:	6813      	ldr	r3, [r2, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	6013      	str	r3, [r2, #0]
	if (loop_count > 50)
 80017e8:	2b32      	cmp	r3, #50	@ 0x32
 80017ea:	d902      	bls.n	80017f2 <Encoder_Get_ALL+0x2a>
	{
		//Debug_Print("Encoder_Get_ALL called: M1=%d, M2=%d, M3=%d, M4=%d\r\n",
		//	    	                g_Encoder_M1_Now, g_Encoder_M2_Now,
		//	    	                g_Encoder_M3_Now, g_Encoder_M4_Now);
		loop_count = 0;
 80017ec:	4613      	mov	r3, r2
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
	}

}
 80017f2:	4770      	bx	lr
 80017f4:	2000022c 	.word	0x2000022c
 80017f8:	20000228 	.word	0x20000228
 80017fc:	20000224 	.word	0x20000224
 8001800:	20000220 	.word	0x20000220
 8001804:	2000020c 	.word	0x2000020c

08001808 <Encoder_Update_Count>:

// 更新编码器的计数总值。需每10毫秒调用一次
// Update the count value of the encoder. call every 10 milliseconds
// Update the count value of the encoder. Call every 10 milliseconds
void Encoder_Update_Count(void)
{
 8001808:	b538      	push	{r3, r4, r5, lr}
    g_Encoder_M1_Now -= Encoder_Read_CNT(MOTOR_ID_M1);
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff ffb4 	bl	8001778 <Encoder_Read_CNT>
 8001810:	4a1e      	ldr	r2, [pc, #120]	@ (800188c <Encoder_Update_Count+0x84>)
 8001812:	6813      	ldr	r3, [r2, #0]
 8001814:	1a1b      	subs	r3, r3, r0
 8001816:	6013      	str	r3, [r2, #0]
    g_Encoder_M2_Now += Encoder_Read_CNT(MOTOR_ID_M2);
 8001818:	2001      	movs	r0, #1
 800181a:	f7ff ffad 	bl	8001778 <Encoder_Read_CNT>
 800181e:	4a1c      	ldr	r2, [pc, #112]	@ (8001890 <Encoder_Update_Count+0x88>)
 8001820:	6813      	ldr	r3, [r2, #0]
 8001822:	4403      	add	r3, r0
 8001824:	6013      	str	r3, [r2, #0]
    g_Encoder_M3_Now += Encoder_Read_CNT(MOTOR_ID_M3);
 8001826:	2002      	movs	r0, #2
 8001828:	f7ff ffa6 	bl	8001778 <Encoder_Read_CNT>
 800182c:	4a19      	ldr	r2, [pc, #100]	@ (8001894 <Encoder_Update_Count+0x8c>)
 800182e:	6813      	ldr	r3, [r2, #0]
 8001830:	4403      	add	r3, r0
 8001832:	6013      	str	r3, [r2, #0]
    g_Encoder_M4_Now -= Encoder_Read_CNT(MOTOR_ID_M4);
 8001834:	2003      	movs	r0, #3
 8001836:	f7ff ff9f 	bl	8001778 <Encoder_Read_CNT>
 800183a:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <Encoder_Update_Count+0x90>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	1a10      	subs	r0, r2, r0
 8001840:	6018      	str	r0, [r3, #0]

    // Periodic Reset with Offset Tracking
    static uint32_t reset_counter = 0;
    reset_counter++;
 8001842:	4a16      	ldr	r2, [pc, #88]	@ (800189c <Encoder_Update_Count+0x94>)
 8001844:	6813      	ldr	r3, [r2, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	6013      	str	r3, [r2, #0]
    if (reset_counter >= 10000)  // Every 10 seconds (assuming 10ms call interval)
 800184a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800184e:	4293      	cmp	r3, r2
 8001850:	d91b      	bls.n	800188a <Encoder_Update_Count+0x82>
    {
        // Store accumulated counts in offset
        encoder_offset[0] += g_Encoder_M1_Now;
 8001852:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <Encoder_Update_Count+0x98>)
 8001854:	6819      	ldr	r1, [r3, #0]
 8001856:	4d0d      	ldr	r5, [pc, #52]	@ (800188c <Encoder_Update_Count+0x84>)
 8001858:	682a      	ldr	r2, [r5, #0]
 800185a:	440a      	add	r2, r1
 800185c:	601a      	str	r2, [r3, #0]
        encoder_offset[1] += g_Encoder_M2_Now;
 800185e:	6859      	ldr	r1, [r3, #4]
 8001860:	4c0b      	ldr	r4, [pc, #44]	@ (8001890 <Encoder_Update_Count+0x88>)
 8001862:	6822      	ldr	r2, [r4, #0]
 8001864:	440a      	add	r2, r1
 8001866:	605a      	str	r2, [r3, #4]
        encoder_offset[2] += g_Encoder_M3_Now;
 8001868:	490a      	ldr	r1, [pc, #40]	@ (8001894 <Encoder_Update_Count+0x8c>)
 800186a:	680a      	ldr	r2, [r1, #0]
 800186c:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8001870:	4462      	add	r2, ip
 8001872:	609a      	str	r2, [r3, #8]
        encoder_offset[3] += g_Encoder_M4_Now;
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	4410      	add	r0, r2
 8001878:	60d8      	str	r0, [r3, #12]

        // Reset current counts to avoid overflow
        g_Encoder_M1_Now = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	602b      	str	r3, [r5, #0]
        g_Encoder_M2_Now = 0;
 800187e:	6023      	str	r3, [r4, #0]
        g_Encoder_M3_Now = 0;
 8001880:	600b      	str	r3, [r1, #0]
        g_Encoder_M4_Now = 0;
 8001882:	4a05      	ldr	r2, [pc, #20]	@ (8001898 <Encoder_Update_Count+0x90>)
 8001884:	6013      	str	r3, [r2, #0]

        reset_counter = 0;
 8001886:	4a05      	ldr	r2, [pc, #20]	@ (800189c <Encoder_Update_Count+0x94>)
 8001888:	6013      	str	r3, [r2, #0]
    }
}
 800188a:	bd38      	pop	{r3, r4, r5, pc}
 800188c:	2000022c 	.word	0x2000022c
 8001890:	20000228 	.word	0x20000228
 8001894:	20000224 	.word	0x20000224
 8001898:	20000220 	.word	0x20000220
 800189c:	20000208 	.word	0x20000208
 80018a0:	20000210 	.word	0x20000210

080018a4 <Encoder_Get_Total_Count>:

// Get the total encoder count including the offset
int32_t Encoder_Get_Total_Count(uint8_t Motor_id)
{
    if (Motor_id == MOTOR_ID_M1) return encoder_offset[0] + g_Encoder_M1_Now;
 80018a4:	2803      	cmp	r0, #3
 80018a6:	d81b      	bhi.n	80018e0 <Encoder_Get_Total_Count+0x3c>
 80018a8:	e8df f000 	tbb	[pc, r0]
 80018ac:	140e0802 	.word	0x140e0802
 80018b0:	4b0c      	ldr	r3, [pc, #48]	@ (80018e4 <Encoder_Get_Total_Count+0x40>)
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <Encoder_Get_Total_Count+0x44>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4418      	add	r0, r3
 80018ba:	4770      	bx	lr
    if (Motor_id == MOTOR_ID_M2) return encoder_offset[1] + g_Encoder_M2_Now;
 80018bc:	4b09      	ldr	r3, [pc, #36]	@ (80018e4 <Encoder_Get_Total_Count+0x40>)
 80018be:	6858      	ldr	r0, [r3, #4]
 80018c0:	4b0a      	ldr	r3, [pc, #40]	@ (80018ec <Encoder_Get_Total_Count+0x48>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4418      	add	r0, r3
 80018c6:	4770      	bx	lr
    if (Motor_id == MOTOR_ID_M3) return encoder_offset[2] + g_Encoder_M3_Now;
 80018c8:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <Encoder_Get_Total_Count+0x40>)
 80018ca:	6898      	ldr	r0, [r3, #8]
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <Encoder_Get_Total_Count+0x4c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4418      	add	r0, r3
 80018d2:	4770      	bx	lr
    if (Motor_id == MOTOR_ID_M4) return encoder_offset[3] + g_Encoder_M4_Now;
 80018d4:	4b03      	ldr	r3, [pc, #12]	@ (80018e4 <Encoder_Get_Total_Count+0x40>)
 80018d6:	68d8      	ldr	r0, [r3, #12]
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <Encoder_Get_Total_Count+0x50>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4418      	add	r0, r3
 80018de:	4770      	bx	lr
{
 80018e0:	2000      	movs	r0, #0
    return 0;
}
 80018e2:	4770      	bx	lr
 80018e4:	20000210 	.word	0x20000210
 80018e8:	2000022c 	.word	0x2000022c
 80018ec:	20000228 	.word	0x20000228
 80018f0:	20000224 	.word	0x20000224
 80018f4:	20000220 	.word	0x20000220

080018f8 <Encoder_Get_Count_Now>:
{
 80018f8:	b508      	push	{r3, lr}
    return Encoder_Get_Total_Count(Motor_id);
 80018fa:	f7ff ffd3 	bl	80018a4 <Encoder_Get_Total_Count>
}
 80018fe:	bd08      	pop	{r3, pc}

08001900 <Encoder_Init>:



// Initializing timer  初始化定时器
void Encoder_Init(void)
{
 8001900:	b508      	push	{r3, lr}
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001902:	2104      	movs	r1, #4
 8001904:	4807      	ldr	r0, [pc, #28]	@ (8001924 <Encoder_Init+0x24>)
 8001906:	f007 fc81 	bl	800920c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800190a:	2104      	movs	r1, #4
 800190c:	4806      	ldr	r0, [pc, #24]	@ (8001928 <Encoder_Init+0x28>)
 800190e:	f007 fc7d 	bl	800920c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001912:	2104      	movs	r1, #4
 8001914:	4805      	ldr	r0, [pc, #20]	@ (800192c <Encoder_Init+0x2c>)
 8001916:	f007 fc79 	bl	800920c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800191a:	2104      	movs	r1, #4
 800191c:	4804      	ldr	r0, [pc, #16]	@ (8001930 <Encoder_Init+0x30>)
 800191e:	f007 fc75 	bl	800920c <HAL_TIM_Encoder_Start>
}
 8001922:	bd08      	pop	{r3, pc}
 8001924:	200004e4 	.word	0x200004e4
 8001928:	2000049c 	.word	0x2000049c
 800192c:	20000454 	.word	0x20000454
 8001930:	2000040c 	.word	0x2000040c

08001934 <Key1_is_Press>:


// 判断按键是否被按下，按下返回KEY_PRESS，松开返回KEY_RELEASE
// Determine if the key is pressed, press to return KEY_PRESS, release to return KEY_RELEASE  
static uint8_t Key1_is_Press(void)
{
 8001934:	b508      	push	{r3, lr}
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 8001936:	2104      	movs	r1, #4
 8001938:	4803      	ldr	r0, [pc, #12]	@ (8001948 <Key1_is_Press+0x14>)
 800193a:	f003 fced 	bl	8005318 <HAL_GPIO_ReadPin>
 800193e:	b108      	cbz	r0, 8001944 <Key1_is_Press+0x10>
	{
		return KEY_PRESS; // 如果按键被按下，则返回KEY_PRESS
	}
	return KEY_RELEASE;   // 如果按键是松开状态，则返回KEY_RELEASE
 8001940:	2000      	movs	r0, #0
}
 8001942:	bd08      	pop	{r3, pc}
		return KEY_PRESS; // 如果按键被按下，则返回KEY_PRESS
 8001944:	2001      	movs	r0, #1
 8001946:	e7fc      	b.n	8001942 <Key1_is_Press+0xe>
 8001948:	40011400 	.word	0x40011400

0800194c <Key1_State>:
// 读取按键K1的状态，按下返回KEY_PRESS，松开返回KEY_RELEASE. 
// mode:设置模式，0：按下一直返回KEY_PRESS；1：按下只返回一次KEY_PRESS
// Read the state of key K1, press down to return KEY_PRESS, release to return key_release. 
// mode: setting mode, 0: press down to return KEY_PRESS;  1: KEY_PRESS is returned only once  
uint8_t Key1_State(uint8_t mode)
{
 800194c:	b510      	push	{r4, lr}
 800194e:	4604      	mov	r4, r0
	static uint16_t key1_state = 0;

	if (Key1_is_Press() == KEY_PRESS)
 8001950:	f7ff fff0 	bl	8001934 <Key1_is_Press>
 8001954:	2801      	cmp	r0, #1
 8001956:	d008      	beq.n	800196a <Key1_State+0x1e>
			key1_state++;
		}
	}
	else
	{
		key1_state = 0;
 8001958:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <Key1_State+0x38>)
 800195a:	2200      	movs	r2, #0
 800195c:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <Key1_State+0x38>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d00b      	beq.n	800197e <Key1_State+0x32>
	{
		return KEY_PRESS;
	}
	return KEY_RELEASE;
 8001966:	2000      	movs	r0, #0
}
 8001968:	bd10      	pop	{r4, pc}
		if (key1_state < (mode + 1) * 2)
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <Key1_State+0x38>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	1c60      	adds	r0, r4, #1
 8001970:	ebb3 0f40 	cmp.w	r3, r0, lsl #1
 8001974:	daf3      	bge.n	800195e <Key1_State+0x12>
			key1_state++;
 8001976:	3301      	adds	r3, #1
 8001978:	4a02      	ldr	r2, [pc, #8]	@ (8001984 <Key1_State+0x38>)
 800197a:	8013      	strh	r3, [r2, #0]
 800197c:	e7ef      	b.n	800195e <Key1_State+0x12>
		return KEY_PRESS;
 800197e:	2001      	movs	r0, #1
 8001980:	e7f2      	b.n	8001968 <Key1_State+0x1c>
 8001982:	bf00      	nop
 8001984:	20000230 	.word	0x20000230

08001988 <Motion_Set_Pwm>:



// Control car movement, Motor_X=[-3600, 3600], beyond the range is invalid. 
void Motion_Set_Pwm(int16_t Motor_1, int16_t Motor_2, int16_t Motor_3, int16_t Motor_4)
{
 8001988:	b570      	push	{r4, r5, r6, lr}
 800198a:	460e      	mov	r6, r1
 800198c:	4615      	mov	r5, r2
 800198e:	461c      	mov	r4, r3
    int16_t max_value = MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE;
    if (Motor_1 >= -max_value && Motor_1 <= max_value)
 8001990:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <Motion_Set_Pwm+0x6c>)
 8001992:	4298      	cmp	r0, r3
 8001994:	db03      	blt.n	800199e <Motion_Set_Pwm+0x16>
 8001996:	f640 0334 	movw	r3, #2100	@ 0x834
 800199a:	4298      	cmp	r0, r3
 800199c:	dd15      	ble.n	80019ca <Motion_Set_Pwm+0x42>
    {
        Motor_Set_Pwm(MOTOR_ID_M1, Motor_1);
    }
    if (Motor_2 >= -max_value && Motor_2 <= max_value)
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <Motion_Set_Pwm+0x6c>)
 80019a0:	429e      	cmp	r6, r3
 80019a2:	db03      	blt.n	80019ac <Motion_Set_Pwm+0x24>
 80019a4:	f640 0334 	movw	r3, #2100	@ 0x834
 80019a8:	429e      	cmp	r6, r3
 80019aa:	dd13      	ble.n	80019d4 <Motion_Set_Pwm+0x4c>
    {
        Motor_Set_Pwm(MOTOR_ID_M2, Motor_2);
    }
    if (Motor_3 >= -max_value && Motor_3 <= max_value)
 80019ac:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <Motion_Set_Pwm+0x6c>)
 80019ae:	429d      	cmp	r5, r3
 80019b0:	db03      	blt.n	80019ba <Motion_Set_Pwm+0x32>
 80019b2:	f640 0334 	movw	r3, #2100	@ 0x834
 80019b6:	429d      	cmp	r5, r3
 80019b8:	dd11      	ble.n	80019de <Motion_Set_Pwm+0x56>
    {
        Motor_Set_Pwm(MOTOR_ID_M3, Motor_3);
    }
    if (Motor_4 >= -max_value && Motor_4 <= max_value)
 80019ba:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <Motion_Set_Pwm+0x6c>)
 80019bc:	429c      	cmp	r4, r3
 80019be:	db03      	blt.n	80019c8 <Motion_Set_Pwm+0x40>
 80019c0:	f640 0334 	movw	r3, #2100	@ 0x834
 80019c4:	429c      	cmp	r4, r3
 80019c6:	dd0f      	ble.n	80019e8 <Motion_Set_Pwm+0x60>
    {
        Motor_Set_Pwm(MOTOR_ID_M4, Motor_4);
    }
}
 80019c8:	bd70      	pop	{r4, r5, r6, pc}
        Motor_Set_Pwm(MOTOR_ID_M1, Motor_1);
 80019ca:	4601      	mov	r1, r0
 80019cc:	2000      	movs	r0, #0
 80019ce:	f000 fb2d 	bl	800202c <Motor_Set_Pwm>
 80019d2:	e7e4      	b.n	800199e <Motion_Set_Pwm+0x16>
        Motor_Set_Pwm(MOTOR_ID_M2, Motor_2);
 80019d4:	4631      	mov	r1, r6
 80019d6:	2001      	movs	r0, #1
 80019d8:	f000 fb28 	bl	800202c <Motor_Set_Pwm>
 80019dc:	e7e6      	b.n	80019ac <Motion_Set_Pwm+0x24>
        Motor_Set_Pwm(MOTOR_ID_M3, Motor_3);
 80019de:	4629      	mov	r1, r5
 80019e0:	2002      	movs	r0, #2
 80019e2:	f000 fb23 	bl	800202c <Motor_Set_Pwm>
 80019e6:	e7e8      	b.n	80019ba <Motion_Set_Pwm+0x32>
        Motor_Set_Pwm(MOTOR_ID_M4, Motor_4);
 80019e8:	4621      	mov	r1, r4
 80019ea:	2003      	movs	r0, #3
 80019ec:	f000 fb1e 	bl	800202c <Motor_Set_Pwm>
}
 80019f0:	e7ea      	b.n	80019c8 <Motion_Set_Pwm+0x40>
 80019f2:	bf00      	nop
 80019f4:	fffff7cc 	.word	0xfffff7cc

080019f8 <Motion_Set_Speed>:



// Set speed speed mX=[-1000, 1000], unit: mm/s
void Motion_Set_Speed(int16_t speed_m1, int16_t speed_m2, int16_t speed_m3, int16_t speed_m4)
{
 80019f8:	b538      	push	{r3, r4, r5, lr}
    static uint32_t loop_counter = 0;
    loop_counter++;
 80019fa:	4d10      	ldr	r5, [pc, #64]	@ (8001a3c <Motion_Set_Speed+0x44>)
 80019fc:	682c      	ldr	r4, [r5, #0]
 80019fe:	3401      	adds	r4, #1
 8001a00:	602c      	str	r4, [r5, #0]

	//Debug_Print("Motion_Set_Speed called: M1=%d, M2=%d, M3=%d, M4=%d\r\n", speed_m1, speed_m2, speed_m3, speed_m4);
    g_start_ctrl = 1;
 8001a02:	4c0f      	ldr	r4, [pc, #60]	@ (8001a40 <Motion_Set_Speed+0x48>)
 8001a04:	2501      	movs	r5, #1
 8001a06:	7025      	strb	r5, [r4, #0]
    motor_data.speed_set[0] = speed_m1;
 8001a08:	4c0e      	ldr	r4, [pc, #56]	@ (8001a44 <Motion_Set_Speed+0x4c>)
 8001a0a:	8420      	strh	r0, [r4, #32]
    motor_data.speed_set[1] = speed_m2;
 8001a0c:	8461      	strh	r1, [r4, #34]	@ 0x22
    motor_data.speed_set[2] = speed_m3;
 8001a0e:	84a2      	strh	r2, [r4, #36]	@ 0x24
    motor_data.speed_set[3] = speed_m4;
 8001a10:	84e3      	strh	r3, [r4, #38]	@ 0x26
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8001a12:	2400      	movs	r4, #0
 8001a14:	e00e      	b.n	8001a34 <Motion_Set_Speed+0x3c>
    {
        PID_Set_Motor_Target(i, motor_data.speed_set[i]*1.0);
 8001a16:	f104 0210 	add.w	r2, r4, #16
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a44 <Motion_Set_Speed+0x4c>)
 8001a1c:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 8001a20:	f7fe ff8c 	bl	800093c <__aeabi_i2d>
 8001a24:	f7ff facc 	bl	8000fc0 <__aeabi_d2f>
 8001a28:	4601      	mov	r1, r0
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	f000 fd06 	bl	800243c <PID_Set_Motor_Target>
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8001a30:	3401      	adds	r4, #1
 8001a32:	b2e4      	uxtb	r4, r4
 8001a34:	2c03      	cmp	r4, #3
 8001a36:	d9ee      	bls.n	8001a16 <Motion_Set_Speed+0x1e>
    }
}
 8001a38:	bd38      	pop	{r3, r4, r5, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000238 	.word	0x20000238
 8001a40:	2000026a 	.word	0x2000026a
 8001a44:	2000023c 	.word	0x2000023c

08001a48 <Motion_Stop>:
{
 8001a48:	b510      	push	{r4, lr}
 8001a4a:	4604      	mov	r4, r0
    Motion_Set_Speed(0, 0, 0, 0);
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4619      	mov	r1, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ffd0 	bl	80019f8 <Motion_Set_Speed>
    PID_Clear_Motor(MAX_MOTOR);
 8001a58:	2004      	movs	r0, #4
 8001a5a:	f000 fccd 	bl	80023f8 <PID_Clear_Motor>
    Motor_Stop(brake);
 8001a5e:	4620      	mov	r0, r4
 8001a60:	f000 face 	bl	8002000 <Motor_Stop>
    g_start_ctrl = 0;
 8001a64:	4b01      	ldr	r3, [pc, #4]	@ (8001a6c <Motion_Stop+0x24>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
}
 8001a6a:	bd10      	pop	{r4, pc}
 8001a6c:	2000026a 	.word	0x2000026a

08001a70 <Motion_Get_APB>:
{
    float apb_value = 150.0;  // Ensure this is defined
    //Debug_Print("1 Motion_Get_APB called: APB = %.1f\r\n", apb_value);

    return apb_value;
}
 8001a70:	4800      	ldr	r0, [pc, #0]	@ (8001a74 <Motion_Get_APB+0x4>)
 8001a72:	4770      	bx	lr
 8001a74:	43160000 	.word	0x43160000

08001a78 <Motion_Get_Circle_MM>:

// Returns the number of millimeters at which the current wheel has been turned
float Motion_Get_Circle_MM(void)
{
    return MECANUM_MINI_CIRCLE_MM;
}
 8001a78:	4800      	ldr	r0, [pc, #0]	@ (8001a7c <Motion_Get_Circle_MM+0x4>)
 8001a7a:	4770      	bx	lr
 8001a7c:	43950000 	.word	0x43950000

08001a80 <Motion_Get_Encoder>:


// Obtain encoder data and calculate the number of deviation pulses
void Motion_Get_Encoder(void)
{
 8001a80:	b510      	push	{r4, lr}
    Encoder_Update_Count();
 8001a82:	f7ff fec1 	bl	8001808 <Encoder_Update_Count>
    Encoder_Get_ALL(g_Encoder_All_Now);
 8001a86:	480b      	ldr	r0, [pc, #44]	@ (8001ab4 <Motion_Get_Encoder+0x34>)
 8001a88:	f7ff fe9e 	bl	80017c8 <Encoder_Get_ALL>

    for(uint8_t i = 0; i < MAX_MOTOR; i++)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e00d      	b.n	8001aac <Motion_Get_Encoder+0x2c>
    {
        g_Encoder_All_Offset[i] = g_Encoder_All_Now[i] - g_Encoder_All_Last[i];
 8001a90:	4a08      	ldr	r2, [pc, #32]	@ (8001ab4 <Motion_Get_Encoder+0x34>)
 8001a92:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a96:	4908      	ldr	r1, [pc, #32]	@ (8001ab8 <Motion_Get_Encoder+0x38>)
 8001a98:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001a9c:	1a82      	subs	r2, r0, r2
 8001a9e:	4c07      	ldr	r4, [pc, #28]	@ (8001abc <Motion_Get_Encoder+0x3c>)
 8001aa0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	    g_Encoder_All_Last[i] = g_Encoder_All_Now[i];
 8001aa4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    for(uint8_t i = 0; i < MAX_MOTOR; i++)
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d9ef      	bls.n	8001a90 <Motion_Get_Encoder+0x10>
    }

}
 8001ab0:	bd10      	pop	{r4, pc}
 8001ab2:	bf00      	nop
 8001ab4:	2000028c 	.word	0x2000028c
 8001ab8:	2000027c 	.word	0x2000027c
 8001abc:	2000026c 	.word	0x2000026c

08001ac0 <Motion_Get_Speed>:
{
 8001ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ac4:	4606      	mov	r6, r0
    Motion_Get_Encoder();
 8001ac6:	f7ff ffdb 	bl	8001a80 <Motion_Get_Encoder>
    float circle_mm = Motion_Get_Circle_MM();
 8001aca:	f7ff ffd5 	bl	8001a78 <Motion_Get_Circle_MM>
 8001ace:	4604      	mov	r4, r0
    float speed_m1 = (g_Encoder_All_Offset[0]) * 100 * circle_mm / (float)ENCODER_CIRCLE;
 8001ad0:	f8df a10c 	ldr.w	sl, [pc, #268]	@ 8001be0 <Motion_Get_Speed+0x120>
 8001ad4:	f8da 0000 	ldr.w	r0, [sl]
 8001ad8:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8001adc:	fb09 f000 	mul.w	r0, r9, r0
 8001ae0:	f7ff fb78 	bl	80011d4 <__aeabi_i2f>
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	f7ff fbc9 	bl	800127c <__aeabi_fmul>
 8001aea:	493e      	ldr	r1, [pc, #248]	@ (8001be4 <Motion_Get_Speed+0x124>)
 8001aec:	f7ff fc7a 	bl	80013e4 <__aeabi_fdiv>
 8001af0:	4680      	mov	r8, r0
    float speed_m2 = (g_Encoder_All_Offset[1]) * 100 * circle_mm / (float)ENCODER_CIRCLE;
 8001af2:	f8da 0004 	ldr.w	r0, [sl, #4]
 8001af6:	fb09 f000 	mul.w	r0, r9, r0
 8001afa:	f7ff fb6b 	bl	80011d4 <__aeabi_i2f>
 8001afe:	4621      	mov	r1, r4
 8001b00:	f7ff fbbc 	bl	800127c <__aeabi_fmul>
 8001b04:	4937      	ldr	r1, [pc, #220]	@ (8001be4 <Motion_Get_Speed+0x124>)
 8001b06:	f7ff fc6d 	bl	80013e4 <__aeabi_fdiv>
 8001b0a:	4607      	mov	r7, r0
    float speed_m3 = (g_Encoder_All_Offset[2]) * 100 * circle_mm / (float)ENCODER_CIRCLE;
 8001b0c:	f8da 0008 	ldr.w	r0, [sl, #8]
 8001b10:	fb09 f000 	mul.w	r0, r9, r0
 8001b14:	f7ff fb5e 	bl	80011d4 <__aeabi_i2f>
 8001b18:	4621      	mov	r1, r4
 8001b1a:	f7ff fbaf 	bl	800127c <__aeabi_fmul>
 8001b1e:	4931      	ldr	r1, [pc, #196]	@ (8001be4 <Motion_Get_Speed+0x124>)
 8001b20:	f7ff fc60 	bl	80013e4 <__aeabi_fdiv>
 8001b24:	4605      	mov	r5, r0
    float speed_m4 = (g_Encoder_All_Offset[3]) * 100 * circle_mm / (float)ENCODER_CIRCLE;
 8001b26:	f8da 000c 	ldr.w	r0, [sl, #12]
 8001b2a:	fb09 f000 	mul.w	r0, r9, r0
 8001b2e:	f7ff fb51 	bl	80011d4 <__aeabi_i2f>
 8001b32:	4621      	mov	r1, r4
 8001b34:	f7ff fba2 	bl	800127c <__aeabi_fmul>
 8001b38:	492a      	ldr	r1, [pc, #168]	@ (8001be4 <Motion_Get_Speed+0x124>)
 8001b3a:	f7ff fc53 	bl	80013e4 <__aeabi_fdiv>
 8001b3e:	4604      	mov	r4, r0
    float robot_APB = Motion_Get_APB();
 8001b40:	f7ff ff96 	bl	8001a70 <Motion_Get_APB>
 8001b44:	4681      	mov	r9, r0
    car->Vx = (speed_m1 + speed_m2 + speed_m3 + speed_m4) / 4;
 8001b46:	4639      	mov	r1, r7
 8001b48:	4640      	mov	r0, r8
 8001b4a:	f7ff fa8f 	bl	800106c <__addsf3>
 8001b4e:	4682      	mov	sl, r0
 8001b50:	4629      	mov	r1, r5
 8001b52:	f7ff fa8b 	bl	800106c <__addsf3>
 8001b56:	4621      	mov	r1, r4
 8001b58:	f7ff fa88 	bl	800106c <__addsf3>
 8001b5c:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8001b60:	f7ff fb8c 	bl	800127c <__aeabi_fmul>
 8001b64:	f7ff fd50 	bl	8001608 <__aeabi_f2iz>
 8001b68:	8030      	strh	r0, [r6, #0]
    car->Vy = -(speed_m1 - speed_m2 - speed_m3 + speed_m4) / 4;
 8001b6a:	4639      	mov	r1, r7
 8001b6c:	4640      	mov	r0, r8
 8001b6e:	f7ff fa7b 	bl	8001068 <__aeabi_fsub>
 8001b72:	4629      	mov	r1, r5
 8001b74:	f7ff fa78 	bl	8001068 <__aeabi_fsub>
 8001b78:	4621      	mov	r1, r4
 8001b7a:	f7ff fa77 	bl	800106c <__addsf3>
 8001b7e:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8001b82:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8001b86:	f7ff fb79 	bl	800127c <__aeabi_fmul>
 8001b8a:	f7ff fd3d 	bl	8001608 <__aeabi_f2iz>
 8001b8e:	8070      	strh	r0, [r6, #2]
    car->Vz = -(speed_m1 + speed_m2 - speed_m3 - speed_m4) / 4.0f / robot_APB * 1000;
 8001b90:	4629      	mov	r1, r5
 8001b92:	4650      	mov	r0, sl
 8001b94:	f7ff fa68 	bl	8001068 <__aeabi_fsub>
 8001b98:	4621      	mov	r1, r4
 8001b9a:	f7ff fa65 	bl	8001068 <__aeabi_fsub>
 8001b9e:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8001ba2:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8001ba6:	f7ff fb69 	bl	800127c <__aeabi_fmul>
 8001baa:	4649      	mov	r1, r9
 8001bac:	f7ff fc1a 	bl	80013e4 <__aeabi_fdiv>
 8001bb0:	490d      	ldr	r1, [pc, #52]	@ (8001be8 <Motion_Get_Speed+0x128>)
 8001bb2:	f7ff fb63 	bl	800127c <__aeabi_fmul>
 8001bb6:	f7ff fd27 	bl	8001608 <__aeabi_f2iz>
 8001bba:	80b0      	strh	r0, [r6, #4]
    if (g_start_ctrl)
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <Motion_Get_Speed+0x12c>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b923      	cbnz	r3, 8001bcc <Motion_Get_Speed+0x10c>
        loop_counter = 0;
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <Motion_Get_Speed+0x130>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
}
 8001bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        motor_data.speed_mm_s[0] = speed_m1;
 8001bcc:	4809      	ldr	r0, [pc, #36]	@ (8001bf4 <Motion_Get_Speed+0x134>)
 8001bce:	f8c0 8000 	str.w	r8, [r0]
        motor_data.speed_mm_s[1] = speed_m2;
 8001bd2:	6047      	str	r7, [r0, #4]
        motor_data.speed_mm_s[2] = speed_m3;
 8001bd4:	6085      	str	r5, [r0, #8]
        motor_data.speed_mm_s[3] = speed_m4;
 8001bd6:	60c4      	str	r4, [r0, #12]
        PID_Calc_Motor(&motor_data);
 8001bd8:	f000 fb50 	bl	800227c <PID_Calc_Motor>
 8001bdc:	e7f1      	b.n	8001bc2 <Motion_Get_Speed+0x102>
 8001bde:	bf00      	nop
 8001be0:	2000026c 	.word	0x2000026c
 8001be4:	44a50000 	.word	0x44a50000
 8001be8:	447a0000 	.word	0x447a0000
 8001bec:	2000026a 	.word	0x2000026a
 8001bf0:	20000234 	.word	0x20000234
 8001bf4:	2000023c 	.word	0x2000023c

08001bf8 <Motion_Ctrl>:

// Control car movement
void Motion_Ctrl(int16_t V_x, int16_t V_y, int16_t V_z)
{
 8001bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bfc:	4605      	mov	r5, r0
 8001bfe:	4688      	mov	r8, r1
 8001c00:	4691      	mov	r9, r2
	//Debug_Print("Motion_Ctrl called: V_x=%d, V_y=%d, V_z=%d\r\n", V_x, V_y, V_z);

	float robot_APB = Motion_Get_APB();
 8001c02:	f7ff ff35 	bl	8001a70 <Motion_Get_APB>
 8001c06:	4604      	mov	r4, r0
	if (robot_APB == 0) {
 8001c08:	2100      	movs	r1, #0
 8001c0a:	f7ff fccb 	bl	80015a4 <__aeabi_fcmpeq>
 8001c0e:	b108      	cbz	r0, 8001c14 <Motion_Ctrl+0x1c>
	    robot_APB = 1.0f;  // Use a default value to avoid division by zero
 8001c10:	f04f 547e 	mov.w	r4, #1065353216	@ 0x3f800000
	    //Debug_Print("Warning: Motion_Get_APB() returned 0. Using fallback value 1.0f\r\n");
	}

    //Debug_Print("robot_APB = %.1f\r\n", robot_APB);

    float speed_lr = (float)(-V_y);
 8001c14:	f1c8 0000 	rsb	r0, r8, #0
 8001c18:	f7ff fadc 	bl	80011d4 <__aeabi_i2f>
 8001c1c:	4607      	mov	r7, r0
    float speed_fb = (float)(V_x);
 8001c1e:	4628      	mov	r0, r5
 8001c20:	f7ff fad8 	bl	80011d4 <__aeabi_i2f>
 8001c24:	4606      	mov	r6, r0

    if (robot_APB == 0) {
 8001c26:	2100      	movs	r1, #0
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f7ff fcbb 	bl	80015a4 <__aeabi_fcmpeq>
 8001c2e:	2800      	cmp	r0, #0
 8001c30:	d13d      	bne.n	8001cae <Motion_Ctrl+0xb6>
        robot_APB = 1.0f;  // Prevent division by zero
        Debug_Print("Warning: robot_APB is 0. Using fallback value 1.0f\r\n");
    }
    float speed_spin = -V_z / 1000.0f * robot_APB;
 8001c32:	f1c9 0000 	rsb	r0, r9, #0
 8001c36:	f7ff facd 	bl	80011d4 <__aeabi_i2f>
 8001c3a:	4937      	ldr	r1, [pc, #220]	@ (8001d18 <Motion_Ctrl+0x120>)
 8001c3c:	f7ff fbd2 	bl	80013e4 <__aeabi_fdiv>
 8001c40:	4621      	mov	r1, r4
 8001c42:	f7ff fb1b 	bl	800127c <__aeabi_fmul>
 8001c46:	4604      	mov	r4, r0

    //Debug_Print(" Motion_Ctrl => speed_lr=%.1f, speed_fb=%.1f, speed_spin=%.1f\r\n", speed_lr, speed_fb, speed_spin);

    if (V_x == 0 && V_y == 0 && V_z == 0)
 8001c48:	b92d      	cbnz	r5, 8001c56 <Motion_Ctrl+0x5e>
 8001c4a:	f1b8 0f00 	cmp.w	r8, #0
 8001c4e:	d102      	bne.n	8001c56 <Motion_Ctrl+0x5e>
 8001c50:	f1b9 0f00 	cmp.w	r9, #0
 8001c54:	d031      	beq.n	8001cba <Motion_Ctrl+0xc2>
    {
        Motion_Stop(STOP_BRAKE);
        return;
    }

    int speed_L1_setup = speed_fb + speed_lr + speed_spin;
 8001c56:	4631      	mov	r1, r6
 8001c58:	4638      	mov	r0, r7
 8001c5a:	f7ff fa07 	bl	800106c <__addsf3>
 8001c5e:	4680      	mov	r8, r0
 8001c60:	4621      	mov	r1, r4
 8001c62:	f7ff fa03 	bl	800106c <__addsf3>
 8001c66:	f7ff fccf 	bl	8001608 <__aeabi_f2iz>
 8001c6a:	4605      	mov	r5, r0
    int speed_L2_setup = speed_fb - speed_lr + speed_spin;
 8001c6c:	4639      	mov	r1, r7
 8001c6e:	4630      	mov	r0, r6
 8001c70:	f7ff f9fa 	bl	8001068 <__aeabi_fsub>
 8001c74:	4607      	mov	r7, r0
 8001c76:	4621      	mov	r1, r4
 8001c78:	f7ff f9f8 	bl	800106c <__addsf3>
 8001c7c:	f7ff fcc4 	bl	8001608 <__aeabi_f2iz>
 8001c80:	4606      	mov	r6, r0
    int speed_R1_setup = speed_fb - speed_lr - speed_spin;
 8001c82:	4621      	mov	r1, r4
 8001c84:	4638      	mov	r0, r7
 8001c86:	f7ff f9ef 	bl	8001068 <__aeabi_fsub>
 8001c8a:	f7ff fcbd 	bl	8001608 <__aeabi_f2iz>
 8001c8e:	4607      	mov	r7, r0
    int speed_R2_setup = speed_fb + speed_lr - speed_spin;
 8001c90:	4621      	mov	r1, r4
 8001c92:	4640      	mov	r0, r8
 8001c94:	f7ff f9e8 	bl	8001068 <__aeabi_fsub>
 8001c98:	f7ff fcb6 	bl	8001608 <__aeabi_f2iz>

    if (speed_L1_setup > 3000) speed_L1_setup = 3000;
 8001c9c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001ca0:	429d      	cmp	r5, r3
 8001ca2:	dc0e      	bgt.n	8001cc2 <Motion_Ctrl+0xca>
    if (speed_L1_setup < -3000) speed_L1_setup = -3000;
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d1c <Motion_Ctrl+0x124>)
 8001ca6:	429d      	cmp	r5, r3
 8001ca8:	da0d      	bge.n	8001cc6 <Motion_Ctrl+0xce>
 8001caa:	4d1c      	ldr	r5, [pc, #112]	@ (8001d1c <Motion_Ctrl+0x124>)
 8001cac:	e00b      	b.n	8001cc6 <Motion_Ctrl+0xce>
        Debug_Print("Warning: robot_APB is 0. Using fallback value 1.0f\r\n");
 8001cae:	481c      	ldr	r0, [pc, #112]	@ (8001d20 <Motion_Ctrl+0x128>)
 8001cb0:	f000 fbda 	bl	8002468 <Debug_Print>
        robot_APB = 1.0f;  // Prevent division by zero
 8001cb4:	f04f 547e 	mov.w	r4, #1065353216	@ 0x3f800000
 8001cb8:	e7bb      	b.n	8001c32 <Motion_Ctrl+0x3a>
        Motion_Stop(STOP_BRAKE);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f7ff fec4 	bl	8001a48 <Motion_Stop>
        return;
 8001cc0:	e028      	b.n	8001d14 <Motion_Ctrl+0x11c>
    if (speed_L1_setup > 3000) speed_L1_setup = 3000;
 8001cc2:	f640 35b8 	movw	r5, #3000	@ 0xbb8
    if (speed_L2_setup > 3000) speed_L2_setup = 3000;
 8001cc6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001cca:	429e      	cmp	r6, r3
 8001ccc:	dc04      	bgt.n	8001cd8 <Motion_Ctrl+0xe0>
    if (speed_L2_setup < -3000) speed_L2_setup = -3000;
 8001cce:	4b13      	ldr	r3, [pc, #76]	@ (8001d1c <Motion_Ctrl+0x124>)
 8001cd0:	429e      	cmp	r6, r3
 8001cd2:	da03      	bge.n	8001cdc <Motion_Ctrl+0xe4>
 8001cd4:	4e11      	ldr	r6, [pc, #68]	@ (8001d1c <Motion_Ctrl+0x124>)
 8001cd6:	e001      	b.n	8001cdc <Motion_Ctrl+0xe4>
    if (speed_L2_setup > 3000) speed_L2_setup = 3000;
 8001cd8:	f640 36b8 	movw	r6, #3000	@ 0xbb8
    if (speed_R1_setup > 3000) speed_R1_setup = 3000;
 8001cdc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001ce0:	429f      	cmp	r7, r3
 8001ce2:	dc04      	bgt.n	8001cee <Motion_Ctrl+0xf6>
    if (speed_R1_setup < -3000) speed_R1_setup = -3000;
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <Motion_Ctrl+0x124>)
 8001ce6:	429f      	cmp	r7, r3
 8001ce8:	da03      	bge.n	8001cf2 <Motion_Ctrl+0xfa>
 8001cea:	4f0c      	ldr	r7, [pc, #48]	@ (8001d1c <Motion_Ctrl+0x124>)
 8001cec:	e001      	b.n	8001cf2 <Motion_Ctrl+0xfa>
    if (speed_R1_setup > 3000) speed_R1_setup = 3000;
 8001cee:	f640 37b8 	movw	r7, #3000	@ 0xbb8
    if (speed_R2_setup > 3000) speed_R2_setup = 3000;
 8001cf2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001cf6:	4298      	cmp	r0, r3
 8001cf8:	dc04      	bgt.n	8001d04 <Motion_Ctrl+0x10c>
    if (speed_R2_setup < -3000) speed_R2_setup = -3000;
 8001cfa:	4b08      	ldr	r3, [pc, #32]	@ (8001d1c <Motion_Ctrl+0x124>)
 8001cfc:	4298      	cmp	r0, r3
 8001cfe:	da03      	bge.n	8001d08 <Motion_Ctrl+0x110>
 8001d00:	4806      	ldr	r0, [pc, #24]	@ (8001d1c <Motion_Ctrl+0x124>)
 8001d02:	e001      	b.n	8001d08 <Motion_Ctrl+0x110>
    if (speed_R2_setup > 3000) speed_R2_setup = 3000;
 8001d04:	f640 30b8 	movw	r0, #3000	@ 0xbb8
    Motion_Set_Speed(speed_L1_setup, speed_L2_setup, speed_R1_setup, speed_R2_setup);
 8001d08:	b203      	sxth	r3, r0
 8001d0a:	b23a      	sxth	r2, r7
 8001d0c:	b231      	sxth	r1, r6
 8001d0e:	b228      	sxth	r0, r5
 8001d10:	f7ff fe72 	bl	80019f8 <Motion_Set_Speed>
}
 8001d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d18:	447a0000 	.word	0x447a0000
 8001d1c:	fffff448 	.word	0xfffff448
 8001d20:	08010784 	.word	0x08010784

08001d24 <Motion_Handle>:



// Motion control handle, called every 10ms, mainly processing speed related data
void Motion_Handle(void)
{
 8001d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Motion_Get_Speed(&car_data);
 8001d26:	4810      	ldr	r0, [pc, #64]	@ (8001d68 <Motion_Handle+0x44>)
 8001d28:	f7ff feca 	bl	8001ac0 <Motion_Get_Speed>

    if (g_start_ctrl)
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d6c <Motion_Handle+0x48>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	b903      	cbnz	r3, 8001d34 <Motion_Handle+0x10>
    {
        Motion_Set_Pwm(motor_data.speed_pwm[0], motor_data.speed_pwm[1],
        		motor_data.speed_pwm[2], motor_data.speed_pwm[3]);
    }
}
 8001d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        Motion_Set_Pwm(motor_data.speed_pwm[0], motor_data.speed_pwm[1],
 8001d34:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <Motion_Handle+0x4c>)
 8001d36:	691f      	ldr	r7, [r3, #16]
 8001d38:	695c      	ldr	r4, [r3, #20]
        		motor_data.speed_pwm[2], motor_data.speed_pwm[3]);
 8001d3a:	699d      	ldr	r5, [r3, #24]
        Motion_Set_Pwm(motor_data.speed_pwm[0], motor_data.speed_pwm[1],
 8001d3c:	69d8      	ldr	r0, [r3, #28]
 8001d3e:	f7ff fc63 	bl	8001608 <__aeabi_f2iz>
 8001d42:	b206      	sxth	r6, r0
 8001d44:	4628      	mov	r0, r5
 8001d46:	f7ff fc5f 	bl	8001608 <__aeabi_f2iz>
 8001d4a:	b205      	sxth	r5, r0
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f7ff fc5b 	bl	8001608 <__aeabi_f2iz>
 8001d52:	b204      	sxth	r4, r0
 8001d54:	4638      	mov	r0, r7
 8001d56:	f7ff fc57 	bl	8001608 <__aeabi_f2iz>
 8001d5a:	4633      	mov	r3, r6
 8001d5c:	462a      	mov	r2, r5
 8001d5e:	4621      	mov	r1, r4
 8001d60:	b200      	sxth	r0, r0
 8001d62:	f7ff fe11 	bl	8001988 <Motion_Set_Pwm>
}
 8001d66:	e7e4      	b.n	8001d32 <Motion_Handle+0xe>
 8001d68:	20000264 	.word	0x20000264
 8001d6c:	2000026a 	.word	0x2000026a
 8001d70:	2000023c 	.word	0x2000023c

08001d74 <Handle_Velocity_4>:

void Handle_Velocity_4(int m1, int m2, int m3, int m4)
{
 8001d74:	b570      	push	{r4, r5, r6, lr}
 8001d76:	460c      	mov	r4, r1
 8001d78:	4616      	mov	r6, r2
 8001d7a:	461d      	mov	r5, r3
    Motor_Set_Pwm(MOTOR_ID_M1, -m1); // if needed
 8001d7c:	4241      	negs	r1, r0
 8001d7e:	b209      	sxth	r1, r1
 8001d80:	2000      	movs	r0, #0
 8001d82:	f000 f953 	bl	800202c <Motor_Set_Pwm>
    Motor_Set_Pwm(MOTOR_ID_M2, -m2);
 8001d86:	4261      	negs	r1, r4
 8001d88:	b209      	sxth	r1, r1
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	f000 f94e 	bl	800202c <Motor_Set_Pwm>
    Motor_Set_Pwm(MOTOR_ID_M3, m3);
 8001d90:	b231      	sxth	r1, r6
 8001d92:	2002      	movs	r0, #2
 8001d94:	f000 f94a 	bl	800202c <Motor_Set_Pwm>
    Motor_Set_Pwm(MOTOR_ID_M4, m4);
 8001d98:	b229      	sxth	r1, r5
 8001d9a:	2003      	movs	r0, #3
 8001d9c:	f000 f946 	bl	800202c <Motor_Set_Pwm>
}
 8001da0:	bd70      	pop	{r4, r5, r6, pc}
	...

08001da4 <Handle_Directional>:
//  - "STP" => All wheels = 0
//
// speed is the "base speed" (e.g., 1200). Diagonals double that for only 2 wheels.
//------------------------------------------------------------------------------
void Handle_Directional(const char* direction, int speed)
{
 8001da4:	b570      	push	{r4, r5, r6, lr}
 8001da6:	4606      	mov	r6, r0
 8001da8:	460c      	mov	r4, r1
    int w1 = 0, w2 = 0, w3 = 0, w4 = 0;  // Wheel speeds

    // Optional debug
    Debug_Print("Handle_Directional: %s | SPEED=%d\r\n", direction, speed);
 8001daa:	460a      	mov	r2, r1
 8001dac:	4601      	mov	r1, r0
 8001dae:	4837      	ldr	r0, [pc, #220]	@ (8001e8c <Handle_Directional+0xe8>)
 8001db0:	f000 fb5a 	bl	8002468 <Debug_Print>

    if (strcmp(direction, "FWD") == 0)
 8001db4:	4936      	ldr	r1, [pc, #216]	@ (8001e90 <Handle_Directional+0xec>)
 8001db6:	4630      	mov	r0, r6
 8001db8:	f7fe fa7e 	bl	80002b8 <strcmp>
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d062      	beq.n	8001e86 <Handle_Directional+0xe2>
    {
        // Forward: all wheels at +speed
        w1 = speed; w2 = speed; w3 = speed; w4 = speed;
    }
    else if (strcmp(direction, "BWD") == 0)
 8001dc0:	4934      	ldr	r1, [pc, #208]	@ (8001e94 <Handle_Directional+0xf0>)
 8001dc2:	4630      	mov	r0, r6
 8001dc4:	f7fe fa78 	bl	80002b8 <strcmp>
 8001dc8:	b9a0      	cbnz	r0, 8001df4 <Handle_Directional+0x50>
    {
        // Backward: all wheels at -speed
        w1 = -speed; w2 = -speed; w3 = -speed; w4 = -speed;
 8001dca:	4264      	negs	r4, r4
 8001dcc:	4625      	mov	r5, r4
        Debug_Print("Unknown directional command: '%s'\r\n", direction);
        return;
    }

    // Now apply the speeds to each wheel
    Motor_Set_Pwm(MOTOR_ID_M1, w1);
 8001dce:	b22d      	sxth	r5, r5
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f000 f92a 	bl	800202c <Motor_Set_Pwm>
    Motor_Set_Pwm(MOTOR_ID_M2, w2);
 8001dd8:	b224      	sxth	r4, r4
 8001dda:	4621      	mov	r1, r4
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f000 f925 	bl	800202c <Motor_Set_Pwm>
    Motor_Set_Pwm(MOTOR_ID_M3, w3);
 8001de2:	4621      	mov	r1, r4
 8001de4:	2002      	movs	r0, #2
 8001de6:	f000 f921 	bl	800202c <Motor_Set_Pwm>
    Motor_Set_Pwm(MOTOR_ID_M4, w4);
 8001dea:	4629      	mov	r1, r5
 8001dec:	2003      	movs	r0, #3
 8001dee:	f000 f91d 	bl	800202c <Motor_Set_Pwm>
}
 8001df2:	bd70      	pop	{r4, r5, r6, pc}
    else if (strcmp(direction, "LFT") == 0)
 8001df4:	4928      	ldr	r1, [pc, #160]	@ (8001e98 <Handle_Directional+0xf4>)
 8001df6:	4630      	mov	r0, r6
 8001df8:	f7fe fa5e 	bl	80002b8 <strcmp>
 8001dfc:	b908      	cbnz	r0, 8001e02 <Handle_Directional+0x5e>
        w1 = -speed; w2 = speed;  w3 = speed;  w4 = -speed;
 8001dfe:	4265      	negs	r5, r4
 8001e00:	e7e5      	b.n	8001dce <Handle_Directional+0x2a>
    else if (strcmp(direction, "RGT") == 0)
 8001e02:	4926      	ldr	r1, [pc, #152]	@ (8001e9c <Handle_Directional+0xf8>)
 8001e04:	4630      	mov	r0, r6
 8001e06:	f7fe fa57 	bl	80002b8 <strcmp>
 8001e0a:	b910      	cbnz	r0, 8001e12 <Handle_Directional+0x6e>
        w1 = speed;  w2 = -speed; w3 = -speed; w4 = speed;
 8001e0c:	4625      	mov	r5, r4
 8001e0e:	4264      	negs	r4, r4
 8001e10:	e7dd      	b.n	8001dce <Handle_Directional+0x2a>
    else if (strcmp(direction, "FDL") == 0)
 8001e12:	4923      	ldr	r1, [pc, #140]	@ (8001ea0 <Handle_Directional+0xfc>)
 8001e14:	4630      	mov	r0, r6
 8001e16:	f7fe fa4f 	bl	80002b8 <strcmp>
 8001e1a:	4605      	mov	r5, r0
 8001e1c:	b908      	cbnz	r0, 8001e22 <Handle_Directional+0x7e>
        w2 = 2 * speed;
 8001e1e:	0064      	lsls	r4, r4, #1
        w3 = 2 * speed;
 8001e20:	e7d5      	b.n	8001dce <Handle_Directional+0x2a>
    else if (strcmp(direction, "FDR") == 0)
 8001e22:	4920      	ldr	r1, [pc, #128]	@ (8001ea4 <Handle_Directional+0x100>)
 8001e24:	4630      	mov	r0, r6
 8001e26:	f7fe fa47 	bl	80002b8 <strcmp>
 8001e2a:	b910      	cbnz	r0, 8001e32 <Handle_Directional+0x8e>
        w1 = 2 * speed;
 8001e2c:	0065      	lsls	r5, r4, #1
    int w1 = 0, w2 = 0, w3 = 0, w4 = 0;  // Wheel speeds
 8001e2e:	4604      	mov	r4, r0
 8001e30:	e7cd      	b.n	8001dce <Handle_Directional+0x2a>
    else if (strcmp(direction, "BDL") == 0)
 8001e32:	491d      	ldr	r1, [pc, #116]	@ (8001ea8 <Handle_Directional+0x104>)
 8001e34:	4630      	mov	r0, r6
 8001e36:	f7fe fa3f 	bl	80002b8 <strcmp>
 8001e3a:	4605      	mov	r5, r0
 8001e3c:	b918      	cbnz	r0, 8001e46 <Handle_Directional+0xa2>
        w2 = -2 * speed;
 8001e3e:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
 8001e42:	0064      	lsls	r4, r4, #1
        w3 = -2 * speed;
 8001e44:	e7c3      	b.n	8001dce <Handle_Directional+0x2a>
    else if (strcmp(direction, "BDR") == 0)
 8001e46:	4919      	ldr	r1, [pc, #100]	@ (8001eac <Handle_Directional+0x108>)
 8001e48:	4630      	mov	r0, r6
 8001e4a:	f7fe fa35 	bl	80002b8 <strcmp>
 8001e4e:	b920      	cbnz	r0, 8001e5a <Handle_Directional+0xb6>
        w1 = -2 * speed;
 8001e50:	ebc4 75c4 	rsb	r5, r4, r4, lsl #31
 8001e54:	006d      	lsls	r5, r5, #1
    int w1 = 0, w2 = 0, w3 = 0, w4 = 0;  // Wheel speeds
 8001e56:	4604      	mov	r4, r0
 8001e58:	e7b9      	b.n	8001dce <Handle_Directional+0x2a>
    else if (strcmp(direction, "STP") == 0 || strcmp(direction, "BRK") == 0)
 8001e5a:	4915      	ldr	r1, [pc, #84]	@ (8001eb0 <Handle_Directional+0x10c>)
 8001e5c:	4630      	mov	r0, r6
 8001e5e:	f7fe fa2b 	bl	80002b8 <strcmp>
 8001e62:	b120      	cbz	r0, 8001e6e <Handle_Directional+0xca>
 8001e64:	4913      	ldr	r1, [pc, #76]	@ (8001eb4 <Handle_Directional+0x110>)
 8001e66:	4630      	mov	r0, r6
 8001e68:	f7fe fa26 	bl	80002b8 <strcmp>
 8001e6c:	b930      	cbnz	r0, 8001e7c <Handle_Directional+0xd8>
        Debug_Print("Handle_Directional: Hard stop\r\n");
 8001e6e:	4812      	ldr	r0, [pc, #72]	@ (8001eb8 <Handle_Directional+0x114>)
 8001e70:	f000 fafa 	bl	8002468 <Debug_Print>
        Motor_Stop(1);
 8001e74:	2001      	movs	r0, #1
 8001e76:	f000 f8c3 	bl	8002000 <Motor_Stop>
        return;
 8001e7a:	e7ba      	b.n	8001df2 <Handle_Directional+0x4e>
        Debug_Print("Unknown directional command: '%s'\r\n", direction);
 8001e7c:	4631      	mov	r1, r6
 8001e7e:	480f      	ldr	r0, [pc, #60]	@ (8001ebc <Handle_Directional+0x118>)
 8001e80:	f000 faf2 	bl	8002468 <Debug_Print>
        return;
 8001e84:	e7b5      	b.n	8001df2 <Handle_Directional+0x4e>
        w1 = speed; w2 = speed; w3 = speed; w4 = speed;
 8001e86:	4625      	mov	r5, r4
 8001e88:	e7a1      	b.n	8001dce <Handle_Directional+0x2a>
 8001e8a:	bf00      	nop
 8001e8c:	080107bc 	.word	0x080107bc
 8001e90:	080107e0 	.word	0x080107e0
 8001e94:	080107e4 	.word	0x080107e4
 8001e98:	080107e8 	.word	0x080107e8
 8001e9c:	080107ec 	.word	0x080107ec
 8001ea0:	080107f0 	.word	0x080107f0
 8001ea4:	080107f4 	.word	0x080107f4
 8001ea8:	080107f8 	.word	0x080107f8
 8001eac:	080107fc 	.word	0x080107fc
 8001eb0:	08010800 	.word	0x08010800
 8001eb4:	08010804 	.word	0x08010804
 8001eb8:	08010808 	.word	0x08010808
 8001ebc:	08010828 	.word	0x08010828

08001ec0 <Handle_Info_Encoders>:


void Handle_Info_Encoders()
{
 8001ec0:	b500      	push	{lr}
 8001ec2:	b0a9      	sub	sp, #164	@ 0xa4

#define PRINTF_BUFFER_SIZE 128  // Adjust size as needed

char printf_buffer[PRINTF_BUFFER_SIZE];  // Declare this at the top of the function
    int32_t enc[4] = {0};
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9304      	str	r3, [sp, #16]
 8001ec8:	9305      	str	r3, [sp, #20]
 8001eca:	9306      	str	r3, [sp, #24]
 8001ecc:	9307      	str	r3, [sp, #28]
    Encoder_Get_ALL(enc);
 8001ece:	a804      	add	r0, sp, #16
 8001ed0:	f7ff fc7a 	bl	80017c8 <Encoder_Get_ALL>

    snprintf(printf_buffer, PRINTF_BUFFER_SIZE, "Encoder Values: M1=%ld, M2=%ld, M3=%ld, M4=%ld\r\n",
 8001ed4:	9b07      	ldr	r3, [sp, #28]
 8001ed6:	9302      	str	r3, [sp, #8]
 8001ed8:	9b06      	ldr	r3, [sp, #24]
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	9b05      	ldr	r3, [sp, #20]
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	9b04      	ldr	r3, [sp, #16]
 8001ee2:	4a09      	ldr	r2, [pc, #36]	@ (8001f08 <Handle_Info_Encoders+0x48>)
 8001ee4:	2180      	movs	r1, #128	@ 0x80
 8001ee6:	a808      	add	r0, sp, #32
 8001ee8:	f00b f936 	bl	800d158 <sniprintf>
                enc[0], enc[1], enc[2], enc[3]);
    HAL_UART_Transmit(&huart1, (uint8_t *)printf_buffer, strlen(printf_buffer), HAL_MAX_DELAY);
 8001eec:	a808      	add	r0, sp, #32
 8001eee:	f7fe f9ed 	bl	80002cc <strlen>
 8001ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef6:	b282      	uxth	r2, r0
 8001ef8:	a908      	add	r1, sp, #32
 8001efa:	4804      	ldr	r0, [pc, #16]	@ (8001f0c <Handle_Info_Encoders+0x4c>)
 8001efc:	f009 f982 	bl	800b204 <HAL_UART_Transmit>

}
 8001f00:	b029      	add	sp, #164	@ 0xa4
 8001f02:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f06:	bf00      	nop
 8001f08:	0801084c 	.word	0x0801084c
 8001f0c:	200005fc 	.word	0x200005fc

08001f10 <Handle_Info_ResetEncoders>:

void Handle_Info_ResetEncoders()
{
 8001f10:	b508      	push	{r3, lr}
    Debug_Print("Handle_Information: Reset encoder values to 0.\r\n");
 8001f12:	4811      	ldr	r0, [pc, #68]	@ (8001f58 <Handle_Info_ResetEncoders+0x48>)
 8001f14:	f000 faa8 	bl	8002468 <Debug_Print>

    // Reset all hardware timers for encoders
    __HAL_TIM_SET_COUNTER(&htim2, 0);  // Timer for Encoder 1
 8001f18:	4b10      	ldr	r3, [pc, #64]	@ (8001f5c <Handle_Info_ResetEncoders+0x4c>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim3, 0);  // Timer for Encoder 2
 8001f20:	4a0f      	ldr	r2, [pc, #60]	@ (8001f60 <Handle_Info_ResetEncoders+0x50>)
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim4, 0);  // Timer for Encoder 3
 8001f26:	4a0f      	ldr	r2, [pc, #60]	@ (8001f64 <Handle_Info_ResetEncoders+0x54>)
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim5, 0);  // Timer for Encoder 4
 8001f2c:	4a0e      	ldr	r2, [pc, #56]	@ (8001f68 <Handle_Info_ResetEncoders+0x58>)
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	6253      	str	r3, [r2, #36]	@ 0x24

    // Also reset the software variables
    for (int i = 0; i < 4; i++) {
 8001f32:	e00a      	b.n	8001f4a <Handle_Info_ResetEncoders+0x3a>
        g_Encoder_All_Now[i] = 0;
 8001f34:	2200      	movs	r2, #0
 8001f36:	490d      	ldr	r1, [pc, #52]	@ (8001f6c <Handle_Info_ResetEncoders+0x5c>)
 8001f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        g_Encoder_All_Offset[i] = 0;
 8001f3c:	490c      	ldr	r1, [pc, #48]	@ (8001f70 <Handle_Info_ResetEncoders+0x60>)
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        g_Encoder_All_Last[i] = 0;
 8001f42:	490c      	ldr	r1, [pc, #48]	@ (8001f74 <Handle_Info_ResetEncoders+0x64>)
 8001f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 4; i++) {
 8001f48:	3301      	adds	r3, #1
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	ddf2      	ble.n	8001f34 <Handle_Info_ResetEncoders+0x24>
    }

    Debug_Print("Encoders reset complete.\r\n");
 8001f4e:	480a      	ldr	r0, [pc, #40]	@ (8001f78 <Handle_Info_ResetEncoders+0x68>)
 8001f50:	f000 fa8a 	bl	8002468 <Debug_Print>
}
 8001f54:	bd08      	pop	{r3, pc}
 8001f56:	bf00      	nop
 8001f58:	08010880 	.word	0x08010880
 8001f5c:	200004e4 	.word	0x200004e4
 8001f60:	2000049c 	.word	0x2000049c
 8001f64:	20000454 	.word	0x20000454
 8001f68:	2000040c 	.word	0x2000040c
 8001f6c:	2000028c 	.word	0x2000028c
 8001f70:	2000026c 	.word	0x2000026c
 8001f74:	2000027c 	.word	0x2000027c
 8001f78:	080108b4 	.word	0x080108b4

08001f7c <Handle_Info_Battery>:



void Handle_Info_Battery()
{
 8001f7c:	b508      	push	{r3, lr}
	Debug_Print("Handle_Information: Get battery status.\r\n");
 8001f7e:	4803      	ldr	r0, [pc, #12]	@ (8001f8c <Handle_Info_Battery+0x10>)
 8001f80:	f000 fa72 	bl	8002468 <Debug_Print>
	// Get the current state of the battery
	Debug_Print("Battery status: nn%\r\n");
 8001f84:	4802      	ldr	r0, [pc, #8]	@ (8001f90 <Handle_Info_Battery+0x14>)
 8001f86:	f000 fa6f 	bl	8002468 <Debug_Print>
}
 8001f8a:	bd08      	pop	{r3, pc}
 8001f8c:	080108d0 	.word	0x080108d0
 8001f90:	080108fc 	.word	0x080108fc

08001f94 <Motor_Ignore_Dead_Zone>:


// Ignore PWM dead band
static int16_t Motor_Ignore_Dead_Zone(int16_t pulse)
{
    if (pulse > 0) return pulse + MOTOR_IGNORE_PULSE;
 8001f94:	2800      	cmp	r0, #0
 8001f96:	dc03      	bgt.n	8001fa0 <Motor_Ignore_Dead_Zone+0xc>
    if (pulse < 0) return pulse - MOTOR_IGNORE_PULSE;
 8001f98:	2800      	cmp	r0, #0
 8001f9a:	db05      	blt.n	8001fa8 <Motor_Ignore_Dead_Zone+0x14>
    return 0;
 8001f9c:	2000      	movs	r0, #0
}
 8001f9e:	4770      	bx	lr
    if (pulse > 0) return pulse + MOTOR_IGNORE_PULSE;
 8001fa0:	f200 50dc 	addw	r0, r0, #1500	@ 0x5dc
 8001fa4:	b200      	sxth	r0, r0
 8001fa6:	4770      	bx	lr
    if (pulse < 0) return pulse - MOTOR_IGNORE_PULSE;
 8001fa8:	f2a0 50dc 	subw	r0, r0, #1500	@ 0x5dc
 8001fac:	b200      	sxth	r0, r0
 8001fae:	4770      	bx	lr

08001fb0 <Motor_Init>:

// The PWM port of the motor is initialized
void Motor_Init(void)
{
 8001fb0:	b510      	push	{r4, lr}
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001fb2:	4c11      	ldr	r4, [pc, #68]	@ (8001ff8 <Motor_Init+0x48>)
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	f006 f906 	bl	80081c8 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001fbc:	2104      	movs	r1, #4
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f008 f9c6 	bl	800a350 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001fc4:	2108      	movs	r1, #8
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	f008 f9c2 	bl	800a350 <HAL_TIMEx_PWMN_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001fcc:	210c      	movs	r1, #12
 8001fce:	4620      	mov	r0, r4
 8001fd0:	f006 f8fa 	bl	80081c8 <HAL_TIM_PWM_Start>
    
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001fd4:	4c09      	ldr	r4, [pc, #36]	@ (8001ffc <Motor_Init+0x4c>)
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f006 f8f5 	bl	80081c8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001fde:	2104      	movs	r1, #4
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	f006 f8f1 	bl	80081c8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001fe6:	2108      	movs	r1, #8
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f006 f8ed 	bl	80081c8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001fee:	210c      	movs	r1, #12
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	f006 f8e9 	bl	80081c8 <HAL_TIM_PWM_Start>
}
 8001ff6:	bd10      	pop	{r4, pc}
 8001ff8:	2000052c 	.word	0x2000052c
 8001ffc:	200003c4 	.word	0x200003c4

08002000 <Motor_Stop>:

// All motors stopped
void Motor_Stop(uint8_t brake)
{
    if (brake != 0) brake = 1;
 8002000:	4603      	mov	r3, r0
 8002002:	b100      	cbz	r0, 8002006 <Motor_Stop+0x6>
 8002004:	2301      	movs	r3, #1
    PWM_M1_A = brake * MOTOR_MAX_PULSE;
 8002006:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800200a:	fb02 f303 	mul.w	r3, r2, r3
 800200e:	4a06      	ldr	r2, [pc, #24]	@ (8002028 <Motor_Stop+0x28>)
 8002010:	6353      	str	r3, [r2, #52]	@ 0x34
    PWM_M1_B = brake * MOTOR_MAX_PULSE;
 8002012:	6393      	str	r3, [r2, #56]	@ 0x38
    PWM_M2_A = brake * MOTOR_MAX_PULSE;
 8002014:	63d3      	str	r3, [r2, #60]	@ 0x3c
    PWM_M2_B = brake * MOTOR_MAX_PULSE;
 8002016:	6413      	str	r3, [r2, #64]	@ 0x40
    PWM_M3_A = brake * MOTOR_MAX_PULSE;
 8002018:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 800201c:	6413      	str	r3, [r2, #64]	@ 0x40
    PWM_M3_B = brake * MOTOR_MAX_PULSE;
 800201e:	6353      	str	r3, [r2, #52]	@ 0x34
    PWM_M4_A = brake * MOTOR_MAX_PULSE;
 8002020:	6393      	str	r3, [r2, #56]	@ 0x38
    PWM_M4_B = brake * MOTOR_MAX_PULSE;
 8002022:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40013400 	.word	0x40013400

0800202c <Motor_Set_Pwm>:

// Set motor speed, speed:± (3600-MOTOR_IGNORE_PULSE), 0 indicates stop
void Motor_Set_Pwm(uint8_t id, int16_t speed)
{
 800202c:	b510      	push	{r4, lr}
 800202e:	4604      	mov	r4, r0
	speed = -speed;     // to account for reverse wiring of the motor.
 8002030:	4248      	negs	r0, r1

    int16_t pulse = Motor_Ignore_Dead_Zone(speed);
 8002032:	b200      	sxth	r0, r0
 8002034:	f7ff ffae 	bl	8001f94 <Motor_Ignore_Dead_Zone>
    // Limit input
    if (pulse >= MOTOR_MAX_PULSE)
 8002038:	f5b0 6f61 	cmp.w	r0, #3600	@ 0xe10
 800203c:	da04      	bge.n	8002048 <Motor_Set_Pwm+0x1c>
        pulse = MOTOR_MAX_PULSE;
    if (pulse <= -MOTOR_MAX_PULSE)
 800203e:	f510 6f61 	cmn.w	r0, #3600	@ 0xe10
 8002042:	dc03      	bgt.n	800204c <Motor_Set_Pwm+0x20>
        pulse = -MOTOR_MAX_PULSE;
 8002044:	4820      	ldr	r0, [pc, #128]	@ (80020c8 <Motor_Set_Pwm+0x9c>)
 8002046:	e001      	b.n	800204c <Motor_Set_Pwm+0x20>
        pulse = MOTOR_MAX_PULSE;
 8002048:	f44f 6061 	mov.w	r0, #3600	@ 0xe10

    switch (id)
 800204c:	2c03      	cmp	r4, #3
 800204e:	d80b      	bhi.n	8002068 <Motor_Set_Pwm+0x3c>
 8002050:	e8df f004 	tbb	[pc, r4]
 8002054:	2d201102 	.word	0x2d201102
    {
    case MOTOR_ID_M1:
    {
        pulse = -pulse;
 8002058:	4240      	negs	r0, r0
 800205a:	b200      	sxth	r0, r0
        if (pulse >= 0)
 800205c:	2800      	cmp	r0, #0
 800205e:	db04      	blt.n	800206a <Motor_Set_Pwm+0x3e>
        {
            PWM_M1_A = pulse;
 8002060:	4b1a      	ldr	r3, [pc, #104]	@ (80020cc <Motor_Set_Pwm+0xa0>)
 8002062:	6358      	str	r0, [r3, #52]	@ 0x34
            PWM_M1_B = 0;
 8002064:	2200      	movs	r2, #0
 8002066:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    default:
        break;
    }
}
 8002068:	bd10      	pop	{r4, pc}
            PWM_M1_A = 0;
 800206a:	4b18      	ldr	r3, [pc, #96]	@ (80020cc <Motor_Set_Pwm+0xa0>)
 800206c:	2200      	movs	r2, #0
 800206e:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M1_B = -pulse;
 8002070:	4240      	negs	r0, r0
 8002072:	6398      	str	r0, [r3, #56]	@ 0x38
 8002074:	e7f8      	b.n	8002068 <Motor_Set_Pwm+0x3c>
        pulse = -pulse;
 8002076:	4240      	negs	r0, r0
 8002078:	b200      	sxth	r0, r0
        if (pulse >= 0)
 800207a:	2800      	cmp	r0, #0
 800207c:	db04      	blt.n	8002088 <Motor_Set_Pwm+0x5c>
            PWM_M2_A = pulse;
 800207e:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <Motor_Set_Pwm+0xa0>)
 8002080:	63d8      	str	r0, [r3, #60]	@ 0x3c
            PWM_M2_B = 0;
 8002082:	2200      	movs	r2, #0
 8002084:	641a      	str	r2, [r3, #64]	@ 0x40
 8002086:	e7ef      	b.n	8002068 <Motor_Set_Pwm+0x3c>
            PWM_M2_A = 0;
 8002088:	4b10      	ldr	r3, [pc, #64]	@ (80020cc <Motor_Set_Pwm+0xa0>)
 800208a:	2200      	movs	r2, #0
 800208c:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M2_B = -pulse;
 800208e:	4240      	negs	r0, r0
 8002090:	6418      	str	r0, [r3, #64]	@ 0x40
 8002092:	e7e9      	b.n	8002068 <Motor_Set_Pwm+0x3c>
        if (pulse >= 0)
 8002094:	2800      	cmp	r0, #0
 8002096:	db04      	blt.n	80020a2 <Motor_Set_Pwm+0x76>
            PWM_M3_A = pulse;
 8002098:	4b0d      	ldr	r3, [pc, #52]	@ (80020d0 <Motor_Set_Pwm+0xa4>)
 800209a:	6418      	str	r0, [r3, #64]	@ 0x40
            PWM_M3_B = 0;
 800209c:	2200      	movs	r2, #0
 800209e:	635a      	str	r2, [r3, #52]	@ 0x34
 80020a0:	e7e2      	b.n	8002068 <Motor_Set_Pwm+0x3c>
            PWM_M3_A = 0;
 80020a2:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <Motor_Set_Pwm+0xa4>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	641a      	str	r2, [r3, #64]	@ 0x40
            PWM_M3_B = -pulse;
 80020a8:	4240      	negs	r0, r0
 80020aa:	6358      	str	r0, [r3, #52]	@ 0x34
 80020ac:	e7dc      	b.n	8002068 <Motor_Set_Pwm+0x3c>
        if (pulse >= 0)
 80020ae:	2800      	cmp	r0, #0
 80020b0:	db04      	blt.n	80020bc <Motor_Set_Pwm+0x90>
            PWM_M4_A = pulse;
 80020b2:	4b07      	ldr	r3, [pc, #28]	@ (80020d0 <Motor_Set_Pwm+0xa4>)
 80020b4:	6398      	str	r0, [r3, #56]	@ 0x38
            PWM_M4_B = 0;
 80020b6:	2200      	movs	r2, #0
 80020b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020ba:	e7d5      	b.n	8002068 <Motor_Set_Pwm+0x3c>
            PWM_M4_A = 0;
 80020bc:	4b04      	ldr	r3, [pc, #16]	@ (80020d0 <Motor_Set_Pwm+0xa4>)
 80020be:	2200      	movs	r2, #0
 80020c0:	639a      	str	r2, [r3, #56]	@ 0x38
            PWM_M4_B = -pulse;
 80020c2:	4240      	negs	r0, r0
 80020c4:	63d8      	str	r0, [r3, #60]	@ 0x3c
}
 80020c6:	e7cf      	b.n	8002068 <Motor_Set_Pwm+0x3c>
 80020c8:	fffff1f0 	.word	0xfffff1f0
 80020cc:	40013400 	.word	0x40013400
 80020d0:	40012c00 	.word	0x40012c00

080020d4 <Motor_Hard_Brake>:


void Motor_Hard_Brake(void)
{
 80020d4:	b510      	push	{r4, lr}
    // Stop PWM output on all channels
    PWM_M1_A = 0;
 80020d6:	4a13      	ldr	r2, [pc, #76]	@ (8002124 <Motor_Hard_Brake+0x50>)
 80020d8:	2300      	movs	r3, #0
 80020da:	6353      	str	r3, [r2, #52]	@ 0x34
    PWM_M1_B = 0;
 80020dc:	6393      	str	r3, [r2, #56]	@ 0x38
    PWM_M2_A = 0;
 80020de:	63d3      	str	r3, [r2, #60]	@ 0x3c
    PWM_M2_B = 0;
 80020e0:	6413      	str	r3, [r2, #64]	@ 0x40
    PWM_M3_A = 0;
 80020e2:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 80020e6:	6413      	str	r3, [r2, #64]	@ 0x40
    PWM_M3_B = 0;
 80020e8:	6353      	str	r3, [r2, #52]	@ 0x34
    PWM_M4_A = 0;
 80020ea:	6393      	str	r3, [r2, #56]	@ 0x38
    PWM_M4_B = 0;
 80020ec:	63d3      	str	r3, [r2, #60]	@ 0x3c

    // Engage braking by shorting motor terminals
    HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_SET);
 80020ee:	4c0e      	ldr	r4, [pc, #56]	@ (8002128 <Motor_Hard_Brake+0x54>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	2140      	movs	r1, #64	@ 0x40
 80020f4:	4620      	mov	r0, r4
 80020f6:	f003 f916 	bl	8005326 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
 80020fa:	2201      	movs	r2, #1
 80020fc:	2180      	movs	r1, #128	@ 0x80
 80020fe:	4620      	mov	r0, r4
 8002100:	f003 f911 	bl	8005326 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(MOTOR_IN3_GPIO_Port, MOTOR_IN3_Pin, GPIO_PIN_SET);
 8002104:	2201      	movs	r2, #1
 8002106:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800210a:	4620      	mov	r0, r4
 800210c:	f003 f90b 	bl	8005326 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_IN4_GPIO_Port, MOTOR_IN4_Pin, GPIO_PIN_SET);
 8002110:	2201      	movs	r2, #1
 8002112:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002116:	4620      	mov	r0, r4
 8002118:	f003 f905 	bl	8005326 <HAL_GPIO_WritePin>

    Debug_Print("Hard Brake Engaged\r\n");
 800211c:	4803      	ldr	r0, [pc, #12]	@ (800212c <Motor_Hard_Brake+0x58>)
 800211e:	f000 f9a3 	bl	8002468 <Debug_Print>
}
 8002122:	bd10      	pop	{r4, pc}
 8002124:	40013400 	.word	0x40013400
 8002128:	40011000 	.word	0x40011000
 800212c:	08010914 	.word	0x08010914

08002130 <PID_Param_Init>:


// Example Initialize PID parameters 初始化PID参数
void PID_Param_Init(void)
{
    for (int i = 0; i < MAX_MOTOR; i++)
 8002130:	2100      	movs	r1, #0
 8002132:	2903      	cmp	r1, #3
 8002134:	dc18      	bgt.n	8002168 <PID_Param_Init+0x38>
{
 8002136:	b410      	push	{r4}
    {
        pid_motor[i].target_val = 0.0;
 8002138:	4c0c      	ldr	r4, [pc, #48]	@ (800216c <PID_Param_Init+0x3c>)
 800213a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800213e:	0098      	lsls	r0, r3, #2
 8002140:	1823      	adds	r3, r4, r0
 8002142:	2200      	movs	r2, #0
 8002144:	5022      	str	r2, [r4, r0]
        pid_motor[i].pwm_output = 0.0;
 8002146:	605a      	str	r2, [r3, #4]
        pid_motor[i].err = 0.0;
 8002148:	615a      	str	r2, [r3, #20]
        pid_motor[i].err_last = 0.0;
 800214a:	619a      	str	r2, [r3, #24]
        pid_motor[i].err_next = 0.0;
 800214c:	61da      	str	r2, [r3, #28]
        pid_motor[i].integral = 0.0;
 800214e:	621a      	str	r2, [r3, #32]

        pid_motor[i].Kp = PID_DEF_KP;
 8002150:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002154:	609a      	str	r2, [r3, #8]
        pid_motor[i].Ki = PID_DEF_KI;
 8002156:	4a06      	ldr	r2, [pc, #24]	@ (8002170 <PID_Param_Init+0x40>)
 8002158:	60da      	str	r2, [r3, #12]
        pid_motor[i].Kd = PID_DEF_KD;
 800215a:	4a06      	ldr	r2, [pc, #24]	@ (8002174 <PID_Param_Init+0x44>)
 800215c:	611a      	str	r2, [r3, #16]
    for (int i = 0; i < MAX_MOTOR; i++)
 800215e:	3101      	adds	r1, #1
 8002160:	2903      	cmp	r1, #3
 8002162:	dde9      	ble.n	8002138 <PID_Param_Init+0x8>
    }
}
 8002164:	bc10      	pop	{r4}
 8002166:	4770      	bx	lr
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	200002a8 	.word	0x200002a8
 8002170:	3dcccccd 	.word	0x3dcccccd
 8002174:	3d4ccccd 	.word	0x3d4ccccd

08002178 <PID_Incre_Calc>:

// Incremental PID calculation formula
float PID_Incre_Calc(motor_pid_t *pid, float actual_val, int motor_index)

{
 8002178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800217c:	b089      	sub	sp, #36	@ 0x24
 800217e:	4604      	mov	r4, r0
 8002180:	4688      	mov	r8, r1
 8002182:	9207      	str	r2, [sp, #28]
    pid->err = pid->target_val - actual_val;
 8002184:	f8d0 9000 	ldr.w	r9, [r0]
 8002188:	4648      	mov	r0, r9
 800218a:	f7fe ff6d 	bl	8001068 <__aeabi_fsub>
 800218e:	4605      	mov	r5, r0
 8002190:	6160      	str	r0, [r4, #20]
    pid->pwm_output += pid->Kp * (pid->err - pid->err_next)
 8002192:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8002196:	68a7      	ldr	r7, [r4, #8]
 8002198:	69e6      	ldr	r6, [r4, #28]
 800219a:	4631      	mov	r1, r6
 800219c:	f7fe ff64 	bl	8001068 <__aeabi_fsub>
 80021a0:	4601      	mov	r1, r0
 80021a2:	4638      	mov	r0, r7
 80021a4:	f7ff f86a 	bl	800127c <__aeabi_fmul>
 80021a8:	4607      	mov	r7, r0
                    + pid->Ki * pid->err
 80021aa:	68e1      	ldr	r1, [r4, #12]
 80021ac:	4628      	mov	r0, r5
 80021ae:	f7ff f865 	bl	800127c <__aeabi_fmul>
 80021b2:	4601      	mov	r1, r0
 80021b4:	4638      	mov	r0, r7
 80021b6:	f7fe ff59 	bl	800106c <__addsf3>
 80021ba:	4607      	mov	r7, r0
                    + pid->Kd * (pid->err - 2 * pid->err_next + pid->err_last);
 80021bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80021c0:	4631      	mov	r1, r6
 80021c2:	4630      	mov	r0, r6
 80021c4:	f7fe ff52 	bl	800106c <__addsf3>
 80021c8:	4601      	mov	r1, r0
 80021ca:	4628      	mov	r0, r5
 80021cc:	f7fe ff4c 	bl	8001068 <__aeabi_fsub>
 80021d0:	69a1      	ldr	r1, [r4, #24]
 80021d2:	f7fe ff4b 	bl	800106c <__addsf3>
 80021d6:	4601      	mov	r1, r0
 80021d8:	4658      	mov	r0, fp
 80021da:	f7ff f84f 	bl	800127c <__aeabi_fmul>
 80021de:	4601      	mov	r1, r0
 80021e0:	4638      	mov	r0, r7
 80021e2:	f7fe ff43 	bl	800106c <__addsf3>
 80021e6:	4601      	mov	r1, r0
    pid->pwm_output += pid->Kp * (pid->err - pid->err_next)
 80021e8:	4650      	mov	r0, sl
 80021ea:	f7fe ff3f 	bl	800106c <__addsf3>
 80021ee:	6060      	str	r0, [r4, #4]
    pid->err_last = pid->err_next;
 80021f0:	61a6      	str	r6, [r4, #24]
    pid->err_next = pid->err;
 80021f2:	61e5      	str	r5, [r4, #28]

    // Limit PWM output within safe range
    if (pid->pwm_output > MOTOR_MAX_PULSE)  pid->pwm_output = MOTOR_MAX_PULSE;
 80021f4:	491d      	ldr	r1, [pc, #116]	@ (800226c <PID_Incre_Calc+0xf4>)
 80021f6:	f7ff f9fd 	bl	80015f4 <__aeabi_fcmpgt>
 80021fa:	b108      	cbz	r0, 8002200 <PID_Incre_Calc+0x88>
 80021fc:	4b1b      	ldr	r3, [pc, #108]	@ (800226c <PID_Incre_Calc+0xf4>)
 80021fe:	6063      	str	r3, [r4, #4]
    if (pid->pwm_output < -MOTOR_MAX_PULSE) pid->pwm_output = -MOTOR_MAX_PULSE;
 8002200:	491b      	ldr	r1, [pc, #108]	@ (8002270 <PID_Incre_Calc+0xf8>)
 8002202:	6860      	ldr	r0, [r4, #4]
 8002204:	f7ff f9d8 	bl	80015b8 <__aeabi_fcmplt>
 8002208:	b108      	cbz	r0, 800220e <PID_Incre_Calc+0x96>
 800220a:	4b19      	ldr	r3, [pc, #100]	@ (8002270 <PID_Incre_Calc+0xf8>)
 800220c:	6063      	str	r3, [r4, #4]

    // Debug print to monitor PID calculations
    static uint32_t loop_counter = 0;
    loop_counter++;
 800220e:	4a19      	ldr	r2, [pc, #100]	@ (8002274 <PID_Incre_Calc+0xfc>)
 8002210:	6813      	ldr	r3, [r2, #0]
 8002212:	3301      	adds	r3, #1
 8002214:	6013      	str	r3, [r2, #0]
    if (loop_counter >= 10)  // Adjust this value for desired frequency
 8002216:	2b09      	cmp	r3, #9
 8002218:	d807      	bhi.n	800222a <PID_Incre_Calc+0xb2>
                    pid->pwm_output);
        loop_counter = 0;
    }

    // Ensure correct type casting to int32_t for motor control
    return (int32_t)pid->pwm_output;
 800221a:	6860      	ldr	r0, [r4, #4]
 800221c:	f7ff f9f4 	bl	8001608 <__aeabi_f2iz>
 8002220:	f7fe ffd8 	bl	80011d4 <__aeabi_i2f>
}
 8002224:	b009      	add	sp, #36	@ 0x24
 8002226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    pid->pwm_output);
 800222a:	f8d4 a004 	ldr.w	sl, [r4, #4]
        Debug_Print("PID Debug: Motor=%d, Target=%.2f, Actual=%.2f, Error=%.2f, PWM=%.2f\r\n",
 800222e:	4648      	mov	r0, r9
 8002230:	f7fe fb96 	bl	8000960 <__aeabi_f2d>
 8002234:	4606      	mov	r6, r0
 8002236:	460f      	mov	r7, r1
 8002238:	4650      	mov	r0, sl
 800223a:	f7fe fb91 	bl	8000960 <__aeabi_f2d>
 800223e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002242:	4628      	mov	r0, r5
 8002244:	f7fe fb8c 	bl	8000960 <__aeabi_f2d>
 8002248:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800224c:	4640      	mov	r0, r8
 800224e:	f7fe fb87 	bl	8000960 <__aeabi_f2d>
 8002252:	e9cd 0100 	strd	r0, r1, [sp]
 8002256:	4632      	mov	r2, r6
 8002258:	463b      	mov	r3, r7
 800225a:	9907      	ldr	r1, [sp, #28]
 800225c:	4806      	ldr	r0, [pc, #24]	@ (8002278 <PID_Incre_Calc+0x100>)
 800225e:	f000 f903 	bl	8002468 <Debug_Print>
        loop_counter = 0;
 8002262:	4b04      	ldr	r3, [pc, #16]	@ (8002274 <PID_Incre_Calc+0xfc>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e7d7      	b.n	800221a <PID_Incre_Calc+0xa2>
 800226a:	bf00      	nop
 800226c:	45610000 	.word	0x45610000
 8002270:	c5610000 	.word	0xc5610000
 8002274:	200002a4 	.word	0x200002a4
 8002278:	0801092c 	.word	0x0801092c

0800227c <PID_Calc_Motor>:



// PID Calculates the output value
void PID_Calc_Motor(motor_data_t* motor)
{
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	4606      	mov	r6, r0
    for (int i = 0; i < MAX_MOTOR; i++)
 8002280:	2400      	movs	r4, #0
 8002282:	e00e      	b.n	80022a2 <PID_Calc_Motor+0x26>
        // Clamp the output before converting to int32_t
        if (pwm > MOTOR_MAX_PULSE) pwm = MOTOR_MAX_PULSE;
        if (pwm < -MOTOR_MAX_PULSE) pwm = -MOTOR_MAX_PULSE;

        // Convert to int32_t for motor driver
        motor->speed_pwm[i] = (int32_t)pwm;
 8002284:	4628      	mov	r0, r5
 8002286:	f7ff f9bf 	bl	8001608 <__aeabi_f2iz>
 800228a:	f7fe ffa3 	bl	80011d4 <__aeabi_i2f>
 800228e:	1d23      	adds	r3, r4, #4
 8002290:	f846 0023 	str.w	r0, [r6, r3, lsl #2]

        static uint32_t loop_counter = 0;
        loop_counter++;
 8002294:	4a16      	ldr	r2, [pc, #88]	@ (80022f0 <PID_Calc_Motor+0x74>)
 8002296:	6813      	ldr	r3, [r2, #0]
 8002298:	3301      	adds	r3, #1
 800229a:	6013      	str	r3, [r2, #0]
        if (loop_counter >= 10)
 800229c:	2b09      	cmp	r3, #9
 800229e:	d81a      	bhi.n	80022d6 <PID_Calc_Motor+0x5a>
    for (int i = 0; i < MAX_MOTOR; i++)
 80022a0:	3401      	adds	r4, #1
 80022a2:	2c03      	cmp	r4, #3
 80022a4:	dc23      	bgt.n	80022ee <PID_Calc_Motor+0x72>
        float pwm = PID_Incre_Calc(&pid_motor[i], motor->speed_mm_s[i], i);
 80022a6:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 80022aa:	4622      	mov	r2, r4
 80022ac:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80022b0:	4b10      	ldr	r3, [pc, #64]	@ (80022f4 <PID_Calc_Motor+0x78>)
 80022b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80022b6:	f7ff ff5f 	bl	8002178 <PID_Incre_Calc>
 80022ba:	4605      	mov	r5, r0
        if (pwm > MOTOR_MAX_PULSE) pwm = MOTOR_MAX_PULSE;
 80022bc:	490e      	ldr	r1, [pc, #56]	@ (80022f8 <PID_Calc_Motor+0x7c>)
 80022be:	f7ff f999 	bl	80015f4 <__aeabi_fcmpgt>
 80022c2:	b100      	cbz	r0, 80022c6 <PID_Calc_Motor+0x4a>
 80022c4:	4d0c      	ldr	r5, [pc, #48]	@ (80022f8 <PID_Calc_Motor+0x7c>)
        if (pwm < -MOTOR_MAX_PULSE) pwm = -MOTOR_MAX_PULSE;
 80022c6:	490d      	ldr	r1, [pc, #52]	@ (80022fc <PID_Calc_Motor+0x80>)
 80022c8:	4628      	mov	r0, r5
 80022ca:	f7ff f975 	bl	80015b8 <__aeabi_fcmplt>
 80022ce:	2800      	cmp	r0, #0
 80022d0:	d0d8      	beq.n	8002284 <PID_Calc_Motor+0x8>
 80022d2:	4d0a      	ldr	r5, [pc, #40]	@ (80022fc <PID_Calc_Motor+0x80>)
 80022d4:	e7d6      	b.n	8002284 <PID_Calc_Motor+0x8>
        {
            Debug_Print("Calling PID_Calc_Motor: Motor %d, Speed mm/s: %ld \r\n", i, motor->speed_pwm[i]);
 80022d6:	f7fe fb43 	bl	8000960 <__aeabi_f2d>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4621      	mov	r1, r4
 80022e0:	4807      	ldr	r0, [pc, #28]	@ (8002300 <PID_Calc_Motor+0x84>)
 80022e2:	f000 f8c1 	bl	8002468 <Debug_Print>
            loop_counter = 0;
 80022e6:	4b02      	ldr	r3, [pc, #8]	@ (80022f0 <PID_Calc_Motor+0x74>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	e7d8      	b.n	80022a0 <PID_Calc_Motor+0x24>
        }
    }
}
 80022ee:	bd70      	pop	{r4, r5, r6, pc}
 80022f0:	200002a0 	.word	0x200002a0
 80022f4:	200002a8 	.word	0x200002a8
 80022f8:	45610000 	.word	0x45610000
 80022fc:	c5610000 	.word	0xc5610000
 8002300:	08010974 	.word	0x08010974

08002304 <PID_Set_Motor_Parm>:



// Set PID parameters, motor_id=4 set all, =0123 Set PID parameters of the corresponding motor
void PID_Set_Motor_Parm(uint8_t motor_id, float kp, float ki, float kd)
{
 8002304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	4680      	mov	r8, r0
 800230c:	468a      	mov	sl, r1
 800230e:	4616      	mov	r6, r2
 8002310:	461f      	mov	r7, r3
	static uint32_t loop_counter = 0;
	loop_counter++;
 8002312:	4a35      	ldr	r2, [pc, #212]	@ (80023e8 <PID_Set_Motor_Parm+0xe4>)
 8002314:	6813      	ldr	r3, [r2, #0]
 8002316:	3301      	adds	r3, #1
 8002318:	6013      	str	r3, [r2, #0]
	if (loop_counter >= 10) {
 800231a:	2b09      	cmp	r3, #9
 800231c:	d805      	bhi.n	800232a <PID_Set_Motor_Parm+0x26>
		Debug_Print("PID_Set_Motor_Parm called: motor_id=%d, kp=%.2f, ki=%.2f, kd=%.2f\r\n",
				                motor_id, kp, ki, kd);
	    loop_counter = 0;
	}

    if (motor_id > MAX_MOTOR) return;
 800231e:	f1b8 0f04 	cmp.w	r8, #4
 8002322:	d83e      	bhi.n	80023a2 <PID_Set_Motor_Parm+0x9e>

    if (motor_id == MAX_MOTOR)
 8002324:	d140      	bne.n	80023a8 <PID_Set_Motor_Parm+0xa4>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 8002326:	2400      	movs	r4, #0
 8002328:	e039      	b.n	800239e <PID_Set_Motor_Parm+0x9a>
		Debug_Print("PID_Set_Motor_Parm called: motor_id=%d, kp=%.2f, ki=%.2f, kd=%.2f\r\n",
 800232a:	4608      	mov	r0, r1
 800232c:	f7fe fb18 	bl	8000960 <__aeabi_f2d>
 8002330:	4604      	mov	r4, r0
 8002332:	460d      	mov	r5, r1
 8002334:	4638      	mov	r0, r7
 8002336:	f7fe fb13 	bl	8000960 <__aeabi_f2d>
 800233a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800233e:	4630      	mov	r0, r6
 8002340:	f7fe fb0e 	bl	8000960 <__aeabi_f2d>
 8002344:	e9cd 0100 	strd	r0, r1, [sp]
 8002348:	4622      	mov	r2, r4
 800234a:	462b      	mov	r3, r5
 800234c:	4641      	mov	r1, r8
 800234e:	4827      	ldr	r0, [pc, #156]	@ (80023ec <PID_Set_Motor_Parm+0xe8>)
 8002350:	f000 f88a 	bl	8002468 <Debug_Print>
	    loop_counter = 0;
 8002354:	4b24      	ldr	r3, [pc, #144]	@ (80023e8 <PID_Set_Motor_Parm+0xe4>)
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	e7e0      	b.n	800231e <PID_Set_Motor_Parm+0x1a>
        {
            pid_motor[i].Kp = kp;
 800235c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8002360:	4d23      	ldr	r5, [pc, #140]	@ (80023f0 <PID_Set_Motor_Parm+0xec>)
 8002362:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
 8002366:	f8cc a008 	str.w	sl, [ip, #8]
            pid_motor[i].Ki = ki;
 800236a:	f8cc 600c 	str.w	r6, [ip, #12]
            pid_motor[i].Kd = kd;
 800236e:	f8cc 7010 	str.w	r7, [ip, #16]
            Debug_Print(" -> motor[%d] Kp=%.2f, Ki=%.2f, Kd=%.2f\r\n",
 8002372:	4650      	mov	r0, sl
 8002374:	f7fe faf4 	bl	8000960 <__aeabi_f2d>
 8002378:	4680      	mov	r8, r0
 800237a:	4689      	mov	r9, r1
 800237c:	4638      	mov	r0, r7
 800237e:	f7fe faef 	bl	8000960 <__aeabi_f2d>
 8002382:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002386:	4630      	mov	r0, r6
 8002388:	f7fe faea 	bl	8000960 <__aeabi_f2d>
 800238c:	e9cd 0100 	strd	r0, r1, [sp]
 8002390:	4642      	mov	r2, r8
 8002392:	464b      	mov	r3, r9
 8002394:	4621      	mov	r1, r4
 8002396:	4817      	ldr	r0, [pc, #92]	@ (80023f4 <PID_Set_Motor_Parm+0xf0>)
 8002398:	f000 f866 	bl	8002468 <Debug_Print>
        for (int i = 0; i < MAX_MOTOR; i++)
 800239c:	3401      	adds	r4, #1
 800239e:	2c03      	cmp	r4, #3
 80023a0:	dddc      	ble.n	800235c <PID_Set_Motor_Parm+0x58>
                                    motor_id,
                                    pid_motor[motor_id].Kp,
                                    pid_motor[motor_id].Ki,
                                    pid_motor[motor_id].Kd);
    }
}
 80023a2:	b004      	add	sp, #16
 80023a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        pid_motor[motor_id].Kp = kp;
 80023a8:	eb08 02c8 	add.w	r2, r8, r8, lsl #3
 80023ac:	4b10      	ldr	r3, [pc, #64]	@ (80023f0 <PID_Set_Motor_Parm+0xec>)
 80023ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80023b2:	f8c3 a008 	str.w	sl, [r3, #8]
        pid_motor[motor_id].Ki = ki;
 80023b6:	60de      	str	r6, [r3, #12]
        pid_motor[motor_id].Kd = kd;
 80023b8:	611f      	str	r7, [r3, #16]
        Debug_Print(" -> motor[%d] Kp=%.2f, Ki=%.2f, Kd=%.2f\r\n",
 80023ba:	4650      	mov	r0, sl
 80023bc:	f7fe fad0 	bl	8000960 <__aeabi_f2d>
 80023c0:	4604      	mov	r4, r0
 80023c2:	460d      	mov	r5, r1
 80023c4:	4638      	mov	r0, r7
 80023c6:	f7fe facb 	bl	8000960 <__aeabi_f2d>
 80023ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80023ce:	4630      	mov	r0, r6
 80023d0:	f7fe fac6 	bl	8000960 <__aeabi_f2d>
 80023d4:	e9cd 0100 	strd	r0, r1, [sp]
 80023d8:	4622      	mov	r2, r4
 80023da:	462b      	mov	r3, r5
 80023dc:	4641      	mov	r1, r8
 80023de:	4805      	ldr	r0, [pc, #20]	@ (80023f4 <PID_Set_Motor_Parm+0xf0>)
 80023e0:	f000 f842 	bl	8002468 <Debug_Print>
 80023e4:	e7dd      	b.n	80023a2 <PID_Set_Motor_Parm+0x9e>
 80023e6:	bf00      	nop
 80023e8:	2000029c 	.word	0x2000029c
 80023ec:	080109ac 	.word	0x080109ac
 80023f0:	200002a8 	.word	0x200002a8
 80023f4:	080109f0 	.word	0x080109f0

080023f8 <PID_Clear_Motor>:

// Clearing PID Data  清除PID数据
void PID_Clear_Motor(uint8_t motor_id)
{
    if (motor_id > MAX_MOTOR) return;
 80023f8:	2804      	cmp	r0, #4
 80023fa:	d80b      	bhi.n	8002414 <PID_Clear_Motor+0x1c>

    if (motor_id == MAX_MOTOR)
 80023fc:	d01a      	beq.n	8002434 <PID_Clear_Motor+0x3c>
            pid_motor[i].integral = 0.0;
        }
    }
    else
    {
        pid_motor[motor_id].pwm_output = 0.0;
 80023fe:	490e      	ldr	r1, [pc, #56]	@ (8002438 <PID_Clear_Motor+0x40>)
 8002400:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8002404:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8002408:	2200      	movs	r2, #0
 800240a:	605a      	str	r2, [r3, #4]
        pid_motor[motor_id].err = 0.0;
 800240c:	615a      	str	r2, [r3, #20]
        pid_motor[motor_id].err_last = 0.0;
 800240e:	619a      	str	r2, [r3, #24]
        pid_motor[motor_id].err_next = 0.0;
 8002410:	61da      	str	r2, [r3, #28]
        pid_motor[motor_id].integral = 0.0;
 8002412:	621a      	str	r2, [r3, #32]
    }
}
 8002414:	4770      	bx	lr
            pid_motor[i].pwm_output = 0.0;
 8002416:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 800241a:	4b07      	ldr	r3, [pc, #28]	@ (8002438 <PID_Clear_Motor+0x40>)
 800241c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002420:	2200      	movs	r2, #0
 8002422:	605a      	str	r2, [r3, #4]
            pid_motor[i].err = 0.0;
 8002424:	615a      	str	r2, [r3, #20]
            pid_motor[i].err_last = 0.0;
 8002426:	619a      	str	r2, [r3, #24]
            pid_motor[i].err_next = 0.0;
 8002428:	61da      	str	r2, [r3, #28]
            pid_motor[i].integral = 0.0;
 800242a:	621a      	str	r2, [r3, #32]
        for (int i = 0; i < MAX_MOTOR; i++)
 800242c:	3101      	adds	r1, #1
 800242e:	2903      	cmp	r1, #3
 8002430:	ddf1      	ble.n	8002416 <PID_Clear_Motor+0x1e>
 8002432:	4770      	bx	lr
 8002434:	2100      	movs	r1, #0
 8002436:	e7fa      	b.n	800242e <PID_Clear_Motor+0x36>
 8002438:	200002a8 	.word	0x200002a8

0800243c <PID_Set_Motor_Target>:

// Set PID target speed, unit: mm/s
void PID_Set_Motor_Target(uint8_t motor_id, float target)
{
    if (motor_id > MAX_MOTOR) return;
 800243c:	2804      	cmp	r0, #4
 800243e:	d805      	bhi.n	800244c <PID_Set_Motor_Target+0x10>

    if (motor_id == MAX_MOTOR)
 8002440:	d00e      	beq.n	8002460 <PID_Set_Motor_Target+0x24>
            pid_motor[i].target_val = target;
        }
    }
    else
    {
        pid_motor[motor_id].target_val = target;
 8002442:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8002446:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <PID_Set_Motor_Target+0x28>)
 8002448:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    }
}
 800244c:	4770      	bx	lr
            pid_motor[i].target_val = target;
 800244e:	eb03 00c3 	add.w	r0, r3, r3, lsl #3
 8002452:	4a04      	ldr	r2, [pc, #16]	@ (8002464 <PID_Set_Motor_Target+0x28>)
 8002454:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
        for (int i = 0; i < MAX_MOTOR; i++)
 8002458:	3301      	adds	r3, #1
 800245a:	2b03      	cmp	r3, #3
 800245c:	ddf7      	ble.n	800244e <PID_Set_Motor_Target+0x12>
 800245e:	4770      	bx	lr
 8002460:	2300      	movs	r3, #0
 8002462:	e7fa      	b.n	800245a <PID_Set_Motor_Target+0x1e>
 8002464:	200002a8 	.word	0x200002a8

08002468 <Debug_Print>:
static volatile uint8_t uart_cmd_index = 0;
uint8_t RxTemp = 0;

// This function is called by Debug_Print macro if DEBUG=1
void Debug_Print(const char* format, ...)
{
 8002468:	b40f      	push	{r0, r1, r2, r3}
 800246a:	b500      	push	{lr}
 800246c:	b0a3      	sub	sp, #140	@ 0x8c
 800246e:	ab24      	add	r3, sp, #144	@ 0x90
 8002470:	f853 2b04 	ldr.w	r2, [r3], #4
    char buffer[128];
    va_list args;
    va_start(args, format);
 8002474:	9301      	str	r3, [sp, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8002476:	2180      	movs	r1, #128	@ 0x80
 8002478:	a802      	add	r0, sp, #8
 800247a:	f00a ff65 	bl	800d348 <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800247e:	a802      	add	r0, sp, #8
 8002480:	f7fd ff24 	bl	80002cc <strlen>
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
 8002488:	b282      	uxth	r2, r0
 800248a:	a902      	add	r1, sp, #8
 800248c:	4803      	ldr	r0, [pc, #12]	@ (800249c <Debug_Print+0x34>)
 800248e:	f008 feb9 	bl	800b204 <HAL_UART_Transmit>
}
 8002492:	b023      	add	sp, #140	@ 0x8c
 8002494:	f85d eb04 	ldr.w	lr, [sp], #4
 8002498:	b004      	add	sp, #16
 800249a:	4770      	bx	lr
 800249c:	200005fc 	.word	0x200005fc

080024a0 <USART1_Init>:

// Example init function for USART1
void USART1_Init(void)
{
 80024a0:	b508      	push	{r3, lr}
    HAL_UART_Receive_IT(&huart1, &RxTemp, 1);
 80024a2:	2201      	movs	r2, #1
 80024a4:	4902      	ldr	r1, [pc, #8]	@ (80024b0 <USART1_Init+0x10>)
 80024a6:	4803      	ldr	r0, [pc, #12]	@ (80024b4 <USART1_Init+0x14>)
 80024a8:	f009 fefb 	bl	800c2a2 <HAL_UART_Receive_IT>
}
 80024ac:	bd08      	pop	{r3, pc}
 80024ae:	bf00      	nop
 80024b0:	20000338 	.word	0x20000338
 80024b4:	200005fc 	.word	0x200005fc

080024b8 <ProcessCommandLine>:


void ProcessCommandLine(char *cmd)
{
 80024b8:	b570      	push	{r4, r5, r6, lr}
 80024ba:	b08e      	sub	sp, #56	@ 0x38
 80024bc:	4605      	mov	r5, r0
    // Let’s read up to 5 tokens: e.g. "D FWD 1200"
    char token1[8], token2[8], token3[8], token4[8], token5[8];
    memset(token1, 0, sizeof(token1));
 80024be:	2300      	movs	r3, #0
 80024c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80024c2:	930d      	str	r3, [sp, #52]	@ 0x34
    memset(token2, 0, sizeof(token2));
 80024c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80024c6:	930b      	str	r3, [sp, #44]	@ 0x2c
    memset(token3, 0, sizeof(token3));
 80024c8:	aa08      	add	r2, sp, #32
 80024ca:	9308      	str	r3, [sp, #32]
 80024cc:	9309      	str	r3, [sp, #36]	@ 0x24
    memset(token4, 0, sizeof(token4));
 80024ce:	a906      	add	r1, sp, #24
 80024d0:	9306      	str	r3, [sp, #24]
 80024d2:	9307      	str	r3, [sp, #28]
    memset(token5, 0, sizeof(token5));
 80024d4:	ac04      	add	r4, sp, #16
 80024d6:	9304      	str	r3, [sp, #16]
 80024d8:	9305      	str	r3, [sp, #20]

    // Example: V 200 200 200 200
    // will parse into token1="V", token2="200", token3="200", ...
    int count = sscanf(cmd, "%7s %7s %7s %7s %7s",
 80024da:	9402      	str	r4, [sp, #8]
 80024dc:	9101      	str	r1, [sp, #4]
 80024de:	9200      	str	r2, [sp, #0]
 80024e0:	ab0a      	add	r3, sp, #40	@ 0x28
 80024e2:	aa0c      	add	r2, sp, #48	@ 0x30
 80024e4:	4932      	ldr	r1, [pc, #200]	@ (80025b0 <ProcessCommandLine+0xf8>)
 80024e6:	f00a fe6b 	bl	800d1c0 <siscanf>
                       token1, token2, token3, token4, token5);

    if (count < 1) {
 80024ea:	1e04      	subs	r4, r0, #0
 80024ec:	dd1f      	ble.n	800252e <ProcessCommandLine+0x76>
        Debug_Print("Invalid command: %s\r\n", cmd);
        return;
    }

    if (strcmp(token1, "V") == 0)
 80024ee:	4931      	ldr	r1, [pc, #196]	@ (80025b4 <ProcessCommandLine+0xfc>)
 80024f0:	a80c      	add	r0, sp, #48	@ 0x30
 80024f2:	f7fd fee1 	bl	80002b8 <strcmp>
 80024f6:	bb18      	cbnz	r0, 8002540 <ProcessCommandLine+0x88>
    {
        // V <vx> <vy> <vz>
        if (count < 4) {
 80024f8:	2c03      	cmp	r4, #3
 80024fa:	dd1d      	ble.n	8002538 <ProcessCommandLine+0x80>
            Debug_Print("Not enough args for velocity command\r\n");
            return;
        }
        int vx = atoi(token2);
 80024fc:	a80a      	add	r0, sp, #40	@ 0x28
 80024fe:	f009 ffad 	bl	800c45c <atoi>
 8002502:	4604      	mov	r4, r0
        int vy = atoi(token3);
 8002504:	a808      	add	r0, sp, #32
 8002506:	f009 ffa9 	bl	800c45c <atoi>
 800250a:	4605      	mov	r5, r0
        int vz = atoi(token4);
 800250c:	a806      	add	r0, sp, #24
 800250e:	f009 ffa5 	bl	800c45c <atoi>
 8002512:	4606      	mov	r6, r0

        Debug_Print("Calling Motion_Ctrl with vx=%d, vy=%d, vz=%d\r\n", vx, vy, vz);
 8002514:	4603      	mov	r3, r0
 8002516:	462a      	mov	r2, r5
 8002518:	4621      	mov	r1, r4
 800251a:	4827      	ldr	r0, [pc, #156]	@ (80025b8 <ProcessCommandLine+0x100>)
 800251c:	f7ff ffa4 	bl	8002468 <Debug_Print>
        Motion_Ctrl(vx, vy, vz);
 8002520:	b232      	sxth	r2, r6
 8002522:	b229      	sxth	r1, r5
 8002524:	b220      	sxth	r0, r4
 8002526:	f7ff fb67 	bl	8001bf8 <Motion_Ctrl>
    }
    else
    {
        Debug_Print("Unknown command type '%s'\r\n", token1);
    }
}
 800252a:	b00e      	add	sp, #56	@ 0x38
 800252c:	bd70      	pop	{r4, r5, r6, pc}
        Debug_Print("Invalid command: %s\r\n", cmd);
 800252e:	4629      	mov	r1, r5
 8002530:	4822      	ldr	r0, [pc, #136]	@ (80025bc <ProcessCommandLine+0x104>)
 8002532:	f7ff ff99 	bl	8002468 <Debug_Print>
        return;
 8002536:	e7f8      	b.n	800252a <ProcessCommandLine+0x72>
            Debug_Print("Not enough args for velocity command\r\n");
 8002538:	4821      	ldr	r0, [pc, #132]	@ (80025c0 <ProcessCommandLine+0x108>)
 800253a:	f7ff ff95 	bl	8002468 <Debug_Print>
            return;
 800253e:	e7f4      	b.n	800252a <ProcessCommandLine+0x72>
    else if (strcmp(token1, "D") == 0)
 8002540:	4920      	ldr	r1, [pc, #128]	@ (80025c4 <ProcessCommandLine+0x10c>)
 8002542:	a80c      	add	r0, sp, #48	@ 0x30
 8002544:	f7fd feb8 	bl	80002b8 <strcmp>
 8002548:	b968      	cbnz	r0, 8002566 <ProcessCommandLine+0xae>
        if (count < 3) {
 800254a:	2c02      	cmp	r4, #2
 800254c:	dd07      	ble.n	800255e <ProcessCommandLine+0xa6>
        int speed = atoi(token3);  // e.g. 1200
 800254e:	a808      	add	r0, sp, #32
 8002550:	f009 ff84 	bl	800c45c <atoi>
 8002554:	4601      	mov	r1, r0
        Handle_Directional(direction, speed);
 8002556:	a80a      	add	r0, sp, #40	@ 0x28
 8002558:	f7ff fc24 	bl	8001da4 <Handle_Directional>
 800255c:	e7e5      	b.n	800252a <ProcessCommandLine+0x72>
            Debug_Print("Not enough args for direction command\r\n");
 800255e:	481a      	ldr	r0, [pc, #104]	@ (80025c8 <ProcessCommandLine+0x110>)
 8002560:	f7ff ff82 	bl	8002468 <Debug_Print>
            return;
 8002564:	e7e1      	b.n	800252a <ProcessCommandLine+0x72>
    else if (strcmp(token1, "I") == 0)
 8002566:	4919      	ldr	r1, [pc, #100]	@ (80025cc <ProcessCommandLine+0x114>)
 8002568:	a80c      	add	r0, sp, #48	@ 0x30
 800256a:	f7fd fea5 	bl	80002b8 <strcmp>
 800256e:	b9d0      	cbnz	r0, 80025a6 <ProcessCommandLine+0xee>
        if (count < 2) {
 8002570:	2c01      	cmp	r4, #1
 8002572:	dd0c      	ble.n	800258e <ProcessCommandLine+0xd6>
        if (strcmp(token2, "ENC") == 0) {
 8002574:	4916      	ldr	r1, [pc, #88]	@ (80025d0 <ProcessCommandLine+0x118>)
 8002576:	a80a      	add	r0, sp, #40	@ 0x28
 8002578:	f7fd fe9e 	bl	80002b8 <strcmp>
 800257c:	b158      	cbz	r0, 8002596 <ProcessCommandLine+0xde>
        } else if (strcmp(token2, "BAT") == 0) {
 800257e:	4915      	ldr	r1, [pc, #84]	@ (80025d4 <ProcessCommandLine+0x11c>)
 8002580:	a80a      	add	r0, sp, #40	@ 0x28
 8002582:	f7fd fe99 	bl	80002b8 <strcmp>
 8002586:	b948      	cbnz	r0, 800259c <ProcessCommandLine+0xe4>
            Handle_Info_Battery();
 8002588:	f7ff fcf8 	bl	8001f7c <Handle_Info_Battery>
 800258c:	e7cd      	b.n	800252a <ProcessCommandLine+0x72>
            Debug_Print("Not enough args for info command\r\n");
 800258e:	4812      	ldr	r0, [pc, #72]	@ (80025d8 <ProcessCommandLine+0x120>)
 8002590:	f7ff ff6a 	bl	8002468 <Debug_Print>
            return;
 8002594:	e7c9      	b.n	800252a <ProcessCommandLine+0x72>
            Handle_Info_Encoders();
 8002596:	f7ff fc93 	bl	8001ec0 <Handle_Info_Encoders>
 800259a:	e7c6      	b.n	800252a <ProcessCommandLine+0x72>
            Debug_Print("Unknown info query: %s\r\n", token2);
 800259c:	a90a      	add	r1, sp, #40	@ 0x28
 800259e:	480f      	ldr	r0, [pc, #60]	@ (80025dc <ProcessCommandLine+0x124>)
 80025a0:	f7ff ff62 	bl	8002468 <Debug_Print>
 80025a4:	e7c1      	b.n	800252a <ProcessCommandLine+0x72>
        Debug_Print("Unknown command type '%s'\r\n", token1);
 80025a6:	a90c      	add	r1, sp, #48	@ 0x30
 80025a8:	480d      	ldr	r0, [pc, #52]	@ (80025e0 <ProcessCommandLine+0x128>)
 80025aa:	f7ff ff5d 	bl	8002468 <Debug_Print>
 80025ae:	e7bc      	b.n	800252a <ProcessCommandLine+0x72>
 80025b0:	08010a1c 	.word	0x08010a1c
 80025b4:	08010a48 	.word	0x08010a48
 80025b8:	08010a74 	.word	0x08010a74
 80025bc:	08010a30 	.word	0x08010a30
 80025c0:	08010a4c 	.word	0x08010a4c
 80025c4:	08010aa4 	.word	0x08010aa4
 80025c8:	08010aa8 	.word	0x08010aa8
 80025cc:	08010ad0 	.word	0x08010ad0
 80025d0:	08010af8 	.word	0x08010af8
 80025d4:	08010afc 	.word	0x08010afc
 80025d8:	08010ad4 	.word	0x08010ad4
 80025dc:	08010b00 	.word	0x08010b00
 80025e0:	08010b1c 	.word	0x08010b1c

080025e4 <HAL_UART_RxCpltCallback>:


// UART RX callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025e4:	b538      	push	{r3, r4, r5, lr}
    if (huart->Instance == USART1) {
 80025e6:	6802      	ldr	r2, [r0, #0]
 80025e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002658 <HAL_UART_RxCpltCallback+0x74>)
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d000      	beq.n	80025f0 <HAL_UART_RxCpltCallback+0xc>
                uart_cmd_index = 0;
            }
        }
        HAL_UART_Receive_IT(&huart1, &RxTemp, 1);
    }
}
 80025ee:	bd38      	pop	{r3, r4, r5, pc}
        Debug_Print("UART Rx: 0x%02X ('%c')\r\n",
 80025f0:	4b1a      	ldr	r3, [pc, #104]	@ (800265c <HAL_UART_RxCpltCallback+0x78>)
 80025f2:	7819      	ldrb	r1, [r3, #0]
                    RxTemp, (RxTemp >= 32 && RxTemp <= 126) ? RxTemp : '.');
 80025f4:	f1a1 0320 	sub.w	r3, r1, #32
 80025f8:	b2db      	uxtb	r3, r3
        Debug_Print("UART Rx: 0x%02X ('%c')\r\n",
 80025fa:	2b5e      	cmp	r3, #94	@ 0x5e
 80025fc:	d917      	bls.n	800262e <HAL_UART_RxCpltCallback+0x4a>
 80025fe:	222e      	movs	r2, #46	@ 0x2e
 8002600:	4817      	ldr	r0, [pc, #92]	@ (8002660 <HAL_UART_RxCpltCallback+0x7c>)
 8002602:	f7ff ff31 	bl	8002468 <Debug_Print>
        if (RxTemp == '\n' || RxTemp == '\r') {
 8002606:	4b15      	ldr	r3, [pc, #84]	@ (800265c <HAL_UART_RxCpltCallback+0x78>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b0a      	cmp	r3, #10
 800260c:	d011      	beq.n	8002632 <HAL_UART_RxCpltCallback+0x4e>
 800260e:	2b0d      	cmp	r3, #13
 8002610:	d00f      	beq.n	8002632 <HAL_UART_RxCpltCallback+0x4e>
            if (uart_cmd_index < CMD_BUFFER_SIZE - 1) {
 8002612:	4a14      	ldr	r2, [pc, #80]	@ (8002664 <HAL_UART_RxCpltCallback+0x80>)
 8002614:	7812      	ldrb	r2, [r2, #0]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	2a7e      	cmp	r2, #126	@ 0x7e
 800261a:	d819      	bhi.n	8002650 <HAL_UART_RxCpltCallback+0x6c>
                uart_cmd_buffer[uart_cmd_index++] = RxTemp;
 800261c:	4911      	ldr	r1, [pc, #68]	@ (8002664 <HAL_UART_RxCpltCallback+0x80>)
 800261e:	780a      	ldrb	r2, [r1, #0]
 8002620:	b2d0      	uxtb	r0, r2
 8002622:	3201      	adds	r2, #1
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	700a      	strb	r2, [r1, #0]
 8002628:	4a0f      	ldr	r2, [pc, #60]	@ (8002668 <HAL_UART_RxCpltCallback+0x84>)
 800262a:	5413      	strb	r3, [r2, r0]
 800262c:	e00a      	b.n	8002644 <HAL_UART_RxCpltCallback+0x60>
        Debug_Print("UART Rx: 0x%02X ('%c')\r\n",
 800262e:	460a      	mov	r2, r1
 8002630:	e7e6      	b.n	8002600 <HAL_UART_RxCpltCallback+0x1c>
            uart_cmd_buffer[uart_cmd_index] = '\0';
 8002632:	4c0c      	ldr	r4, [pc, #48]	@ (8002664 <HAL_UART_RxCpltCallback+0x80>)
 8002634:	7823      	ldrb	r3, [r4, #0]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	480b      	ldr	r0, [pc, #44]	@ (8002668 <HAL_UART_RxCpltCallback+0x84>)
 800263a:	2500      	movs	r5, #0
 800263c:	54c5      	strb	r5, [r0, r3]
            ProcessCommandLine(uart_cmd_buffer);
 800263e:	f7ff ff3b 	bl	80024b8 <ProcessCommandLine>
            uart_cmd_index = 0;
 8002642:	7025      	strb	r5, [r4, #0]
        HAL_UART_Receive_IT(&huart1, &RxTemp, 1);
 8002644:	2201      	movs	r2, #1
 8002646:	4905      	ldr	r1, [pc, #20]	@ (800265c <HAL_UART_RxCpltCallback+0x78>)
 8002648:	4808      	ldr	r0, [pc, #32]	@ (800266c <HAL_UART_RxCpltCallback+0x88>)
 800264a:	f009 fe2a 	bl	800c2a2 <HAL_UART_Receive_IT>
}
 800264e:	e7ce      	b.n	80025ee <HAL_UART_RxCpltCallback+0xa>
                uart_cmd_index = 0;
 8002650:	4b04      	ldr	r3, [pc, #16]	@ (8002664 <HAL_UART_RxCpltCallback+0x80>)
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	e7f5      	b.n	8002644 <HAL_UART_RxCpltCallback+0x60>
 8002658:	40013800 	.word	0x40013800
 800265c:	20000338 	.word	0x20000338
 8002660:	08010b38 	.word	0x08010b38
 8002664:	20000339 	.word	0x20000339
 8002668:	2000033c 	.word	0x2000033c
 800266c:	200005fc 	.word	0x200005fc

08002670 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002670:	b500      	push	{lr}
 8002672:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002674:	4b0e      	ldr	r3, [pc, #56]	@ (80026b0 <MX_DMA_Init+0x40>)
 8002676:	695a      	ldr	r2, [r3, #20]
 8002678:	f042 0201 	orr.w	r2, r2, #1
 800267c:	615a      	str	r2, [r3, #20]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	9301      	str	r3, [sp, #4]
 8002686:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002688:	2200      	movs	r2, #0
 800268a:	4611      	mov	r1, r2
 800268c:	200e      	movs	r0, #14
 800268e:	f000 ffd7 	bl	8003640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002692:	200e      	movs	r0, #14
 8002694:	f000 ffe4 	bl	8003660 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002698:	2200      	movs	r2, #0
 800269a:	4611      	mov	r1, r2
 800269c:	200f      	movs	r0, #15
 800269e:	f000 ffcf 	bl	8003640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80026a2:	200f      	movs	r0, #15
 80026a4:	f000 ffdc 	bl	8003660 <HAL_NVIC_EnableIRQ>

}
 80026a8:	b003      	add	sp, #12
 80026aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000

080026b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80026b4:	b570      	push	{r4, r5, r6, lr}
 80026b6:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	2400      	movs	r4, #0
 80026ba:	9404      	str	r4, [sp, #16]
 80026bc:	9405      	str	r4, [sp, #20]
 80026be:	9406      	str	r4, [sp, #24]
 80026c0:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c2:	4b21      	ldr	r3, [pc, #132]	@ (8002748 <MX_GPIO_Init+0x94>)
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	f042 0210 	orr.w	r2, r2, #16
 80026ca:	619a      	str	r2, [r3, #24]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	f002 0210 	and.w	r2, r2, #16
 80026d2:	9200      	str	r2, [sp, #0]
 80026d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026d6:	699a      	ldr	r2, [r3, #24]
 80026d8:	f042 0220 	orr.w	r2, r2, #32
 80026dc:	619a      	str	r2, [r3, #24]
 80026de:	699a      	ldr	r2, [r3, #24]
 80026e0:	f002 0220 	and.w	r2, r2, #32
 80026e4:	9201      	str	r2, [sp, #4]
 80026e6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	f042 0204 	orr.w	r2, r2, #4
 80026ee:	619a      	str	r2, [r3, #24]
 80026f0:	699a      	ldr	r2, [r3, #24]
 80026f2:	f002 0204 	and.w	r2, r2, #4
 80026f6:	9202      	str	r2, [sp, #8]
 80026f8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fa:	699a      	ldr	r2, [r3, #24]
 80026fc:	f042 0208 	orr.w	r2, r2, #8
 8002700:	619a      	str	r2, [r3, #24]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	9303      	str	r3, [sp, #12]
 800270a:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BEEP_Pin, GPIO_PIN_RESET);
 800270c:	4e0f      	ldr	r6, [pc, #60]	@ (800274c <MX_GPIO_Init+0x98>)
 800270e:	4622      	mov	r2, r4
 8002710:	f242 0120 	movw	r1, #8224	@ 0x2020
 8002714:	4630      	mov	r0, r6
 8002716:	f002 fe06 	bl	8005326 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin BEEP_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BEEP_Pin;
 800271a:	f242 0320 	movw	r3, #8224	@ 0x2020
 800271e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002720:	2501      	movs	r5, #1
 8002722:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2302      	movs	r3, #2
 8002728:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800272a:	a904      	add	r1, sp, #16
 800272c:	4630      	mov	r0, r6
 800272e:	f002 fc45 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8002732:	2304      	movs	r3, #4
 8002734:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002736:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002738:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 800273a:	a904      	add	r1, sp, #16
 800273c:	4804      	ldr	r0, [pc, #16]	@ (8002750 <MX_GPIO_Init+0x9c>)
 800273e:	f002 fc3d 	bl	8004fbc <HAL_GPIO_Init>

}
 8002742:	b008      	add	sp, #32
 8002744:	bd70      	pop	{r4, r5, r6, pc}
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000
 800274c:	40011000 	.word	0x40011000
 8002750:	40011400 	.word	0x40011400

08002754 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002754:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002756:	e7fe      	b.n	8002756 <Error_Handler+0x2>

08002758 <SystemClock_Config>:
{
 8002758:	b500      	push	{lr}
 800275a:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800275c:	2228      	movs	r2, #40	@ 0x28
 800275e:	2100      	movs	r1, #0
 8002760:	a806      	add	r0, sp, #24
 8002762:	f00a fdff 	bl	800d364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002766:	2300      	movs	r3, #0
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	9302      	str	r3, [sp, #8]
 800276c:	9303      	str	r3, [sp, #12]
 800276e:	9304      	str	r3, [sp, #16]
 8002770:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002772:	2201      	movs	r2, #1
 8002774:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002776:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800277a:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800277c:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800277e:	2202      	movs	r2, #2
 8002780:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002782:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002784:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002788:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800278a:	a806      	add	r0, sp, #24
 800278c:	f002 ffa2 	bl	80056d4 <HAL_RCC_OscConfig>
 8002790:	b980      	cbnz	r0, 80027b4 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002792:	230f      	movs	r3, #15
 8002794:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002796:	2102      	movs	r1, #2
 8002798:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800279a:	2300      	movs	r3, #0
 800279c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800279e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027a2:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027a4:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027a6:	a801      	add	r0, sp, #4
 80027a8:	f003 f9fa 	bl	8005ba0 <HAL_RCC_ClockConfig>
 80027ac:	b920      	cbnz	r0, 80027b8 <SystemClock_Config+0x60>
}
 80027ae:	b011      	add	sp, #68	@ 0x44
 80027b0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80027b4:	f7ff ffce 	bl	8002754 <Error_Handler>
    Error_Handler();
 80027b8:	f7ff ffcc 	bl	8002754 <Error_Handler>

080027bc <main>:
{
 80027bc:	b508      	push	{r3, lr}
  HAL_Init();
 80027be:	f000 fde9 	bl	8003394 <HAL_Init>
  SystemClock_Config();
 80027c2:	f7ff ffc9 	bl	8002758 <SystemClock_Config>
  MX_GPIO_Init();
 80027c6:	f7ff ff75 	bl	80026b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80027ca:	f7ff ff51 	bl	8002670 <MX_DMA_Init>
  MX_TIM2_Init();
 80027ce:	f000 f943 	bl	8002a58 <MX_TIM2_Init>
  MX_TIM3_Init();
 80027d2:	f000 f973 	bl	8002abc <MX_TIM3_Init>
  MX_TIM4_Init();
 80027d6:	f000 f9a3 	bl	8002b20 <MX_TIM4_Init>
  MX_TIM5_Init();
 80027da:	f000 f9d3 	bl	8002b84 <MX_TIM5_Init>
  MX_TIM1_Init();
 80027de:	f000 fb3d 	bl	8002e5c <MX_TIM1_Init>
  MX_TIM8_Init();
 80027e2:	f000 fbcb 	bl	8002f7c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80027e6:	f000 fcbf 	bl	8003168 <MX_USART1_UART_Init>
  HAL_Delay(10);  // Allow peripherals to settle
 80027ea:	200a      	movs	r0, #10
 80027ec:	f000 fe18 	bl	8003420 <HAL_Delay>
  USART1_Init();
 80027f0:	f7ff fe56 	bl	80024a0 <USART1_Init>
  HAL_Delay(10);  // Allow peripherals to settle
 80027f4:	200a      	movs	r0, #10
 80027f6:	f000 fe13 	bl	8003420 <HAL_Delay>
  Bsp_Init();
 80027fa:	f7fe ff41 	bl	8001680 <Bsp_Init>
  HAL_Delay(10);  // Allow peripherals to settle
 80027fe:	200a      	movs	r0, #10
 8002800:	f000 fe0e 	bl	8003420 <HAL_Delay>
    Bsp_Loop();
 8002804:	f7fe ff44 	bl	8001690 <Bsp_Loop>
  while (1)
 8002808:	e7fc      	b.n	8002804 <main+0x48>
	...

0800280c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800280c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800280e:	4b0e      	ldr	r3, [pc, #56]	@ (8002848 <HAL_MspInit+0x3c>)
 8002810:	699a      	ldr	r2, [r3, #24]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	619a      	str	r2, [r3, #24]
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	f002 0201 	and.w	r2, r2, #1
 800281e:	9200      	str	r2, [sp, #0]
 8002820:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	69da      	ldr	r2, [r3, #28]
 8002824:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002828:	61da      	str	r2, [r3, #28]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002834:	4a05      	ldr	r2, [pc, #20]	@ (800284c <HAL_MspInit+0x40>)
 8002836:	6853      	ldr	r3, [r2, #4]
 8002838:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800283c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002840:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002842:	b002      	add	sp, #8
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	40010000 	.word	0x40010000

08002850 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002850:	e7fe      	b.n	8002850 <NMI_Handler>

08002852 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002852:	e7fe      	b.n	8002852 <HardFault_Handler>

08002854 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002854:	e7fe      	b.n	8002854 <MemManage_Handler>

08002856 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002856:	e7fe      	b.n	8002856 <BusFault_Handler>

08002858 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002858:	e7fe      	b.n	8002858 <UsageFault_Handler>

0800285a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800285a:	4770      	bx	lr

0800285c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800285c:	4770      	bx	lr

0800285e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800285e:	4770      	bx	lr

08002860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002860:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002862:	f000 fda9 	bl	80033b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002866:	bd08      	pop	{r3, pc}

08002868 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002868:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800286a:	4802      	ldr	r0, [pc, #8]	@ (8002874 <DMA1_Channel4_IRQHandler+0xc>)
 800286c:	f001 fc1a 	bl	80040a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002870:	bd08      	pop	{r3, pc}
 8002872:	bf00      	nop
 8002874:	200005b8 	.word	0x200005b8

08002878 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002878:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800287a:	4802      	ldr	r0, [pc, #8]	@ (8002884 <DMA1_Channel5_IRQHandler+0xc>)
 800287c:	f001 fc12 	bl	80040a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002880:	bd08      	pop	{r3, pc}
 8002882:	bf00      	nop
 8002884:	20000574 	.word	0x20000574

08002888 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002888:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800288a:	4802      	ldr	r0, [pc, #8]	@ (8002894 <USART1_IRQHandler+0xc>)
 800288c:	f009 fab0 	bl	800bdf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002890:	bd08      	pop	{r3, pc}
 8002892:	bf00      	nop
 8002894:	200005fc 	.word	0x200005fc

08002898 <initialise_monitor_handles>:


/* Functions */
void initialise_monitor_handles()
{
}
 8002898:	4770      	bx	lr

0800289a <_getpid>:

int _getpid(void)
{
  return 1;
}
 800289a:	2001      	movs	r0, #1
 800289c:	4770      	bx	lr

0800289e <_kill>:

int _kill(int pid, int sig)
{
 800289e:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028a0:	f00a fe0e 	bl	800d4c0 <__errno>
 80028a4:	2316      	movs	r3, #22
 80028a6:	6003      	str	r3, [r0, #0]
  return -1;
}
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ac:	bd08      	pop	{r3, pc}

080028ae <_exit>:

void _exit (int status)
{
 80028ae:	b508      	push	{r3, lr}
  _kill(status, -1);
 80028b0:	f04f 31ff 	mov.w	r1, #4294967295
 80028b4:	f7ff fff3 	bl	800289e <_kill>
  while (1) {}    /* Make sure we hang here */
 80028b8:	e7fe      	b.n	80028b8 <_exit+0xa>

080028ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028ba:	b570      	push	{r4, r5, r6, lr}
 80028bc:	460c      	mov	r4, r1
 80028be:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c0:	2500      	movs	r5, #0
 80028c2:	e006      	b.n	80028d2 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80028c4:	f3af 8000 	nop.w
 80028c8:	4621      	mov	r1, r4
 80028ca:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ce:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80028d0:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d2:	42b5      	cmp	r5, r6
 80028d4:	dbf6      	blt.n	80028c4 <_read+0xa>
  }

  return len;
}
 80028d6:	4630      	mov	r0, r6
 80028d8:	bd70      	pop	{r4, r5, r6, pc}

080028da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028da:	b570      	push	{r4, r5, r6, lr}
 80028dc:	460c      	mov	r4, r1
 80028de:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e0:	2500      	movs	r5, #0
 80028e2:	e004      	b.n	80028ee <_write+0x14>
  {
    __io_putchar(*ptr++);
 80028e4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80028e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ec:	3501      	adds	r5, #1
 80028ee:	42b5      	cmp	r5, r6
 80028f0:	dbf8      	blt.n	80028e4 <_write+0xa>
  }
  return len;
}
 80028f2:	4630      	mov	r0, r6
 80028f4:	bd70      	pop	{r4, r5, r6, pc}

080028f6 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80028f6:	f04f 30ff 	mov.w	r0, #4294967295
 80028fa:	4770      	bx	lr

080028fc <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80028fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002900:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002902:	2000      	movs	r0, #0
 8002904:	4770      	bx	lr

08002906 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002906:	2001      	movs	r0, #1
 8002908:	4770      	bx	lr

0800290a <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800290a:	2000      	movs	r0, #0
 800290c:	4770      	bx	lr

0800290e <_open>:

int _open(char *path, int flags, ...)
{
 800290e:	b40e      	push	{r1, r2, r3}
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
}
 8002910:	f04f 30ff 	mov.w	r0, #4294967295
 8002914:	b003      	add	sp, #12
 8002916:	4770      	bx	lr

08002918 <_wait>:

int _wait(int *status)
{
 8002918:	b508      	push	{r3, lr}
  (void)status;
  errno = ECHILD;
 800291a:	f00a fdd1 	bl	800d4c0 <__errno>
 800291e:	230a      	movs	r3, #10
 8002920:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002922:	f04f 30ff 	mov.w	r0, #4294967295
 8002926:	bd08      	pop	{r3, pc}

08002928 <_unlink>:

int _unlink(char *name)
{
 8002928:	b508      	push	{r3, lr}
  (void)name;
  errno = ENOENT;
 800292a:	f00a fdc9 	bl	800d4c0 <__errno>
 800292e:	2302      	movs	r3, #2
 8002930:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002932:	f04f 30ff 	mov.w	r0, #4294967295
 8002936:	bd08      	pop	{r3, pc}

08002938 <_times>:

int _times(struct tms *buf)
{
  (void)buf;
  return -1;
}
 8002938:	f04f 30ff 	mov.w	r0, #4294967295
 800293c:	4770      	bx	lr

0800293e <_stat>:

int _stat(char *file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800293e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002942:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002944:	2000      	movs	r0, #0
 8002946:	4770      	bx	lr

08002948 <_link>:

int _link(char *old, char *new)
{
 8002948:	b508      	push	{r3, lr}
  (void)old;
  (void)new;
  errno = EMLINK;
 800294a:	f00a fdb9 	bl	800d4c0 <__errno>
 800294e:	231f      	movs	r3, #31
 8002950:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002952:	f04f 30ff 	mov.w	r0, #4294967295
 8002956:	bd08      	pop	{r3, pc}

08002958 <_fork>:

int _fork(void)
{
 8002958:	b508      	push	{r3, lr}
  errno = EAGAIN;
 800295a:	f00a fdb1 	bl	800d4c0 <__errno>
 800295e:	230b      	movs	r3, #11
 8002960:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002962:	f04f 30ff 	mov.w	r0, #4294967295
 8002966:	bd08      	pop	{r3, pc}

08002968 <_execve>:

int _execve(char *name, char **argv, char **env)
{
 8002968:	b508      	push	{r3, lr}
  (void)name;
  (void)argv;
  (void)env;
  errno = ENOMEM;
 800296a:	f00a fda9 	bl	800d4c0 <__errno>
 800296e:	230c      	movs	r3, #12
 8002970:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002972:	f04f 30ff 	mov.w	r0, #4294967295
 8002976:	bd08      	pop	{r3, pc}

08002978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002978:	b510      	push	{r4, lr}
 800297a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800297c:	4a0c      	ldr	r2, [pc, #48]	@ (80029b0 <_sbrk+0x38>)
 800297e:	490d      	ldr	r1, [pc, #52]	@ (80029b4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002980:	480d      	ldr	r0, [pc, #52]	@ (80029b8 <_sbrk+0x40>)
 8002982:	6800      	ldr	r0, [r0, #0]
 8002984:	b140      	cbz	r0, 8002998 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002986:	480c      	ldr	r0, [pc, #48]	@ (80029b8 <_sbrk+0x40>)
 8002988:	6800      	ldr	r0, [r0, #0]
 800298a:	4403      	add	r3, r0
 800298c:	1a52      	subs	r2, r2, r1
 800298e:	4293      	cmp	r3, r2
 8002990:	d806      	bhi.n	80029a0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002992:	4a09      	ldr	r2, [pc, #36]	@ (80029b8 <_sbrk+0x40>)
 8002994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002996:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002998:	4807      	ldr	r0, [pc, #28]	@ (80029b8 <_sbrk+0x40>)
 800299a:	4c08      	ldr	r4, [pc, #32]	@ (80029bc <_sbrk+0x44>)
 800299c:	6004      	str	r4, [r0, #0]
 800299e:	e7f2      	b.n	8002986 <_sbrk+0xe>
    errno = ENOMEM;
 80029a0:	f00a fd8e 	bl	800d4c0 <__errno>
 80029a4:	230c      	movs	r3, #12
 80029a6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80029a8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ac:	e7f3      	b.n	8002996 <_sbrk+0x1e>
 80029ae:	bf00      	nop
 80029b0:	2000c000 	.word	0x2000c000
 80029b4:	00000400 	.word	0x00000400
 80029b8:	200003c0 	.word	0x200003c0
 80029bc:	200007c0 	.word	0x200007c0

080029c0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029c0:	4770      	bx	lr
	...

080029c4 <SystemCoreClockUpdate>:
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80029c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a44 <SystemCoreClockUpdate+0x80>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d014      	beq.n	80029fa <SystemCoreClockUpdate+0x36>
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d016      	beq.n	8002a02 <SystemCoreClockUpdate+0x3e>
 80029d4:	b11b      	cbz	r3, 80029de <SystemCoreClockUpdate+0x1a>
      }
#endif /* STM32F105xC */ 
      break;

    default:
      SystemCoreClock = HSI_VALUE;
 80029d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a48 <SystemCoreClockUpdate+0x84>)
 80029d8:	4a1c      	ldr	r2, [pc, #112]	@ (8002a4c <SystemCoreClockUpdate+0x88>)
 80029da:	601a      	str	r2, [r3, #0]
      break;
 80029dc:	e002      	b.n	80029e4 <SystemCoreClockUpdate+0x20>
      SystemCoreClock = HSI_VALUE;
 80029de:	4b1a      	ldr	r3, [pc, #104]	@ (8002a48 <SystemCoreClockUpdate+0x84>)
 80029e0:	4a1a      	ldr	r2, [pc, #104]	@ (8002a4c <SystemCoreClockUpdate+0x88>)
 80029e2:	601a      	str	r2, [r3, #0]
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80029e4:	4b17      	ldr	r3, [pc, #92]	@ (8002a44 <SystemCoreClockUpdate+0x80>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029ec:	4a18      	ldr	r2, [pc, #96]	@ (8002a50 <SystemCoreClockUpdate+0x8c>)
 80029ee:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80029f0:	4a15      	ldr	r2, [pc, #84]	@ (8002a48 <SystemCoreClockUpdate+0x84>)
 80029f2:	6813      	ldr	r3, [r2, #0]
 80029f4:	40cb      	lsrs	r3, r1
 80029f6:	6013      	str	r3, [r2, #0]
}
 80029f8:	4770      	bx	lr
      SystemCoreClock = HSE_VALUE;
 80029fa:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <SystemCoreClockUpdate+0x84>)
 80029fc:	4a13      	ldr	r2, [pc, #76]	@ (8002a4c <SystemCoreClockUpdate+0x88>)
 80029fe:	601a      	str	r2, [r3, #0]
      break;
 8002a00:	e7f0      	b.n	80029e4 <SystemCoreClockUpdate+0x20>
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8002a02:	4a10      	ldr	r2, [pc, #64]	@ (8002a44 <SystemCoreClockUpdate+0x80>)
 8002a04:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8002a06:	6852      	ldr	r2, [r2, #4]
      pllmull = ( pllmull >> 18U) + 2U;
 8002a08:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8002a0c:	3302      	adds	r3, #2
      if (pllsource == 0x00U)
 8002a0e:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8002a12:	d105      	bne.n	8002a20 <SystemCoreClockUpdate+0x5c>
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8002a14:	4a0f      	ldr	r2, [pc, #60]	@ (8002a54 <SystemCoreClockUpdate+0x90>)
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	4a0b      	ldr	r2, [pc, #44]	@ (8002a48 <SystemCoreClockUpdate+0x84>)
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	e7e1      	b.n	80029e4 <SystemCoreClockUpdate+0x20>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8002a20:	4a08      	ldr	r2, [pc, #32]	@ (8002a44 <SystemCoreClockUpdate+0x80>)
 8002a22:	6852      	ldr	r2, [r2, #4]
 8002a24:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002a28:	d005      	beq.n	8002a36 <SystemCoreClockUpdate+0x72>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a54 <SystemCoreClockUpdate+0x90>)
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	4a05      	ldr	r2, [pc, #20]	@ (8002a48 <SystemCoreClockUpdate+0x84>)
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	e7d6      	b.n	80029e4 <SystemCoreClockUpdate+0x20>
          SystemCoreClock = HSE_VALUE * pllmull;
 8002a36:	4a05      	ldr	r2, [pc, #20]	@ (8002a4c <SystemCoreClockUpdate+0x88>)
 8002a38:	fb02 f303 	mul.w	r3, r2, r3
 8002a3c:	4a02      	ldr	r2, [pc, #8]	@ (8002a48 <SystemCoreClockUpdate+0x84>)
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	e7d0      	b.n	80029e4 <SystemCoreClockUpdate+0x20>
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
 8002a48:	20000008 	.word	0x20000008
 8002a4c:	007a1200 	.word	0x007a1200
 8002a50:	08010b5c 	.word	0x08010b5c
 8002a54:	003d0900 	.word	0x003d0900

08002a58 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a58:	b500      	push	{lr}
 8002a5a:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a5c:	2224      	movs	r2, #36	@ 0x24
 8002a5e:	2100      	movs	r1, #0
 8002a60:	a803      	add	r0, sp, #12
 8002a62:	f00a fc7f 	bl	800d364 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a66:	2300      	movs	r3, #0
 8002a68:	9301      	str	r3, [sp, #4]
 8002a6a:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a6c:	4812      	ldr	r0, [pc, #72]	@ (8002ab8 <MX_TIM2_Init+0x60>)
 8002a6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a72:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8002a74:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a76:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8002a78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a7c:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a7e:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a80:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a82:	2303      	movs	r3, #3
 8002a84:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a86:	2301      	movs	r3, #1
 8002a88:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a8a:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002a8c:	a903      	add	r1, sp, #12
 8002a8e:	f004 fbf1 	bl	8007274 <HAL_TIM_Encoder_Init>
 8002a92:	b950      	cbnz	r0, 8002aaa <MX_TIM2_Init+0x52>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a94:	2300      	movs	r3, #0
 8002a96:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a98:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a9a:	a901      	add	r1, sp, #4
 8002a9c:	4806      	ldr	r0, [pc, #24]	@ (8002ab8 <MX_TIM2_Init+0x60>)
 8002a9e:	f008 f919 	bl	800acd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa2:	b928      	cbnz	r0, 8002ab0 <MX_TIM2_Init+0x58>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002aa4:	b00d      	add	sp, #52	@ 0x34
 8002aa6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002aaa:	f7ff fe53 	bl	8002754 <Error_Handler>
 8002aae:	e7f1      	b.n	8002a94 <MX_TIM2_Init+0x3c>
    Error_Handler();
 8002ab0:	f7ff fe50 	bl	8002754 <Error_Handler>
}
 8002ab4:	e7f6      	b.n	8002aa4 <MX_TIM2_Init+0x4c>
 8002ab6:	bf00      	nop
 8002ab8:	200004e4 	.word	0x200004e4

08002abc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002abc:	b500      	push	{lr}
 8002abe:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ac0:	2224      	movs	r2, #36	@ 0x24
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	a803      	add	r0, sp, #12
 8002ac6:	f00a fc4d 	bl	800d364 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aca:	2300      	movs	r3, #0
 8002acc:	9301      	str	r3, [sp, #4]
 8002ace:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ad0:	4811      	ldr	r0, [pc, #68]	@ (8002b18 <MX_TIM3_Init+0x5c>)
 8002ad2:	4a12      	ldr	r2, [pc, #72]	@ (8002b1c <MX_TIM3_Init+0x60>)
 8002ad4:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8002ad6:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad8:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8002ada:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ade:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae0:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae2:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002aec:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002aee:	a903      	add	r1, sp, #12
 8002af0:	f004 fbc0 	bl	8007274 <HAL_TIM_Encoder_Init>
 8002af4:	b950      	cbnz	r0, 8002b0c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002afa:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002afc:	a901      	add	r1, sp, #4
 8002afe:	4806      	ldr	r0, [pc, #24]	@ (8002b18 <MX_TIM3_Init+0x5c>)
 8002b00:	f008 f8e8 	bl	800acd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b04:	b928      	cbnz	r0, 8002b12 <MX_TIM3_Init+0x56>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b06:	b00d      	add	sp, #52	@ 0x34
 8002b08:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002b0c:	f7ff fe22 	bl	8002754 <Error_Handler>
 8002b10:	e7f1      	b.n	8002af6 <MX_TIM3_Init+0x3a>
    Error_Handler();
 8002b12:	f7ff fe1f 	bl	8002754 <Error_Handler>
}
 8002b16:	e7f6      	b.n	8002b06 <MX_TIM3_Init+0x4a>
 8002b18:	2000049c 	.word	0x2000049c
 8002b1c:	40000400 	.word	0x40000400

08002b20 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002b20:	b500      	push	{lr}
 8002b22:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b24:	2224      	movs	r2, #36	@ 0x24
 8002b26:	2100      	movs	r1, #0
 8002b28:	a803      	add	r0, sp, #12
 8002b2a:	f00a fc1b 	bl	800d364 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b2e:	2300      	movs	r3, #0
 8002b30:	9301      	str	r3, [sp, #4]
 8002b32:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b34:	4811      	ldr	r0, [pc, #68]	@ (8002b7c <MX_TIM4_Init+0x5c>)
 8002b36:	4a12      	ldr	r2, [pc, #72]	@ (8002b80 <MX_TIM4_Init+0x60>)
 8002b38:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 8002b3a:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b3c:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 8002b3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b42:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b44:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b46:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b50:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002b52:	a903      	add	r1, sp, #12
 8002b54:	f004 fb8e 	bl	8007274 <HAL_TIM_Encoder_Init>
 8002b58:	b950      	cbnz	r0, 8002b70 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b5e:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b60:	a901      	add	r1, sp, #4
 8002b62:	4806      	ldr	r0, [pc, #24]	@ (8002b7c <MX_TIM4_Init+0x5c>)
 8002b64:	f008 f8b6 	bl	800acd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b68:	b928      	cbnz	r0, 8002b76 <MX_TIM4_Init+0x56>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b6a:	b00d      	add	sp, #52	@ 0x34
 8002b6c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002b70:	f7ff fdf0 	bl	8002754 <Error_Handler>
 8002b74:	e7f1      	b.n	8002b5a <MX_TIM4_Init+0x3a>
    Error_Handler();
 8002b76:	f7ff fded 	bl	8002754 <Error_Handler>
}
 8002b7a:	e7f6      	b.n	8002b6a <MX_TIM4_Init+0x4a>
 8002b7c:	20000454 	.word	0x20000454
 8002b80:	40000800 	.word	0x40000800

08002b84 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002b84:	b500      	push	{lr}
 8002b86:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b88:	2224      	movs	r2, #36	@ 0x24
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	a803      	add	r0, sp, #12
 8002b8e:	f00a fbe9 	bl	800d364 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b92:	2300      	movs	r3, #0
 8002b94:	9301      	str	r3, [sp, #4]
 8002b96:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b98:	4811      	ldr	r0, [pc, #68]	@ (8002be0 <MX_TIM5_Init+0x5c>)
 8002b9a:	4a12      	ldr	r2, [pc, #72]	@ (8002be4 <MX_TIM5_Init+0x60>)
 8002b9c:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 0;
 8002b9e:	6043      	str	r3, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba0:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 65535;
 8002ba2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ba6:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ba8:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002baa:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002bac:	2303      	movs	r3, #3
 8002bae:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bb4:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002bb6:	a903      	add	r1, sp, #12
 8002bb8:	f004 fb5c 	bl	8007274 <HAL_TIM_Encoder_Init>
 8002bbc:	b950      	cbnz	r0, 8002bd4 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc2:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002bc4:	a901      	add	r1, sp, #4
 8002bc6:	4806      	ldr	r0, [pc, #24]	@ (8002be0 <MX_TIM5_Init+0x5c>)
 8002bc8:	f008 f884 	bl	800acd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002bcc:	b928      	cbnz	r0, 8002bda <MX_TIM5_Init+0x56>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002bce:	b00d      	add	sp, #52	@ 0x34
 8002bd0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002bd4:	f7ff fdbe 	bl	8002754 <Error_Handler>
 8002bd8:	e7f1      	b.n	8002bbe <MX_TIM5_Init+0x3a>
    Error_Handler();
 8002bda:	f7ff fdbb 	bl	8002754 <Error_Handler>
}
 8002bde:	e7f6      	b.n	8002bce <MX_TIM5_Init+0x4a>
 8002be0:	2000040c 	.word	0x2000040c
 8002be4:	40000c00 	.word	0x40000c00

08002be8 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim8);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002be8:	b082      	sub	sp, #8

  if(tim_baseHandle->Instance==TIM1)
 8002bea:	6803      	ldr	r3, [r0, #0]
 8002bec:	4a0e      	ldr	r2, [pc, #56]	@ (8002c28 <HAL_TIM_Base_MspInit+0x40>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d004      	beq.n	8002bfc <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 8002bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8002c2c <HAL_TIM_Base_MspInit+0x44>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d00c      	beq.n	8002c12 <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002bf8:	b002      	add	sp, #8
 8002bfa:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <HAL_TIM_Base_MspInit+0x48>)
 8002bfe:	699a      	ldr	r2, [r3, #24]
 8002c00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c04:	619a      	str	r2, [r3, #24]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	9b00      	ldr	r3, [sp, #0]
 8002c10:	e7f2      	b.n	8002bf8 <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c12:	4b07      	ldr	r3, [pc, #28]	@ (8002c30 <HAL_TIM_Base_MspInit+0x48>)
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c1a:	619a      	str	r2, [r3, #24]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	9b01      	ldr	r3, [sp, #4]
}
 8002c26:	e7e7      	b.n	8002bf8 <HAL_TIM_Base_MspInit+0x10>
 8002c28:	40012c00 	.word	0x40012c00
 8002c2c:	40013400 	.word	0x40013400
 8002c30:	40021000 	.word	0x40021000

08002c34 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002c34:	b510      	push	{r4, lr}
 8002c36:	b08e      	sub	sp, #56	@ 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c38:	2300      	movs	r3, #0
 8002c3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8002c3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002c3e:	930c      	str	r3, [sp, #48]	@ 0x30
 8002c40:	930d      	str	r3, [sp, #52]	@ 0x34
  if(tim_encoderHandle->Instance==TIM2)
 8002c42:	6803      	ldr	r3, [r0, #0]
 8002c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c48:	d00a      	beq.n	8002c60 <HAL_TIM_Encoder_MspInit+0x2c>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_encoderHandle->Instance==TIM3)
 8002c4a:	4a4c      	ldr	r2, [pc, #304]	@ (8002d7c <HAL_TIM_Encoder_MspInit+0x148>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d040      	beq.n	8002cd2 <HAL_TIM_Encoder_MspInit+0x9e>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_encoderHandle->Instance==TIM4)
 8002c50:	4a4b      	ldr	r2, [pc, #300]	@ (8002d80 <HAL_TIM_Encoder_MspInit+0x14c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d059      	beq.n	8002d0a <HAL_TIM_Encoder_MspInit+0xd6>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(tim_encoderHandle->Instance==TIM5)
 8002c56:	4a4b      	ldr	r2, [pc, #300]	@ (8002d84 <HAL_TIM_Encoder_MspInit+0x150>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d072      	beq.n	8002d42 <HAL_TIM_Encoder_MspInit+0x10e>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002c5c:	b00e      	add	sp, #56	@ 0x38
 8002c5e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c60:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002c64:	69da      	ldr	r2, [r3, #28]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	61da      	str	r2, [r3, #28]
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	f002 0201 	and.w	r2, r2, #1
 8002c72:	9201      	str	r2, [sp, #4]
 8002c74:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c76:	699a      	ldr	r2, [r3, #24]
 8002c78:	f042 0204 	orr.w	r2, r2, #4
 8002c7c:	619a      	str	r2, [r3, #24]
 8002c7e:	699a      	ldr	r2, [r3, #24]
 8002c80:	f002 0204 	and.w	r2, r2, #4
 8002c84:	9202      	str	r2, [sp, #8]
 8002c86:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	f042 0208 	orr.w	r2, r2, #8
 8002c8e:	619a      	str	r2, [r3, #24]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	9303      	str	r3, [sp, #12]
 8002c98:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c9e:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ca0:	2401      	movs	r4, #1
 8002ca2:	940c      	str	r4, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca4:	a90a      	add	r1, sp, #40	@ 0x28
 8002ca6:	4838      	ldr	r0, [pc, #224]	@ (8002d88 <HAL_TIM_Encoder_MspInit+0x154>)
 8002ca8:	f002 f988 	bl	8004fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002cac:	2308      	movs	r3, #8
 8002cae:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	930b      	str	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cb4:	940c      	str	r4, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb6:	a90a      	add	r1, sp, #40	@ 0x28
 8002cb8:	4834      	ldr	r0, [pc, #208]	@ (8002d8c <HAL_TIM_Encoder_MspInit+0x158>)
 8002cba:	f002 f97f 	bl	8004fbc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002cbe:	4a34      	ldr	r2, [pc, #208]	@ (8002d90 <HAL_TIM_Encoder_MspInit+0x15c>)
 8002cc0:	6853      	ldr	r3, [r2, #4]
 8002cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cc6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cce:	6053      	str	r3, [r2, #4]
 8002cd0:	e7c4      	b.n	8002c5c <HAL_TIM_Encoder_MspInit+0x28>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cd2:	4b30      	ldr	r3, [pc, #192]	@ (8002d94 <HAL_TIM_Encoder_MspInit+0x160>)
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	f042 0202 	orr.w	r2, r2, #2
 8002cda:	61da      	str	r2, [r3, #28]
 8002cdc:	69da      	ldr	r2, [r3, #28]
 8002cde:	f002 0202 	and.w	r2, r2, #2
 8002ce2:	9204      	str	r2, [sp, #16]
 8002ce4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce6:	699a      	ldr	r2, [r3, #24]
 8002ce8:	f042 0204 	orr.w	r2, r2, #4
 8002cec:	619a      	str	r2, [r3, #24]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	9305      	str	r3, [sp, #20]
 8002cf6:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cf8:	23c0      	movs	r3, #192	@ 0xc0
 8002cfa:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	930c      	str	r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d00:	a90a      	add	r1, sp, #40	@ 0x28
 8002d02:	4821      	ldr	r0, [pc, #132]	@ (8002d88 <HAL_TIM_Encoder_MspInit+0x154>)
 8002d04:	f002 f95a 	bl	8004fbc <HAL_GPIO_Init>
 8002d08:	e7a8      	b.n	8002c5c <HAL_TIM_Encoder_MspInit+0x28>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d0a:	4b22      	ldr	r3, [pc, #136]	@ (8002d94 <HAL_TIM_Encoder_MspInit+0x160>)
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	f042 0204 	orr.w	r2, r2, #4
 8002d12:	61da      	str	r2, [r3, #28]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	f002 0204 	and.w	r2, r2, #4
 8002d1a:	9206      	str	r2, [sp, #24]
 8002d1c:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	f042 0208 	orr.w	r2, r2, #8
 8002d24:	619a      	str	r2, [r3, #24]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	9307      	str	r3, [sp, #28]
 8002d2e:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d30:	23c0      	movs	r3, #192	@ 0xc0
 8002d32:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d34:	2301      	movs	r3, #1
 8002d36:	930c      	str	r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d38:	a90a      	add	r1, sp, #40	@ 0x28
 8002d3a:	4814      	ldr	r0, [pc, #80]	@ (8002d8c <HAL_TIM_Encoder_MspInit+0x158>)
 8002d3c:	f002 f93e 	bl	8004fbc <HAL_GPIO_Init>
 8002d40:	e78c      	b.n	8002c5c <HAL_TIM_Encoder_MspInit+0x28>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d42:	4b14      	ldr	r3, [pc, #80]	@ (8002d94 <HAL_TIM_Encoder_MspInit+0x160>)
 8002d44:	69da      	ldr	r2, [r3, #28]
 8002d46:	f042 0208 	orr.w	r2, r2, #8
 8002d4a:	61da      	str	r2, [r3, #28]
 8002d4c:	69da      	ldr	r2, [r3, #28]
 8002d4e:	f002 0208 	and.w	r2, r2, #8
 8002d52:	9208      	str	r2, [sp, #32]
 8002d54:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d56:	699a      	ldr	r2, [r3, #24]
 8002d58:	f042 0204 	orr.w	r2, r2, #4
 8002d5c:	619a      	str	r2, [r3, #24]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	930c      	str	r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d70:	a90a      	add	r1, sp, #40	@ 0x28
 8002d72:	4805      	ldr	r0, [pc, #20]	@ (8002d88 <HAL_TIM_Encoder_MspInit+0x154>)
 8002d74:	f002 f922 	bl	8004fbc <HAL_GPIO_Init>
}
 8002d78:	e770      	b.n	8002c5c <HAL_TIM_Encoder_MspInit+0x28>
 8002d7a:	bf00      	nop
 8002d7c:	40000400 	.word	0x40000400
 8002d80:	40000800 	.word	0x40000800
 8002d84:	40000c00 	.word	0x40000c00
 8002d88:	40010800 	.word	0x40010800
 8002d8c:	40010c00 	.word	0x40010c00
 8002d90:	40010000 	.word	0x40010000
 8002d94:	40021000 	.word	0x40021000

08002d98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d98:	b510      	push	{r4, lr}
 8002d9a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	9304      	str	r3, [sp, #16]
 8002da0:	9305      	str	r3, [sp, #20]
 8002da2:	9306      	str	r3, [sp, #24]
 8002da4:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 8002da6:	6803      	ldr	r3, [r0, #0]
 8002da8:	4a25      	ldr	r2, [pc, #148]	@ (8002e40 <HAL_TIM_MspPostInit+0xa8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d004      	beq.n	8002db8 <HAL_TIM_MspPostInit+0x20>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 8002dae:	4a25      	ldr	r2, [pc, #148]	@ (8002e44 <HAL_TIM_MspPostInit+0xac>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d030      	beq.n	8002e16 <HAL_TIM_MspPostInit+0x7e>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002db4:	b008      	add	sp, #32
 8002db6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db8:	4b23      	ldr	r3, [pc, #140]	@ (8002e48 <HAL_TIM_MspPostInit+0xb0>)
 8002dba:	699a      	ldr	r2, [r3, #24]
 8002dbc:	f042 0208 	orr.w	r2, r2, #8
 8002dc0:	619a      	str	r2, [r3, #24]
 8002dc2:	699a      	ldr	r2, [r3, #24]
 8002dc4:	f002 0208 	and.w	r2, r2, #8
 8002dc8:	9201      	str	r2, [sp, #4]
 8002dca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	f042 0204 	orr.w	r2, r2, #4
 8002dd2:	619a      	str	r2, [r3, #24]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	9302      	str	r3, [sp, #8]
 8002ddc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002dde:	2303      	movs	r3, #3
 8002de0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de2:	2402      	movs	r4, #2
 8002de4:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de6:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de8:	a904      	add	r1, sp, #16
 8002dea:	4818      	ldr	r0, [pc, #96]	@ (8002e4c <HAL_TIM_MspPostInit+0xb4>)
 8002dec:	f002 f8e6 	bl	8004fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8002df0:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8002df4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df8:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfa:	a904      	add	r1, sp, #16
 8002dfc:	4814      	ldr	r0, [pc, #80]	@ (8002e50 <HAL_TIM_MspPostInit+0xb8>)
 8002dfe:	f002 f8dd 	bl	8004fbc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8002e02:	4a14      	ldr	r2, [pc, #80]	@ (8002e54 <HAL_TIM_MspPostInit+0xbc>)
 8002e04:	6853      	ldr	r3, [r2, #4]
 8002e06:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002e0a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e12:	6053      	str	r3, [r2, #4]
 8002e14:	e7ce      	b.n	8002db4 <HAL_TIM_MspPostInit+0x1c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e16:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <HAL_TIM_MspPostInit+0xb0>)
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	f042 0210 	orr.w	r2, r2, #16
 8002e1e:	619a      	str	r2, [r3, #24]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	9303      	str	r3, [sp, #12]
 8002e28:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002e2a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002e2e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e30:	2302      	movs	r3, #2
 8002e32:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e34:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e36:	a904      	add	r1, sp, #16
 8002e38:	4807      	ldr	r0, [pc, #28]	@ (8002e58 <HAL_TIM_MspPostInit+0xc0>)
 8002e3a:	f002 f8bf 	bl	8004fbc <HAL_GPIO_Init>
}
 8002e3e:	e7b9      	b.n	8002db4 <HAL_TIM_MspPostInit+0x1c>
 8002e40:	40012c00 	.word	0x40012c00
 8002e44:	40013400 	.word	0x40013400
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40010c00 	.word	0x40010c00
 8002e50:	40010800 	.word	0x40010800
 8002e54:	40010000 	.word	0x40010000
 8002e58:	40011000 	.word	0x40011000

08002e5c <MX_TIM1_Init>:
{
 8002e5c:	b510      	push	{r4, lr}
 8002e5e:	b096      	sub	sp, #88	@ 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e60:	2400      	movs	r4, #0
 8002e62:	9412      	str	r4, [sp, #72]	@ 0x48
 8002e64:	9413      	str	r4, [sp, #76]	@ 0x4c
 8002e66:	9414      	str	r4, [sp, #80]	@ 0x50
 8002e68:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e6a:	9410      	str	r4, [sp, #64]	@ 0x40
 8002e6c:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e6e:	9409      	str	r4, [sp, #36]	@ 0x24
 8002e70:	940a      	str	r4, [sp, #40]	@ 0x28
 8002e72:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002e74:	940c      	str	r4, [sp, #48]	@ 0x30
 8002e76:	940d      	str	r4, [sp, #52]	@ 0x34
 8002e78:	940e      	str	r4, [sp, #56]	@ 0x38
 8002e7a:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	4621      	mov	r1, r4
 8002e80:	a801      	add	r0, sp, #4
 8002e82:	f00a fa6f 	bl	800d364 <memset>
  htim1.Instance = TIM1;
 8002e86:	483b      	ldr	r0, [pc, #236]	@ (8002f74 <MX_TIM1_Init+0x118>)
 8002e88:	4b3b      	ldr	r3, [pc, #236]	@ (8002f78 <MX_TIM1_Init+0x11c>)
 8002e8a:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8002e8c:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e8e:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 3600-1;
 8002e90:	f640 630f 	movw	r3, #3599	@ 0xe0f
 8002e94:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e96:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e98:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e9a:	2380      	movs	r3, #128	@ 0x80
 8002e9c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e9e:	f004 f90b 	bl	80070b8 <HAL_TIM_Base_Init>
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	d14b      	bne.n	8002f3e <MX_TIM1_Init+0xe2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ea6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002eaa:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002eac:	a912      	add	r1, sp, #72	@ 0x48
 8002eae:	4831      	ldr	r0, [pc, #196]	@ (8002f74 <MX_TIM1_Init+0x118>)
 8002eb0:	f004 fcb0 	bl	8007814 <HAL_TIM_ConfigClockSource>
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	d145      	bne.n	8002f44 <MX_TIM1_Init+0xe8>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002eb8:	482e      	ldr	r0, [pc, #184]	@ (8002f74 <MX_TIM1_Init+0x118>)
 8002eba:	f004 f955 	bl	8007168 <HAL_TIM_PWM_Init>
 8002ebe:	2800      	cmp	r0, #0
 8002ec0:	d143      	bne.n	8002f4a <MX_TIM1_Init+0xee>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ec6:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ec8:	a910      	add	r1, sp, #64	@ 0x40
 8002eca:	482a      	ldr	r0, [pc, #168]	@ (8002f74 <MX_TIM1_Init+0x118>)
 8002ecc:	f007 ff02 	bl	800acd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ed0:	2800      	cmp	r0, #0
 8002ed2:	d13d      	bne.n	8002f50 <MX_TIM1_Init+0xf4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ed4:	2360      	movs	r3, #96	@ 0x60
 8002ed6:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002ed8:	2200      	movs	r2, #0
 8002eda:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002edc:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ede:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ee0:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ee2:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ee4:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ee6:	a909      	add	r1, sp, #36	@ 0x24
 8002ee8:	4822      	ldr	r0, [pc, #136]	@ (8002f74 <MX_TIM1_Init+0x118>)
 8002eea:	f004 fa86 	bl	80073fa <HAL_TIM_PWM_ConfigChannel>
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	d131      	bne.n	8002f56 <MX_TIM1_Init+0xfa>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	a909      	add	r1, sp, #36	@ 0x24
 8002ef6:	481f      	ldr	r0, [pc, #124]	@ (8002f74 <MX_TIM1_Init+0x118>)
 8002ef8:	f004 fa7f 	bl	80073fa <HAL_TIM_PWM_ConfigChannel>
 8002efc:	bb70      	cbnz	r0, 8002f5c <MX_TIM1_Init+0x100>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002efe:	2208      	movs	r2, #8
 8002f00:	a909      	add	r1, sp, #36	@ 0x24
 8002f02:	481c      	ldr	r0, [pc, #112]	@ (8002f74 <MX_TIM1_Init+0x118>)
 8002f04:	f004 fa79 	bl	80073fa <HAL_TIM_PWM_ConfigChannel>
 8002f08:	bb58      	cbnz	r0, 8002f62 <MX_TIM1_Init+0x106>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	a909      	add	r1, sp, #36	@ 0x24
 8002f0e:	4819      	ldr	r0, [pc, #100]	@ (8002f74 <MX_TIM1_Init+0x118>)
 8002f10:	f004 fa73 	bl	80073fa <HAL_TIM_PWM_ConfigChannel>
 8002f14:	bb40      	cbnz	r0, 8002f68 <MX_TIM1_Init+0x10c>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f1a:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f1c:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f1e:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f20:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f26:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f28:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f2a:	a901      	add	r1, sp, #4
 8002f2c:	4811      	ldr	r0, [pc, #68]	@ (8002f74 <MX_TIM1_Init+0x118>)
 8002f2e:	f007 ff0f 	bl	800ad50 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f32:	b9e0      	cbnz	r0, 8002f6e <MX_TIM1_Init+0x112>
  HAL_TIM_MspPostInit(&htim1);
 8002f34:	480f      	ldr	r0, [pc, #60]	@ (8002f74 <MX_TIM1_Init+0x118>)
 8002f36:	f7ff ff2f 	bl	8002d98 <HAL_TIM_MspPostInit>
}
 8002f3a:	b016      	add	sp, #88	@ 0x58
 8002f3c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002f3e:	f7ff fc09 	bl	8002754 <Error_Handler>
 8002f42:	e7b0      	b.n	8002ea6 <MX_TIM1_Init+0x4a>
    Error_Handler();
 8002f44:	f7ff fc06 	bl	8002754 <Error_Handler>
 8002f48:	e7b6      	b.n	8002eb8 <MX_TIM1_Init+0x5c>
    Error_Handler();
 8002f4a:	f7ff fc03 	bl	8002754 <Error_Handler>
 8002f4e:	e7b8      	b.n	8002ec2 <MX_TIM1_Init+0x66>
    Error_Handler();
 8002f50:	f7ff fc00 	bl	8002754 <Error_Handler>
 8002f54:	e7be      	b.n	8002ed4 <MX_TIM1_Init+0x78>
    Error_Handler();
 8002f56:	f7ff fbfd 	bl	8002754 <Error_Handler>
 8002f5a:	e7ca      	b.n	8002ef2 <MX_TIM1_Init+0x96>
    Error_Handler();
 8002f5c:	f7ff fbfa 	bl	8002754 <Error_Handler>
 8002f60:	e7cd      	b.n	8002efe <MX_TIM1_Init+0xa2>
    Error_Handler();
 8002f62:	f7ff fbf7 	bl	8002754 <Error_Handler>
 8002f66:	e7d0      	b.n	8002f0a <MX_TIM1_Init+0xae>
    Error_Handler();
 8002f68:	f7ff fbf4 	bl	8002754 <Error_Handler>
 8002f6c:	e7d3      	b.n	8002f16 <MX_TIM1_Init+0xba>
    Error_Handler();
 8002f6e:	f7ff fbf1 	bl	8002754 <Error_Handler>
 8002f72:	e7df      	b.n	8002f34 <MX_TIM1_Init+0xd8>
 8002f74:	2000052c 	.word	0x2000052c
 8002f78:	40012c00 	.word	0x40012c00

08002f7c <MX_TIM8_Init>:
{
 8002f7c:	b510      	push	{r4, lr}
 8002f7e:	b096      	sub	sp, #88	@ 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f80:	2400      	movs	r4, #0
 8002f82:	9412      	str	r4, [sp, #72]	@ 0x48
 8002f84:	9413      	str	r4, [sp, #76]	@ 0x4c
 8002f86:	9414      	str	r4, [sp, #80]	@ 0x50
 8002f88:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f8a:	9410      	str	r4, [sp, #64]	@ 0x40
 8002f8c:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f8e:	9409      	str	r4, [sp, #36]	@ 0x24
 8002f90:	940a      	str	r4, [sp, #40]	@ 0x28
 8002f92:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002f94:	940c      	str	r4, [sp, #48]	@ 0x30
 8002f96:	940d      	str	r4, [sp, #52]	@ 0x34
 8002f98:	940e      	str	r4, [sp, #56]	@ 0x38
 8002f9a:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	a801      	add	r0, sp, #4
 8002fa2:	f00a f9df 	bl	800d364 <memset>
  htim8.Instance = TIM8;
 8002fa6:	483b      	ldr	r0, [pc, #236]	@ (8003094 <MX_TIM8_Init+0x118>)
 8002fa8:	4b3b      	ldr	r3, [pc, #236]	@ (8003098 <MX_TIM8_Init+0x11c>)
 8002faa:	6003      	str	r3, [r0, #0]
  htim8.Init.Prescaler = 0;
 8002fac:	6044      	str	r4, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fae:	6084      	str	r4, [r0, #8]
  htim8.Init.Period = 3600-1;
 8002fb0:	f640 630f 	movw	r3, #3599	@ 0xe0f
 8002fb4:	60c3      	str	r3, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fb6:	6104      	str	r4, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 8002fb8:	6144      	str	r4, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fba:	2380      	movs	r3, #128	@ 0x80
 8002fbc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002fbe:	f004 f87b 	bl	80070b8 <HAL_TIM_Base_Init>
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	d14b      	bne.n	800305e <MX_TIM8_Init+0xe2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fca:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002fcc:	a912      	add	r1, sp, #72	@ 0x48
 8002fce:	4831      	ldr	r0, [pc, #196]	@ (8003094 <MX_TIM8_Init+0x118>)
 8002fd0:	f004 fc20 	bl	8007814 <HAL_TIM_ConfigClockSource>
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d145      	bne.n	8003064 <MX_TIM8_Init+0xe8>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002fd8:	482e      	ldr	r0, [pc, #184]	@ (8003094 <MX_TIM8_Init+0x118>)
 8002fda:	f004 f8c5 	bl	8007168 <HAL_TIM_PWM_Init>
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	d143      	bne.n	800306a <MX_TIM8_Init+0xee>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fe6:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002fe8:	a910      	add	r1, sp, #64	@ 0x40
 8002fea:	482a      	ldr	r0, [pc, #168]	@ (8003094 <MX_TIM8_Init+0x118>)
 8002fec:	f007 fe72 	bl	800acd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ff0:	2800      	cmp	r0, #0
 8002ff2:	d13d      	bne.n	8003070 <MX_TIM8_Init+0xf4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ff4:	2360      	movs	r3, #96	@ 0x60
 8002ff6:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ffc:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ffe:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003000:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003002:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003004:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003006:	a909      	add	r1, sp, #36	@ 0x24
 8003008:	4822      	ldr	r0, [pc, #136]	@ (8003094 <MX_TIM8_Init+0x118>)
 800300a:	f004 f9f6 	bl	80073fa <HAL_TIM_PWM_ConfigChannel>
 800300e:	2800      	cmp	r0, #0
 8003010:	d131      	bne.n	8003076 <MX_TIM8_Init+0xfa>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003012:	2204      	movs	r2, #4
 8003014:	a909      	add	r1, sp, #36	@ 0x24
 8003016:	481f      	ldr	r0, [pc, #124]	@ (8003094 <MX_TIM8_Init+0x118>)
 8003018:	f004 f9ef 	bl	80073fa <HAL_TIM_PWM_ConfigChannel>
 800301c:	bb70      	cbnz	r0, 800307c <MX_TIM8_Init+0x100>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800301e:	2208      	movs	r2, #8
 8003020:	a909      	add	r1, sp, #36	@ 0x24
 8003022:	481c      	ldr	r0, [pc, #112]	@ (8003094 <MX_TIM8_Init+0x118>)
 8003024:	f004 f9e9 	bl	80073fa <HAL_TIM_PWM_ConfigChannel>
 8003028:	bb58      	cbnz	r0, 8003082 <MX_TIM8_Init+0x106>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800302a:	220c      	movs	r2, #12
 800302c:	a909      	add	r1, sp, #36	@ 0x24
 800302e:	4819      	ldr	r0, [pc, #100]	@ (8003094 <MX_TIM8_Init+0x118>)
 8003030:	f004 f9e3 	bl	80073fa <HAL_TIM_PWM_ConfigChannel>
 8003034:	bb40      	cbnz	r0, 8003088 <MX_TIM8_Init+0x10c>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003036:	2300      	movs	r3, #0
 8003038:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800303a:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800303c:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800303e:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003040:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003042:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003046:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003048:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800304a:	a901      	add	r1, sp, #4
 800304c:	4811      	ldr	r0, [pc, #68]	@ (8003094 <MX_TIM8_Init+0x118>)
 800304e:	f007 fe7f 	bl	800ad50 <HAL_TIMEx_ConfigBreakDeadTime>
 8003052:	b9e0      	cbnz	r0, 800308e <MX_TIM8_Init+0x112>
  HAL_TIM_MspPostInit(&htim8);
 8003054:	480f      	ldr	r0, [pc, #60]	@ (8003094 <MX_TIM8_Init+0x118>)
 8003056:	f7ff fe9f 	bl	8002d98 <HAL_TIM_MspPostInit>
}
 800305a:	b016      	add	sp, #88	@ 0x58
 800305c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800305e:	f7ff fb79 	bl	8002754 <Error_Handler>
 8003062:	e7b0      	b.n	8002fc6 <MX_TIM8_Init+0x4a>
    Error_Handler();
 8003064:	f7ff fb76 	bl	8002754 <Error_Handler>
 8003068:	e7b6      	b.n	8002fd8 <MX_TIM8_Init+0x5c>
    Error_Handler();
 800306a:	f7ff fb73 	bl	8002754 <Error_Handler>
 800306e:	e7b8      	b.n	8002fe2 <MX_TIM8_Init+0x66>
    Error_Handler();
 8003070:	f7ff fb70 	bl	8002754 <Error_Handler>
 8003074:	e7be      	b.n	8002ff4 <MX_TIM8_Init+0x78>
    Error_Handler();
 8003076:	f7ff fb6d 	bl	8002754 <Error_Handler>
 800307a:	e7ca      	b.n	8003012 <MX_TIM8_Init+0x96>
    Error_Handler();
 800307c:	f7ff fb6a 	bl	8002754 <Error_Handler>
 8003080:	e7cd      	b.n	800301e <MX_TIM8_Init+0xa2>
    Error_Handler();
 8003082:	f7ff fb67 	bl	8002754 <Error_Handler>
 8003086:	e7d0      	b.n	800302a <MX_TIM8_Init+0xae>
    Error_Handler();
 8003088:	f7ff fb64 	bl	8002754 <Error_Handler>
 800308c:	e7d3      	b.n	8003036 <MX_TIM8_Init+0xba>
    Error_Handler();
 800308e:	f7ff fb61 	bl	8002754 <Error_Handler>
 8003092:	e7df      	b.n	8003054 <MX_TIM8_Init+0xd8>
 8003094:	200003c4 	.word	0x200003c4
 8003098:	40013400 	.word	0x40013400

0800309c <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 800309c:	6803      	ldr	r3, [r0, #0]
 800309e:	4a0a      	ldr	r2, [pc, #40]	@ (80030c8 <HAL_TIM_Base_MspDeInit+0x2c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d003      	beq.n	80030ac <HAL_TIM_Base_MspDeInit+0x10>
    __HAL_RCC_TIM1_CLK_DISABLE();
  /* USER CODE BEGIN TIM1_MspDeInit 1 */

  /* USER CODE END TIM1_MspDeInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 80030a4:	4a09      	ldr	r2, [pc, #36]	@ (80030cc <HAL_TIM_Base_MspDeInit+0x30>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d007      	beq.n	80030ba <HAL_TIM_Base_MspDeInit+0x1e>
    __HAL_RCC_TIM8_CLK_DISABLE();
  /* USER CODE BEGIN TIM8_MspDeInit 1 */

  /* USER CODE END TIM8_MspDeInit 1 */
  }
}
 80030aa:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_DISABLE();
 80030ac:	f502 4264 	add.w	r2, r2, #58368	@ 0xe400
 80030b0:	6993      	ldr	r3, [r2, #24]
 80030b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030b6:	6193      	str	r3, [r2, #24]
 80030b8:	4770      	bx	lr
    __HAL_RCC_TIM8_CLK_DISABLE();
 80030ba:	f502 425c 	add.w	r2, r2, #56320	@ 0xdc00
 80030be:	6993      	ldr	r3, [r2, #24]
 80030c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030c4:	6193      	str	r3, [r2, #24]
}
 80030c6:	e7f0      	b.n	80030aa <HAL_TIM_Base_MspDeInit+0xe>
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40013400 	.word	0x40013400

080030d0 <HAL_TIM_Encoder_MspDeInit>:

void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80030d0:	b508      	push	{r3, lr}

  if(tim_encoderHandle->Instance==TIM2)
 80030d2:	6803      	ldr	r3, [r0, #0]
 80030d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d8:	d009      	beq.n	80030ee <HAL_TIM_Encoder_MspDeInit+0x1e>

  /* USER CODE BEGIN TIM2_MspDeInit 1 */

  /* USER CODE END TIM2_MspDeInit 1 */
  }
  else if(tim_encoderHandle->Instance==TIM3)
 80030da:	4a1d      	ldr	r2, [pc, #116]	@ (8003150 <HAL_TIM_Encoder_MspDeInit+0x80>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d015      	beq.n	800310c <HAL_TIM_Encoder_MspDeInit+0x3c>

  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }
  else if(tim_encoderHandle->Instance==TIM4)
 80030e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003154 <HAL_TIM_Encoder_MspDeInit+0x84>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d01d      	beq.n	8003122 <HAL_TIM_Encoder_MspDeInit+0x52>

  /* USER CODE BEGIN TIM4_MspDeInit 1 */

  /* USER CODE END TIM4_MspDeInit 1 */
  }
  else if(tim_encoderHandle->Instance==TIM5)
 80030e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003158 <HAL_TIM_Encoder_MspDeInit+0x88>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d025      	beq.n	8003138 <HAL_TIM_Encoder_MspDeInit+0x68>

  /* USER CODE BEGIN TIM5_MspDeInit 1 */

  /* USER CODE END TIM5_MspDeInit 1 */
  }
}
 80030ec:	bd08      	pop	{r3, pc}
    __HAL_RCC_TIM2_CLK_DISABLE();
 80030ee:	4a1b      	ldr	r2, [pc, #108]	@ (800315c <HAL_TIM_Encoder_MspDeInit+0x8c>)
 80030f0:	69d3      	ldr	r3, [r2, #28]
 80030f2:	f023 0301 	bic.w	r3, r3, #1
 80030f6:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 80030f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030fc:	4818      	ldr	r0, [pc, #96]	@ (8003160 <HAL_TIM_Encoder_MspDeInit+0x90>)
 80030fe:	f002 f879 	bl	80051f4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 8003102:	2108      	movs	r1, #8
 8003104:	4817      	ldr	r0, [pc, #92]	@ (8003164 <HAL_TIM_Encoder_MspDeInit+0x94>)
 8003106:	f002 f875 	bl	80051f4 <HAL_GPIO_DeInit>
 800310a:	e7ef      	b.n	80030ec <HAL_TIM_Encoder_MspDeInit+0x1c>
    __HAL_RCC_TIM3_CLK_DISABLE();
 800310c:	f502 3203 	add.w	r2, r2, #134144	@ 0x20c00
 8003110:	69d3      	ldr	r3, [r2, #28]
 8003112:	f023 0302 	bic.w	r3, r3, #2
 8003116:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 8003118:	21c0      	movs	r1, #192	@ 0xc0
 800311a:	4811      	ldr	r0, [pc, #68]	@ (8003160 <HAL_TIM_Encoder_MspDeInit+0x90>)
 800311c:	f002 f86a 	bl	80051f4 <HAL_GPIO_DeInit>
 8003120:	e7e4      	b.n	80030ec <HAL_TIM_Encoder_MspDeInit+0x1c>
    __HAL_RCC_TIM4_CLK_DISABLE();
 8003122:	f502 3202 	add.w	r2, r2, #133120	@ 0x20800
 8003126:	69d3      	ldr	r3, [r2, #28]
 8003128:	f023 0304 	bic.w	r3, r3, #4
 800312c:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 800312e:	21c0      	movs	r1, #192	@ 0xc0
 8003130:	480c      	ldr	r0, [pc, #48]	@ (8003164 <HAL_TIM_Encoder_MspDeInit+0x94>)
 8003132:	f002 f85f 	bl	80051f4 <HAL_GPIO_DeInit>
 8003136:	e7d9      	b.n	80030ec <HAL_TIM_Encoder_MspDeInit+0x1c>
    __HAL_RCC_TIM5_CLK_DISABLE();
 8003138:	f502 3201 	add.w	r2, r2, #132096	@ 0x20400
 800313c:	69d3      	ldr	r3, [r2, #28]
 800313e:	f023 0308 	bic.w	r3, r3, #8
 8003142:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8003144:	2103      	movs	r1, #3
 8003146:	4806      	ldr	r0, [pc, #24]	@ (8003160 <HAL_TIM_Encoder_MspDeInit+0x90>)
 8003148:	f002 f854 	bl	80051f4 <HAL_GPIO_DeInit>
}
 800314c:	e7ce      	b.n	80030ec <HAL_TIM_Encoder_MspDeInit+0x1c>
 800314e:	bf00      	nop
 8003150:	40000400 	.word	0x40000400
 8003154:	40000800 	.word	0x40000800
 8003158:	40000c00 	.word	0x40000c00
 800315c:	40021000 	.word	0x40021000
 8003160:	40010800 	.word	0x40010800
 8003164:	40010c00 	.word	0x40010c00

08003168 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003168:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800316a:	480a      	ldr	r0, [pc, #40]	@ (8003194 <MX_USART1_UART_Init+0x2c>)
 800316c:	4b0a      	ldr	r3, [pc, #40]	@ (8003198 <MX_USART1_UART_Init+0x30>)
 800316e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003170:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003174:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003176:	2300      	movs	r3, #0
 8003178:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800317a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800317c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800317e:	220c      	movs	r2, #12
 8003180:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003182:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003184:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003186:	f007 ff35 	bl	800aff4 <HAL_UART_Init>
 800318a:	b900      	cbnz	r0, 800318e <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800318c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800318e:	f7ff fae1 	bl	8002754 <Error_Handler>
}
 8003192:	e7fb      	b.n	800318c <MX_USART1_UART_Init+0x24>
 8003194:	200005fc 	.word	0x200005fc
 8003198:	40013800 	.word	0x40013800

0800319c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800319c:	b570      	push	{r4, r5, r6, lr}
 800319e:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a0:	2300      	movs	r3, #0
 80031a2:	9302      	str	r3, [sp, #8]
 80031a4:	9303      	str	r3, [sp, #12]
 80031a6:	9304      	str	r3, [sp, #16]
 80031a8:	9305      	str	r3, [sp, #20]
  if(uartHandle->Instance==USART1)
 80031aa:	6802      	ldr	r2, [r0, #0]
 80031ac:	4b33      	ldr	r3, [pc, #204]	@ (800327c <HAL_UART_MspInit+0xe0>)
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d001      	beq.n	80031b6 <HAL_UART_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80031b2:	b006      	add	sp, #24
 80031b4:	bd70      	pop	{r4, r5, r6, pc}
 80031b6:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 80031b8:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031c2:	619a      	str	r2, [r3, #24]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80031ca:	9200      	str	r2, [sp, #0]
 80031cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ce:	699a      	ldr	r2, [r3, #24]
 80031d0:	f042 0204 	orr.w	r2, r2, #4
 80031d4:	619a      	str	r2, [r3, #24]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	9301      	str	r3, [sp, #4]
 80031de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80031e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031e4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e6:	2302      	movs	r3, #2
 80031e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031ea:	2303      	movs	r3, #3
 80031ec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ee:	4e24      	ldr	r6, [pc, #144]	@ (8003280 <HAL_UART_MspInit+0xe4>)
 80031f0:	a902      	add	r1, sp, #8
 80031f2:	4630      	mov	r0, r6
 80031f4:	f001 fee2 	bl	8004fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031fc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031fe:	2500      	movs	r5, #0
 8003200:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003202:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003204:	a902      	add	r1, sp, #8
 8003206:	4630      	mov	r0, r6
 8003208:	f001 fed8 	bl	8004fbc <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800320c:	481d      	ldr	r0, [pc, #116]	@ (8003284 <HAL_UART_MspInit+0xe8>)
 800320e:	4b1e      	ldr	r3, [pc, #120]	@ (8003288 <HAL_UART_MspInit+0xec>)
 8003210:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003212:	2310      	movs	r3, #16
 8003214:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003216:	6085      	str	r5, [r0, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003218:	2380      	movs	r3, #128	@ 0x80
 800321a:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800321c:	6105      	str	r5, [r0, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800321e:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003220:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003222:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003226:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003228:	f000 fac4 	bl	80037b4 <HAL_DMA_Init>
 800322c:	b9f8      	cbnz	r0, 800326e <HAL_UART_MspInit+0xd2>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800322e:	4b15      	ldr	r3, [pc, #84]	@ (8003284 <HAL_UART_MspInit+0xe8>)
 8003230:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003232:	625c      	str	r4, [r3, #36]	@ 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003234:	4815      	ldr	r0, [pc, #84]	@ (800328c <HAL_UART_MspInit+0xf0>)
 8003236:	4b16      	ldr	r3, [pc, #88]	@ (8003290 <HAL_UART_MspInit+0xf4>)
 8003238:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800323a:	2300      	movs	r3, #0
 800323c:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800323e:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003240:	2280      	movs	r2, #128	@ 0x80
 8003242:	60c2      	str	r2, [r0, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003244:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003246:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003248:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800324a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800324e:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003250:	f000 fab0 	bl	80037b4 <HAL_DMA_Init>
 8003254:	b970      	cbnz	r0, 8003274 <HAL_UART_MspInit+0xd8>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003256:	4b0d      	ldr	r3, [pc, #52]	@ (800328c <HAL_UART_MspInit+0xf0>)
 8003258:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800325a:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800325c:	2200      	movs	r2, #0
 800325e:	4611      	mov	r1, r2
 8003260:	2025      	movs	r0, #37	@ 0x25
 8003262:	f000 f9ed 	bl	8003640 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003266:	2025      	movs	r0, #37	@ 0x25
 8003268:	f000 f9fa 	bl	8003660 <HAL_NVIC_EnableIRQ>
}
 800326c:	e7a1      	b.n	80031b2 <HAL_UART_MspInit+0x16>
      Error_Handler();
 800326e:	f7ff fa71 	bl	8002754 <Error_Handler>
 8003272:	e7dc      	b.n	800322e <HAL_UART_MspInit+0x92>
      Error_Handler();
 8003274:	f7ff fa6e 	bl	8002754 <Error_Handler>
 8003278:	e7ed      	b.n	8003256 <HAL_UART_MspInit+0xba>
 800327a:	bf00      	nop
 800327c:	40013800 	.word	0x40013800
 8003280:	40010800 	.word	0x40010800
 8003284:	200005b8 	.word	0x200005b8
 8003288:	40020044 	.word	0x40020044
 800328c:	20000574 	.word	0x20000574
 8003290:	40020058 	.word	0x40020058

08003294 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART1)
 8003294:	6802      	ldr	r2, [r0, #0]
 8003296:	4b0d      	ldr	r3, [pc, #52]	@ (80032cc <HAL_UART_MspDeInit+0x38>)
 8003298:	429a      	cmp	r2, r3
 800329a:	d000      	beq.n	800329e <HAL_UART_MspDeInit+0xa>
 800329c:	4770      	bx	lr
{
 800329e:	b510      	push	{r4, lr}
 80032a0:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80032a2:	4a0b      	ldr	r2, [pc, #44]	@ (80032d0 <HAL_UART_MspDeInit+0x3c>)
 80032a4:	6993      	ldr	r3, [r2, #24]
 80032a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032aa:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80032ac:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80032b0:	4808      	ldr	r0, [pc, #32]	@ (80032d4 <HAL_UART_MspDeInit+0x40>)
 80032b2:	f001 ff9f 	bl	80051f4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80032b6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80032b8:	f000 fac8 	bl	800384c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80032bc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80032be:	f000 fac5 	bl	800384c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80032c2:	2025      	movs	r0, #37	@ 0x25
 80032c4:	f000 f9da 	bl	800367c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	bf00      	nop
 80032cc:	40013800 	.word	0x40013800
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40010800 	.word	0x40010800

080032d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80032d8:	f7ff fb72 	bl	80029c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032dc:	480b      	ldr	r0, [pc, #44]	@ (800330c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80032de:	490c      	ldr	r1, [pc, #48]	@ (8003310 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80032e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003314 <LoopFillZerobss+0x16>)
  movs r3, #0
 80032e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032e4:	e002      	b.n	80032ec <LoopCopyDataInit>

080032e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ea:	3304      	adds	r3, #4

080032ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032f0:	d3f9      	bcc.n	80032e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032f2:	4a09      	ldr	r2, [pc, #36]	@ (8003318 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80032f4:	4c09      	ldr	r4, [pc, #36]	@ (800331c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032f8:	e001      	b.n	80032fe <LoopFillZerobss>

080032fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032fc:	3204      	adds	r2, #4

080032fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003300:	d3fb      	bcc.n	80032fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003302:	f00a f8e3 	bl	800d4cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003306:	f7ff fa59 	bl	80027bc <main>
  bx lr
 800330a:	4770      	bx	lr
  ldr r0, =_sdata
 800330c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003310:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003314:	08010f5c 	.word	0x08010f5c
  ldr r2, =_sbss
 8003318:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800331c:	200007bc 	.word	0x200007bc

08003320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003320:	e7fe      	b.n	8003320 <ADC1_2_IRQHandler>
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003322:	4770      	bx	lr

08003324 <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8003324:	4770      	bx	lr
	...

08003328 <HAL_DeInit>:
{
 8003328:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 800332a:	4b06      	ldr	r3, [pc, #24]	@ (8003344 <HAL_DeInit+0x1c>)
 800332c:	f04f 32ff 	mov.w	r2, #4294967295
 8003330:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8003332:	2400      	movs	r4, #0
 8003334:	611c      	str	r4, [r3, #16]
  __HAL_RCC_APB2_FORCE_RESET();
 8003336:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8003338:	60dc      	str	r4, [r3, #12]
  HAL_MspDeInit();
 800333a:	f7ff fff3 	bl	8003324 <HAL_MspDeInit>
}
 800333e:	4620      	mov	r0, r4
 8003340:	bd10      	pop	{r4, pc}
 8003342:	bf00      	nop
 8003344:	40021000 	.word	0x40021000

08003348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003348:	b510      	push	{r4, lr}
 800334a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800334c:	4b0e      	ldr	r3, [pc, #56]	@ (8003388 <HAL_InitTick+0x40>)
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003354:	fbb3 f3f2 	udiv	r3, r3, r2
 8003358:	4a0c      	ldr	r2, [pc, #48]	@ (800338c <HAL_InitTick+0x44>)
 800335a:	6810      	ldr	r0, [r2, #0]
 800335c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003360:	f000 f994 	bl	800368c <HAL_SYSTICK_Config>
 8003364:	b968      	cbnz	r0, 8003382 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003366:	2c0f      	cmp	r4, #15
 8003368:	d901      	bls.n	800336e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800336a:	2001      	movs	r0, #1
 800336c:	e00a      	b.n	8003384 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800336e:	2200      	movs	r2, #0
 8003370:	4621      	mov	r1, r4
 8003372:	f04f 30ff 	mov.w	r0, #4294967295
 8003376:	f000 f963 	bl	8003640 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800337a:	4b05      	ldr	r3, [pc, #20]	@ (8003390 <HAL_InitTick+0x48>)
 800337c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800337e:	2000      	movs	r0, #0
 8003380:	e000      	b.n	8003384 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8003382:	2001      	movs	r0, #1
}
 8003384:	bd10      	pop	{r4, pc}
 8003386:	bf00      	nop
 8003388:	2000000c 	.word	0x2000000c
 800338c:	20000008 	.word	0x20000008
 8003390:	20000010 	.word	0x20000010

08003394 <HAL_Init>:
{
 8003394:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003396:	4a07      	ldr	r2, [pc, #28]	@ (80033b4 <HAL_Init+0x20>)
 8003398:	6813      	ldr	r3, [r2, #0]
 800339a:	f043 0310 	orr.w	r3, r3, #16
 800339e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033a0:	2003      	movs	r0, #3
 80033a2:	f000 f93b 	bl	800361c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80033a6:	200f      	movs	r0, #15
 80033a8:	f7ff ffce 	bl	8003348 <HAL_InitTick>
  HAL_MspInit();
 80033ac:	f7ff fa2e 	bl	800280c <HAL_MspInit>
}
 80033b0:	2000      	movs	r0, #0
 80033b2:	bd08      	pop	{r3, pc}
 80033b4:	40022000 	.word	0x40022000

080033b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80033b8:	4a03      	ldr	r2, [pc, #12]	@ (80033c8 <HAL_IncTick+0x10>)
 80033ba:	6811      	ldr	r1, [r2, #0]
 80033bc:	4b03      	ldr	r3, [pc, #12]	@ (80033cc <HAL_IncTick+0x14>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	440b      	add	r3, r1
 80033c2:	6013      	str	r3, [r2, #0]
}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	20000644 	.word	0x20000644
 80033cc:	2000000c 	.word	0x2000000c

080033d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80033d0:	4b01      	ldr	r3, [pc, #4]	@ (80033d8 <HAL_GetTick+0x8>)
 80033d2:	6818      	ldr	r0, [r3, #0]
}
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000644 	.word	0x20000644

080033dc <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 80033dc:	4b01      	ldr	r3, [pc, #4]	@ (80033e4 <HAL_GetTickPrio+0x8>)
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000010 	.word	0x20000010

080033e8 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 80033e8:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status  = HAL_OK;
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 80033ea:	4b08      	ldr	r3, [pc, #32]	@ (800340c <HAL_SetTickFreq+0x24>)
 80033ec:	781c      	ldrb	r4, [r3, #0]
 80033ee:	4284      	cmp	r4, r0
 80033f0:	d101      	bne.n	80033f6 <HAL_SetTickFreq+0xe>
  HAL_StatusTypeDef status  = HAL_OK;
 80033f2:	2000      	movs	r0, #0
      uwTickFreq = prevTickFreq;
    }
  }

  return status;
}
 80033f4:	bd10      	pop	{r4, pc}
    uwTickFreq = Freq;
 80033f6:	7018      	strb	r0, [r3, #0]
    status = HAL_InitTick(uwTickPrio);
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <HAL_SetTickFreq+0x28>)
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	f7ff ffa4 	bl	8003348 <HAL_InitTick>
    if (status != HAL_OK)
 8003400:	2800      	cmp	r0, #0
 8003402:	d0f7      	beq.n	80033f4 <HAL_SetTickFreq+0xc>
      uwTickFreq = prevTickFreq;
 8003404:	4b01      	ldr	r3, [pc, #4]	@ (800340c <HAL_SetTickFreq+0x24>)
 8003406:	701c      	strb	r4, [r3, #0]
 8003408:	e7f4      	b.n	80033f4 <HAL_SetTickFreq+0xc>
 800340a:	bf00      	nop
 800340c:	2000000c 	.word	0x2000000c
 8003410:	20000010 	.word	0x20000010

08003414 <HAL_GetTickFreq>:
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
  return uwTickFreq;
}
 8003414:	4b01      	ldr	r3, [pc, #4]	@ (800341c <HAL_GetTickFreq+0x8>)
 8003416:	7818      	ldrb	r0, [r3, #0]
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	2000000c 	.word	0x2000000c

08003420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003420:	b538      	push	{r3, r4, r5, lr}
 8003422:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003424:	f7ff ffd4 	bl	80033d0 <HAL_GetTick>
 8003428:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800342a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800342e:	d002      	beq.n	8003436 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003430:	4b04      	ldr	r3, [pc, #16]	@ (8003444 <HAL_Delay+0x24>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003436:	f7ff ffcb 	bl	80033d0 <HAL_GetTick>
 800343a:	1b40      	subs	r0, r0, r5
 800343c:	42a0      	cmp	r0, r4
 800343e:	d3fa      	bcc.n	8003436 <HAL_Delay+0x16>
  {
  }
}
 8003440:	bd38      	pop	{r3, r4, r5, pc}
 8003442:	bf00      	nop
 8003444:	2000000c 	.word	0x2000000c

08003448 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003448:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800344c:	6913      	ldr	r3, [r2, #16]
 800344e:	f023 0302 	bic.w	r3, r3, #2
 8003452:	6113      	str	r3, [r2, #16]
}
 8003454:	4770      	bx	lr

08003456 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003456:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800345a:	6913      	ldr	r3, [r2, #16]
 800345c:	f043 0302 	orr.w	r3, r3, #2
 8003460:	6113      	str	r3, [r2, #16]
}
 8003462:	4770      	bx	lr

08003464 <HAL_GetHalVersion>:
  * @retval version 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F1xx_HAL_VERSION;
}
 8003464:	4800      	ldr	r0, [pc, #0]	@ (8003468 <HAL_GetHalVersion+0x4>)
 8003466:	4770      	bx	lr
 8003468:	01010a00 	.word	0x01010a00

0800346c <HAL_GetREVID>:
  *       Refer to errata sheet of these devices for more details.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return ((DBGMCU->IDCODE) >> DBGMCU_IDCODE_REV_ID_Pos);
 800346c:	4b01      	ldr	r3, [pc, #4]	@ (8003474 <HAL_GetREVID+0x8>)
 800346e:	6818      	ldr	r0, [r3, #0]
}
 8003470:	0c00      	lsrs	r0, r0, #16
 8003472:	4770      	bx	lr
 8003474:	e0042000 	.word	0xe0042000

08003478 <HAL_GetDEVID>:
  *       Refer to errata sheet of these devices for more details.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return ((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8003478:	4b02      	ldr	r3, [pc, #8]	@ (8003484 <HAL_GetDEVID+0xc>)
 800347a:	6818      	ldr	r0, [r3, #0]
}
 800347c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	e0042000 	.word	0xe0042000

08003488 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
   return(READ_REG(*((uint32_t *)UID_BASE)));
}
 8003488:	4b01      	ldr	r3, [pc, #4]	@ (8003490 <HAL_GetUIDw0+0x8>)
 800348a:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
 800348e:	4770      	bx	lr
 8003490:	1ffff000 	.word	0x1ffff000

08003494 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8003494:	4b01      	ldr	r3, [pc, #4]	@ (800349c <HAL_GetUIDw1+0x8>)
 8003496:	f8d3 07ec 	ldr.w	r0, [r3, #2028]	@ 0x7ec
 800349a:	4770      	bx	lr
 800349c:	1ffff000 	.word	0x1ffff000

080034a0 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 80034a0:	4b01      	ldr	r3, [pc, #4]	@ (80034a8 <HAL_GetUIDw2+0x8>)
 80034a2:	f8d3 07f0 	ldr.w	r0, [r3, #2032]	@ 0x7f0
 80034a6:	4770      	bx	lr
 80034a8:	1ffff000 	.word	0x1ffff000

080034ac <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80034ac:	4a02      	ldr	r2, [pc, #8]	@ (80034b8 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80034ae:	6853      	ldr	r3, [r2, #4]
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	6053      	str	r3, [r2, #4]
}
 80034b6:	4770      	bx	lr
 80034b8:	e0042000 	.word	0xe0042000

080034bc <HAL_DBGMCU_DisableDBGSleepMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80034bc:	4a02      	ldr	r2, [pc, #8]	@ (80034c8 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80034be:	6853      	ldr	r3, [r2, #4]
 80034c0:	f023 0301 	bic.w	r3, r3, #1
 80034c4:	6053      	str	r3, [r2, #4]
}
 80034c6:	4770      	bx	lr
 80034c8:	e0042000 	.word	0xe0042000

080034cc <HAL_DBGMCU_EnableDBGStopMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80034cc:	4a02      	ldr	r2, [pc, #8]	@ (80034d8 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80034ce:	6853      	ldr	r3, [r2, #4]
 80034d0:	f043 0302 	orr.w	r3, r3, #2
 80034d4:	6053      	str	r3, [r2, #4]
}
 80034d6:	4770      	bx	lr
 80034d8:	e0042000 	.word	0xe0042000

080034dc <HAL_DBGMCU_DisableDBGStopMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80034dc:	4a02      	ldr	r2, [pc, #8]	@ (80034e8 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80034de:	6853      	ldr	r3, [r2, #4]
 80034e0:	f023 0302 	bic.w	r3, r3, #2
 80034e4:	6053      	str	r3, [r2, #4]
}
 80034e6:	4770      	bx	lr
 80034e8:	e0042000 	.word	0xe0042000

080034ec <HAL_DBGMCU_EnableDBGStandbyMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80034ec:	4a02      	ldr	r2, [pc, #8]	@ (80034f8 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80034ee:	6853      	ldr	r3, [r2, #4]
 80034f0:	f043 0304 	orr.w	r3, r3, #4
 80034f4:	6053      	str	r3, [r2, #4]
}
 80034f6:	4770      	bx	lr
 80034f8:	e0042000 	.word	0xe0042000

080034fc <HAL_DBGMCU_DisableDBGStandbyMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80034fc:	4a02      	ldr	r2, [pc, #8]	@ (8003508 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80034fe:	6853      	ldr	r3, [r2, #4]
 8003500:	f023 0304 	bic.w	r3, r3, #4
 8003504:	6053      	str	r3, [r2, #4]
}
 8003506:	4770      	bx	lr
 8003508:	e0042000 	.word	0xe0042000

0800350c <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 800350c:	2800      	cmp	r0, #0
 800350e:	db0c      	blt.n	800352a <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003510:	f000 021f 	and.w	r2, r0, #31
 8003514:	0940      	lsrs	r0, r0, #5
 8003516:	2301      	movs	r3, #1
 8003518:	4093      	lsls	r3, r2
 800351a:	3020      	adds	r0, #32
 800351c:	4a03      	ldr	r2, [pc, #12]	@ (800352c <__NVIC_DisableIRQ+0x20>)
 800351e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003522:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003526:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800352a:	4770      	bx	lr
 800352c:	e000e100 	.word	0xe000e100

08003530 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003530:	2800      	cmp	r0, #0
 8003532:	db08      	blt.n	8003546 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003534:	0109      	lsls	r1, r1, #4
 8003536:	b2c9      	uxtb	r1, r1
 8003538:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800353c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003540:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8003544:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003546:	f000 000f 	and.w	r0, r0, #15
 800354a:	0109      	lsls	r1, r1, #4
 800354c:	b2c9      	uxtb	r1, r1
 800354e:	4b01      	ldr	r3, [pc, #4]	@ (8003554 <__NVIC_SetPriority+0x24>)
 8003550:	5419      	strb	r1, [r3, r0]
  }
}
 8003552:	4770      	bx	lr
 8003554:	e000ed14 	.word	0xe000ed14

08003558 <__NVIC_GetPriority>:
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
 8003558:	2800      	cmp	r0, #0
 800355a:	db07      	blt.n	800356c <__NVIC_GetPriority+0x14>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 800355c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003560:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003564:	f890 0300 	ldrb.w	r0, [r0, #768]	@ 0x300
 8003568:	0900      	lsrs	r0, r0, #4
 800356a:	4770      	bx	lr
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 800356c:	f000 000f 	and.w	r0, r0, #15
 8003570:	4b01      	ldr	r3, [pc, #4]	@ (8003578 <__NVIC_GetPriority+0x20>)
 8003572:	5c18      	ldrb	r0, [r3, r0]
 8003574:	0900      	lsrs	r0, r0, #4
  }
}
 8003576:	4770      	bx	lr
 8003578:	e000ed14 	.word	0xe000ed14

0800357c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800357c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800357e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003582:	f1c0 0c07 	rsb	ip, r0, #7
 8003586:	f1bc 0f04 	cmp.w	ip, #4
 800358a:	bf28      	it	cs
 800358c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003590:	1d03      	adds	r3, r0, #4
 8003592:	2b06      	cmp	r3, #6
 8003594:	d90f      	bls.n	80035b6 <NVIC_EncodePriority+0x3a>
 8003596:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003598:	f04f 3eff 	mov.w	lr, #4294967295
 800359c:	fa0e f00c 	lsl.w	r0, lr, ip
 80035a0:	ea21 0100 	bic.w	r1, r1, r0
 80035a4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035a6:	fa0e fe03 	lsl.w	lr, lr, r3
 80035aa:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80035ae:	ea41 0002 	orr.w	r0, r1, r2
 80035b2:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035b6:	2300      	movs	r3, #0
 80035b8:	e7ee      	b.n	8003598 <NVIC_EncodePriority+0x1c>

080035ba <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 80035ba:	b510      	push	{r4, lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035bc:	f001 0107 	and.w	r1, r1, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c0:	f1c1 0c07 	rsb	ip, r1, #7
 80035c4:	f1bc 0f04 	cmp.w	ip, #4
 80035c8:	bf28      	it	cs
 80035ca:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ce:	1d0c      	adds	r4, r1, #4
 80035d0:	2c06      	cmp	r4, #6
 80035d2:	d90f      	bls.n	80035f4 <NVIC_DecodePriority+0x3a>
 80035d4:	3903      	subs	r1, #3

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 80035d6:	fa20 f401 	lsr.w	r4, r0, r1
 80035da:	f04f 3eff 	mov.w	lr, #4294967295
 80035de:	fa0e fc0c 	lsl.w	ip, lr, ip
 80035e2:	ea24 040c 	bic.w	r4, r4, ip
 80035e6:	6014      	str	r4, [r2, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 80035e8:	fa0e fe01 	lsl.w	lr, lr, r1
 80035ec:	ea20 000e 	bic.w	r0, r0, lr
 80035f0:	6018      	str	r0, [r3, #0]
}
 80035f2:	bd10      	pop	{r4, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035f4:	2100      	movs	r1, #0
 80035f6:	e7ee      	b.n	80035d6 <NVIC_DecodePriority+0x1c>

080035f8 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80035f8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80035fc:	4905      	ldr	r1, [pc, #20]	@ (8003614 <__NVIC_SystemReset+0x1c>)
 80035fe:	68ca      	ldr	r2, [r1, #12]
 8003600:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003604:	4b04      	ldr	r3, [pc, #16]	@ (8003618 <__NVIC_SystemReset+0x20>)
 8003606:	4313      	orrs	r3, r2
 8003608:	60cb      	str	r3, [r1, #12]
 800360a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800360e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8003610:	e7fd      	b.n	800360e <__NVIC_SystemReset+0x16>
 8003612:	bf00      	nop
 8003614:	e000ed00 	.word	0xe000ed00
 8003618:	05fa0004 	.word	0x05fa0004

0800361c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800361c:	4a07      	ldr	r2, [pc, #28]	@ (800363c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800361e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003620:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003624:	041b      	lsls	r3, r3, #16
 8003626:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003628:	0200      	lsls	r0, r0, #8
 800362a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800362e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003630:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003638:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800363a:	4770      	bx	lr
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003640:	b510      	push	{r4, lr}
 8003642:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003644:	4b05      	ldr	r3, [pc, #20]	@ (800365c <HAL_NVIC_SetPriority+0x1c>)
 8003646:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003648:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800364c:	f7ff ff96 	bl	800357c <NVIC_EncodePriority>
 8003650:	4601      	mov	r1, r0
 8003652:	4620      	mov	r0, r4
 8003654:	f7ff ff6c 	bl	8003530 <__NVIC_SetPriority>
}
 8003658:	bd10      	pop	{r4, pc}
 800365a:	bf00      	nop
 800365c:	e000ed00 	.word	0xe000ed00

08003660 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003660:	2800      	cmp	r0, #0
 8003662:	db07      	blt.n	8003674 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003664:	f000 021f 	and.w	r2, r0, #31
 8003668:	0940      	lsrs	r0, r0, #5
 800366a:	2301      	movs	r3, #1
 800366c:	4093      	lsls	r3, r2
 800366e:	4a02      	ldr	r2, [pc, #8]	@ (8003678 <HAL_NVIC_EnableIRQ+0x18>)
 8003670:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	e000e100 	.word	0xe000e100

0800367c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800367c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800367e:	f7ff ff45 	bl	800350c <__NVIC_DisableIRQ>
}
 8003682:	bd08      	pop	{r3, pc}

08003684 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003684:	b508      	push	{r3, lr}
  /* System Reset */
  NVIC_SystemReset();
 8003686:	f7ff ffb7 	bl	80035f8 <__NVIC_SystemReset>
	...

0800368c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800368c:	3801      	subs	r0, #1
 800368e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8003692:	d20b      	bcs.n	80036ac <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003694:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003698:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369a:	4a05      	ldr	r2, [pc, #20]	@ (80036b0 <HAL_SYSTICK_Config+0x24>)
 800369c:	21f0      	movs	r1, #240	@ 0xf0
 800369e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036a2:	2000      	movs	r0, #0
 80036a4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036a6:	2207      	movs	r2, #7
 80036a8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036aa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80036ac:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80036ae:	4770      	bx	lr
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <HAL_NVIC_GetPriorityGrouping>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036b4:	4b02      	ldr	r3, [pc, #8]	@ (80036c0 <HAL_NVIC_GetPriorityGrouping+0xc>)
 80036b6:	68d8      	ldr	r0, [r3, #12]
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
}
 80036b8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 80036c4:	b570      	push	{r4, r5, r6, lr}
 80036c6:	460c      	mov	r4, r1
 80036c8:	4615      	mov	r5, r2
 80036ca:	461e      	mov	r6, r3
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 80036cc:	f7ff ff44 	bl	8003558 <__NVIC_GetPriority>
 80036d0:	4633      	mov	r3, r6
 80036d2:	462a      	mov	r2, r5
 80036d4:	4621      	mov	r1, r4
 80036d6:	f7ff ff70 	bl	80035ba <NVIC_DecodePriority>
}
 80036da:	bd70      	pop	{r4, r5, r6, pc}

080036dc <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80036dc:	2800      	cmp	r0, #0
 80036de:	db08      	blt.n	80036f2 <HAL_NVIC_SetPendingIRQ+0x16>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036e0:	f000 021f 	and.w	r2, r0, #31
 80036e4:	0940      	lsrs	r0, r0, #5
 80036e6:	2301      	movs	r3, #1
 80036e8:	4093      	lsls	r3, r2
 80036ea:	3040      	adds	r0, #64	@ 0x40
 80036ec:	4a01      	ldr	r2, [pc, #4]	@ (80036f4 <HAL_NVIC_SetPendingIRQ+0x18>)
 80036ee:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 80036f2:	4770      	bx	lr
 80036f4:	e000e100 	.word	0xe000e100

080036f8 <HAL_NVIC_GetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80036f8:	2800      	cmp	r0, #0
 80036fa:	db0b      	blt.n	8003714 <HAL_NVIC_GetPendingIRQ+0x1c>
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80036fc:	0943      	lsrs	r3, r0, #5
 80036fe:	3340      	adds	r3, #64	@ 0x40
 8003700:	4a05      	ldr	r2, [pc, #20]	@ (8003718 <HAL_NVIC_GetPendingIRQ+0x20>)
 8003702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003706:	f000 001f 	and.w	r0, r0, #31
 800370a:	fa23 f000 	lsr.w	r0, r3, r0
 800370e:	f000 0001 	and.w	r0, r0, #1
 8003712:	4770      	bx	lr
    return(0U);
 8003714:	2000      	movs	r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
 8003716:	4770      	bx	lr
 8003718:	e000e100 	.word	0xe000e100

0800371c <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800371c:	2800      	cmp	r0, #0
 800371e:	db08      	blt.n	8003732 <HAL_NVIC_ClearPendingIRQ+0x16>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003720:	f000 021f 	and.w	r2, r0, #31
 8003724:	0940      	lsrs	r0, r0, #5
 8003726:	2301      	movs	r3, #1
 8003728:	4093      	lsls	r3, r2
 800372a:	3060      	adds	r0, #96	@ 0x60
 800372c:	4a01      	ldr	r2, [pc, #4]	@ (8003734 <HAL_NVIC_ClearPendingIRQ+0x18>)
 800372e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8003732:	4770      	bx	lr
 8003734:	e000e100 	.word	0xe000e100

08003738 <HAL_NVIC_GetActive>:
  if ((int32_t)(IRQn) >= 0)
 8003738:	2800      	cmp	r0, #0
 800373a:	db0b      	blt.n	8003754 <HAL_NVIC_GetActive+0x1c>
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800373c:	0943      	lsrs	r3, r0, #5
 800373e:	3380      	adds	r3, #128	@ 0x80
 8003740:	4a05      	ldr	r2, [pc, #20]	@ (8003758 <HAL_NVIC_GetActive+0x20>)
 8003742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003746:	f000 001f 	and.w	r0, r0, #31
 800374a:	fa23 f000 	lsr.w	r0, r3, r0
 800374e:	f000 0001 	and.w	r0, r0, #1
 8003752:	4770      	bx	lr
    return(0U);
 8003754:	2000      	movs	r0, #0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
}
 8003756:	4770      	bx	lr
 8003758:	e000e100 	.word	0xe000e100

0800375c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800375c:	2804      	cmp	r0, #4
 800375e:	d006      	beq.n	800376e <HAL_SYSTICK_CLKSourceConfig+0x12>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003760:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003764:	6913      	ldr	r3, [r2, #16]
 8003766:	f023 0304 	bic.w	r3, r3, #4
 800376a:	6113      	str	r3, [r2, #16]
  }
}
 800376c:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800376e:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003772:	6913      	ldr	r3, [r2, #16]
 8003774:	f043 0304 	orr.w	r3, r3, #4
 8003778:	6113      	str	r3, [r2, #16]
 800377a:	4770      	bx	lr

0800377c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800377c:	4770      	bx	lr

0800377e <HAL_SYSTICK_IRQHandler>:
{
 800377e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8003780:	f7ff fffc 	bl	800377c <HAL_SYSTICK_Callback>
}
 8003784:	bd08      	pop	{r3, pc}

08003786 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003786:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003788:	2401      	movs	r4, #1
 800378a:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800378c:	40ac      	lsls	r4, r5
 800378e:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8003790:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003792:	6804      	ldr	r4, [r0, #0]
 8003794:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003796:	6843      	ldr	r3, [r0, #4]
 8003798:	2b10      	cmp	r3, #16
 800379a:	d005      	beq.n	80037a8 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800379c:	6803      	ldr	r3, [r0, #0]
 800379e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80037a0:	6803      	ldr	r3, [r0, #0]
 80037a2:	60da      	str	r2, [r3, #12]
  }
}
 80037a4:	bc30      	pop	{r4, r5}
 80037a6:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80037a8:	6803      	ldr	r3, [r0, #0]
 80037aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80037ac:	6803      	ldr	r3, [r0, #0]
 80037ae:	60d9      	str	r1, [r3, #12]
 80037b0:	e7f8      	b.n	80037a4 <DMA_SetConfig+0x1e>
	...

080037b4 <HAL_DMA_Init>:
  if(hdma == NULL)
 80037b4:	2800      	cmp	r0, #0
 80037b6:	d03a      	beq.n	800382e <HAL_DMA_Init+0x7a>
{
 80037b8:	b410      	push	{r4}
 80037ba:	4602      	mov	r2, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037bc:	6800      	ldr	r0, [r0, #0]
 80037be:	4b1d      	ldr	r3, [pc, #116]	@ (8003834 <HAL_DMA_Init+0x80>)
 80037c0:	4298      	cmp	r0, r3
 80037c2:	d829      	bhi.n	8003818 <HAL_DMA_Init+0x64>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80037c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003838 <HAL_DMA_Init+0x84>)
 80037c6:	4403      	add	r3, r0
 80037c8:	491c      	ldr	r1, [pc, #112]	@ (800383c <HAL_DMA_Init+0x88>)
 80037ca:	fba1 1303 	umull	r1, r3, r1, r3
 80037ce:	091b      	lsrs	r3, r3, #4
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	6413      	str	r3, [r2, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80037d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003840 <HAL_DMA_Init+0x8c>)
 80037d6:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 80037d8:	2302      	movs	r3, #2
 80037da:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  tmp = hdma->Instance->CCR;
 80037de:	6801      	ldr	r1, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037e0:	f421 517f 	bic.w	r1, r1, #16320	@ 0x3fc0
 80037e4:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
  tmp |=  hdma->Init.Direction        |
 80037e8:	6853      	ldr	r3, [r2, #4]
 80037ea:	6894      	ldr	r4, [r2, #8]
 80037ec:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ee:	68d4      	ldr	r4, [r2, #12]
 80037f0:	4323      	orrs	r3, r4
 80037f2:	6914      	ldr	r4, [r2, #16]
 80037f4:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f6:	6954      	ldr	r4, [r2, #20]
 80037f8:	4323      	orrs	r3, r4
 80037fa:	6994      	ldr	r4, [r2, #24]
 80037fc:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80037fe:	69d4      	ldr	r4, [r2, #28]
 8003800:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8003802:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 8003804:	6003      	str	r3, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003806:	2000      	movs	r0, #0
 8003808:	6390      	str	r0, [r2, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_READY;
 800380a:	2301      	movs	r3, #1
 800380c:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  hdma->Lock = HAL_UNLOCKED;
 8003810:	f882 0020 	strb.w	r0, [r2, #32]
}
 8003814:	bc10      	pop	{r4}
 8003816:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003818:	4b0a      	ldr	r3, [pc, #40]	@ (8003844 <HAL_DMA_Init+0x90>)
 800381a:	4403      	add	r3, r0
 800381c:	4907      	ldr	r1, [pc, #28]	@ (800383c <HAL_DMA_Init+0x88>)
 800381e:	fba1 1303 	umull	r1, r3, r1, r3
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	6413      	str	r3, [r2, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8003828:	4b07      	ldr	r3, [pc, #28]	@ (8003848 <HAL_DMA_Init+0x94>)
 800382a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800382c:	e7d4      	b.n	80037d8 <HAL_DMA_Init+0x24>
    return HAL_ERROR;
 800382e:	2001      	movs	r0, #1
}
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40020407 	.word	0x40020407
 8003838:	bffdfff8 	.word	0xbffdfff8
 800383c:	cccccccd 	.word	0xcccccccd
 8003840:	40020000 	.word	0x40020000
 8003844:	bffdfbf8 	.word	0xbffdfbf8
 8003848:	40020400 	.word	0x40020400

0800384c <HAL_DMA_DeInit>:
  if(hdma == NULL)
 800384c:	4603      	mov	r3, r0
 800384e:	2800      	cmp	r0, #0
 8003850:	d036      	beq.n	80038c0 <HAL_DMA_DeInit+0x74>
  __HAL_DMA_DISABLE(hdma);
 8003852:	6801      	ldr	r1, [r0, #0]
 8003854:	680a      	ldr	r2, [r1, #0]
 8003856:	f022 0201 	bic.w	r2, r2, #1
 800385a:	600a      	str	r2, [r1, #0]
  hdma->Instance->CCR  = 0U;
 800385c:	6801      	ldr	r1, [r0, #0]
 800385e:	2200      	movs	r2, #0
 8003860:	600a      	str	r2, [r1, #0]
  hdma->Instance->CNDTR = 0U;
 8003862:	6801      	ldr	r1, [r0, #0]
 8003864:	604a      	str	r2, [r1, #4]
  hdma->Instance->CPAR  = 0U;
 8003866:	6801      	ldr	r1, [r0, #0]
 8003868:	608a      	str	r2, [r1, #8]
  hdma->Instance->CMAR = 0U;
 800386a:	6801      	ldr	r1, [r0, #0]
 800386c:	60ca      	str	r2, [r1, #12]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800386e:	6801      	ldr	r1, [r0, #0]
 8003870:	4a14      	ldr	r2, [pc, #80]	@ (80038c4 <HAL_DMA_DeInit+0x78>)
 8003872:	4291      	cmp	r1, r2
 8003874:	d819      	bhi.n	80038aa <HAL_DMA_DeInit+0x5e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003876:	4a14      	ldr	r2, [pc, #80]	@ (80038c8 <HAL_DMA_DeInit+0x7c>)
 8003878:	440a      	add	r2, r1
 800387a:	4914      	ldr	r1, [pc, #80]	@ (80038cc <HAL_DMA_DeInit+0x80>)
 800387c:	fba1 1202 	umull	r1, r2, r1, r2
 8003880:	0912      	lsrs	r2, r2, #4
 8003882:	0092      	lsls	r2, r2, #2
 8003884:	6402      	str	r2, [r0, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8003886:	4a12      	ldr	r2, [pc, #72]	@ (80038d0 <HAL_DMA_DeInit+0x84>)
 8003888:	63c2      	str	r2, [r0, #60]	@ 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800388a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800388c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800388e:	2201      	movs	r2, #1
 8003890:	4082      	lsls	r2, r0
 8003892:	604a      	str	r2, [r1, #4]
  hdma->XferCpltCallback = NULL;
 8003894:	2000      	movs	r0, #0
 8003896:	6298      	str	r0, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 8003898:	62d8      	str	r0, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 800389a:	6318      	str	r0, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 800389c:	6358      	str	r0, [r3, #52]	@ 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800389e:	6398      	str	r0, [r3, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_RESET;
 80038a0:	f883 0021 	strb.w	r0, [r3, #33]	@ 0x21
  __HAL_UNLOCK(hdma);
 80038a4:	f883 0020 	strb.w	r0, [r3, #32]
  return HAL_OK;
 80038a8:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80038aa:	4a0a      	ldr	r2, [pc, #40]	@ (80038d4 <HAL_DMA_DeInit+0x88>)
 80038ac:	440a      	add	r2, r1
 80038ae:	4907      	ldr	r1, [pc, #28]	@ (80038cc <HAL_DMA_DeInit+0x80>)
 80038b0:	fba1 1202 	umull	r1, r2, r1, r2
 80038b4:	0912      	lsrs	r2, r2, #4
 80038b6:	0092      	lsls	r2, r2, #2
 80038b8:	6402      	str	r2, [r0, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80038ba:	4a07      	ldr	r2, [pc, #28]	@ (80038d8 <HAL_DMA_DeInit+0x8c>)
 80038bc:	63c2      	str	r2, [r0, #60]	@ 0x3c
 80038be:	e7e4      	b.n	800388a <HAL_DMA_DeInit+0x3e>
    return HAL_ERROR;
 80038c0:	2001      	movs	r0, #1
}
 80038c2:	4770      	bx	lr
 80038c4:	40020407 	.word	0x40020407
 80038c8:	bffdfff8 	.word	0xbffdfff8
 80038cc:	cccccccd 	.word	0xcccccccd
 80038d0:	40020000 	.word	0x40020000
 80038d4:	bffdfbf8 	.word	0xbffdfbf8
 80038d8:	40020400 	.word	0x40020400

080038dc <HAL_DMA_Start>:
{
 80038dc:	b570      	push	{r4, r5, r6, lr}
 80038de:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80038e0:	f890 0020 	ldrb.w	r0, [r0, #32]
 80038e4:	2801      	cmp	r0, #1
 80038e6:	d020      	beq.n	800392a <HAL_DMA_Start+0x4e>
 80038e8:	2001      	movs	r0, #1
 80038ea:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80038ee:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 80038f2:	b2c0      	uxtb	r0, r0
 80038f4:	2801      	cmp	r0, #1
 80038f6:	d004      	beq.n	8003902 <HAL_DMA_Start+0x26>
   __HAL_UNLOCK(hdma);  
 80038f8:	2300      	movs	r3, #0
 80038fa:	f884 3020 	strb.w	r3, [r4, #32]
   status = HAL_BUSY;
 80038fe:	2002      	movs	r0, #2
}
 8003900:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003902:	2002      	movs	r0, #2
 8003904:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003908:	2500      	movs	r5, #0
 800390a:	63a5      	str	r5, [r4, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 800390c:	6826      	ldr	r6, [r4, #0]
 800390e:	6830      	ldr	r0, [r6, #0]
 8003910:	f020 0001 	bic.w	r0, r0, #1
 8003914:	6030      	str	r0, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003916:	4620      	mov	r0, r4
 8003918:	f7ff ff35 	bl	8003786 <DMA_SetConfig>
    __HAL_DMA_ENABLE(hdma);
 800391c:	6822      	ldr	r2, [r4, #0]
 800391e:	6813      	ldr	r3, [r2, #0]
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003926:	4628      	mov	r0, r5
 8003928:	e7ea      	b.n	8003900 <HAL_DMA_Start+0x24>
  __HAL_LOCK(hdma);
 800392a:	2002      	movs	r0, #2
 800392c:	e7e8      	b.n	8003900 <HAL_DMA_Start+0x24>

0800392e <HAL_DMA_Start_IT>:
{
 800392e:	b538      	push	{r3, r4, r5, lr}
 8003930:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003932:	f890 0020 	ldrb.w	r0, [r0, #32]
 8003936:	2801      	cmp	r0, #1
 8003938:	d032      	beq.n	80039a0 <HAL_DMA_Start_IT+0x72>
 800393a:	2001      	movs	r0, #1
 800393c:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003940:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 8003944:	b2c0      	uxtb	r0, r0
 8003946:	2801      	cmp	r0, #1
 8003948:	d004      	beq.n	8003954 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 800394a:	2300      	movs	r3, #0
 800394c:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8003950:	2002      	movs	r0, #2
}
 8003952:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003954:	2002      	movs	r0, #2
 8003956:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800395a:	2000      	movs	r0, #0
 800395c:	63a0      	str	r0, [r4, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 800395e:	6825      	ldr	r5, [r4, #0]
 8003960:	6828      	ldr	r0, [r5, #0]
 8003962:	f020 0001 	bic.w	r0, r0, #1
 8003966:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003968:	4620      	mov	r0, r4
 800396a:	f7ff ff0c 	bl	8003786 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 800396e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003970:	b15b      	cbz	r3, 800398a <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003972:	6822      	ldr	r2, [r4, #0]
 8003974:	6813      	ldr	r3, [r2, #0]
 8003976:	f043 030e 	orr.w	r3, r3, #14
 800397a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800397c:	6822      	ldr	r2, [r4, #0]
 800397e:	6813      	ldr	r3, [r2, #0]
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003986:	2000      	movs	r0, #0
 8003988:	e7e3      	b.n	8003952 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800398a:	6822      	ldr	r2, [r4, #0]
 800398c:	6813      	ldr	r3, [r2, #0]
 800398e:	f023 0304 	bic.w	r3, r3, #4
 8003992:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003994:	6822      	ldr	r2, [r4, #0]
 8003996:	6813      	ldr	r3, [r2, #0]
 8003998:	f043 030a 	orr.w	r3, r3, #10
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e7ed      	b.n	800397c <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80039a0:	2002      	movs	r0, #2
 80039a2:	e7d6      	b.n	8003952 <HAL_DMA_Start_IT+0x24>

080039a4 <HAL_DMA_Abort>:
{
 80039a4:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039a6:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	2a02      	cmp	r2, #2
 80039ae:	d006      	beq.n	80039be <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b0:	2204      	movs	r2, #4
 80039b2:	6382      	str	r2, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 80039b4:	2200      	movs	r2, #0
 80039b6:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 80039ba:	2001      	movs	r0, #1
 80039bc:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039be:	6801      	ldr	r1, [r0, #0]
 80039c0:	680a      	ldr	r2, [r1, #0]
 80039c2:	f022 020e 	bic.w	r2, r2, #14
 80039c6:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80039c8:	6801      	ldr	r1, [r0, #0]
 80039ca:	680a      	ldr	r2, [r1, #0]
 80039cc:	f022 0201 	bic.w	r2, r2, #1
 80039d0:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039d2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80039d4:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80039d6:	2101      	movs	r1, #1
 80039d8:	fa01 f202 	lsl.w	r2, r1, r2
 80039dc:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 80039de:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  __HAL_UNLOCK(hdma);      
 80039e2:	2000      	movs	r0, #0
 80039e4:	f883 0020 	strb.w	r0, [r3, #32]
}
 80039e8:	4770      	bx	lr
	...

080039ec <HAL_DMA_Abort_IT>:
{  
 80039ec:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039ee:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d003      	beq.n	8003a00 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039f8:	2304      	movs	r3, #4
 80039fa:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 80039fc:	2001      	movs	r0, #1
}
 80039fe:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a00:	6802      	ldr	r2, [r0, #0]
 8003a02:	6813      	ldr	r3, [r2, #0]
 8003a04:	f023 030e 	bic.w	r3, r3, #14
 8003a08:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003a0a:	6802      	ldr	r2, [r0, #0]
 8003a0c:	6813      	ldr	r3, [r2, #0]
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 8003a12:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003a14:	6803      	ldr	r3, [r0, #0]
 8003a16:	4a4c      	ldr	r2, [pc, #304]	@ (8003b48 <HAL_DMA_Abort_IT+0x15c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d94e      	bls.n	8003aba <HAL_DMA_Abort_IT+0xce>
 8003a1c:	3a78      	subs	r2, #120	@ 0x78
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d024      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x80>
 8003a22:	3214      	adds	r2, #20
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d030      	beq.n	8003a8a <HAL_DMA_Abort_IT+0x9e>
 8003a28:	3214      	adds	r2, #20
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d02f      	beq.n	8003a8e <HAL_DMA_Abort_IT+0xa2>
 8003a2e:	3214      	adds	r2, #20
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d02f      	beq.n	8003a94 <HAL_DMA_Abort_IT+0xa8>
 8003a34:	3214      	adds	r2, #20
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d02f      	beq.n	8003a9a <HAL_DMA_Abort_IT+0xae>
 8003a3a:	3214      	adds	r2, #20
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d02f      	beq.n	8003aa0 <HAL_DMA_Abort_IT+0xb4>
 8003a40:	3214      	adds	r2, #20
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d02f      	beq.n	8003aa6 <HAL_DMA_Abort_IT+0xba>
 8003a46:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d02e      	beq.n	8003aac <HAL_DMA_Abort_IT+0xc0>
 8003a4e:	3214      	adds	r2, #20
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d02d      	beq.n	8003ab0 <HAL_DMA_Abort_IT+0xc4>
 8003a54:	3214      	adds	r2, #20
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d02c      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a5a:	3214      	adds	r2, #20
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d002      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x7a>
 8003a60:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003a64:	e003      	b.n	8003a6e <HAL_DMA_Abort_IT+0x82>
 8003a66:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a6a:	e000      	b.n	8003a6e <HAL_DMA_Abort_IT+0x82>
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	4b37      	ldr	r3, [pc, #220]	@ (8003b4c <HAL_DMA_Abort_IT+0x160>)
 8003a70:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003a72:	2301      	movs	r3, #1
 8003a74:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8003a7e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d05e      	beq.n	8003b42 <HAL_DMA_Abort_IT+0x156>
      hdma->XferAbortCallback(hdma);
 8003a84:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003a86:	2000      	movs	r0, #0
 8003a88:	e7b9      	b.n	80039fe <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003a8a:	2210      	movs	r2, #16
 8003a8c:	e7ef      	b.n	8003a6e <HAL_DMA_Abort_IT+0x82>
 8003a8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a92:	e7ec      	b.n	8003a6e <HAL_DMA_Abort_IT+0x82>
 8003a94:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a98:	e7e9      	b.n	8003a6e <HAL_DMA_Abort_IT+0x82>
 8003a9a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003a9e:	e7e6      	b.n	8003a6e <HAL_DMA_Abort_IT+0x82>
 8003aa0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003aa4:	e7e3      	b.n	8003a6e <HAL_DMA_Abort_IT+0x82>
 8003aa6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003aaa:	e7e0      	b.n	8003a6e <HAL_DMA_Abort_IT+0x82>
 8003aac:	2201      	movs	r2, #1
 8003aae:	e7de      	b.n	8003a6e <HAL_DMA_Abort_IT+0x82>
 8003ab0:	2210      	movs	r2, #16
 8003ab2:	e7dc      	b.n	8003a6e <HAL_DMA_Abort_IT+0x82>
 8003ab4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ab8:	e7d9      	b.n	8003a6e <HAL_DMA_Abort_IT+0x82>
 8003aba:	4a25      	ldr	r2, [pc, #148]	@ (8003b50 <HAL_DMA_Abort_IT+0x164>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d024      	beq.n	8003b0a <HAL_DMA_Abort_IT+0x11e>
 8003ac0:	3214      	adds	r2, #20
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d025      	beq.n	8003b12 <HAL_DMA_Abort_IT+0x126>
 8003ac6:	3214      	adds	r2, #20
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d024      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x12a>
 8003acc:	3214      	adds	r2, #20
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d024      	beq.n	8003b1c <HAL_DMA_Abort_IT+0x130>
 8003ad2:	3214      	adds	r2, #20
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d024      	beq.n	8003b22 <HAL_DMA_Abort_IT+0x136>
 8003ad8:	3214      	adds	r2, #20
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d024      	beq.n	8003b28 <HAL_DMA_Abort_IT+0x13c>
 8003ade:	3214      	adds	r2, #20
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d024      	beq.n	8003b2e <HAL_DMA_Abort_IT+0x142>
 8003ae4:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d023      	beq.n	8003b34 <HAL_DMA_Abort_IT+0x148>
 8003aec:	3214      	adds	r2, #20
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d022      	beq.n	8003b38 <HAL_DMA_Abort_IT+0x14c>
 8003af2:	3214      	adds	r2, #20
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d021      	beq.n	8003b3c <HAL_DMA_Abort_IT+0x150>
 8003af8:	3214      	adds	r2, #20
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d002      	beq.n	8003b04 <HAL_DMA_Abort_IT+0x118>
 8003afe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003b02:	e003      	b.n	8003b0c <HAL_DMA_Abort_IT+0x120>
 8003b04:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003b08:	e000      	b.n	8003b0c <HAL_DMA_Abort_IT+0x120>
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	4b11      	ldr	r3, [pc, #68]	@ (8003b54 <HAL_DMA_Abort_IT+0x168>)
 8003b0e:	605a      	str	r2, [r3, #4]
 8003b10:	e7af      	b.n	8003a72 <HAL_DMA_Abort_IT+0x86>
 8003b12:	2210      	movs	r2, #16
 8003b14:	e7fa      	b.n	8003b0c <HAL_DMA_Abort_IT+0x120>
 8003b16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b1a:	e7f7      	b.n	8003b0c <HAL_DMA_Abort_IT+0x120>
 8003b1c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003b20:	e7f4      	b.n	8003b0c <HAL_DMA_Abort_IT+0x120>
 8003b22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003b26:	e7f1      	b.n	8003b0c <HAL_DMA_Abort_IT+0x120>
 8003b28:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b2c:	e7ee      	b.n	8003b0c <HAL_DMA_Abort_IT+0x120>
 8003b2e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b32:	e7eb      	b.n	8003b0c <HAL_DMA_Abort_IT+0x120>
 8003b34:	2201      	movs	r2, #1
 8003b36:	e7e9      	b.n	8003b0c <HAL_DMA_Abort_IT+0x120>
 8003b38:	2210      	movs	r2, #16
 8003b3a:	e7e7      	b.n	8003b0c <HAL_DMA_Abort_IT+0x120>
 8003b3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b40:	e7e4      	b.n	8003b0c <HAL_DMA_Abort_IT+0x120>
  HAL_StatusTypeDef status = HAL_OK;
 8003b42:	2000      	movs	r0, #0
 8003b44:	e75b      	b.n	80039fe <HAL_DMA_Abort_IT+0x12>
 8003b46:	bf00      	nop
 8003b48:	40020080 	.word	0x40020080
 8003b4c:	40020400 	.word	0x40020400
 8003b50:	40020008 	.word	0x40020008
 8003b54:	40020000 	.word	0x40020000

08003b58 <HAL_DMA_PollForTransfer>:
{
 8003b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b5c:	4604      	mov	r4, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b5e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d007      	beq.n	8003b78 <HAL_DMA_PollForTransfer+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b68:	2304      	movs	r3, #4
 8003b6a:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8003b72:	2001      	movs	r0, #1
}
 8003b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b78:	4688      	mov	r8, r1
 8003b7a:	4616      	mov	r6, r2
  if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
 8003b7c:	6803      	ldr	r3, [r0, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	f012 0f20 	tst.w	r2, #32
 8003b84:	d125      	bne.n	8003bd2 <HAL_DMA_PollForTransfer+0x7a>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8003b86:	bb61      	cbnz	r1, 8003be2 <HAL_DMA_PollForTransfer+0x8a>
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 8003b88:	4aa1      	ldr	r2, [pc, #644]	@ (8003e10 <HAL_DMA_PollForTransfer+0x2b8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d051      	beq.n	8003c32 <HAL_DMA_PollForTransfer+0xda>
 8003b8e:	3214      	adds	r2, #20
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d053      	beq.n	8003c3c <HAL_DMA_PollForTransfer+0xe4>
 8003b94:	3214      	adds	r2, #20
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d052      	beq.n	8003c40 <HAL_DMA_PollForTransfer+0xe8>
 8003b9a:	3214      	adds	r2, #20
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d052      	beq.n	8003c46 <HAL_DMA_PollForTransfer+0xee>
 8003ba0:	3214      	adds	r2, #20
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d052      	beq.n	8003c4c <HAL_DMA_PollForTransfer+0xf4>
 8003ba6:	3214      	adds	r2, #20
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d052      	beq.n	8003c52 <HAL_DMA_PollForTransfer+0xfa>
 8003bac:	3214      	adds	r2, #20
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d052      	beq.n	8003c58 <HAL_DMA_PollForTransfer+0x100>
 8003bb2:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d051      	beq.n	8003c5e <HAL_DMA_PollForTransfer+0x106>
 8003bba:	3214      	adds	r2, #20
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d050      	beq.n	8003c62 <HAL_DMA_PollForTransfer+0x10a>
 8003bc0:	3214      	adds	r2, #20
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d04f      	beq.n	8003c66 <HAL_DMA_PollForTransfer+0x10e>
 8003bc6:	3214      	adds	r2, #20
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d007      	beq.n	8003bdc <HAL_DMA_PollForTransfer+0x84>
 8003bcc:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8003bd0:	e030      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8003bd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bd6:	6383      	str	r3, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8003bd8:	2001      	movs	r0, #1
 8003bda:	e7cb      	b.n	8003b74 <HAL_DMA_PollForTransfer+0x1c>
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 8003bdc:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
 8003be0:	e028      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 8003be2:	4a8b      	ldr	r2, [pc, #556]	@ (8003e10 <HAL_DMA_PollForTransfer+0x2b8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d041      	beq.n	8003c6c <HAL_DMA_PollForTransfer+0x114>
 8003be8:	3214      	adds	r2, #20
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d040      	beq.n	8003c70 <HAL_DMA_PollForTransfer+0x118>
 8003bee:	3214      	adds	r2, #20
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d03f      	beq.n	8003c74 <HAL_DMA_PollForTransfer+0x11c>
 8003bf4:	3214      	adds	r2, #20
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d03f      	beq.n	8003c7a <HAL_DMA_PollForTransfer+0x122>
 8003bfa:	3214      	adds	r2, #20
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d03f      	beq.n	8003c80 <HAL_DMA_PollForTransfer+0x128>
 8003c00:	3214      	adds	r2, #20
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d03f      	beq.n	8003c86 <HAL_DMA_PollForTransfer+0x12e>
 8003c06:	3214      	adds	r2, #20
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d03f      	beq.n	8003c8c <HAL_DMA_PollForTransfer+0x134>
 8003c0c:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d03e      	beq.n	8003c92 <HAL_DMA_PollForTransfer+0x13a>
 8003c14:	3214      	adds	r2, #20
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d03d      	beq.n	8003c96 <HAL_DMA_PollForTransfer+0x13e>
 8003c1a:	3214      	adds	r2, #20
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d03c      	beq.n	8003c9a <HAL_DMA_PollForTransfer+0x142>
 8003c20:	3214      	adds	r2, #20
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d002      	beq.n	8003c2c <HAL_DMA_PollForTransfer+0xd4>
 8003c26:	f44f 2780 	mov.w	r7, #262144	@ 0x40000
 8003c2a:	e003      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
 8003c2c:	f44f 4780 	mov.w	r7, #16384	@ 0x4000
 8003c30:	e000      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 8003c32:	2702      	movs	r7, #2
  tickstart = HAL_GetTick();
 8003c34:	f7ff fbcc 	bl	80033d0 <HAL_GetTick>
 8003c38:	4681      	mov	r9, r0
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 8003c3a:	e040      	b.n	8003cbe <HAL_DMA_PollForTransfer+0x166>
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 8003c3c:	2720      	movs	r7, #32
 8003c3e:	e7f9      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
 8003c40:	f44f 7700 	mov.w	r7, #512	@ 0x200
 8003c44:	e7f6      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
 8003c46:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
 8003c4a:	e7f3      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
 8003c4c:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8003c50:	e7f0      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
 8003c52:	f44f 1700 	mov.w	r7, #2097152	@ 0x200000
 8003c56:	e7ed      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
 8003c58:	f04f 7700 	mov.w	r7, #33554432	@ 0x2000000
 8003c5c:	e7ea      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
 8003c5e:	2702      	movs	r7, #2
 8003c60:	e7e8      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
 8003c62:	2720      	movs	r7, #32
 8003c64:	e7e6      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
 8003c66:	f44f 7700 	mov.w	r7, #512	@ 0x200
 8003c6a:	e7e3      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 8003c6c:	2704      	movs	r7, #4
 8003c6e:	e7e1      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
 8003c70:	2740      	movs	r7, #64	@ 0x40
 8003c72:	e7df      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
 8003c74:	f44f 6780 	mov.w	r7, #1024	@ 0x400
 8003c78:	e7dc      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
 8003c7a:	f44f 4780 	mov.w	r7, #16384	@ 0x4000
 8003c7e:	e7d9      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
 8003c80:	f44f 2780 	mov.w	r7, #262144	@ 0x40000
 8003c84:	e7d6      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
 8003c86:	f44f 0780 	mov.w	r7, #4194304	@ 0x400000
 8003c8a:	e7d3      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
 8003c8c:	f04f 6780 	mov.w	r7, #67108864	@ 0x4000000
 8003c90:	e7d0      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
 8003c92:	2704      	movs	r7, #4
 8003c94:	e7ce      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
 8003c96:	2740      	movs	r7, #64	@ 0x40
 8003c98:	e7cc      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
 8003c9a:	f44f 6780 	mov.w	r7, #1024	@ 0x400
 8003c9e:	e7c9      	b.n	8003c34 <HAL_DMA_PollForTransfer+0xdc>
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 8003ca0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ca4:	e000      	b.n	8003ca8 <HAL_DMA_PollForTransfer+0x150>
 8003ca6:	2308      	movs	r3, #8
 8003ca8:	421a      	tst	r2, r3
 8003caa:	bf14      	ite	ne
 8003cac:	2301      	movne	r3, #1
 8003cae:	2300      	moveq	r3, #0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f040 809d 	bne.w	8003df0 <HAL_DMA_PollForTransfer+0x298>
    if(Timeout != HAL_MAX_DELAY)
 8003cb6:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003cba:	f040 80b1 	bne.w	8003e20 <HAL_DMA_PollForTransfer+0x2c8>
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	4d54      	ldr	r5, [pc, #336]	@ (8003e14 <HAL_DMA_PollForTransfer+0x2bc>)
 8003cc2:	42ab      	cmp	r3, r5
 8003cc4:	f240 80bf 	bls.w	8003e46 <HAL_DMA_PollForTransfer+0x2ee>
 8003cc8:	4a53      	ldr	r2, [pc, #332]	@ (8003e18 <HAL_DMA_PollForTransfer+0x2c0>)
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	423a      	tst	r2, r7
 8003cce:	bf0c      	ite	eq
 8003cd0:	2501      	moveq	r5, #1
 8003cd2:	2500      	movne	r5, #0
 8003cd4:	2d00      	cmp	r5, #0
 8003cd6:	f000 80bd 	beq.w	8003e54 <HAL_DMA_PollForTransfer+0x2fc>
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 8003cda:	4a4e      	ldr	r2, [pc, #312]	@ (8003e14 <HAL_DMA_PollForTransfer+0x2bc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d93f      	bls.n	8003d60 <HAL_DMA_PollForTransfer+0x208>
 8003ce0:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	494a      	ldr	r1, [pc, #296]	@ (8003e10 <HAL_DMA_PollForTransfer+0x2b8>)
 8003ce8:	428b      	cmp	r3, r1
 8003cea:	d0dc      	beq.n	8003ca6 <HAL_DMA_PollForTransfer+0x14e>
 8003cec:	3114      	adds	r1, #20
 8003cee:	428b      	cmp	r3, r1
 8003cf0:	d01e      	beq.n	8003d30 <HAL_DMA_PollForTransfer+0x1d8>
 8003cf2:	3114      	adds	r1, #20
 8003cf4:	428b      	cmp	r3, r1
 8003cf6:	d01d      	beq.n	8003d34 <HAL_DMA_PollForTransfer+0x1dc>
 8003cf8:	3114      	adds	r1, #20
 8003cfa:	428b      	cmp	r3, r1
 8003cfc:	d01d      	beq.n	8003d3a <HAL_DMA_PollForTransfer+0x1e2>
 8003cfe:	3114      	adds	r1, #20
 8003d00:	428b      	cmp	r3, r1
 8003d02:	d01d      	beq.n	8003d40 <HAL_DMA_PollForTransfer+0x1e8>
 8003d04:	3114      	adds	r1, #20
 8003d06:	428b      	cmp	r3, r1
 8003d08:	d01d      	beq.n	8003d46 <HAL_DMA_PollForTransfer+0x1ee>
 8003d0a:	3114      	adds	r1, #20
 8003d0c:	428b      	cmp	r3, r1
 8003d0e:	d01d      	beq.n	8003d4c <HAL_DMA_PollForTransfer+0x1f4>
 8003d10:	f501 7162 	add.w	r1, r1, #904	@ 0x388
 8003d14:	428b      	cmp	r3, r1
 8003d16:	d01c      	beq.n	8003d52 <HAL_DMA_PollForTransfer+0x1fa>
 8003d18:	3114      	adds	r1, #20
 8003d1a:	428b      	cmp	r3, r1
 8003d1c:	d01b      	beq.n	8003d56 <HAL_DMA_PollForTransfer+0x1fe>
 8003d1e:	3114      	adds	r1, #20
 8003d20:	428b      	cmp	r3, r1
 8003d22:	d01a      	beq.n	8003d5a <HAL_DMA_PollForTransfer+0x202>
 8003d24:	3114      	adds	r1, #20
 8003d26:	428b      	cmp	r3, r1
 8003d28:	d0ba      	beq.n	8003ca0 <HAL_DMA_PollForTransfer+0x148>
 8003d2a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003d2e:	e7bb      	b.n	8003ca8 <HAL_DMA_PollForTransfer+0x150>
 8003d30:	2380      	movs	r3, #128	@ 0x80
 8003d32:	e7b9      	b.n	8003ca8 <HAL_DMA_PollForTransfer+0x150>
 8003d34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d38:	e7b6      	b.n	8003ca8 <HAL_DMA_PollForTransfer+0x150>
 8003d3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d3e:	e7b3      	b.n	8003ca8 <HAL_DMA_PollForTransfer+0x150>
 8003d40:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003d44:	e7b0      	b.n	8003ca8 <HAL_DMA_PollForTransfer+0x150>
 8003d46:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8003d4a:	e7ad      	b.n	8003ca8 <HAL_DMA_PollForTransfer+0x150>
 8003d4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003d50:	e7aa      	b.n	8003ca8 <HAL_DMA_PollForTransfer+0x150>
 8003d52:	2308      	movs	r3, #8
 8003d54:	e7a8      	b.n	8003ca8 <HAL_DMA_PollForTransfer+0x150>
 8003d56:	2380      	movs	r3, #128	@ 0x80
 8003d58:	e7a6      	b.n	8003ca8 <HAL_DMA_PollForTransfer+0x150>
 8003d5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d5e:	e7a3      	b.n	8003ca8 <HAL_DMA_PollForTransfer+0x150>
 8003d60:	4a2e      	ldr	r2, [pc, #184]	@ (8003e1c <HAL_DMA_PollForTransfer+0x2c4>)
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	492a      	ldr	r1, [pc, #168]	@ (8003e10 <HAL_DMA_PollForTransfer+0x2b8>)
 8003d66:	428b      	cmp	r3, r1
 8003d68:	d024      	beq.n	8003db4 <HAL_DMA_PollForTransfer+0x25c>
 8003d6a:	3114      	adds	r1, #20
 8003d6c:	428b      	cmp	r3, r1
 8003d6e:	d027      	beq.n	8003dc0 <HAL_DMA_PollForTransfer+0x268>
 8003d70:	3114      	adds	r1, #20
 8003d72:	428b      	cmp	r3, r1
 8003d74:	d026      	beq.n	8003dc4 <HAL_DMA_PollForTransfer+0x26c>
 8003d76:	3114      	adds	r1, #20
 8003d78:	428b      	cmp	r3, r1
 8003d7a:	d026      	beq.n	8003dca <HAL_DMA_PollForTransfer+0x272>
 8003d7c:	3114      	adds	r1, #20
 8003d7e:	428b      	cmp	r3, r1
 8003d80:	d026      	beq.n	8003dd0 <HAL_DMA_PollForTransfer+0x278>
 8003d82:	3114      	adds	r1, #20
 8003d84:	428b      	cmp	r3, r1
 8003d86:	d026      	beq.n	8003dd6 <HAL_DMA_PollForTransfer+0x27e>
 8003d88:	3114      	adds	r1, #20
 8003d8a:	428b      	cmp	r3, r1
 8003d8c:	d026      	beq.n	8003ddc <HAL_DMA_PollForTransfer+0x284>
 8003d8e:	f501 7162 	add.w	r1, r1, #904	@ 0x388
 8003d92:	428b      	cmp	r3, r1
 8003d94:	d025      	beq.n	8003de2 <HAL_DMA_PollForTransfer+0x28a>
 8003d96:	3114      	adds	r1, #20
 8003d98:	428b      	cmp	r3, r1
 8003d9a:	d024      	beq.n	8003de6 <HAL_DMA_PollForTransfer+0x28e>
 8003d9c:	3114      	adds	r1, #20
 8003d9e:	428b      	cmp	r3, r1
 8003da0:	d023      	beq.n	8003dea <HAL_DMA_PollForTransfer+0x292>
 8003da2:	3114      	adds	r1, #20
 8003da4:	428b      	cmp	r3, r1
 8003da6:	d002      	beq.n	8003dae <HAL_DMA_PollForTransfer+0x256>
 8003da8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003dac:	e003      	b.n	8003db6 <HAL_DMA_PollForTransfer+0x25e>
 8003dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003db2:	e000      	b.n	8003db6 <HAL_DMA_PollForTransfer+0x25e>
 8003db4:	2308      	movs	r3, #8
 8003db6:	421a      	tst	r2, r3
 8003db8:	bf14      	ite	ne
 8003dba:	2301      	movne	r3, #1
 8003dbc:	2300      	moveq	r3, #0
 8003dbe:	e777      	b.n	8003cb0 <HAL_DMA_PollForTransfer+0x158>
 8003dc0:	2380      	movs	r3, #128	@ 0x80
 8003dc2:	e7f8      	b.n	8003db6 <HAL_DMA_PollForTransfer+0x25e>
 8003dc4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003dc8:	e7f5      	b.n	8003db6 <HAL_DMA_PollForTransfer+0x25e>
 8003dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dce:	e7f2      	b.n	8003db6 <HAL_DMA_PollForTransfer+0x25e>
 8003dd0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003dd4:	e7ef      	b.n	8003db6 <HAL_DMA_PollForTransfer+0x25e>
 8003dd6:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8003dda:	e7ec      	b.n	8003db6 <HAL_DMA_PollForTransfer+0x25e>
 8003ddc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003de0:	e7e9      	b.n	8003db6 <HAL_DMA_PollForTransfer+0x25e>
 8003de2:	2308      	movs	r3, #8
 8003de4:	e7e7      	b.n	8003db6 <HAL_DMA_PollForTransfer+0x25e>
 8003de6:	2380      	movs	r3, #128	@ 0x80
 8003de8:	e7e5      	b.n	8003db6 <HAL_DMA_PollForTransfer+0x25e>
 8003dea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003dee:	e7e2      	b.n	8003db6 <HAL_DMA_PollForTransfer+0x25e>
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003df0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003df2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003df4:	2001      	movs	r0, #1
 8003df6:	fa00 f303 	lsl.w	r3, r0, r3
 8003dfa:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8003dfc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003dfe:	4303      	orrs	r3, r0
 8003e00:	63a3      	str	r3, [r4, #56]	@ 0x38
      hdma->State= HAL_DMA_STATE_READY;
 8003e02:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
      __HAL_UNLOCK(hdma);
 8003e06:	2300      	movs	r3, #0
 8003e08:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8003e0c:	e6b2      	b.n	8003b74 <HAL_DMA_PollForTransfer+0x1c>
 8003e0e:	bf00      	nop
 8003e10:	40020008 	.word	0x40020008
 8003e14:	40020080 	.word	0x40020080
 8003e18:	40020400 	.word	0x40020400
 8003e1c:	40020000 	.word	0x40020000
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003e20:	b136      	cbz	r6, 8003e30 <HAL_DMA_PollForTransfer+0x2d8>
 8003e22:	f7ff fad5 	bl	80033d0 <HAL_GetTick>
 8003e26:	eba0 0009 	sub.w	r0, r0, r9
 8003e2a:	42b0      	cmp	r0, r6
 8003e2c:	f67f af47 	bls.w	8003cbe <HAL_DMA_PollForTransfer+0x166>
        SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8003e30:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003e32:	f043 0320 	orr.w	r3, r3, #32
 8003e36:	63a3      	str	r3, [r4, #56]	@ 0x38
        hdma->State = HAL_DMA_STATE_READY;
 8003e38:	2001      	movs	r0, #1
 8003e3a:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
        __HAL_UNLOCK(hdma);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8003e44:	e696      	b.n	8003b74 <HAL_DMA_PollForTransfer+0x1c>
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 8003e46:	4a93      	ldr	r2, [pc, #588]	@ (8004094 <HAL_DMA_PollForTransfer+0x53c>)
 8003e48:	6812      	ldr	r2, [r2, #0]
 8003e4a:	423a      	tst	r2, r7
 8003e4c:	bf0c      	ite	eq
 8003e4e:	2501      	moveq	r5, #1
 8003e50:	2500      	movne	r5, #0
 8003e52:	e73f      	b.n	8003cd4 <HAL_DMA_PollForTransfer+0x17c>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8003e54:	f1b8 0f00 	cmp.w	r8, #0
 8003e58:	f040 8091 	bne.w	8003f7e <HAL_DMA_PollForTransfer+0x426>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003e5c:	4a8e      	ldr	r2, [pc, #568]	@ (8004098 <HAL_DMA_PollForTransfer+0x540>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d949      	bls.n	8003ef6 <HAL_DMA_PollForTransfer+0x39e>
 8003e62:	3a78      	subs	r2, #120	@ 0x78
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d024      	beq.n	8003eb2 <HAL_DMA_PollForTransfer+0x35a>
 8003e68:	3214      	adds	r2, #20
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d02b      	beq.n	8003ec6 <HAL_DMA_PollForTransfer+0x36e>
 8003e6e:	3214      	adds	r2, #20
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d02a      	beq.n	8003eca <HAL_DMA_PollForTransfer+0x372>
 8003e74:	3214      	adds	r2, #20
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d02a      	beq.n	8003ed0 <HAL_DMA_PollForTransfer+0x378>
 8003e7a:	3214      	adds	r2, #20
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d02a      	beq.n	8003ed6 <HAL_DMA_PollForTransfer+0x37e>
 8003e80:	3214      	adds	r2, #20
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d02a      	beq.n	8003edc <HAL_DMA_PollForTransfer+0x384>
 8003e86:	3214      	adds	r2, #20
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d02a      	beq.n	8003ee2 <HAL_DMA_PollForTransfer+0x38a>
 8003e8c:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d029      	beq.n	8003ee8 <HAL_DMA_PollForTransfer+0x390>
 8003e94:	3214      	adds	r2, #20
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d028      	beq.n	8003eec <HAL_DMA_PollForTransfer+0x394>
 8003e9a:	3214      	adds	r2, #20
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d027      	beq.n	8003ef0 <HAL_DMA_PollForTransfer+0x398>
 8003ea0:	3214      	adds	r2, #20
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d002      	beq.n	8003eac <HAL_DMA_PollForTransfer+0x354>
 8003ea6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003eaa:	e003      	b.n	8003eb4 <HAL_DMA_PollForTransfer+0x35c>
 8003eac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003eb0:	e000      	b.n	8003eb4 <HAL_DMA_PollForTransfer+0x35c>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	4a79      	ldr	r2, [pc, #484]	@ (800409c <HAL_DMA_PollForTransfer+0x544>)
 8003eb6:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  __HAL_UNLOCK(hdma);
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	f884 0020 	strb.w	r0, [r4, #32]
  return HAL_OK;
 8003ec4:	e656      	b.n	8003b74 <HAL_DMA_PollForTransfer+0x1c>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003ec6:	2320      	movs	r3, #32
 8003ec8:	e7f4      	b.n	8003eb4 <HAL_DMA_PollForTransfer+0x35c>
 8003eca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ece:	e7f1      	b.n	8003eb4 <HAL_DMA_PollForTransfer+0x35c>
 8003ed0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ed4:	e7ee      	b.n	8003eb4 <HAL_DMA_PollForTransfer+0x35c>
 8003ed6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003eda:	e7eb      	b.n	8003eb4 <HAL_DMA_PollForTransfer+0x35c>
 8003edc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003ee0:	e7e8      	b.n	8003eb4 <HAL_DMA_PollForTransfer+0x35c>
 8003ee2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ee6:	e7e5      	b.n	8003eb4 <HAL_DMA_PollForTransfer+0x35c>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e7e3      	b.n	8003eb4 <HAL_DMA_PollForTransfer+0x35c>
 8003eec:	2320      	movs	r3, #32
 8003eee:	e7e1      	b.n	8003eb4 <HAL_DMA_PollForTransfer+0x35c>
 8003ef0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ef4:	e7de      	b.n	8003eb4 <HAL_DMA_PollForTransfer+0x35c>
 8003ef6:	4a6a      	ldr	r2, [pc, #424]	@ (80040a0 <HAL_DMA_PollForTransfer+0x548>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d024      	beq.n	8003f46 <HAL_DMA_PollForTransfer+0x3ee>
 8003efc:	3214      	adds	r2, #20
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d025      	beq.n	8003f4e <HAL_DMA_PollForTransfer+0x3f6>
 8003f02:	3214      	adds	r2, #20
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d024      	beq.n	8003f52 <HAL_DMA_PollForTransfer+0x3fa>
 8003f08:	3214      	adds	r2, #20
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d024      	beq.n	8003f58 <HAL_DMA_PollForTransfer+0x400>
 8003f0e:	3214      	adds	r2, #20
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d024      	beq.n	8003f5e <HAL_DMA_PollForTransfer+0x406>
 8003f14:	3214      	adds	r2, #20
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d024      	beq.n	8003f64 <HAL_DMA_PollForTransfer+0x40c>
 8003f1a:	3214      	adds	r2, #20
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d024      	beq.n	8003f6a <HAL_DMA_PollForTransfer+0x412>
 8003f20:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d023      	beq.n	8003f70 <HAL_DMA_PollForTransfer+0x418>
 8003f28:	3214      	adds	r2, #20
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d022      	beq.n	8003f74 <HAL_DMA_PollForTransfer+0x41c>
 8003f2e:	3214      	adds	r2, #20
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d021      	beq.n	8003f78 <HAL_DMA_PollForTransfer+0x420>
 8003f34:	3214      	adds	r2, #20
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d002      	beq.n	8003f40 <HAL_DMA_PollForTransfer+0x3e8>
 8003f3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f3e:	e003      	b.n	8003f48 <HAL_DMA_PollForTransfer+0x3f0>
 8003f40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f44:	e000      	b.n	8003f48 <HAL_DMA_PollForTransfer+0x3f0>
 8003f46:	2302      	movs	r3, #2
 8003f48:	4a52      	ldr	r2, [pc, #328]	@ (8004094 <HAL_DMA_PollForTransfer+0x53c>)
 8003f4a:	6053      	str	r3, [r2, #4]
 8003f4c:	e7b4      	b.n	8003eb8 <HAL_DMA_PollForTransfer+0x360>
 8003f4e:	2320      	movs	r3, #32
 8003f50:	e7fa      	b.n	8003f48 <HAL_DMA_PollForTransfer+0x3f0>
 8003f52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f56:	e7f7      	b.n	8003f48 <HAL_DMA_PollForTransfer+0x3f0>
 8003f58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f5c:	e7f4      	b.n	8003f48 <HAL_DMA_PollForTransfer+0x3f0>
 8003f5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f62:	e7f1      	b.n	8003f48 <HAL_DMA_PollForTransfer+0x3f0>
 8003f64:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003f68:	e7ee      	b.n	8003f48 <HAL_DMA_PollForTransfer+0x3f0>
 8003f6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f6e:	e7eb      	b.n	8003f48 <HAL_DMA_PollForTransfer+0x3f0>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e7e9      	b.n	8003f48 <HAL_DMA_PollForTransfer+0x3f0>
 8003f74:	2320      	movs	r3, #32
 8003f76:	e7e7      	b.n	8003f48 <HAL_DMA_PollForTransfer+0x3f0>
 8003f78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f7c:	e7e4      	b.n	8003f48 <HAL_DMA_PollForTransfer+0x3f0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003f7e:	4a46      	ldr	r2, [pc, #280]	@ (8004098 <HAL_DMA_PollForTransfer+0x540>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d943      	bls.n	800400c <HAL_DMA_PollForTransfer+0x4b4>
 8003f84:	3a78      	subs	r2, #120	@ 0x78
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d024      	beq.n	8003fd4 <HAL_DMA_PollForTransfer+0x47c>
 8003f8a:	3214      	adds	r2, #20
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d025      	beq.n	8003fdc <HAL_DMA_PollForTransfer+0x484>
 8003f90:	3214      	adds	r2, #20
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d024      	beq.n	8003fe0 <HAL_DMA_PollForTransfer+0x488>
 8003f96:	3214      	adds	r2, #20
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d024      	beq.n	8003fe6 <HAL_DMA_PollForTransfer+0x48e>
 8003f9c:	3214      	adds	r2, #20
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d024      	beq.n	8003fec <HAL_DMA_PollForTransfer+0x494>
 8003fa2:	3214      	adds	r2, #20
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d024      	beq.n	8003ff2 <HAL_DMA_PollForTransfer+0x49a>
 8003fa8:	3214      	adds	r2, #20
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d024      	beq.n	8003ff8 <HAL_DMA_PollForTransfer+0x4a0>
 8003fae:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d023      	beq.n	8003ffe <HAL_DMA_PollForTransfer+0x4a6>
 8003fb6:	3214      	adds	r2, #20
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d022      	beq.n	8004002 <HAL_DMA_PollForTransfer+0x4aa>
 8003fbc:	3214      	adds	r2, #20
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d021      	beq.n	8004006 <HAL_DMA_PollForTransfer+0x4ae>
 8003fc2:	3214      	adds	r2, #20
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d002      	beq.n	8003fce <HAL_DMA_PollForTransfer+0x476>
 8003fc8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003fcc:	e003      	b.n	8003fd6 <HAL_DMA_PollForTransfer+0x47e>
 8003fce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003fd2:	e000      	b.n	8003fd6 <HAL_DMA_PollForTransfer+0x47e>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	4a31      	ldr	r2, [pc, #196]	@ (800409c <HAL_DMA_PollForTransfer+0x544>)
 8003fd8:	6053      	str	r3, [r2, #4]
 8003fda:	e770      	b.n	8003ebe <HAL_DMA_PollForTransfer+0x366>
 8003fdc:	2340      	movs	r3, #64	@ 0x40
 8003fde:	e7fa      	b.n	8003fd6 <HAL_DMA_PollForTransfer+0x47e>
 8003fe0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fe4:	e7f7      	b.n	8003fd6 <HAL_DMA_PollForTransfer+0x47e>
 8003fe6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003fea:	e7f4      	b.n	8003fd6 <HAL_DMA_PollForTransfer+0x47e>
 8003fec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003ff0:	e7f1      	b.n	8003fd6 <HAL_DMA_PollForTransfer+0x47e>
 8003ff2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003ff6:	e7ee      	b.n	8003fd6 <HAL_DMA_PollForTransfer+0x47e>
 8003ff8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003ffc:	e7eb      	b.n	8003fd6 <HAL_DMA_PollForTransfer+0x47e>
 8003ffe:	2304      	movs	r3, #4
 8004000:	e7e9      	b.n	8003fd6 <HAL_DMA_PollForTransfer+0x47e>
 8004002:	2340      	movs	r3, #64	@ 0x40
 8004004:	e7e7      	b.n	8003fd6 <HAL_DMA_PollForTransfer+0x47e>
 8004006:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800400a:	e7e4      	b.n	8003fd6 <HAL_DMA_PollForTransfer+0x47e>
 800400c:	4a24      	ldr	r2, [pc, #144]	@ (80040a0 <HAL_DMA_PollForTransfer+0x548>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d024      	beq.n	800405c <HAL_DMA_PollForTransfer+0x504>
 8004012:	3214      	adds	r2, #20
 8004014:	4293      	cmp	r3, r2
 8004016:	d025      	beq.n	8004064 <HAL_DMA_PollForTransfer+0x50c>
 8004018:	3214      	adds	r2, #20
 800401a:	4293      	cmp	r3, r2
 800401c:	d024      	beq.n	8004068 <HAL_DMA_PollForTransfer+0x510>
 800401e:	3214      	adds	r2, #20
 8004020:	4293      	cmp	r3, r2
 8004022:	d024      	beq.n	800406e <HAL_DMA_PollForTransfer+0x516>
 8004024:	3214      	adds	r2, #20
 8004026:	4293      	cmp	r3, r2
 8004028:	d024      	beq.n	8004074 <HAL_DMA_PollForTransfer+0x51c>
 800402a:	3214      	adds	r2, #20
 800402c:	4293      	cmp	r3, r2
 800402e:	d024      	beq.n	800407a <HAL_DMA_PollForTransfer+0x522>
 8004030:	3214      	adds	r2, #20
 8004032:	4293      	cmp	r3, r2
 8004034:	d024      	beq.n	8004080 <HAL_DMA_PollForTransfer+0x528>
 8004036:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 800403a:	4293      	cmp	r3, r2
 800403c:	d023      	beq.n	8004086 <HAL_DMA_PollForTransfer+0x52e>
 800403e:	3214      	adds	r2, #20
 8004040:	4293      	cmp	r3, r2
 8004042:	d022      	beq.n	800408a <HAL_DMA_PollForTransfer+0x532>
 8004044:	3214      	adds	r2, #20
 8004046:	4293      	cmp	r3, r2
 8004048:	d021      	beq.n	800408e <HAL_DMA_PollForTransfer+0x536>
 800404a:	3214      	adds	r2, #20
 800404c:	4293      	cmp	r3, r2
 800404e:	d002      	beq.n	8004056 <HAL_DMA_PollForTransfer+0x4fe>
 8004050:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004054:	e003      	b.n	800405e <HAL_DMA_PollForTransfer+0x506>
 8004056:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800405a:	e000      	b.n	800405e <HAL_DMA_PollForTransfer+0x506>
 800405c:	2304      	movs	r3, #4
 800405e:	4a0d      	ldr	r2, [pc, #52]	@ (8004094 <HAL_DMA_PollForTransfer+0x53c>)
 8004060:	6053      	str	r3, [r2, #4]
 8004062:	e72c      	b.n	8003ebe <HAL_DMA_PollForTransfer+0x366>
 8004064:	2340      	movs	r3, #64	@ 0x40
 8004066:	e7fa      	b.n	800405e <HAL_DMA_PollForTransfer+0x506>
 8004068:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800406c:	e7f7      	b.n	800405e <HAL_DMA_PollForTransfer+0x506>
 800406e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004072:	e7f4      	b.n	800405e <HAL_DMA_PollForTransfer+0x506>
 8004074:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004078:	e7f1      	b.n	800405e <HAL_DMA_PollForTransfer+0x506>
 800407a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800407e:	e7ee      	b.n	800405e <HAL_DMA_PollForTransfer+0x506>
 8004080:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004084:	e7eb      	b.n	800405e <HAL_DMA_PollForTransfer+0x506>
 8004086:	2304      	movs	r3, #4
 8004088:	e7e9      	b.n	800405e <HAL_DMA_PollForTransfer+0x506>
 800408a:	2340      	movs	r3, #64	@ 0x40
 800408c:	e7e7      	b.n	800405e <HAL_DMA_PollForTransfer+0x506>
 800408e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004092:	e7e4      	b.n	800405e <HAL_DMA_PollForTransfer+0x506>
 8004094:	40020000 	.word	0x40020000
 8004098:	40020080 	.word	0x40020080
 800409c:	40020400 	.word	0x40020400
 80040a0:	40020008 	.word	0x40020008

080040a4 <HAL_DMA_IRQHandler>:
{
 80040a4:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040a6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80040a8:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80040aa:	6804      	ldr	r4, [r0, #0]
 80040ac:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80040ae:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80040b0:	2304      	movs	r3, #4
 80040b2:	408b      	lsls	r3, r1
 80040b4:	4213      	tst	r3, r2
 80040b6:	f000 809b 	beq.w	80041f0 <HAL_DMA_IRQHandler+0x14c>
 80040ba:	f015 0f04 	tst.w	r5, #4
 80040be:	f000 8097 	beq.w	80041f0 <HAL_DMA_IRQHandler+0x14c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	f013 0f20 	tst.w	r3, #32
 80040c8:	d103      	bne.n	80040d2 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	f023 0304 	bic.w	r3, r3, #4
 80040d0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80040d2:	6803      	ldr	r3, [r0, #0]
 80040d4:	4a9a      	ldr	r2, [pc, #616]	@ (8004340 <HAL_DMA_IRQHandler+0x29c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d946      	bls.n	8004168 <HAL_DMA_IRQHandler+0xc4>
 80040da:	3a78      	subs	r2, #120	@ 0x78
 80040dc:	4293      	cmp	r3, r2
 80040de:	d024      	beq.n	800412a <HAL_DMA_IRQHandler+0x86>
 80040e0:	3214      	adds	r2, #20
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d028      	beq.n	8004138 <HAL_DMA_IRQHandler+0x94>
 80040e6:	3214      	adds	r2, #20
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d027      	beq.n	800413c <HAL_DMA_IRQHandler+0x98>
 80040ec:	3214      	adds	r2, #20
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d027      	beq.n	8004142 <HAL_DMA_IRQHandler+0x9e>
 80040f2:	3214      	adds	r2, #20
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d027      	beq.n	8004148 <HAL_DMA_IRQHandler+0xa4>
 80040f8:	3214      	adds	r2, #20
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d027      	beq.n	800414e <HAL_DMA_IRQHandler+0xaa>
 80040fe:	3214      	adds	r2, #20
 8004100:	4293      	cmp	r3, r2
 8004102:	d027      	beq.n	8004154 <HAL_DMA_IRQHandler+0xb0>
 8004104:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8004108:	4293      	cmp	r3, r2
 800410a:	d026      	beq.n	800415a <HAL_DMA_IRQHandler+0xb6>
 800410c:	3214      	adds	r2, #20
 800410e:	4293      	cmp	r3, r2
 8004110:	d025      	beq.n	800415e <HAL_DMA_IRQHandler+0xba>
 8004112:	3214      	adds	r2, #20
 8004114:	4293      	cmp	r3, r2
 8004116:	d024      	beq.n	8004162 <HAL_DMA_IRQHandler+0xbe>
 8004118:	3214      	adds	r2, #20
 800411a:	4293      	cmp	r3, r2
 800411c:	d002      	beq.n	8004124 <HAL_DMA_IRQHandler+0x80>
 800411e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004122:	e003      	b.n	800412c <HAL_DMA_IRQHandler+0x88>
 8004124:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004128:	e000      	b.n	800412c <HAL_DMA_IRQHandler+0x88>
 800412a:	2204      	movs	r2, #4
 800412c:	4b85      	ldr	r3, [pc, #532]	@ (8004344 <HAL_DMA_IRQHandler+0x2a0>)
 800412e:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8004130:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004132:	b103      	cbz	r3, 8004136 <HAL_DMA_IRQHandler+0x92>
      hdma->XferHalfCpltCallback(hdma);
 8004134:	4798      	blx	r3
}
 8004136:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004138:	2240      	movs	r2, #64	@ 0x40
 800413a:	e7f7      	b.n	800412c <HAL_DMA_IRQHandler+0x88>
 800413c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004140:	e7f4      	b.n	800412c <HAL_DMA_IRQHandler+0x88>
 8004142:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004146:	e7f1      	b.n	800412c <HAL_DMA_IRQHandler+0x88>
 8004148:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800414c:	e7ee      	b.n	800412c <HAL_DMA_IRQHandler+0x88>
 800414e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004152:	e7eb      	b.n	800412c <HAL_DMA_IRQHandler+0x88>
 8004154:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004158:	e7e8      	b.n	800412c <HAL_DMA_IRQHandler+0x88>
 800415a:	2204      	movs	r2, #4
 800415c:	e7e6      	b.n	800412c <HAL_DMA_IRQHandler+0x88>
 800415e:	2240      	movs	r2, #64	@ 0x40
 8004160:	e7e4      	b.n	800412c <HAL_DMA_IRQHandler+0x88>
 8004162:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004166:	e7e1      	b.n	800412c <HAL_DMA_IRQHandler+0x88>
 8004168:	4a77      	ldr	r2, [pc, #476]	@ (8004348 <HAL_DMA_IRQHandler+0x2a4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d024      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x114>
 800416e:	3214      	adds	r2, #20
 8004170:	4293      	cmp	r3, r2
 8004172:	d025      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x11c>
 8004174:	3214      	adds	r2, #20
 8004176:	4293      	cmp	r3, r2
 8004178:	d024      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x120>
 800417a:	3214      	adds	r2, #20
 800417c:	4293      	cmp	r3, r2
 800417e:	d024      	beq.n	80041ca <HAL_DMA_IRQHandler+0x126>
 8004180:	3214      	adds	r2, #20
 8004182:	4293      	cmp	r3, r2
 8004184:	d024      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x12c>
 8004186:	3214      	adds	r2, #20
 8004188:	4293      	cmp	r3, r2
 800418a:	d024      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x132>
 800418c:	3214      	adds	r2, #20
 800418e:	4293      	cmp	r3, r2
 8004190:	d024      	beq.n	80041dc <HAL_DMA_IRQHandler+0x138>
 8004192:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 8004196:	4293      	cmp	r3, r2
 8004198:	d023      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x13e>
 800419a:	3214      	adds	r2, #20
 800419c:	4293      	cmp	r3, r2
 800419e:	d022      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x142>
 80041a0:	3214      	adds	r2, #20
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d021      	beq.n	80041ea <HAL_DMA_IRQHandler+0x146>
 80041a6:	3214      	adds	r2, #20
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d002      	beq.n	80041b2 <HAL_DMA_IRQHandler+0x10e>
 80041ac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80041b0:	e003      	b.n	80041ba <HAL_DMA_IRQHandler+0x116>
 80041b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80041b6:	e000      	b.n	80041ba <HAL_DMA_IRQHandler+0x116>
 80041b8:	2204      	movs	r2, #4
 80041ba:	4b64      	ldr	r3, [pc, #400]	@ (800434c <HAL_DMA_IRQHandler+0x2a8>)
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	e7b7      	b.n	8004130 <HAL_DMA_IRQHandler+0x8c>
 80041c0:	2240      	movs	r2, #64	@ 0x40
 80041c2:	e7fa      	b.n	80041ba <HAL_DMA_IRQHandler+0x116>
 80041c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041c8:	e7f7      	b.n	80041ba <HAL_DMA_IRQHandler+0x116>
 80041ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80041ce:	e7f4      	b.n	80041ba <HAL_DMA_IRQHandler+0x116>
 80041d0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80041d4:	e7f1      	b.n	80041ba <HAL_DMA_IRQHandler+0x116>
 80041d6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80041da:	e7ee      	b.n	80041ba <HAL_DMA_IRQHandler+0x116>
 80041dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80041e0:	e7eb      	b.n	80041ba <HAL_DMA_IRQHandler+0x116>
 80041e2:	2204      	movs	r2, #4
 80041e4:	e7e9      	b.n	80041ba <HAL_DMA_IRQHandler+0x116>
 80041e6:	2240      	movs	r2, #64	@ 0x40
 80041e8:	e7e7      	b.n	80041ba <HAL_DMA_IRQHandler+0x116>
 80041ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041ee:	e7e4      	b.n	80041ba <HAL_DMA_IRQHandler+0x116>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80041f0:	2302      	movs	r3, #2
 80041f2:	408b      	lsls	r3, r1
 80041f4:	4213      	tst	r3, r2
 80041f6:	f000 80ab 	beq.w	8004350 <HAL_DMA_IRQHandler+0x2ac>
 80041fa:	f015 0f02 	tst.w	r5, #2
 80041fe:	f000 80a7 	beq.w	8004350 <HAL_DMA_IRQHandler+0x2ac>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	f013 0f20 	tst.w	r3, #32
 8004208:	d106      	bne.n	8004218 <HAL_DMA_IRQHandler+0x174>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	f023 030a 	bic.w	r3, r3, #10
 8004210:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004212:	2301      	movs	r3, #1
 8004214:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004218:	6803      	ldr	r3, [r0, #0]
 800421a:	4a49      	ldr	r2, [pc, #292]	@ (8004340 <HAL_DMA_IRQHandler+0x29c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d94b      	bls.n	80042b8 <HAL_DMA_IRQHandler+0x214>
 8004220:	3a78      	subs	r2, #120	@ 0x78
 8004222:	4293      	cmp	r3, r2
 8004224:	d024      	beq.n	8004270 <HAL_DMA_IRQHandler+0x1cc>
 8004226:	3214      	adds	r2, #20
 8004228:	4293      	cmp	r3, r2
 800422a:	d02d      	beq.n	8004288 <HAL_DMA_IRQHandler+0x1e4>
 800422c:	3214      	adds	r2, #20
 800422e:	4293      	cmp	r3, r2
 8004230:	d02c      	beq.n	800428c <HAL_DMA_IRQHandler+0x1e8>
 8004232:	3214      	adds	r2, #20
 8004234:	4293      	cmp	r3, r2
 8004236:	d02c      	beq.n	8004292 <HAL_DMA_IRQHandler+0x1ee>
 8004238:	3214      	adds	r2, #20
 800423a:	4293      	cmp	r3, r2
 800423c:	d02c      	beq.n	8004298 <HAL_DMA_IRQHandler+0x1f4>
 800423e:	3214      	adds	r2, #20
 8004240:	4293      	cmp	r3, r2
 8004242:	d02c      	beq.n	800429e <HAL_DMA_IRQHandler+0x1fa>
 8004244:	3214      	adds	r2, #20
 8004246:	4293      	cmp	r3, r2
 8004248:	d02c      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x200>
 800424a:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 800424e:	4293      	cmp	r3, r2
 8004250:	d02b      	beq.n	80042aa <HAL_DMA_IRQHandler+0x206>
 8004252:	3214      	adds	r2, #20
 8004254:	4293      	cmp	r3, r2
 8004256:	d02a      	beq.n	80042ae <HAL_DMA_IRQHandler+0x20a>
 8004258:	3214      	adds	r2, #20
 800425a:	4293      	cmp	r3, r2
 800425c:	d029      	beq.n	80042b2 <HAL_DMA_IRQHandler+0x20e>
 800425e:	3214      	adds	r2, #20
 8004260:	4293      	cmp	r3, r2
 8004262:	d002      	beq.n	800426a <HAL_DMA_IRQHandler+0x1c6>
 8004264:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004268:	e003      	b.n	8004272 <HAL_DMA_IRQHandler+0x1ce>
 800426a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800426e:	e000      	b.n	8004272 <HAL_DMA_IRQHandler+0x1ce>
 8004270:	2202      	movs	r2, #2
 8004272:	4b34      	ldr	r3, [pc, #208]	@ (8004344 <HAL_DMA_IRQHandler+0x2a0>)
 8004274:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8004276:	2300      	movs	r3, #0
 8004278:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800427c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800427e:	2b00      	cmp	r3, #0
 8004280:	f43f af59 	beq.w	8004136 <HAL_DMA_IRQHandler+0x92>
      hdma->XferCpltCallback(hdma);
 8004284:	4798      	blx	r3
 8004286:	e756      	b.n	8004136 <HAL_DMA_IRQHandler+0x92>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004288:	2220      	movs	r2, #32
 800428a:	e7f2      	b.n	8004272 <HAL_DMA_IRQHandler+0x1ce>
 800428c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004290:	e7ef      	b.n	8004272 <HAL_DMA_IRQHandler+0x1ce>
 8004292:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004296:	e7ec      	b.n	8004272 <HAL_DMA_IRQHandler+0x1ce>
 8004298:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800429c:	e7e9      	b.n	8004272 <HAL_DMA_IRQHandler+0x1ce>
 800429e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80042a2:	e7e6      	b.n	8004272 <HAL_DMA_IRQHandler+0x1ce>
 80042a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042a8:	e7e3      	b.n	8004272 <HAL_DMA_IRQHandler+0x1ce>
 80042aa:	2202      	movs	r2, #2
 80042ac:	e7e1      	b.n	8004272 <HAL_DMA_IRQHandler+0x1ce>
 80042ae:	2220      	movs	r2, #32
 80042b0:	e7df      	b.n	8004272 <HAL_DMA_IRQHandler+0x1ce>
 80042b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042b6:	e7dc      	b.n	8004272 <HAL_DMA_IRQHandler+0x1ce>
 80042b8:	4a23      	ldr	r2, [pc, #140]	@ (8004348 <HAL_DMA_IRQHandler+0x2a4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d024      	beq.n	8004308 <HAL_DMA_IRQHandler+0x264>
 80042be:	3214      	adds	r2, #20
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d025      	beq.n	8004310 <HAL_DMA_IRQHandler+0x26c>
 80042c4:	3214      	adds	r2, #20
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d024      	beq.n	8004314 <HAL_DMA_IRQHandler+0x270>
 80042ca:	3214      	adds	r2, #20
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d024      	beq.n	800431a <HAL_DMA_IRQHandler+0x276>
 80042d0:	3214      	adds	r2, #20
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d024      	beq.n	8004320 <HAL_DMA_IRQHandler+0x27c>
 80042d6:	3214      	adds	r2, #20
 80042d8:	4293      	cmp	r3, r2
 80042da:	d024      	beq.n	8004326 <HAL_DMA_IRQHandler+0x282>
 80042dc:	3214      	adds	r2, #20
 80042de:	4293      	cmp	r3, r2
 80042e0:	d024      	beq.n	800432c <HAL_DMA_IRQHandler+0x288>
 80042e2:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d023      	beq.n	8004332 <HAL_DMA_IRQHandler+0x28e>
 80042ea:	3214      	adds	r2, #20
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d022      	beq.n	8004336 <HAL_DMA_IRQHandler+0x292>
 80042f0:	3214      	adds	r2, #20
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d021      	beq.n	800433a <HAL_DMA_IRQHandler+0x296>
 80042f6:	3214      	adds	r2, #20
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d002      	beq.n	8004302 <HAL_DMA_IRQHandler+0x25e>
 80042fc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004300:	e003      	b.n	800430a <HAL_DMA_IRQHandler+0x266>
 8004302:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004306:	e000      	b.n	800430a <HAL_DMA_IRQHandler+0x266>
 8004308:	2202      	movs	r2, #2
 800430a:	4b10      	ldr	r3, [pc, #64]	@ (800434c <HAL_DMA_IRQHandler+0x2a8>)
 800430c:	605a      	str	r2, [r3, #4]
 800430e:	e7b2      	b.n	8004276 <HAL_DMA_IRQHandler+0x1d2>
 8004310:	2220      	movs	r2, #32
 8004312:	e7fa      	b.n	800430a <HAL_DMA_IRQHandler+0x266>
 8004314:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004318:	e7f7      	b.n	800430a <HAL_DMA_IRQHandler+0x266>
 800431a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800431e:	e7f4      	b.n	800430a <HAL_DMA_IRQHandler+0x266>
 8004320:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004324:	e7f1      	b.n	800430a <HAL_DMA_IRQHandler+0x266>
 8004326:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800432a:	e7ee      	b.n	800430a <HAL_DMA_IRQHandler+0x266>
 800432c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004330:	e7eb      	b.n	800430a <HAL_DMA_IRQHandler+0x266>
 8004332:	2202      	movs	r2, #2
 8004334:	e7e9      	b.n	800430a <HAL_DMA_IRQHandler+0x266>
 8004336:	2220      	movs	r2, #32
 8004338:	e7e7      	b.n	800430a <HAL_DMA_IRQHandler+0x266>
 800433a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800433e:	e7e4      	b.n	800430a <HAL_DMA_IRQHandler+0x266>
 8004340:	40020080 	.word	0x40020080
 8004344:	40020400 	.word	0x40020400
 8004348:	40020008 	.word	0x40020008
 800434c:	40020000 	.word	0x40020000
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004350:	2308      	movs	r3, #8
 8004352:	408b      	lsls	r3, r1
 8004354:	4213      	tst	r3, r2
 8004356:	f43f aeee 	beq.w	8004136 <HAL_DMA_IRQHandler+0x92>
 800435a:	f015 0f08 	tst.w	r5, #8
 800435e:	f43f aeea 	beq.w	8004136 <HAL_DMA_IRQHandler+0x92>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	f023 030e 	bic.w	r3, r3, #14
 8004368:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800436a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800436c:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800436e:	2301      	movs	r3, #1
 8004370:	fa03 f202 	lsl.w	r2, r3, r2
 8004374:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004376:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8004378:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 800437c:	2300      	movs	r3, #0
 800437e:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8004382:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004384:	2b00      	cmp	r3, #0
 8004386:	f43f aed6 	beq.w	8004136 <HAL_DMA_IRQHandler+0x92>
      hdma->XferErrorCallback(hdma);
 800438a:	4798      	blx	r3
  return;
 800438c:	e6d3      	b.n	8004136 <HAL_DMA_IRQHandler+0x92>
 800438e:	bf00      	nop

08004390 <HAL_DMA_RegisterCallback>:
{
 8004390:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 8004392:	f890 0020 	ldrb.w	r0, [r0, #32]
 8004396:	2801      	cmp	r0, #1
 8004398:	d01e      	beq.n	80043d8 <HAL_DMA_RegisterCallback+0x48>
 800439a:	2001      	movs	r0, #1
 800439c:	f883 0020 	strb.w	r0, [r3, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80043a0:	f893 0021 	ldrb.w	r0, [r3, #33]	@ 0x21
 80043a4:	b2c0      	uxtb	r0, r0
 80043a6:	2801      	cmp	r0, #1
 80043a8:	d004      	beq.n	80043b4 <HAL_DMA_RegisterCallback+0x24>
    status = HAL_ERROR;
 80043aa:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2020 	strb.w	r2, [r3, #32]
  return status;
 80043b2:	4770      	bx	lr
    switch (CallbackID)
 80043b4:	2903      	cmp	r1, #3
 80043b6:	d8f9      	bhi.n	80043ac <HAL_DMA_RegisterCallback+0x1c>
 80043b8:	e8df f001 	tbb	[pc, r1]
 80043bc:	0b080502 	.word	0x0b080502
      hdma->XferCpltCallback = pCallback;
 80043c0:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_StatusTypeDef status = HAL_OK;
 80043c2:	4608      	mov	r0, r1
      break;
 80043c4:	e7f2      	b.n	80043ac <HAL_DMA_RegisterCallback+0x1c>
      hdma->XferHalfCpltCallback = pCallback;
 80043c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 80043c8:	2000      	movs	r0, #0
      break;         
 80043ca:	e7ef      	b.n	80043ac <HAL_DMA_RegisterCallback+0x1c>
      hdma->XferErrorCallback = pCallback;
 80043cc:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_StatusTypeDef status = HAL_OK;
 80043ce:	2000      	movs	r0, #0
      break;         
 80043d0:	e7ec      	b.n	80043ac <HAL_DMA_RegisterCallback+0x1c>
      hdma->XferAbortCallback = pCallback;
 80043d2:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_StatusTypeDef status = HAL_OK;
 80043d4:	2000      	movs	r0, #0
      break; 
 80043d6:	e7e9      	b.n	80043ac <HAL_DMA_RegisterCallback+0x1c>
  __HAL_LOCK(hdma);
 80043d8:	2002      	movs	r0, #2
}
 80043da:	4770      	bx	lr

080043dc <HAL_DMA_UnRegisterCallback>:
{
 80043dc:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 80043de:	f890 2020 	ldrb.w	r2, [r0, #32]
 80043e2:	2a01      	cmp	r2, #1
 80043e4:	d026      	beq.n	8004434 <HAL_DMA_UnRegisterCallback+0x58>
 80043e6:	2201      	movs	r2, #1
 80043e8:	f880 2020 	strb.w	r2, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80043ec:	f890 0021 	ldrb.w	r0, [r0, #33]	@ 0x21
 80043f0:	b2c0      	uxtb	r0, r0
 80043f2:	4290      	cmp	r0, r2
 80043f4:	d004      	beq.n	8004400 <HAL_DMA_UnRegisterCallback+0x24>
    status = HAL_ERROR;
 80043f6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2020 	strb.w	r2, [r3, #32]
  return status;
 80043fe:	4770      	bx	lr
    switch (CallbackID)
 8004400:	2904      	cmp	r1, #4
 8004402:	d8f9      	bhi.n	80043f8 <HAL_DMA_UnRegisterCallback+0x1c>
 8004404:	e8df f001 	tbb	[pc, r1]
 8004408:	0d0a0703 	.word	0x0d0a0703
 800440c:	10          	.byte	0x10
 800440d:	00          	.byte	0x00
      hdma->XferCpltCallback = NULL;
 800440e:	2200      	movs	r2, #0
 8004410:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_StatusTypeDef status = HAL_OK;
 8004412:	4608      	mov	r0, r1
      break;
 8004414:	e7f0      	b.n	80043f8 <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferHalfCpltCallback = NULL;
 8004416:	2000      	movs	r0, #0
 8004418:	62d8      	str	r0, [r3, #44]	@ 0x2c
      break;         
 800441a:	e7ed      	b.n	80043f8 <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferErrorCallback = NULL;
 800441c:	2000      	movs	r0, #0
 800441e:	6318      	str	r0, [r3, #48]	@ 0x30
      break;         
 8004420:	e7ea      	b.n	80043f8 <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferAbortCallback = NULL;
 8004422:	2000      	movs	r0, #0
 8004424:	6358      	str	r0, [r3, #52]	@ 0x34
      break; 
 8004426:	e7e7      	b.n	80043f8 <HAL_DMA_UnRegisterCallback+0x1c>
      hdma->XferCpltCallback = NULL;
 8004428:	2000      	movs	r0, #0
 800442a:	6298      	str	r0, [r3, #40]	@ 0x28
      hdma->XferHalfCpltCallback = NULL;
 800442c:	62d8      	str	r0, [r3, #44]	@ 0x2c
      hdma->XferErrorCallback = NULL;
 800442e:	6318      	str	r0, [r3, #48]	@ 0x30
      hdma->XferAbortCallback = NULL;
 8004430:	6358      	str	r0, [r3, #52]	@ 0x34
      break; 
 8004432:	e7e1      	b.n	80043f8 <HAL_DMA_UnRegisterCallback+0x1c>
  __HAL_LOCK(hdma);
 8004434:	2002      	movs	r0, #2
}
 8004436:	4770      	bx	lr

08004438 <HAL_DMA_GetState>:
  return hdma->State;
 8004438:	f890 0021 	ldrb.w	r0, [r0, #33]	@ 0x21
}
 800443c:	4770      	bx	lr

0800443e <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800443e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
}
 8004440:	4770      	bx	lr
	...

08004444 <HAL_EXTI_SetConfigLine>:
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8004444:	2800      	cmp	r0, #0
 8004446:	d060      	beq.n	800450a <HAL_EXTI_SetConfigLine+0xc6>
 8004448:	2900      	cmp	r1, #0
 800444a:	d060      	beq.n	800450e <HAL_EXTI_SetConfigLine+0xca>
{
 800444c:	b470      	push	{r4, r5, r6}
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 800444e:	680b      	ldr	r3, [r1, #0]
 8004450:	6003      	str	r3, [r0, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8004452:	f003 021f 	and.w	r2, r3, #31
  maskline = (1uL << linepos);
 8004456:	2001      	movs	r0, #1
 8004458:	4090      	lsls	r0, r2

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 800445a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800445e:	d015      	beq.n	800448c <HAL_EXTI_SetConfigLine+0x48>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8004460:	688c      	ldr	r4, [r1, #8]
 8004462:	f014 0f01 	tst.w	r4, #1
 8004466:	d024      	beq.n	80044b2 <HAL_EXTI_SetConfigLine+0x6e>
    {
      EXTI->RTSR |= maskline;
 8004468:	4d2a      	ldr	r5, [pc, #168]	@ (8004514 <HAL_EXTI_SetConfigLine+0xd0>)
 800446a:	68ac      	ldr	r4, [r5, #8]
 800446c:	4304      	orrs	r4, r0
 800446e:	60ac      	str	r4, [r5, #8]
      EXTI->RTSR &= ~maskline;
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8004470:	688c      	ldr	r4, [r1, #8]
 8004472:	f014 0f02 	tst.w	r4, #2
 8004476:	d022      	beq.n	80044be <HAL_EXTI_SetConfigLine+0x7a>
    {
      EXTI->FTSR |= maskline;
 8004478:	4d26      	ldr	r5, [pc, #152]	@ (8004514 <HAL_EXTI_SetConfigLine+0xd0>)
 800447a:	68ec      	ldr	r4, [r5, #12]
 800447c:	4304      	orrs	r4, r0
 800447e:	60ec      	str	r4, [r5, #12]
      EXTI->FTSR &= ~maskline;
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8004480:	680c      	ldr	r4, [r1, #0]
 8004482:	f004 6cc0 	and.w	ip, r4, #100663296	@ 0x6000000
 8004486:	f1bc 6fc0 	cmp.w	ip, #100663296	@ 0x6000000
 800448a:	d01e      	beq.n	80044ca <HAL_EXTI_SetConfigLine+0x86>
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 800448c:	684b      	ldr	r3, [r1, #4]
 800448e:	f013 0f01 	tst.w	r3, #1
 8004492:	d02d      	beq.n	80044f0 <HAL_EXTI_SetConfigLine+0xac>
  {
    EXTI->IMR |= maskline;
 8004494:	4a1f      	ldr	r2, [pc, #124]	@ (8004514 <HAL_EXTI_SetConfigLine+0xd0>)
 8004496:	6813      	ldr	r3, [r2, #0]
 8004498:	4303      	orrs	r3, r0
 800449a:	6013      	str	r3, [r2, #0]
    EXTI->IMR &= ~maskline;
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 800449c:	684b      	ldr	r3, [r1, #4]
 800449e:	f013 0f02 	tst.w	r3, #2
 80044a2:	d02b      	beq.n	80044fc <HAL_EXTI_SetConfigLine+0xb8>
  {
    EXTI->EMR |= maskline;
 80044a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004514 <HAL_EXTI_SetConfigLine+0xd0>)
 80044a6:	6853      	ldr	r3, [r2, #4]
 80044a8:	4303      	orrs	r3, r0
 80044aa:	6053      	str	r3, [r2, #4]
  else
  {
    EXTI->EMR &= ~maskline;
  }

  return HAL_OK;
 80044ac:	2000      	movs	r0, #0
}
 80044ae:	bc70      	pop	{r4, r5, r6}
 80044b0:	4770      	bx	lr
      EXTI->RTSR &= ~maskline;
 80044b2:	4d18      	ldr	r5, [pc, #96]	@ (8004514 <HAL_EXTI_SetConfigLine+0xd0>)
 80044b4:	68ac      	ldr	r4, [r5, #8]
 80044b6:	ea24 0400 	bic.w	r4, r4, r0
 80044ba:	60ac      	str	r4, [r5, #8]
 80044bc:	e7d8      	b.n	8004470 <HAL_EXTI_SetConfigLine+0x2c>
      EXTI->FTSR &= ~maskline;
 80044be:	4d15      	ldr	r5, [pc, #84]	@ (8004514 <HAL_EXTI_SetConfigLine+0xd0>)
 80044c0:	68ec      	ldr	r4, [r5, #12]
 80044c2:	ea24 0400 	bic.w	r4, r4, r0
 80044c6:	60ec      	str	r4, [r5, #12]
 80044c8:	e7da      	b.n	8004480 <HAL_EXTI_SetConfigLine+0x3c>
      regval = AFIO->EXTICR[linepos >> 2u];
 80044ca:	0892      	lsrs	r2, r2, #2
 80044cc:	4e12      	ldr	r6, [pc, #72]	@ (8004518 <HAL_EXTI_SetConfigLine+0xd4>)
 80044ce:	3202      	adds	r2, #2
 80044d0:	f856 4022 	ldr.w	r4, [r6, r2, lsl #2]
      regval &= ~(AFIO_EXTICR1_EXTI0 << (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80044d4:	f003 0303 	and.w	r3, r3, #3
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	250f      	movs	r5, #15
 80044dc:	409d      	lsls	r5, r3
 80044de:	ea24 0405 	bic.w	r4, r4, r5
      regval |= (pExtiConfig->GPIOSel << (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80044e2:	68cd      	ldr	r5, [r1, #12]
 80044e4:	fa05 f303 	lsl.w	r3, r5, r3
 80044e8:	4323      	orrs	r3, r4
      AFIO->EXTICR[linepos >> 2u] = regval;
 80044ea:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 80044ee:	e7cd      	b.n	800448c <HAL_EXTI_SetConfigLine+0x48>
    EXTI->IMR &= ~maskline;
 80044f0:	4a08      	ldr	r2, [pc, #32]	@ (8004514 <HAL_EXTI_SetConfigLine+0xd0>)
 80044f2:	6813      	ldr	r3, [r2, #0]
 80044f4:	ea23 0300 	bic.w	r3, r3, r0
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	e7cf      	b.n	800449c <HAL_EXTI_SetConfigLine+0x58>
    EXTI->EMR &= ~maskline;
 80044fc:	4a05      	ldr	r2, [pc, #20]	@ (8004514 <HAL_EXTI_SetConfigLine+0xd0>)
 80044fe:	6853      	ldr	r3, [r2, #4]
 8004500:	ea23 0300 	bic.w	r3, r3, r0
 8004504:	6053      	str	r3, [r2, #4]
  return HAL_OK;
 8004506:	2000      	movs	r0, #0
 8004508:	e7d1      	b.n	80044ae <HAL_EXTI_SetConfigLine+0x6a>
    return HAL_ERROR;
 800450a:	2001      	movs	r0, #1
 800450c:	4770      	bx	lr
 800450e:	2001      	movs	r0, #1
}
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40010400 	.word	0x40010400
 8004518:	40010000 	.word	0x40010000

0800451c <HAL_EXTI_GetConfigLine>:
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 800451c:	2800      	cmp	r0, #0
 800451e:	d048      	beq.n	80045b2 <HAL_EXTI_GetConfigLine+0x96>
 8004520:	2900      	cmp	r1, #0
 8004522:	d048      	beq.n	80045b6 <HAL_EXTI_GetConfigLine+0x9a>
{
 8004524:	b410      	push	{r4}

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 8004526:	6804      	ldr	r4, [r0, #0]
 8004528:	600c      	str	r4, [r1, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 800452a:	f004 0c1f 	and.w	ip, r4, #31
  maskline = (1uL << linepos);
 800452e:	2301      	movs	r3, #1
 8004530:	fa03 f30c 	lsl.w	r3, r3, ip

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
 8004534:	4822      	ldr	r0, [pc, #136]	@ (80045c0 <HAL_EXTI_GetConfigLine+0xa4>)
 8004536:	6800      	ldr	r0, [r0, #0]
 8004538:	4218      	tst	r0, r3
 800453a:	d027      	beq.n	800458c <HAL_EXTI_GetConfigLine+0x70>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 800453c:	2201      	movs	r2, #1
 800453e:	604a      	str	r2, [r1, #4]
    pExtiConfig->Mode = EXTI_MODE_NONE;
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
 8004540:	481f      	ldr	r0, [pc, #124]	@ (80045c0 <HAL_EXTI_GetConfigLine+0xa4>)
 8004542:	6840      	ldr	r0, [r0, #4]
 8004544:	4218      	tst	r0, r3
 8004546:	d003      	beq.n	8004550 <HAL_EXTI_GetConfigLine+0x34>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 8004548:	6848      	ldr	r0, [r1, #4]
 800454a:	f040 0002 	orr.w	r0, r0, #2
 800454e:	6048      	str	r0, [r1, #4]
  }

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 8004550:	2200      	movs	r2, #0
 8004552:	608a      	str	r2, [r1, #8]
  pExtiConfig->GPIOSel = 0x00u;
 8004554:	60ca      	str	r2, [r1, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8004556:	f014 7f00 	tst.w	r4, #33554432	@ 0x2000000
 800455a:	d02e      	beq.n	80045ba <HAL_EXTI_GetConfigLine+0x9e>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
 800455c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8004560:	f502 3282 	add.w	r2, r2, #66560	@ 0x10400
 8004564:	6892      	ldr	r2, [r2, #8]
 8004566:	421a      	tst	r2, r3
 8004568:	d001      	beq.n	800456e <HAL_EXTI_GetConfigLine+0x52>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 800456a:	2201      	movs	r2, #1
 800456c:	608a      	str	r2, [r1, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
 800456e:	4a14      	ldr	r2, [pc, #80]	@ (80045c0 <HAL_EXTI_GetConfigLine+0xa4>)
 8004570:	68d2      	ldr	r2, [r2, #12]
 8004572:	421a      	tst	r2, r3
 8004574:	d003      	beq.n	800457e <HAL_EXTI_GetConfigLine+0x62>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 8004576:	688b      	ldr	r3, [r1, #8]
 8004578:	f043 0302 	orr.w	r3, r3, #2
 800457c:	608b      	str	r3, [r1, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 800457e:	f004 63c0 	and.w	r3, r4, #100663296	@ 0x6000000
 8004582:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8004586:	d004      	beq.n	8004592 <HAL_EXTI_GetConfigLine+0x76>
      regval = AFIO->EXTICR[linepos >> 2u];
      pExtiConfig->GPIOSel = (regval >> (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u))) & AFIO_EXTICR1_EXTI0;
    }
  }

  return HAL_OK;
 8004588:	2000      	movs	r0, #0
 800458a:	e017      	b.n	80045bc <HAL_EXTI_GetConfigLine+0xa0>
    pExtiConfig->Mode = EXTI_MODE_NONE;
 800458c:	2200      	movs	r2, #0
 800458e:	604a      	str	r2, [r1, #4]
 8004590:	e7d6      	b.n	8004540 <HAL_EXTI_GetConfigLine+0x24>
      regval = AFIO->EXTICR[linepos >> 2u];
 8004592:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8004596:	3202      	adds	r2, #2
 8004598:	4b0a      	ldr	r3, [pc, #40]	@ (80045c4 <HAL_EXTI_GetConfigLine+0xa8>)
 800459a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
      pExtiConfig->GPIOSel = (regval >> (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u))) & AFIO_EXTICR1_EXTI0;
 800459e:	f004 0303 	and.w	r3, r4, #3
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	fa22 f303 	lsr.w	r3, r2, r3
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	60cb      	str	r3, [r1, #12]
  return HAL_OK;
 80045ae:	2000      	movs	r0, #0
 80045b0:	e004      	b.n	80045bc <HAL_EXTI_GetConfigLine+0xa0>
    return HAL_ERROR;
 80045b2:	2001      	movs	r0, #1
 80045b4:	4770      	bx	lr
 80045b6:	2001      	movs	r0, #1
}
 80045b8:	4770      	bx	lr
  return HAL_OK;
 80045ba:	2000      	movs	r0, #0
}
 80045bc:	bc10      	pop	{r4}
 80045be:	4770      	bx	lr
 80045c0:	40010400 	.word	0x40010400
 80045c4:	40010000 	.word	0x40010000

080045c8 <HAL_EXTI_ClearConfigLine>:
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d037      	beq.n	800463c <HAL_EXTI_ClearConfigLine+0x74>
{
 80045cc:	b510      	push	{r4, lr}
 80045ce:	4684      	mov	ip, r0

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 80045d0:	6804      	ldr	r4, [r0, #0]
 80045d2:	f004 001f 	and.w	r0, r4, #31
  maskline = (1uL << linepos);
 80045d6:	2301      	movs	r3, #1
 80045d8:	4083      	lsls	r3, r0

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
 80045da:	4a1a      	ldr	r2, [pc, #104]	@ (8004644 <HAL_EXTI_ClearConfigLine+0x7c>)
 80045dc:	6811      	ldr	r1, [r2, #0]
 80045de:	ea6f 0e03 	mvn.w	lr, r3
 80045e2:	ea21 0103 	bic.w	r1, r1, r3
 80045e6:	6011      	str	r1, [r2, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
 80045e8:	6851      	ldr	r1, [r2, #4]
 80045ea:	ea21 0303 	bic.w	r3, r1, r3
 80045ee:	6053      	str	r3, [r2, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 80045f0:	f8dc 3000 	ldr.w	r3, [ip]
 80045f4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80045f8:	d022      	beq.n	8004640 <HAL_EXTI_ClearConfigLine+0x78>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
 80045fa:	6893      	ldr	r3, [r2, #8]
 80045fc:	ea0e 0303 	and.w	r3, lr, r3
 8004600:	6093      	str	r3, [r2, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
 8004602:	68d3      	ldr	r3, [r2, #12]
 8004604:	ea0e 0303 	and.w	r3, lr, r3
 8004608:	60d3      	str	r3, [r2, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 800460a:	f8dc 3000 	ldr.w	r3, [ip]
 800460e:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8004612:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8004616:	d001      	beq.n	800461c <HAL_EXTI_ClearConfigLine+0x54>
      regval &= ~(AFIO_EXTICR1_EXTI0 << (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
      AFIO->EXTICR[linepos >> 2u] = regval;
    }
  }

  return HAL_OK;
 8004618:	2000      	movs	r0, #0
 800461a:	e012      	b.n	8004642 <HAL_EXTI_ClearConfigLine+0x7a>
      regval = AFIO->EXTICR[linepos >> 2u];
 800461c:	0880      	lsrs	r0, r0, #2
 800461e:	490a      	ldr	r1, [pc, #40]	@ (8004648 <HAL_EXTI_ClearConfigLine+0x80>)
 8004620:	3002      	adds	r0, #2
 8004622:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
      regval &= ~(AFIO_EXTICR1_EXTI0 << (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8004626:	f004 0403 	and.w	r4, r4, #3
 800462a:	00a4      	lsls	r4, r4, #2
 800462c:	220f      	movs	r2, #15
 800462e:	40a2      	lsls	r2, r4
 8004630:	ea23 0302 	bic.w	r3, r3, r2
      AFIO->EXTICR[linepos >> 2u] = regval;
 8004634:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  return HAL_OK;
 8004638:	2000      	movs	r0, #0
 800463a:	e002      	b.n	8004642 <HAL_EXTI_ClearConfigLine+0x7a>
    return HAL_ERROR;
 800463c:	2001      	movs	r0, #1
}
 800463e:	4770      	bx	lr
  return HAL_OK;
 8004640:	2000      	movs	r0, #0
}
 8004642:	bd10      	pop	{r4, pc}
 8004644:	40010400 	.word	0x40010400
 8004648:	40010000 	.word	0x40010000

0800464c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800464c:	4603      	mov	r3, r0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 800464e:	4608      	mov	r0, r1
 8004650:	b909      	cbnz	r1, 8004656 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004652:	605a      	str	r2, [r3, #4]
      break;
 8004654:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8004656:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8004658:	4770      	bx	lr

0800465a <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800465a:	b110      	cbz	r0, 8004662 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800465c:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 800465e:	2000      	movs	r0, #0
 8004660:	4770      	bx	lr
    return HAL_ERROR;
 8004662:	2001      	movs	r0, #1
  }
}
 8004664:	4770      	bx	lr
	...

08004668 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004668:	b508      	push	{r3, lr}
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800466a:	6803      	ldr	r3, [r0, #0]
 800466c:	f003 021f 	and.w	r2, r3, #31
 8004670:	2301      	movs	r3, #1
 8004672:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8004674:	4a04      	ldr	r2, [pc, #16]	@ (8004688 <HAL_EXTI_IRQHandler+0x20>)
 8004676:	6952      	ldr	r2, [r2, #20]
  if (regval != 0x00u)
 8004678:	421a      	tst	r2, r3
 800467a:	d004      	beq.n	8004686 <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 800467c:	4a02      	ldr	r2, [pc, #8]	@ (8004688 <HAL_EXTI_IRQHandler+0x20>)
 800467e:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004680:	6843      	ldr	r3, [r0, #4]
 8004682:	b103      	cbz	r3, 8004686 <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8004684:	4798      	blx	r3
    }
  }
}
 8004686:	bd08      	pop	{r3, pc}
 8004688:	40010400 	.word	0x40010400

0800468c <HAL_EXTI_GetPending>:

  /* Prevent unused argument compilation warning */
  UNUSED(Edge);

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 800468c:	6803      	ldr	r3, [r0, #0]
 800468e:	f003 031f 	and.w	r3, r3, #31
  maskline = (1uL << linepos);
 8004692:	2201      	movs	r2, #1
 8004694:	409a      	lsls	r2, r3

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
 8004696:	4902      	ldr	r1, [pc, #8]	@ (80046a0 <HAL_EXTI_GetPending+0x14>)
 8004698:	6948      	ldr	r0, [r1, #20]
 800469a:	4010      	ands	r0, r2
  return regval;
}
 800469c:	40d8      	lsrs	r0, r3
 800469e:	4770      	bx	lr
 80046a0:	40010400 	.word	0x40010400

080046a4 <HAL_EXTI_ClearPending>:

  /* Prevent unused argument compilation warning */
  UNUSED(Edge);

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80046a4:	6802      	ldr	r2, [r0, #0]
 80046a6:	f002 021f 	and.w	r2, r2, #31
 80046aa:	2301      	movs	r3, #1
 80046ac:	4093      	lsls	r3, r2

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 80046ae:	4a01      	ldr	r2, [pc, #4]	@ (80046b4 <HAL_EXTI_ClearPending+0x10>)
 80046b0:	6153      	str	r3, [r2, #20]
}
 80046b2:	4770      	bx	lr
 80046b4:	40010400 	.word	0x40010400

080046b8 <HAL_EXTI_GenerateSWI>:
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80046b8:	6802      	ldr	r2, [r0, #0]
 80046ba:	f002 021f 	and.w	r2, r2, #31
 80046be:	2301      	movs	r3, #1
 80046c0:	4093      	lsls	r3, r2

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 80046c2:	4a01      	ldr	r2, [pc, #4]	@ (80046c8 <HAL_EXTI_GenerateSWI+0x10>)
 80046c4:	6113      	str	r3, [r2, #16]
}
 80046c6:	4770      	bx	lr
 80046c8:	40010400 	.word	0x40010400

080046cc <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80046cc:	4b04      	ldr	r3, [pc, #16]	@ (80046e0 <FLASH_Program_HalfWord+0x14>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80046d2:	4a04      	ldr	r2, [pc, #16]	@ (80046e4 <FLASH_Program_HalfWord+0x18>)
 80046d4:	6913      	ldr	r3, [r2, #16]
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80046dc:	8001      	strh	r1, [r0, #0]
}
 80046de:	4770      	bx	lr
 80046e0:	20000648 	.word	0x20000648
 80046e4:	40022000 	.word	0x40022000

080046e8 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80046e8:	4b19      	ldr	r3, [pc, #100]	@ (8004750 <FLASH_SetErrorCode+0x68>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f013 0310 	ands.w	r3, r3, #16
 80046f0:	d005      	beq.n	80046fe <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80046f2:	4a18      	ldr	r2, [pc, #96]	@ (8004754 <FLASH_SetErrorCode+0x6c>)
 80046f4:	69d3      	ldr	r3, [r2, #28]
 80046f6:	f043 0302 	orr.w	r3, r3, #2
 80046fa:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80046fc:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80046fe:	4a14      	ldr	r2, [pc, #80]	@ (8004750 <FLASH_SetErrorCode+0x68>)
 8004700:	68d2      	ldr	r2, [r2, #12]
 8004702:	f012 0f04 	tst.w	r2, #4
 8004706:	d006      	beq.n	8004716 <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004708:	4912      	ldr	r1, [pc, #72]	@ (8004754 <FLASH_SetErrorCode+0x6c>)
 800470a:	69ca      	ldr	r2, [r1, #28]
 800470c:	f042 0201 	orr.w	r2, r2, #1
 8004710:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004712:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004716:	4a0e      	ldr	r2, [pc, #56]	@ (8004750 <FLASH_SetErrorCode+0x68>)
 8004718:	69d2      	ldr	r2, [r2, #28]
 800471a:	f012 0f01 	tst.w	r2, #1
 800471e:	d009      	beq.n	8004734 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004720:	490c      	ldr	r1, [pc, #48]	@ (8004754 <FLASH_SetErrorCode+0x6c>)
 8004722:	69ca      	ldr	r2, [r1, #28]
 8004724:	f042 0204 	orr.w	r2, r2, #4
 8004728:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800472a:	4909      	ldr	r1, [pc, #36]	@ (8004750 <FLASH_SetErrorCode+0x68>)
 800472c:	69ca      	ldr	r2, [r1, #28]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004734:	f240 1201 	movw	r2, #257	@ 0x101
 8004738:	4293      	cmp	r3, r2
 800473a:	d002      	beq.n	8004742 <FLASH_SetErrorCode+0x5a>
 800473c:	4a04      	ldr	r2, [pc, #16]	@ (8004750 <FLASH_SetErrorCode+0x68>)
 800473e:	60d3      	str	r3, [r2, #12]
}  
 8004740:	4770      	bx	lr
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004742:	4a03      	ldr	r2, [pc, #12]	@ (8004750 <FLASH_SetErrorCode+0x68>)
 8004744:	69d3      	ldr	r3, [r2, #28]
 8004746:	f023 0301 	bic.w	r3, r3, #1
 800474a:	61d3      	str	r3, [r2, #28]
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40022000 	.word	0x40022000
 8004754:	20000648 	.word	0x20000648

08004758 <HAL_FLASH_Program_IT>:
{
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4684      	mov	ip, r0
 800475c:	4608      	mov	r0, r1
 800475e:	4614      	mov	r4, r2
 8004760:	461d      	mov	r5, r3
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8004762:	4a12      	ldr	r2, [pc, #72]	@ (80047ac <HAL_FLASH_Program_IT+0x54>)
 8004764:	6913      	ldr	r3, [r2, #16]
 8004766:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800476a:	6113      	str	r3, [r2, #16]
  pFlash.Address = Address;
 800476c:	4b10      	ldr	r3, [pc, #64]	@ (80047b0 <HAL_FLASH_Program_IT+0x58>)
 800476e:	6099      	str	r1, [r3, #8]
  pFlash.Data = Data;
 8004770:	e9c3 4504 	strd	r4, r5, [r3, #16]
  if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004774:	f1bc 0f01 	cmp.w	ip, #1
 8004778:	d00c      	beq.n	8004794 <HAL_FLASH_Program_IT+0x3c>
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800477a:	f1bc 0f02 	cmp.w	ip, #2
 800477e:	d00e      	beq.n	800479e <HAL_FLASH_Program_IT+0x46>
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMDOUBLEWORD;
 8004780:	4b0b      	ldr	r3, [pc, #44]	@ (80047b0 <HAL_FLASH_Program_IT+0x58>)
 8004782:	2205      	movs	r2, #5
 8004784:	701a      	strb	r2, [r3, #0]
    pFlash.DataRemaining = 4U;
 8004786:	2204      	movs	r2, #4
 8004788:	605a      	str	r2, [r3, #4]
  FLASH_Program_HalfWord(Address, (uint16_t)Data);
 800478a:	b2a1      	uxth	r1, r4
 800478c:	f7ff ff9e 	bl	80046cc <FLASH_Program_HalfWord>
}
 8004790:	2000      	movs	r0, #0
 8004792:	bd38      	pop	{r3, r4, r5, pc}
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMHALFWORD;
 8004794:	2203      	movs	r2, #3
 8004796:	701a      	strb	r2, [r3, #0]
    pFlash.DataRemaining = 1U;
 8004798:	2201      	movs	r2, #1
 800479a:	605a      	str	r2, [r3, #4]
 800479c:	e7f5      	b.n	800478a <HAL_FLASH_Program_IT+0x32>
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMWORD;
 800479e:	4b04      	ldr	r3, [pc, #16]	@ (80047b0 <HAL_FLASH_Program_IT+0x58>)
 80047a0:	2204      	movs	r2, #4
 80047a2:	701a      	strb	r2, [r3, #0]
    pFlash.DataRemaining = 2U;
 80047a4:	2202      	movs	r2, #2
 80047a6:	605a      	str	r2, [r3, #4]
 80047a8:	e7ef      	b.n	800478a <HAL_FLASH_Program_IT+0x32>
 80047aa:	bf00      	nop
 80047ac:	40022000 	.word	0x40022000
 80047b0:	20000648 	.word	0x20000648

080047b4 <HAL_FLASH_EndOfOperationCallback>:
}
 80047b4:	4770      	bx	lr

080047b6 <HAL_FLASH_OperationErrorCallback>:
}
 80047b6:	4770      	bx	lr

080047b8 <HAL_FLASH_IRQHandler>:
{
 80047b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80047ba:	4b51      	ldr	r3, [pc, #324]	@ (8004900 <HAL_FLASH_IRQHandler+0x148>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f013 0f10 	tst.w	r3, #16
 80047c2:	d104      	bne.n	80047ce <HAL_FLASH_IRQHandler+0x16>
 80047c4:	4b4e      	ldr	r3, [pc, #312]	@ (8004900 <HAL_FLASH_IRQHandler+0x148>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f013 0f04 	tst.w	r3, #4
 80047cc:	d00b      	beq.n	80047e6 <HAL_FLASH_IRQHandler+0x2e>
    addresstmp = pFlash.Address;
 80047ce:	4c4d      	ldr	r4, [pc, #308]	@ (8004904 <HAL_FLASH_IRQHandler+0x14c>)
 80047d0:	68a5      	ldr	r5, [r4, #8]
    pFlash.Address = 0xFFFFFFFFU;
 80047d2:	f04f 33ff 	mov.w	r3, #4294967295
 80047d6:	60a3      	str	r3, [r4, #8]
    FLASH_SetErrorCode();
 80047d8:	f7ff ff86 	bl	80046e8 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80047dc:	4628      	mov	r0, r5
 80047de:	f7ff ffea 	bl	80047b6 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80047e2:	2300      	movs	r3, #0
 80047e4:	7023      	strb	r3, [r4, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80047e6:	4b46      	ldr	r3, [pc, #280]	@ (8004900 <HAL_FLASH_IRQHandler+0x148>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f013 0f20 	tst.w	r3, #32
 80047ee:	d02b      	beq.n	8004848 <HAL_FLASH_IRQHandler+0x90>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80047f0:	4b43      	ldr	r3, [pc, #268]	@ (8004900 <HAL_FLASH_IRQHandler+0x148>)
 80047f2:	2220      	movs	r2, #32
 80047f4:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 80047f6:	4b43      	ldr	r3, [pc, #268]	@ (8004904 <HAL_FLASH_IRQHandler+0x14c>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	b32b      	cbz	r3, 8004848 <HAL_FLASH_IRQHandler+0x90>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 80047fc:	4b41      	ldr	r3, [pc, #260]	@ (8004904 <HAL_FLASH_IRQHandler+0x14c>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b01      	cmp	r3, #1
 8004804:	d02d      	beq.n	8004862 <HAL_FLASH_IRQHandler+0xaa>
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8004806:	4b3f      	ldr	r3, [pc, #252]	@ (8004904 <HAL_FLASH_IRQHandler+0x14c>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d047      	beq.n	80048a0 <HAL_FLASH_IRQHandler+0xe8>
        pFlash.DataRemaining--;
 8004810:	4b3c      	ldr	r3, [pc, #240]	@ (8004904 <HAL_FLASH_IRQHandler+0x14c>)
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	3a01      	subs	r2, #1
 8004816:	605a      	str	r2, [r3, #4]
        if(pFlash.DataRemaining != 0U)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d14c      	bne.n	80048b8 <HAL_FLASH_IRQHandler+0x100>
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 800481e:	4b39      	ldr	r3, [pc, #228]	@ (8004904 <HAL_FLASH_IRQHandler+0x14c>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b03      	cmp	r3, #3
 8004826:	d05f      	beq.n	80048e8 <HAL_FLASH_IRQHandler+0x130>
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8004828:	4b36      	ldr	r3, [pc, #216]	@ (8004904 <HAL_FLASH_IRQHandler+0x14c>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b04      	cmp	r3, #4
 8004830:	d05f      	beq.n	80048f2 <HAL_FLASH_IRQHandler+0x13a>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8004832:	4b34      	ldr	r3, [pc, #208]	@ (8004904 <HAL_FLASH_IRQHandler+0x14c>)
 8004834:	6898      	ldr	r0, [r3, #8]
 8004836:	3806      	subs	r0, #6
 8004838:	f7ff ffbc 	bl	80047b4 <HAL_FLASH_EndOfOperationCallback>
          pFlash.Address = 0xFFFFFFFFU;
 800483c:	4b31      	ldr	r3, [pc, #196]	@ (8004904 <HAL_FLASH_IRQHandler+0x14c>)
 800483e:	f04f 32ff 	mov.w	r2, #4294967295
 8004842:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8004848:	4b2e      	ldr	r3, [pc, #184]	@ (8004904 <HAL_FLASH_IRQHandler+0x14c>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	b943      	cbnz	r3, 8004860 <HAL_FLASH_IRQHandler+0xa8>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 800484e:	4b2c      	ldr	r3, [pc, #176]	@ (8004900 <HAL_FLASH_IRQHandler+0x148>)
 8004850:	691a      	ldr	r2, [r3, #16]
 8004852:	f022 0207 	bic.w	r2, r2, #7
 8004856:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8004858:	691a      	ldr	r2, [r3, #16]
 800485a:	f422 52a0 	bic.w	r2, r2, #5120	@ 0x1400
 800485e:	611a      	str	r2, [r3, #16]
}
 8004860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pFlash.DataRemaining--;
 8004862:	4b28      	ldr	r3, [pc, #160]	@ (8004904 <HAL_FLASH_IRQHandler+0x14c>)
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	3a01      	subs	r2, #1
 8004868:	605a      	str	r2, [r3, #4]
        if(pFlash.DataRemaining != 0U)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	b17b      	cbz	r3, 800488e <HAL_FLASH_IRQHandler+0xd6>
          addresstmp = pFlash.Address;
 800486e:	4c25      	ldr	r4, [pc, #148]	@ (8004904 <HAL_FLASH_IRQHandler+0x14c>)
 8004870:	68a0      	ldr	r0, [r4, #8]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8004872:	f7ff ff9f 	bl	80047b4 <HAL_FLASH_EndOfOperationCallback>
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8004876:	68a0      	ldr	r0, [r4, #8]
 8004878:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
          pFlash.Address = addresstmp;
 800487c:	60a0      	str	r0, [r4, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800487e:	4a20      	ldr	r2, [pc, #128]	@ (8004900 <HAL_FLASH_IRQHandler+0x148>)
 8004880:	6913      	ldr	r3, [r2, #16]
 8004882:	f023 0302 	bic.w	r3, r3, #2
 8004886:	6113      	str	r3, [r2, #16]
          FLASH_PageErase(addresstmp);
 8004888:	f000 fb0e 	bl	8004ea8 <FLASH_PageErase>
 800488c:	e7dc      	b.n	8004848 <HAL_FLASH_IRQHandler+0x90>
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 800488e:	4b1d      	ldr	r3, [pc, #116]	@ (8004904 <HAL_FLASH_IRQHandler+0x14c>)
 8004890:	f04f 30ff 	mov.w	r0, #4294967295
 8004894:	6098      	str	r0, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004896:	2200      	movs	r2, #0
 8004898:	701a      	strb	r2, [r3, #0]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800489a:	f7ff ff8b 	bl	80047b4 <HAL_FLASH_EndOfOperationCallback>
 800489e:	e7d3      	b.n	8004848 <HAL_FLASH_IRQHandler+0x90>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80048a0:	4a17      	ldr	r2, [pc, #92]	@ (8004900 <HAL_FLASH_IRQHandler+0x148>)
 80048a2:	6913      	ldr	r3, [r2, #16]
 80048a4:	f023 0304 	bic.w	r3, r3, #4
 80048a8:	6113      	str	r3, [r2, #16]
          HAL_FLASH_EndOfOperationCallback(0U);
 80048aa:	2000      	movs	r0, #0
 80048ac:	f7ff ff82 	bl	80047b4 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80048b0:	4b14      	ldr	r3, [pc, #80]	@ (8004904 <HAL_FLASH_IRQHandler+0x14c>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	e7c7      	b.n	8004848 <HAL_FLASH_IRQHandler+0x90>
          pFlash.Address += 2U;
 80048b8:	4b12      	ldr	r3, [pc, #72]	@ (8004904 <HAL_FLASH_IRQHandler+0x14c>)
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	3202      	adds	r2, #2
 80048be:	609a      	str	r2, [r3, #8]
          addresstmp = pFlash.Address;
 80048c0:	6898      	ldr	r0, [r3, #8]
          pFlash.Data = (pFlash.Data >> 16U);
 80048c2:	e9d3 6704 	ldrd	r6, r7, [r3, #16]
 80048c6:	0c34      	lsrs	r4, r6, #16
 80048c8:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 80048cc:	0c3d      	lsrs	r5, r7, #16
 80048ce:	e9c3 4504 	strd	r4, r5, [r3, #16]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80048d2:	490b      	ldr	r1, [pc, #44]	@ (8004900 <HAL_FLASH_IRQHandler+0x148>)
 80048d4:	690a      	ldr	r2, [r1, #16]
 80048d6:	f022 0201 	bic.w	r2, r2, #1
 80048da:	610a      	str	r2, [r1, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 80048dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80048e0:	b291      	uxth	r1, r2
 80048e2:	f7ff fef3 	bl	80046cc <FLASH_Program_HalfWord>
 80048e6:	e7af      	b.n	8004848 <HAL_FLASH_IRQHandler+0x90>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80048e8:	4b06      	ldr	r3, [pc, #24]	@ (8004904 <HAL_FLASH_IRQHandler+0x14c>)
 80048ea:	6898      	ldr	r0, [r3, #8]
 80048ec:	f7ff ff62 	bl	80047b4 <HAL_FLASH_EndOfOperationCallback>
 80048f0:	e7a4      	b.n	800483c <HAL_FLASH_IRQHandler+0x84>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 80048f2:	4b04      	ldr	r3, [pc, #16]	@ (8004904 <HAL_FLASH_IRQHandler+0x14c>)
 80048f4:	6898      	ldr	r0, [r3, #8]
 80048f6:	3802      	subs	r0, #2
 80048f8:	f7ff ff5c 	bl	80047b4 <HAL_FLASH_EndOfOperationCallback>
 80048fc:	e79e      	b.n	800483c <HAL_FLASH_IRQHandler+0x84>
 80048fe:	bf00      	nop
 8004900:	40022000 	.word	0x40022000
 8004904:	20000648 	.word	0x20000648

08004908 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004908:	4b0a      	ldr	r3, [pc, #40]	@ (8004934 <HAL_FLASH_Unlock+0x2c>)
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004910:	d00b      	beq.n	800492a <HAL_FLASH_Unlock+0x22>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004912:	4b08      	ldr	r3, [pc, #32]	@ (8004934 <HAL_FLASH_Unlock+0x2c>)
 8004914:	4a08      	ldr	r2, [pc, #32]	@ (8004938 <HAL_FLASH_Unlock+0x30>)
 8004916:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004918:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 800491c:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004924:	d103      	bne.n	800492e <HAL_FLASH_Unlock+0x26>
  HAL_StatusTypeDef status = HAL_OK;
 8004926:	2000      	movs	r0, #0
 8004928:	4770      	bx	lr
 800492a:	2000      	movs	r0, #0
 800492c:	4770      	bx	lr
      status = HAL_ERROR;
 800492e:	2001      	movs	r0, #1
}
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40022000 	.word	0x40022000
 8004938:	45670123 	.word	0x45670123

0800493c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800493c:	4a03      	ldr	r2, [pc, #12]	@ (800494c <HAL_FLASH_Lock+0x10>)
 800493e:	6913      	ldr	r3, [r2, #16]
 8004940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004944:	6113      	str	r3, [r2, #16]
}
 8004946:	2000      	movs	r0, #0
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40022000 	.word	0x40022000

08004950 <HAL_FLASH_OB_Unlock>:
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8004950:	4b07      	ldr	r3, [pc, #28]	@ (8004970 <HAL_FLASH_OB_Unlock+0x20>)
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8004958:	d107      	bne.n	800496a <HAL_FLASH_OB_Unlock+0x1a>
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800495a:	4b05      	ldr	r3, [pc, #20]	@ (8004970 <HAL_FLASH_OB_Unlock+0x20>)
 800495c:	4a05      	ldr	r2, [pc, #20]	@ (8004974 <HAL_FLASH_OB_Unlock+0x24>)
 800495e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8004960:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 8004964:	609a      	str	r2, [r3, #8]
  return HAL_OK;  
 8004966:	2000      	movs	r0, #0
 8004968:	4770      	bx	lr
    return HAL_ERROR;
 800496a:	2001      	movs	r0, #1
}
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40022000 	.word	0x40022000
 8004974:	45670123 	.word	0x45670123

08004978 <HAL_FLASH_OB_Lock>:
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8004978:	4a03      	ldr	r2, [pc, #12]	@ (8004988 <HAL_FLASH_OB_Lock+0x10>)
 800497a:	6913      	ldr	r3, [r2, #16]
 800497c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004980:	6113      	str	r3, [r2, #16]
}
 8004982:	2000      	movs	r0, #0
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40022000 	.word	0x40022000

0800498c <HAL_FLASH_OB_Launch>:
{
 800498c:	b508      	push	{r3, lr}
  HAL_NVIC_SystemReset();
 800498e:	f7fe fe79 	bl	8003684 <HAL_NVIC_SystemReset>
}
 8004992:	bd08      	pop	{r3, pc}

08004994 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 8004994:	4b01      	ldr	r3, [pc, #4]	@ (800499c <HAL_FLASH_GetError+0x8>)
 8004996:	69d8      	ldr	r0, [r3, #28]
}
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	20000648 	.word	0x20000648

080049a0 <FLASH_WaitForLastOperation>:
{
 80049a0:	b538      	push	{r3, r4, r5, lr}
 80049a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80049a4:	f7fe fd14 	bl	80033d0 <HAL_GetTick>
 80049a8:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80049aa:	4b16      	ldr	r3, [pc, #88]	@ (8004a04 <FLASH_WaitForLastOperation+0x64>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f013 0f01 	tst.w	r3, #1
 80049b2:	d00a      	beq.n	80049ca <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 80049b4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80049b8:	d0f7      	beq.n	80049aa <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80049ba:	b124      	cbz	r4, 80049c6 <FLASH_WaitForLastOperation+0x26>
 80049bc:	f7fe fd08 	bl	80033d0 <HAL_GetTick>
 80049c0:	1b40      	subs	r0, r0, r5
 80049c2:	42a0      	cmp	r0, r4
 80049c4:	d9f1      	bls.n	80049aa <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 80049c6:	2003      	movs	r0, #3
 80049c8:	e01b      	b.n	8004a02 <FLASH_WaitForLastOperation+0x62>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80049ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004a04 <FLASH_WaitForLastOperation+0x64>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f013 0f20 	tst.w	r3, #32
 80049d2:	d002      	beq.n	80049da <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80049d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a04 <FLASH_WaitForLastOperation+0x64>)
 80049d6:	2220      	movs	r2, #32
 80049d8:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80049da:	4b0a      	ldr	r3, [pc, #40]	@ (8004a04 <FLASH_WaitForLastOperation+0x64>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f013 0f10 	tst.w	r3, #16
 80049e2:	d10b      	bne.n	80049fc <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80049e4:	4b07      	ldr	r3, [pc, #28]	@ (8004a04 <FLASH_WaitForLastOperation+0x64>)
 80049e6:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80049e8:	f013 0f01 	tst.w	r3, #1
 80049ec:	d106      	bne.n	80049fc <FLASH_WaitForLastOperation+0x5c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80049ee:	4b05      	ldr	r3, [pc, #20]	@ (8004a04 <FLASH_WaitForLastOperation+0x64>)
 80049f0:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80049f2:	f013 0f04 	tst.w	r3, #4
 80049f6:	d101      	bne.n	80049fc <FLASH_WaitForLastOperation+0x5c>
  return HAL_OK;
 80049f8:	2000      	movs	r0, #0
 80049fa:	e002      	b.n	8004a02 <FLASH_WaitForLastOperation+0x62>
    FLASH_SetErrorCode();
 80049fc:	f7ff fe74 	bl	80046e8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004a00:	2001      	movs	r0, #1
}
 8004a02:	bd38      	pop	{r3, r4, r5, pc}
 8004a04:	40022000 	.word	0x40022000

08004a08 <HAL_FLASH_Program>:
{
 8004a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a0c:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 8004a0e:	4b24      	ldr	r3, [pc, #144]	@ (8004aa0 <HAL_FLASH_Program+0x98>)
 8004a10:	7e1b      	ldrb	r3, [r3, #24]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d041      	beq.n	8004a9a <HAL_FLASH_Program+0x92>
 8004a16:	4604      	mov	r4, r0
 8004a18:	460f      	mov	r7, r1
 8004a1a:	4690      	mov	r8, r2
 8004a1c:	4b20      	ldr	r3, [pc, #128]	@ (8004aa0 <HAL_FLASH_Program+0x98>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a22:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004a26:	f7ff ffbb 	bl	80049a0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	bb78      	cbnz	r0, 8004a8e <HAL_FLASH_Program+0x86>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004a2e:	2c01      	cmp	r4, #1
 8004a30:	d008      	beq.n	8004a44 <HAL_FLASH_Program+0x3c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004a32:	2c02      	cmp	r4, #2
 8004a34:	d003      	beq.n	8004a3e <HAL_FLASH_Program+0x36>
      nbiterations = 4U;
 8004a36:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8004a3a:	461c      	mov	r4, r3
 8004a3c:	e007      	b.n	8004a4e <HAL_FLASH_Program+0x46>
      nbiterations = 2U;
 8004a3e:	f04f 0902 	mov.w	r9, #2
 8004a42:	e7fa      	b.n	8004a3a <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 8004a44:	f04f 0901 	mov.w	r9, #1
 8004a48:	e7f7      	b.n	8004a3a <HAL_FLASH_Program+0x32>
    for (index = 0U; index < nbiterations; index++)
 8004a4a:	3401      	adds	r4, #1
 8004a4c:	b2e4      	uxtb	r4, r4
 8004a4e:	454c      	cmp	r4, r9
 8004a50:	d21d      	bcs.n	8004a8e <HAL_FLASH_Program+0x86>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004a52:	0121      	lsls	r1, r4, #4
 8004a54:	f1c1 0220 	rsb	r2, r1, #32
 8004a58:	f1a1 0320 	sub.w	r3, r1, #32
 8004a5c:	fa28 f101 	lsr.w	r1, r8, r1
 8004a60:	fa06 f202 	lsl.w	r2, r6, r2
 8004a64:	4311      	orrs	r1, r2
 8004a66:	fa26 f303 	lsr.w	r3, r6, r3
 8004a6a:	4319      	orrs	r1, r3
 8004a6c:	b289      	uxth	r1, r1
 8004a6e:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8004a72:	f7ff fe2b 	bl	80046cc <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a76:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004a7a:	f7ff ff91 	bl	80049a0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004a7e:	4b09      	ldr	r3, [pc, #36]	@ (8004aa4 <HAL_FLASH_Program+0x9c>)
 8004a80:	691d      	ldr	r5, [r3, #16]
 8004a82:	f025 0501 	bic.w	r5, r5, #1
 8004a86:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	d0dd      	beq.n	8004a4a <HAL_FLASH_Program+0x42>
  __HAL_UNLOCK(&pFlash);
 8004a8e:	4a04      	ldr	r2, [pc, #16]	@ (8004aa0 <HAL_FLASH_Program+0x98>)
 8004a90:	2100      	movs	r1, #0
 8004a92:	7611      	strb	r1, [r2, #24]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e7fa      	b.n	8004a94 <HAL_FLASH_Program+0x8c>
 8004a9e:	bf00      	nop
 8004aa0:	20000648 	.word	0x20000648
 8004aa4:	40022000 	.word	0x40022000

08004aa8 <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004aa8:	4b06      	ldr	r3, [pc, #24]	@ (8004ac4 <FLASH_MassErase+0x1c>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004aae:	4b06      	ldr	r3, [pc, #24]	@ (8004ac8 <FLASH_MassErase+0x20>)
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	f042 0204 	orr.w	r2, r2, #4
 8004ab6:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004ab8:	691a      	ldr	r2, [r3, #16]
 8004aba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004abe:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	20000648 	.word	0x20000648
 8004ac8:	40022000 	.word	0x40022000

08004acc <FLASH_OB_GetWRP>:
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8004acc:	4b01      	ldr	r3, [pc, #4]	@ (8004ad4 <FLASH_OB_GetWRP+0x8>)
 8004ace:	6a18      	ldr	r0, [r3, #32]
}
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40022000 	.word	0x40022000

08004ad8 <FLASH_OB_GetRDP>:
{
  uint32_t readstatus = OB_RDP_LEVEL_0;
  uint32_t tmp_reg = 0U;
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 8004ad8:	4b04      	ldr	r3, [pc, #16]	@ (8004aec <FLASH_OB_GetRDP+0x14>)
 8004ada:	69db      	ldr	r3, [r3, #28]

  if (tmp_reg == FLASH_OBR_RDPRT)
 8004adc:	f013 0f02 	tst.w	r3, #2
 8004ae0:	d001      	beq.n	8004ae6 <FLASH_OB_GetRDP+0xe>
  {
    readstatus = OB_RDP_LEVEL_1;
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	4770      	bx	lr
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 8004ae6:	20a5      	movs	r0, #165	@ 0xa5
  }

  return readstatus;
}
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40022000 	.word	0x40022000

08004af0 <FLASH_OB_GetUser>:
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8004af0:	4b02      	ldr	r3, [pc, #8]	@ (8004afc <FLASH_OB_GetUser+0xc>)
 8004af2:	69d8      	ldr	r0, [r3, #28]
}
 8004af4:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40022000 	.word	0x40022000

08004b00 <FLASH_OB_RDP_LevelConfig>:
{
 8004b00:	b538      	push	{r3, r4, r5, lr}
 8004b02:	4605      	mov	r5, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b04:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004b08:	f7ff ff4a 	bl	80049a0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8004b0c:	b100      	cbz	r0, 8004b10 <FLASH_OB_RDP_LevelConfig+0x10>
}
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b10:	4b12      	ldr	r3, [pc, #72]	@ (8004b5c <FLASH_OB_RDP_LevelConfig+0x5c>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8004b16:	4c12      	ldr	r4, [pc, #72]	@ (8004b60 <FLASH_OB_RDP_LevelConfig+0x60>)
 8004b18:	6923      	ldr	r3, [r4, #16]
 8004b1a:	f043 0320 	orr.w	r3, r3, #32
 8004b1e:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004b20:	6923      	ldr	r3, [r4, #16]
 8004b22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b26:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b28:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004b2c:	f7ff ff38 	bl	80049a0 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8004b30:	6923      	ldr	r3, [r4, #16]
 8004b32:	f023 0320 	bic.w	r3, r3, #32
 8004b36:	6123      	str	r3, [r4, #16]
    if(status == HAL_OK)
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d1e8      	bne.n	8004b0e <FLASH_OB_RDP_LevelConfig+0xe>
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8004b3c:	6923      	ldr	r3, [r4, #16]
 8004b3e:	f043 0310 	orr.w	r3, r3, #16
 8004b42:	6123      	str	r3, [r4, #16]
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8004b44:	4b07      	ldr	r3, [pc, #28]	@ (8004b64 <FLASH_OB_RDP_LevelConfig+0x64>)
 8004b46:	801d      	strh	r5, [r3, #0]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 8004b48:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004b4c:	f7ff ff28 	bl	80049a0 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8004b50:	6923      	ldr	r3, [r4, #16]
 8004b52:	f023 0310 	bic.w	r3, r3, #16
 8004b56:	6123      	str	r3, [r4, #16]
 8004b58:	e7d9      	b.n	8004b0e <FLASH_OB_RDP_LevelConfig+0xe>
 8004b5a:	bf00      	nop
 8004b5c:	20000648 	.word	0x20000648
 8004b60:	40022000 	.word	0x40022000
 8004b64:	1ffff800 	.word	0x1ffff800

08004b68 <FLASH_OB_UserConfig>:
{
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	4604      	mov	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b6c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004b70:	f7ff ff16 	bl	80049a0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8004b74:	b100      	cbz	r0, 8004b78 <FLASH_OB_UserConfig+0x10>
}
 8004b76:	bd38      	pop	{r3, r4, r5, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b78:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba4 <FLASH_OB_UserConfig+0x3c>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8004b7e:	4d0a      	ldr	r5, [pc, #40]	@ (8004ba8 <FLASH_OB_UserConfig+0x40>)
 8004b80:	692b      	ldr	r3, [r5, #16]
 8004b82:	f043 0310 	orr.w	r3, r3, #16
 8004b86:	612b      	str	r3, [r5, #16]
    OB->USER = (UserConfig | 0x88U);
 8004b88:	f044 0088 	orr.w	r0, r4, #136	@ 0x88
 8004b8c:	4b07      	ldr	r3, [pc, #28]	@ (8004bac <FLASH_OB_UserConfig+0x44>)
 8004b8e:	8058      	strh	r0, [r3, #2]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b90:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004b94:	f7ff ff04 	bl	80049a0 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8004b98:	692b      	ldr	r3, [r5, #16]
 8004b9a:	f023 0310 	bic.w	r3, r3, #16
 8004b9e:	612b      	str	r3, [r5, #16]
 8004ba0:	e7e9      	b.n	8004b76 <FLASH_OB_UserConfig+0xe>
 8004ba2:	bf00      	nop
 8004ba4:	20000648 	.word	0x20000648
 8004ba8:	40022000 	.word	0x40022000
 8004bac:	1ffff800 	.word	0x1ffff800

08004bb0 <FLASH_OB_ProgramData>:
{
 8004bb0:	b570      	push	{r4, r5, r6, lr}
 8004bb2:	4605      	mov	r5, r0
 8004bb4:	460c      	mov	r4, r1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004bb6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004bba:	f7ff fef1 	bl	80049a0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8004bbe:	b100      	cbz	r0, 8004bc2 <FLASH_OB_ProgramData+0x12>
}
 8004bc0:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004bc2:	4b09      	ldr	r3, [pc, #36]	@ (8004be8 <FLASH_OB_ProgramData+0x38>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8004bc8:	4e08      	ldr	r6, [pc, #32]	@ (8004bec <FLASH_OB_ProgramData+0x3c>)
 8004bca:	6933      	ldr	r3, [r6, #16]
 8004bcc:	f043 0310 	orr.w	r3, r3, #16
 8004bd0:	6133      	str	r3, [r6, #16]
    *(__IO uint16_t*)Address = Data;
 8004bd2:	802c      	strh	r4, [r5, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004bd4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004bd8:	f7ff fee2 	bl	80049a0 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8004bdc:	6933      	ldr	r3, [r6, #16]
 8004bde:	f023 0310 	bic.w	r3, r3, #16
 8004be2:	6133      	str	r3, [r6, #16]
 8004be4:	e7ec      	b.n	8004bc0 <FLASH_OB_ProgramData+0x10>
 8004be6:	bf00      	nop
 8004be8:	20000648 	.word	0x20000648
 8004bec:	40022000 	.word	0x40022000

08004bf0 <HAL_FLASHEx_OBErase>:
{
 8004bf0:	b538      	push	{r3, r4, r5, lr}
  rdptmp = FLASH_OB_GetRDP();
 8004bf2:	f7ff ff71 	bl	8004ad8 <FLASH_OB_GetRDP>
 8004bf6:	b2c5      	uxtb	r5, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004bf8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004bfc:	f7ff fed0 	bl	80049a0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8004c00:	b100      	cbz	r0, 8004c04 <HAL_FLASHEx_OBErase+0x14>
}
 8004c02:	bd38      	pop	{r3, r4, r5, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004c04:	4b0c      	ldr	r3, [pc, #48]	@ (8004c38 <HAL_FLASHEx_OBErase+0x48>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8004c0a:	4c0c      	ldr	r4, [pc, #48]	@ (8004c3c <HAL_FLASHEx_OBErase+0x4c>)
 8004c0c:	6923      	ldr	r3, [r4, #16]
 8004c0e:	f043 0320 	orr.w	r3, r3, #32
 8004c12:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004c14:	6923      	ldr	r3, [r4, #16]
 8004c16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c1a:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c1c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004c20:	f7ff febe 	bl	80049a0 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8004c24:	6923      	ldr	r3, [r4, #16]
 8004c26:	f023 0320 	bic.w	r3, r3, #32
 8004c2a:	6123      	str	r3, [r4, #16]
    if(status == HAL_OK)
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	d1e8      	bne.n	8004c02 <HAL_FLASHEx_OBErase+0x12>
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 8004c30:	4628      	mov	r0, r5
 8004c32:	f7ff ff65 	bl	8004b00 <FLASH_OB_RDP_LevelConfig>
 8004c36:	e7e4      	b.n	8004c02 <HAL_FLASHEx_OBErase+0x12>
 8004c38:	20000648 	.word	0x20000648
 8004c3c:	40022000 	.word	0x40022000

08004c40 <FLASH_OB_EnableWRP>:
{
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	4604      	mov	r4, r0
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8004c44:	f7ff ff42 	bl	8004acc <FLASH_OB_GetWRP>
 8004c48:	ea20 0004 	bic.w	r0, r0, r4
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
 8004c4c:	b2c5      	uxtb	r5, r0
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
 8004c4e:	f3c0 2707 	ubfx	r7, r0, #8, #8
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
 8004c52:	f3c0 4607 	ubfx	r6, r0, #16, #8
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24U); 
 8004c56:	0e04      	lsrs	r4, r0, #24
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c58:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004c5c:	f7ff fea0 	bl	80049a0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8004c60:	4603      	mov	r3, r0
 8004c62:	b108      	cbz	r0, 8004c68 <FLASH_OB_EnableWRP+0x28>
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004c68:	4b23      	ldr	r3, [pc, #140]	@ (8004cf8 <FLASH_OB_EnableWRP+0xb8>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	61da      	str	r2, [r3, #28]
    status = HAL_FLASHEx_OBErase();
 8004c6e:	f7ff ffbf 	bl	8004bf0 <HAL_FLASHEx_OBErase>
    if (status == HAL_OK)  
 8004c72:	4603      	mov	r3, r0
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d1f5      	bne.n	8004c64 <FLASH_OB_EnableWRP+0x24>
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8004c78:	4920      	ldr	r1, [pc, #128]	@ (8004cfc <FLASH_OB_EnableWRP+0xbc>)
 8004c7a:	690a      	ldr	r2, [r1, #16]
 8004c7c:	f042 0210 	orr.w	r2, r2, #16
 8004c80:	610a      	str	r2, [r1, #16]
      if(WRP0_Data != 0xFFU)
 8004c82:	2dff      	cmp	r5, #255	@ 0xff
 8004c84:	d10e      	bne.n	8004ca4 <FLASH_OB_EnableWRP+0x64>
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8004c86:	b923      	cbnz	r3, 8004c92 <FLASH_OB_EnableWRP+0x52>
 8004c88:	2fff      	cmp	r7, #255	@ 0xff
 8004c8a:	d115      	bne.n	8004cb8 <FLASH_OB_EnableWRP+0x78>
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8004c8c:	b923      	cbnz	r3, 8004c98 <FLASH_OB_EnableWRP+0x58>
 8004c8e:	2eff      	cmp	r6, #255	@ 0xff
 8004c90:	d11c      	bne.n	8004ccc <FLASH_OB_EnableWRP+0x8c>
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8004c92:	b90b      	cbnz	r3, 8004c98 <FLASH_OB_EnableWRP+0x58>
 8004c94:	2cff      	cmp	r4, #255	@ 0xff
 8004c96:	d123      	bne.n	8004ce0 <FLASH_OB_EnableWRP+0xa0>
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8004c98:	4918      	ldr	r1, [pc, #96]	@ (8004cfc <FLASH_OB_EnableWRP+0xbc>)
 8004c9a:	690a      	ldr	r2, [r1, #16]
 8004c9c:	f022 0210 	bic.w	r2, r2, #16
 8004ca0:	610a      	str	r2, [r1, #16]
 8004ca2:	e7df      	b.n	8004c64 <FLASH_OB_EnableWRP+0x24>
        OB->WRP0 &= WRP0_Data;
 8004ca4:	4b16      	ldr	r3, [pc, #88]	@ (8004d00 <FLASH_OB_EnableWRP+0xc0>)
 8004ca6:	891a      	ldrh	r2, [r3, #8]
 8004ca8:	4015      	ands	r5, r2
 8004caa:	811d      	strh	r5, [r3, #8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004cac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004cb0:	f7ff fe76 	bl	80049a0 <FLASH_WaitForLastOperation>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	e7e6      	b.n	8004c86 <FLASH_OB_EnableWRP+0x46>
        OB->WRP1 &= WRP1_Data;
 8004cb8:	4b11      	ldr	r3, [pc, #68]	@ (8004d00 <FLASH_OB_EnableWRP+0xc0>)
 8004cba:	895a      	ldrh	r2, [r3, #10]
 8004cbc:	4017      	ands	r7, r2
 8004cbe:	815f      	strh	r7, [r3, #10]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004cc0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004cc4:	f7ff fe6c 	bl	80049a0 <FLASH_WaitForLastOperation>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	e7df      	b.n	8004c8c <FLASH_OB_EnableWRP+0x4c>
        OB->WRP2 &= WRP2_Data;
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8004d00 <FLASH_OB_EnableWRP+0xc0>)
 8004cce:	899a      	ldrh	r2, [r3, #12]
 8004cd0:	4016      	ands	r6, r2
 8004cd2:	819e      	strh	r6, [r3, #12]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004cd4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004cd8:	f7ff fe62 	bl	80049a0 <FLASH_WaitForLastOperation>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	e7d8      	b.n	8004c92 <FLASH_OB_EnableWRP+0x52>
        OB->WRP3 &= WRP3_Data;
 8004ce0:	4b07      	ldr	r3, [pc, #28]	@ (8004d00 <FLASH_OB_EnableWRP+0xc0>)
 8004ce2:	89da      	ldrh	r2, [r3, #14]
 8004ce4:	ea04 0002 	and.w	r0, r4, r2
 8004ce8:	81d8      	strh	r0, [r3, #14]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004cea:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004cee:	f7ff fe57 	bl	80049a0 <FLASH_WaitForLastOperation>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	e7d0      	b.n	8004c98 <FLASH_OB_EnableWRP+0x58>
 8004cf6:	bf00      	nop
 8004cf8:	20000648 	.word	0x20000648
 8004cfc:	40022000 	.word	0x40022000
 8004d00:	1ffff800 	.word	0x1ffff800

08004d04 <FLASH_OB_DisableWRP>:
{
 8004d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d06:	4604      	mov	r4, r0
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 8004d08:	f7ff fee0 	bl	8004acc <FLASH_OB_GetWRP>
 8004d0c:	4320      	orrs	r0, r4
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
 8004d0e:	b2c5      	uxtb	r5, r0
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
 8004d10:	f3c0 2707 	ubfx	r7, r0, #8, #8
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
 8004d14:	f3c0 4607 	ubfx	r6, r0, #16, #8
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24U); 
 8004d18:	0e04      	lsrs	r4, r0, #24
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d1a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004d1e:	f7ff fe3f 	bl	80049a0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8004d22:	4603      	mov	r3, r0
 8004d24:	b108      	cbz	r0, 8004d2a <FLASH_OB_DisableWRP+0x26>
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d2a:	4b25      	ldr	r3, [pc, #148]	@ (8004dc0 <FLASH_OB_DisableWRP+0xbc>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	61da      	str	r2, [r3, #28]
    status = HAL_FLASHEx_OBErase();
 8004d30:	f7ff ff5e 	bl	8004bf0 <HAL_FLASHEx_OBErase>
    if (status == HAL_OK)  
 8004d34:	4603      	mov	r3, r0
 8004d36:	2800      	cmp	r0, #0
 8004d38:	d1f5      	bne.n	8004d26 <FLASH_OB_DisableWRP+0x22>
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8004d3a:	4922      	ldr	r1, [pc, #136]	@ (8004dc4 <FLASH_OB_DisableWRP+0xc0>)
 8004d3c:	690a      	ldr	r2, [r1, #16]
 8004d3e:	f042 0210 	orr.w	r2, r2, #16
 8004d42:	610a      	str	r2, [r1, #16]
      if(WRP0_Data != 0xFFU)
 8004d44:	2dff      	cmp	r5, #255	@ 0xff
 8004d46:	d10e      	bne.n	8004d66 <FLASH_OB_DisableWRP+0x62>
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8004d48:	b923      	cbnz	r3, 8004d54 <FLASH_OB_DisableWRP+0x50>
 8004d4a:	2fff      	cmp	r7, #255	@ 0xff
 8004d4c:	d116      	bne.n	8004d7c <FLASH_OB_DisableWRP+0x78>
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8004d4e:	b923      	cbnz	r3, 8004d5a <FLASH_OB_DisableWRP+0x56>
 8004d50:	2eff      	cmp	r6, #255	@ 0xff
 8004d52:	d11e      	bne.n	8004d92 <FLASH_OB_DisableWRP+0x8e>
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8004d54:	b90b      	cbnz	r3, 8004d5a <FLASH_OB_DisableWRP+0x56>
 8004d56:	2cff      	cmp	r4, #255	@ 0xff
 8004d58:	d126      	bne.n	8004da8 <FLASH_OB_DisableWRP+0xa4>
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8004d5a:	491a      	ldr	r1, [pc, #104]	@ (8004dc4 <FLASH_OB_DisableWRP+0xc0>)
 8004d5c:	690a      	ldr	r2, [r1, #16]
 8004d5e:	f022 0210 	bic.w	r2, r2, #16
 8004d62:	610a      	str	r2, [r1, #16]
 8004d64:	e7df      	b.n	8004d26 <FLASH_OB_DisableWRP+0x22>
        OB->WRP0 |= WRP0_Data;
 8004d66:	4a18      	ldr	r2, [pc, #96]	@ (8004dc8 <FLASH_OB_DisableWRP+0xc4>)
 8004d68:	8913      	ldrh	r3, [r2, #8]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	432b      	orrs	r3, r5
 8004d6e:	8113      	strh	r3, [r2, #8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d70:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004d74:	f7ff fe14 	bl	80049a0 <FLASH_WaitForLastOperation>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	e7e5      	b.n	8004d48 <FLASH_OB_DisableWRP+0x44>
        OB->WRP1 |= WRP1_Data;
 8004d7c:	4a12      	ldr	r2, [pc, #72]	@ (8004dc8 <FLASH_OB_DisableWRP+0xc4>)
 8004d7e:	8953      	ldrh	r3, [r2, #10]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	433b      	orrs	r3, r7
 8004d84:	8153      	strh	r3, [r2, #10]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d86:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004d8a:	f7ff fe09 	bl	80049a0 <FLASH_WaitForLastOperation>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	e7dd      	b.n	8004d4e <FLASH_OB_DisableWRP+0x4a>
        OB->WRP2 |= WRP2_Data;
 8004d92:	4a0d      	ldr	r2, [pc, #52]	@ (8004dc8 <FLASH_OB_DisableWRP+0xc4>)
 8004d94:	8993      	ldrh	r3, [r2, #12]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	4333      	orrs	r3, r6
 8004d9a:	8193      	strh	r3, [r2, #12]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d9c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004da0:	f7ff fdfe 	bl	80049a0 <FLASH_WaitForLastOperation>
 8004da4:	4603      	mov	r3, r0
 8004da6:	e7d5      	b.n	8004d54 <FLASH_OB_DisableWRP+0x50>
        OB->WRP3 |= WRP3_Data;
 8004da8:	4a07      	ldr	r2, [pc, #28]	@ (8004dc8 <FLASH_OB_DisableWRP+0xc4>)
 8004daa:	89d3      	ldrh	r3, [r2, #14]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	4323      	orrs	r3, r4
 8004db0:	81d3      	strh	r3, [r2, #14]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004db2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004db6:	f7ff fdf3 	bl	80049a0 <FLASH_WaitForLastOperation>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	e7cd      	b.n	8004d5a <FLASH_OB_DisableWRP+0x56>
 8004dbe:	bf00      	nop
 8004dc0:	20000648 	.word	0x20000648
 8004dc4:	40022000 	.word	0x40022000
 8004dc8:	1ffff800 	.word	0x1ffff800

08004dcc <HAL_FLASHEx_OBProgram>:
  __HAL_LOCK(&pFlash);
 8004dcc:	4b25      	ldr	r3, [pc, #148]	@ (8004e64 <HAL_FLASHEx_OBProgram+0x98>)
 8004dce:	7e1b      	ldrb	r3, [r3, #24]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d044      	beq.n	8004e5e <HAL_FLASHEx_OBProgram+0x92>
{
 8004dd4:	b510      	push	{r4, lr}
 8004dd6:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8004dd8:	4b22      	ldr	r3, [pc, #136]	@ (8004e64 <HAL_FLASHEx_OBProgram+0x98>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	761a      	strb	r2, [r3, #24]
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8004dde:	6803      	ldr	r3, [r0, #0]
 8004de0:	f013 0f01 	tst.w	r3, #1
 8004de4:	d00e      	beq.n	8004e04 <HAL_FLASHEx_OBProgram+0x38>
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8004de6:	6843      	ldr	r3, [r0, #4]
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d007      	beq.n	8004dfc <HAL_FLASHEx_OBProgram+0x30>
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 8004dec:	6880      	ldr	r0, [r0, #8]
 8004dee:	f7ff ff89 	bl	8004d04 <FLASH_OB_DisableWRP>
    if (status != HAL_OK)
 8004df2:	b140      	cbz	r0, 8004e06 <HAL_FLASHEx_OBProgram+0x3a>
      __HAL_UNLOCK(&pFlash);
 8004df4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e64 <HAL_FLASHEx_OBProgram+0x98>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	761a      	strb	r2, [r3, #24]
      return status;
 8004dfa:	e013      	b.n	8004e24 <HAL_FLASHEx_OBProgram+0x58>
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 8004dfc:	6880      	ldr	r0, [r0, #8]
 8004dfe:	f7ff ff1f 	bl	8004c40 <FLASH_OB_EnableWRP>
 8004e02:	e7f6      	b.n	8004df2 <HAL_FLASHEx_OBProgram+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e04:	2001      	movs	r0, #1
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	f013 0f02 	tst.w	r3, #2
 8004e0c:	d10b      	bne.n	8004e26 <HAL_FLASHEx_OBProgram+0x5a>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	f013 0f04 	tst.w	r3, #4
 8004e14:	d110      	bne.n	8004e38 <HAL_FLASHEx_OBProgram+0x6c>
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	f013 0f08 	tst.w	r3, #8
 8004e1c:	d115      	bne.n	8004e4a <HAL_FLASHEx_OBProgram+0x7e>
  __HAL_UNLOCK(&pFlash);
 8004e1e:	4b11      	ldr	r3, [pc, #68]	@ (8004e64 <HAL_FLASHEx_OBProgram+0x98>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	761a      	strb	r2, [r3, #24]
}
 8004e24:	bd10      	pop	{r4, pc}
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8004e26:	7c20      	ldrb	r0, [r4, #16]
 8004e28:	f7ff fe6a 	bl	8004b00 <FLASH_OB_RDP_LevelConfig>
    if (status != HAL_OK)
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d0ee      	beq.n	8004e0e <HAL_FLASHEx_OBProgram+0x42>
      __HAL_UNLOCK(&pFlash);
 8004e30:	4b0c      	ldr	r3, [pc, #48]	@ (8004e64 <HAL_FLASHEx_OBProgram+0x98>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	761a      	strb	r2, [r3, #24]
      return status;
 8004e36:	e7f5      	b.n	8004e24 <HAL_FLASHEx_OBProgram+0x58>
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 8004e38:	7c60      	ldrb	r0, [r4, #17]
 8004e3a:	f7ff fe95 	bl	8004b68 <FLASH_OB_UserConfig>
    if (status != HAL_OK)
 8004e3e:	2800      	cmp	r0, #0
 8004e40:	d0e9      	beq.n	8004e16 <HAL_FLASHEx_OBProgram+0x4a>
      __HAL_UNLOCK(&pFlash);
 8004e42:	4b08      	ldr	r3, [pc, #32]	@ (8004e64 <HAL_FLASHEx_OBProgram+0x98>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	761a      	strb	r2, [r3, #24]
      return status;
 8004e48:	e7ec      	b.n	8004e24 <HAL_FLASHEx_OBProgram+0x58>
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 8004e4a:	7e21      	ldrb	r1, [r4, #24]
 8004e4c:	6960      	ldr	r0, [r4, #20]
 8004e4e:	f7ff feaf 	bl	8004bb0 <FLASH_OB_ProgramData>
    if (status != HAL_OK)
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d0e3      	beq.n	8004e1e <HAL_FLASHEx_OBProgram+0x52>
      __HAL_UNLOCK(&pFlash);
 8004e56:	4b03      	ldr	r3, [pc, #12]	@ (8004e64 <HAL_FLASHEx_OBProgram+0x98>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	761a      	strb	r2, [r3, #24]
      return status;
 8004e5c:	e7e2      	b.n	8004e24 <HAL_FLASHEx_OBProgram+0x58>
  __HAL_LOCK(&pFlash);
 8004e5e:	2002      	movs	r0, #2
}
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20000648 	.word	0x20000648

08004e68 <HAL_FLASHEx_OBGetConfig>:
{
 8004e68:	b510      	push	{r4, lr}
 8004e6a:	4604      	mov	r4, r0
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 8004e6c:	2307      	movs	r3, #7
 8004e6e:	6003      	str	r3, [r0, #0]
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 8004e70:	f7ff fe2c 	bl	8004acc <FLASH_OB_GetWRP>
 8004e74:	60a0      	str	r0, [r4, #8]
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8004e76:	f7ff fe2f 	bl	8004ad8 <FLASH_OB_GetRDP>
 8004e7a:	7420      	strb	r0, [r4, #16]
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8004e7c:	f7ff fe38 	bl	8004af0 <FLASH_OB_GetUser>
 8004e80:	7460      	strb	r0, [r4, #17]
}
 8004e82:	bd10      	pop	{r4, pc}

08004e84 <HAL_FLASHEx_OBGetUserData>:
  if (DATAAdress == OB_DATA_ADDRESS_DATA0)
 8004e84:	4b06      	ldr	r3, [pc, #24]	@ (8004ea0 <HAL_FLASHEx_OBGetUserData+0x1c>)
 8004e86:	4298      	cmp	r0, r3
 8004e88:	d004      	beq.n	8004e94 <HAL_FLASHEx_OBGetUserData+0x10>
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA1) >> FLASH_POSITION_OB_USERDATA1_BIT;
 8004e8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ea4 <HAL_FLASHEx_OBGetUserData+0x20>)
 8004e8c:	69d8      	ldr	r0, [r3, #28]
 8004e8e:	f3c0 4087 	ubfx	r0, r0, #18, #8
}
 8004e92:	4770      	bx	lr
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA0) >> FLASH_POSITION_OB_USERDATA0_BIT;
 8004e94:	4b03      	ldr	r3, [pc, #12]	@ (8004ea4 <HAL_FLASHEx_OBGetUserData+0x20>)
 8004e96:	69d8      	ldr	r0, [r3, #28]
 8004e98:	f3c0 2087 	ubfx	r0, r0, #10, #8
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	1ffff804 	.word	0x1ffff804
 8004ea4:	40022000 	.word	0x40022000

08004ea8 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004ea8:	4b06      	ldr	r3, [pc, #24]	@ (8004ec4 <FLASH_PageErase+0x1c>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004eae:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <FLASH_PageErase+0x20>)
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	f042 0202 	orr.w	r2, r2, #2
 8004eb6:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004eb8:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ec0:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004ec2:	4770      	bx	lr
 8004ec4:	20000648 	.word	0x20000648
 8004ec8:	40022000 	.word	0x40022000

08004ecc <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8004ecc:	4b26      	ldr	r3, [pc, #152]	@ (8004f68 <HAL_FLASHEx_Erase+0x9c>)
 8004ece:	7e1b      	ldrb	r3, [r3, #24]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d046      	beq.n	8004f62 <HAL_FLASHEx_Erase+0x96>
{
 8004ed4:	b570      	push	{r4, r5, r6, lr}
 8004ed6:	4605      	mov	r5, r0
 8004ed8:	460e      	mov	r6, r1
  __HAL_LOCK(&pFlash);
 8004eda:	4b23      	ldr	r3, [pc, #140]	@ (8004f68 <HAL_FLASHEx_Erase+0x9c>)
 8004edc:	2201      	movs	r2, #1
 8004ede:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004ee0:	6803      	ldr	r3, [r0, #0]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d020      	beq.n	8004f28 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004ee6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004eea:	f7ff fd59 	bl	80049a0 <FLASH_WaitForLastOperation>
 8004eee:	bb90      	cbnz	r0, 8004f56 <HAL_FLASHEx_Erase+0x8a>
        *PageError = 0xFFFFFFFFU;
 8004ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef4:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8004ef6:	68ac      	ldr	r4, [r5, #8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ef8:	2101      	movs	r1, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004efa:	68ea      	ldr	r2, [r5, #12]
 8004efc:	68ab      	ldr	r3, [r5, #8]
 8004efe:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 8004f02:	42a3      	cmp	r3, r4
 8004f04:	d928      	bls.n	8004f58 <HAL_FLASHEx_Erase+0x8c>
          FLASH_PageErase(address);
 8004f06:	4620      	mov	r0, r4
 8004f08:	f7ff ffce 	bl	8004ea8 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f0c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004f10:	f7ff fd46 	bl	80049a0 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004f14:	4a15      	ldr	r2, [pc, #84]	@ (8004f6c <HAL_FLASHEx_Erase+0xa0>)
 8004f16:	6913      	ldr	r3, [r2, #16]
 8004f18:	f023 0302 	bic.w	r3, r3, #2
 8004f1c:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8004f1e:	4601      	mov	r1, r0
 8004f20:	b9b8      	cbnz	r0, 8004f52 <HAL_FLASHEx_Erase+0x86>
            address += FLASH_PAGE_SIZE)
 8004f22:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8004f26:	e7e8      	b.n	8004efa <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004f28:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004f2c:	f7ff fd38 	bl	80049a0 <FLASH_WaitForLastOperation>
 8004f30:	b108      	cbz	r0, 8004f36 <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f32:	2101      	movs	r1, #1
 8004f34:	e010      	b.n	8004f58 <HAL_FLASHEx_Erase+0x8c>
        FLASH_MassErase(FLASH_BANK_1);
 8004f36:	2001      	movs	r0, #1
 8004f38:	f7ff fdb6 	bl	8004aa8 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f3c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004f40:	f7ff fd2e 	bl	80049a0 <FLASH_WaitForLastOperation>
 8004f44:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004f46:	4a09      	ldr	r2, [pc, #36]	@ (8004f6c <HAL_FLASHEx_Erase+0xa0>)
 8004f48:	6913      	ldr	r3, [r2, #16]
 8004f4a:	f023 0304 	bic.w	r3, r3, #4
 8004f4e:	6113      	str	r3, [r2, #16]
 8004f50:	e002      	b.n	8004f58 <HAL_FLASHEx_Erase+0x8c>
            *PageError = address;
 8004f52:	6034      	str	r4, [r6, #0]
            break;
 8004f54:	e000      	b.n	8004f58 <HAL_FLASHEx_Erase+0x8c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f56:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 8004f58:	4b03      	ldr	r3, [pc, #12]	@ (8004f68 <HAL_FLASHEx_Erase+0x9c>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	761a      	strb	r2, [r3, #24]
}
 8004f5e:	4608      	mov	r0, r1
 8004f60:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8004f62:	2102      	movs	r1, #2
}
 8004f64:	4608      	mov	r0, r1
 8004f66:	4770      	bx	lr
 8004f68:	20000648 	.word	0x20000648
 8004f6c:	40022000 	.word	0x40022000

08004f70 <HAL_FLASHEx_Erase_IT>:
{
 8004f70:	b510      	push	{r4, lr}
  if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8004f72:	4b10      	ldr	r3, [pc, #64]	@ (8004fb4 <HAL_FLASHEx_Erase_IT+0x44>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	b9db      	cbnz	r3, 8004fb0 <HAL_FLASHEx_Erase_IT+0x40>
 8004f78:	f003 04ff 	and.w	r4, r3, #255	@ 0xff
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8004f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8004fb8 <HAL_FLASHEx_Erase_IT+0x48>)
 8004f7e:	6913      	ldr	r3, [r2, #16]
 8004f80:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8004f84:	6113      	str	r3, [r2, #16]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004f86:	6803      	ldr	r3, [r0, #0]
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d00a      	beq.n	8004fa2 <HAL_FLASHEx_Erase_IT+0x32>
    pFlash.ProcedureOnGoing = FLASH_PROC_PAGEERASE;
 8004f8c:	4b09      	ldr	r3, [pc, #36]	@ (8004fb4 <HAL_FLASHEx_Erase_IT+0x44>)
 8004f8e:	2201      	movs	r2, #1
 8004f90:	701a      	strb	r2, [r3, #0]
    pFlash.DataRemaining = pEraseInit->NbPages;
 8004f92:	68c2      	ldr	r2, [r0, #12]
 8004f94:	605a      	str	r2, [r3, #4]
    pFlash.Address = pEraseInit->PageAddress;
 8004f96:	6880      	ldr	r0, [r0, #8]
 8004f98:	6098      	str	r0, [r3, #8]
    FLASH_PageErase(pEraseInit->PageAddress);
 8004f9a:	f7ff ff85 	bl	8004ea8 <FLASH_PageErase>
}
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	bd10      	pop	{r4, pc}
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 8004fa2:	4b04      	ldr	r3, [pc, #16]	@ (8004fb4 <HAL_FLASHEx_Erase_IT+0x44>)
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	701a      	strb	r2, [r3, #0]
        FLASH_MassErase(pEraseInit->Banks);
 8004fa8:	6840      	ldr	r0, [r0, #4]
 8004faa:	f7ff fd7d 	bl	8004aa8 <FLASH_MassErase>
 8004fae:	e7f6      	b.n	8004f9e <HAL_FLASHEx_Erase_IT+0x2e>
    return HAL_ERROR;
 8004fb0:	2401      	movs	r4, #1
 8004fb2:	e7f4      	b.n	8004f9e <HAL_FLASHEx_Erase_IT+0x2e>
 8004fb4:	20000648 	.word	0x20000648
 8004fb8:	40022000 	.word	0x40022000

08004fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004fc0:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8004fc2:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fc4:	e0ac      	b.n	8005120 <HAL_GPIO_Init+0x164>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004fc6:	4d85      	ldr	r5, [pc, #532]	@ (80051dc <HAL_GPIO_Init+0x220>)
 8004fc8:	42ab      	cmp	r3, r5
 8004fca:	d010      	beq.n	8004fee <HAL_GPIO_Init+0x32>
 8004fcc:	d907      	bls.n	8004fde <HAL_GPIO_Init+0x22>
 8004fce:	4d84      	ldr	r5, [pc, #528]	@ (80051e0 <HAL_GPIO_Init+0x224>)
 8004fd0:	42ab      	cmp	r3, r5
 8004fd2:	d00c      	beq.n	8004fee <HAL_GPIO_Init+0x32>
 8004fd4:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8004fd8:	42ab      	cmp	r3, r5
 8004fda:	d008      	beq.n	8004fee <HAL_GPIO_Init+0x32>
 8004fdc:	e013      	b.n	8005006 <HAL_GPIO_Init+0x4a>
 8004fde:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8004fe2:	42ab      	cmp	r3, r5
 8004fe4:	d003      	beq.n	8004fee <HAL_GPIO_Init+0x32>
 8004fe6:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 8004fea:	42ab      	cmp	r3, r5
 8004fec:	d107      	bne.n	8004ffe <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004fee:	688b      	ldr	r3, [r1, #8]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d05f      	beq.n	80050b4 <HAL_GPIO_Init+0xf8>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d058      	beq.n	80050aa <HAL_GPIO_Init+0xee>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8004ff8:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ffa:	2408      	movs	r4, #8
 8004ffc:	e003      	b.n	8005006 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8004ffe:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8005002:	42ab      	cmp	r3, r5
 8005004:	d0f3      	beq.n	8004fee <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005006:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800500a:	d855      	bhi.n	80050b8 <HAL_GPIO_Init+0xfc>
 800500c:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800500e:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005012:	6833      	ldr	r3, [r6, #0]
 8005014:	250f      	movs	r5, #15
 8005016:	4095      	lsls	r5, r2
 8005018:	ea23 0305 	bic.w	r3, r3, r5
 800501c:	fa04 f202 	lsl.w	r2, r4, r2
 8005020:	4313      	orrs	r3, r2
 8005022:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005024:	684b      	ldr	r3, [r1, #4]
 8005026:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800502a:	d077      	beq.n	800511c <HAL_GPIO_Init+0x160>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800502c:	4b6d      	ldr	r3, [pc, #436]	@ (80051e4 <HAL_GPIO_Init+0x228>)
 800502e:	699a      	ldr	r2, [r3, #24]
 8005030:	f042 0201 	orr.w	r2, r2, #1
 8005034:	619a      	str	r2, [r3, #24]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	9301      	str	r3, [sp, #4]
 800503e:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8005040:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8005044:	1c95      	adds	r5, r2, #2
 8005046:	4b68      	ldr	r3, [pc, #416]	@ (80051e8 <HAL_GPIO_Init+0x22c>)
 8005048:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800504c:	f00c 0503 	and.w	r5, ip, #3
 8005050:	00ad      	lsls	r5, r5, #2
 8005052:	230f      	movs	r3, #15
 8005054:	40ab      	lsls	r3, r5
 8005056:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800505a:	4b64      	ldr	r3, [pc, #400]	@ (80051ec <HAL_GPIO_Init+0x230>)
 800505c:	4298      	cmp	r0, r3
 800505e:	d032      	beq.n	80050c6 <HAL_GPIO_Init+0x10a>
 8005060:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005064:	4298      	cmp	r0, r3
 8005066:	f000 8097 	beq.w	8005198 <HAL_GPIO_Init+0x1dc>
 800506a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800506e:	4298      	cmp	r0, r3
 8005070:	f000 8094 	beq.w	800519c <HAL_GPIO_Init+0x1e0>
 8005074:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005078:	4298      	cmp	r0, r3
 800507a:	f000 8091 	beq.w	80051a0 <HAL_GPIO_Init+0x1e4>
 800507e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005082:	4298      	cmp	r0, r3
 8005084:	f000 808e 	beq.w	80051a4 <HAL_GPIO_Init+0x1e8>
 8005088:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800508c:	4298      	cmp	r0, r3
 800508e:	d018      	beq.n	80050c2 <HAL_GPIO_Init+0x106>
 8005090:	2306      	movs	r3, #6
 8005092:	e019      	b.n	80050c8 <HAL_GPIO_Init+0x10c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005094:	68cc      	ldr	r4, [r1, #12]
          break;
 8005096:	e7b6      	b.n	8005006 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005098:	68cc      	ldr	r4, [r1, #12]
 800509a:	3404      	adds	r4, #4
          break;
 800509c:	e7b3      	b.n	8005006 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800509e:	68cc      	ldr	r4, [r1, #12]
 80050a0:	3408      	adds	r4, #8
          break;
 80050a2:	e7b0      	b.n	8005006 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80050a4:	68cc      	ldr	r4, [r1, #12]
 80050a6:	340c      	adds	r4, #12
          break;
 80050a8:	e7ad      	b.n	8005006 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 80050aa:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80050ac:	2408      	movs	r4, #8
 80050ae:	e7aa      	b.n	8005006 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80050b0:	2400      	movs	r4, #0
 80050b2:	e7a8      	b.n	8005006 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80050b4:	2404      	movs	r4, #4
 80050b6:	e7a6      	b.n	8005006 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80050b8:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80050ba:	f1ac 0208 	sub.w	r2, ip, #8
 80050be:	0092      	lsls	r2, r2, #2
 80050c0:	e7a7      	b.n	8005012 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80050c2:	2305      	movs	r3, #5
 80050c4:	e000      	b.n	80050c8 <HAL_GPIO_Init+0x10c>
 80050c6:	2300      	movs	r3, #0
 80050c8:	40ab      	lsls	r3, r5
 80050ca:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 80050cc:	3202      	adds	r2, #2
 80050ce:	4d46      	ldr	r5, [pc, #280]	@ (80051e8 <HAL_GPIO_Init+0x22c>)
 80050d0:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050d4:	684b      	ldr	r3, [r1, #4]
 80050d6:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80050da:	d065      	beq.n	80051a8 <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80050dc:	4a44      	ldr	r2, [pc, #272]	@ (80051f0 <HAL_GPIO_Init+0x234>)
 80050de:	6893      	ldr	r3, [r2, #8]
 80050e0:	ea43 030e 	orr.w	r3, r3, lr
 80050e4:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050e6:	684b      	ldr	r3, [r1, #4]
 80050e8:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80050ec:	d062      	beq.n	80051b4 <HAL_GPIO_Init+0x1f8>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80050ee:	4a40      	ldr	r2, [pc, #256]	@ (80051f0 <HAL_GPIO_Init+0x234>)
 80050f0:	68d3      	ldr	r3, [r2, #12]
 80050f2:	ea43 030e 	orr.w	r3, r3, lr
 80050f6:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050f8:	684b      	ldr	r3, [r1, #4]
 80050fa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80050fe:	d05f      	beq.n	80051c0 <HAL_GPIO_Init+0x204>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005100:	4a3b      	ldr	r2, [pc, #236]	@ (80051f0 <HAL_GPIO_Init+0x234>)
 8005102:	6853      	ldr	r3, [r2, #4]
 8005104:	ea43 030e 	orr.w	r3, r3, lr
 8005108:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800510a:	684b      	ldr	r3, [r1, #4]
 800510c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8005110:	d05c      	beq.n	80051cc <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005112:	4a37      	ldr	r2, [pc, #220]	@ (80051f0 <HAL_GPIO_Init+0x234>)
 8005114:	6813      	ldr	r3, [r2, #0]
 8005116:	ea43 030e 	orr.w	r3, r3, lr
 800511a:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 800511c:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005120:	680b      	ldr	r3, [r1, #0]
 8005122:	fa33 f20c 	lsrs.w	r2, r3, ip
 8005126:	d057      	beq.n	80051d8 <HAL_GPIO_Init+0x21c>
    ioposition = (0x01uL << position);
 8005128:	2201      	movs	r2, #1
 800512a:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800512e:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8005132:	ea32 0303 	bics.w	r3, r2, r3
 8005136:	d1f1      	bne.n	800511c <HAL_GPIO_Init+0x160>
      switch (GPIO_Init->Mode)
 8005138:	684b      	ldr	r3, [r1, #4]
 800513a:	2b12      	cmp	r3, #18
 800513c:	f63f af43 	bhi.w	8004fc6 <HAL_GPIO_Init+0xa>
 8005140:	2b12      	cmp	r3, #18
 8005142:	f63f af60 	bhi.w	8005006 <HAL_GPIO_Init+0x4a>
 8005146:	a501      	add	r5, pc, #4	@ (adr r5, 800514c <HAL_GPIO_Init+0x190>)
 8005148:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 800514c:	08004fef 	.word	0x08004fef
 8005150:	08005095 	.word	0x08005095
 8005154:	0800509f 	.word	0x0800509f
 8005158:	080050b1 	.word	0x080050b1
 800515c:	08005007 	.word	0x08005007
 8005160:	08005007 	.word	0x08005007
 8005164:	08005007 	.word	0x08005007
 8005168:	08005007 	.word	0x08005007
 800516c:	08005007 	.word	0x08005007
 8005170:	08005007 	.word	0x08005007
 8005174:	08005007 	.word	0x08005007
 8005178:	08005007 	.word	0x08005007
 800517c:	08005007 	.word	0x08005007
 8005180:	08005007 	.word	0x08005007
 8005184:	08005007 	.word	0x08005007
 8005188:	08005007 	.word	0x08005007
 800518c:	08005007 	.word	0x08005007
 8005190:	08005099 	.word	0x08005099
 8005194:	080050a5 	.word	0x080050a5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005198:	2301      	movs	r3, #1
 800519a:	e795      	b.n	80050c8 <HAL_GPIO_Init+0x10c>
 800519c:	2302      	movs	r3, #2
 800519e:	e793      	b.n	80050c8 <HAL_GPIO_Init+0x10c>
 80051a0:	2303      	movs	r3, #3
 80051a2:	e791      	b.n	80050c8 <HAL_GPIO_Init+0x10c>
 80051a4:	2304      	movs	r3, #4
 80051a6:	e78f      	b.n	80050c8 <HAL_GPIO_Init+0x10c>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80051a8:	4a11      	ldr	r2, [pc, #68]	@ (80051f0 <HAL_GPIO_Init+0x234>)
 80051aa:	6893      	ldr	r3, [r2, #8]
 80051ac:	ea23 030e 	bic.w	r3, r3, lr
 80051b0:	6093      	str	r3, [r2, #8]
 80051b2:	e798      	b.n	80050e6 <HAL_GPIO_Init+0x12a>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80051b4:	4a0e      	ldr	r2, [pc, #56]	@ (80051f0 <HAL_GPIO_Init+0x234>)
 80051b6:	68d3      	ldr	r3, [r2, #12]
 80051b8:	ea23 030e 	bic.w	r3, r3, lr
 80051bc:	60d3      	str	r3, [r2, #12]
 80051be:	e79b      	b.n	80050f8 <HAL_GPIO_Init+0x13c>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80051c0:	4a0b      	ldr	r2, [pc, #44]	@ (80051f0 <HAL_GPIO_Init+0x234>)
 80051c2:	6853      	ldr	r3, [r2, #4]
 80051c4:	ea23 030e 	bic.w	r3, r3, lr
 80051c8:	6053      	str	r3, [r2, #4]
 80051ca:	e79e      	b.n	800510a <HAL_GPIO_Init+0x14e>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80051cc:	4a08      	ldr	r2, [pc, #32]	@ (80051f0 <HAL_GPIO_Init+0x234>)
 80051ce:	6813      	ldr	r3, [r2, #0]
 80051d0:	ea23 030e 	bic.w	r3, r3, lr
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	e7a1      	b.n	800511c <HAL_GPIO_Init+0x160>
  }
}
 80051d8:	b002      	add	sp, #8
 80051da:	bd70      	pop	{r4, r5, r6, pc}
 80051dc:	10220000 	.word	0x10220000
 80051e0:	10310000 	.word	0x10310000
 80051e4:	40021000 	.word	0x40021000
 80051e8:	40010000 	.word	0x40010000
 80051ec:	40010800 	.word	0x40010800
 80051f0:	40010400 	.word	0x40010400

080051f4 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80051f4:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80051f6:	e07e      	b.n	80052f6 <HAL_GPIO_DeInit+0x102>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
      tmp &= 0x0FuL << (4u * (position & 0x03u));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80051f8:	f04f 0e05 	mov.w	lr, #5
 80051fc:	e001      	b.n	8005202 <HAL_GPIO_DeInit+0xe>
 80051fe:	f04f 0e00 	mov.w	lr, #0
 8005202:	fa0e f404 	lsl.w	r4, lr, r4
 8005206:	4564      	cmp	r4, ip
 8005208:	d052      	beq.n	80052b0 <HAL_GPIO_DeInit+0xbc>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800520a:	2bff      	cmp	r3, #255	@ 0xff
 800520c:	d86b      	bhi.n	80052e6 <HAL_GPIO_DeInit+0xf2>
 800520e:	4605      	mov	r5, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005210:	ea4f 0e82 	mov.w	lr, r2, lsl #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005214:	682c      	ldr	r4, [r5, #0]
 8005216:	f04f 0c0f 	mov.w	ip, #15
 800521a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800521e:	ea24 040c 	bic.w	r4, r4, ip
 8005222:	f04f 0c04 	mov.w	ip, #4
 8005226:	fa0c fc0e 	lsl.w	ip, ip, lr
 800522a:	ea44 040c 	orr.w	r4, r4, ip
 800522e:	602c      	str	r4, [r5, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005230:	68c4      	ldr	r4, [r0, #12]
 8005232:	ea24 0303 	bic.w	r3, r4, r3
 8005236:	60c3      	str	r3, [r0, #12]
    }

    position++;
 8005238:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 800523a:	fa31 f302 	lsrs.w	r3, r1, r2
 800523e:	d058      	beq.n	80052f2 <HAL_GPIO_DeInit+0xfe>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005240:	2301      	movs	r3, #1
 8005242:	4093      	lsls	r3, r2
    if (iocurrent)
 8005244:	400b      	ands	r3, r1
 8005246:	d0f7      	beq.n	8005238 <HAL_GPIO_DeInit+0x44>
      tmp = AFIO->EXTICR[position >> 2u];
 8005248:	0897      	lsrs	r7, r2, #2
 800524a:	1cbd      	adds	r5, r7, #2
 800524c:	4c2f      	ldr	r4, [pc, #188]	@ (800530c <HAL_GPIO_DeInit+0x118>)
 800524e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005252:	f002 0403 	and.w	r4, r2, #3
 8005256:	00a4      	lsls	r4, r4, #2
 8005258:	f04f 0c0f 	mov.w	ip, #15
 800525c:	fa0c f604 	lsl.w	r6, ip, r4
 8005260:	ea06 0c05 	and.w	ip, r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005264:	4d2a      	ldr	r5, [pc, #168]	@ (8005310 <HAL_GPIO_DeInit+0x11c>)
 8005266:	42a8      	cmp	r0, r5
 8005268:	d0c9      	beq.n	80051fe <HAL_GPIO_DeInit+0xa>
 800526a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800526e:	42a8      	cmp	r0, r5
 8005270:	d012      	beq.n	8005298 <HAL_GPIO_DeInit+0xa4>
 8005272:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005276:	42a8      	cmp	r0, r5
 8005278:	d011      	beq.n	800529e <HAL_GPIO_DeInit+0xaa>
 800527a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800527e:	42a8      	cmp	r0, r5
 8005280:	d010      	beq.n	80052a4 <HAL_GPIO_DeInit+0xb0>
 8005282:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005286:	42a8      	cmp	r0, r5
 8005288:	d00f      	beq.n	80052aa <HAL_GPIO_DeInit+0xb6>
 800528a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800528e:	42a8      	cmp	r0, r5
 8005290:	d0b2      	beq.n	80051f8 <HAL_GPIO_DeInit+0x4>
 8005292:	f04f 0e06 	mov.w	lr, #6
 8005296:	e7b4      	b.n	8005202 <HAL_GPIO_DeInit+0xe>
 8005298:	f04f 0e01 	mov.w	lr, #1
 800529c:	e7b1      	b.n	8005202 <HAL_GPIO_DeInit+0xe>
 800529e:	f04f 0e02 	mov.w	lr, #2
 80052a2:	e7ae      	b.n	8005202 <HAL_GPIO_DeInit+0xe>
 80052a4:	f04f 0e03 	mov.w	lr, #3
 80052a8:	e7ab      	b.n	8005202 <HAL_GPIO_DeInit+0xe>
 80052aa:	f04f 0e04 	mov.w	lr, #4
 80052ae:	e7a8      	b.n	8005202 <HAL_GPIO_DeInit+0xe>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80052b0:	4c18      	ldr	r4, [pc, #96]	@ (8005314 <HAL_GPIO_DeInit+0x120>)
 80052b2:	6825      	ldr	r5, [r4, #0]
 80052b4:	ea25 0503 	bic.w	r5, r5, r3
 80052b8:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80052ba:	6865      	ldr	r5, [r4, #4]
 80052bc:	ea25 0503 	bic.w	r5, r5, r3
 80052c0:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80052c2:	68e5      	ldr	r5, [r4, #12]
 80052c4:	ea25 0503 	bic.w	r5, r5, r3
 80052c8:	60e5      	str	r5, [r4, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80052ca:	68a5      	ldr	r5, [r4, #8]
 80052cc:	ea25 0503 	bic.w	r5, r5, r3
 80052d0:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80052d2:	f8df c038 	ldr.w	ip, [pc, #56]	@ 800530c <HAL_GPIO_DeInit+0x118>
 80052d6:	1cbc      	adds	r4, r7, #2
 80052d8:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 80052dc:	ea25 0506 	bic.w	r5, r5, r6
 80052e0:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
 80052e4:	e791      	b.n	800520a <HAL_GPIO_DeInit+0x16>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80052e6:	1d05      	adds	r5, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80052e8:	f1a2 0e08 	sub.w	lr, r2, #8
 80052ec:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80052f0:	e790      	b.n	8005214 <HAL_GPIO_DeInit+0x20>
  }
}
 80052f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    position++;
 80052f4:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 80052f6:	fa31 f302 	lsrs.w	r3, r1, r2
 80052fa:	d005      	beq.n	8005308 <HAL_GPIO_DeInit+0x114>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80052fc:	2301      	movs	r3, #1
 80052fe:	4093      	lsls	r3, r2
    if (iocurrent)
 8005300:	400b      	ands	r3, r1
 8005302:	d0f7      	beq.n	80052f4 <HAL_GPIO_DeInit+0x100>
{
 8005304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005306:	e79f      	b.n	8005248 <HAL_GPIO_DeInit+0x54>
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40010000 	.word	0x40010000
 8005310:	40010800 	.word	0x40010800
 8005314:	40010400 	.word	0x40010400

08005318 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005318:	6883      	ldr	r3, [r0, #8]
 800531a:	4219      	tst	r1, r3
 800531c:	d001      	beq.n	8005322 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800531e:	2001      	movs	r0, #1
 8005320:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005322:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8005324:	4770      	bx	lr

08005326 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005326:	b10a      	cbz	r2, 800532c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005328:	6101      	str	r1, [r0, #16]
 800532a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800532c:	0409      	lsls	r1, r1, #16
 800532e:	6101      	str	r1, [r0, #16]
  }
}
 8005330:	4770      	bx	lr

08005332 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005332:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005334:	ea01 0203 	and.w	r2, r1, r3
 8005338:	ea21 0103 	bic.w	r1, r1, r3
 800533c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005340:	6101      	str	r1, [r0, #16]
}
 8005342:	4770      	bx	lr

08005344 <HAL_GPIO_LockPin>:
* @param  GPIO_Pin: specifies the port bit to be locked.
*         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
* @retval None
*/
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005344:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8005346:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800534a:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  SET_BIT(tmp, GPIO_Pin);
 800534c:	9b01      	ldr	r3, [sp, #4]
 800534e:	430b      	orrs	r3, r1
 8005350:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8005352:	9b01      	ldr	r3, [sp, #4]
 8005354:	6183      	str	r3, [r0, #24]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8005356:	6181      	str	r1, [r0, #24]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8005358:	9b01      	ldr	r3, [sp, #4]
 800535a:	6183      	str	r3, [r0, #24]
  /* Read LCKK register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 800535c:	6983      	ldr	r3, [r0, #24]
 800535e:	9301      	str	r3, [sp, #4]

  /* read again in order to confirm lock is active */
  if ((uint32_t)(GPIOx->LCKR & GPIO_LCKR_LCKK))
 8005360:	6983      	ldr	r3, [r0, #24]
 8005362:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8005366:	d002      	beq.n	800536e <HAL_GPIO_LockPin+0x2a>
  {
    return HAL_OK;
 8005368:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_ERROR;
  }
}
 800536a:	b002      	add	sp, #8
 800536c:	4770      	bx	lr
    return HAL_ERROR;
 800536e:	2001      	movs	r0, #1
 8005370:	e7fb      	b.n	800536a <HAL_GPIO_LockPin+0x26>

08005372 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005372:	4770      	bx	lr

08005374 <HAL_GPIO_EXTI_IRQHandler>:
{
 8005374:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005376:	4b05      	ldr	r3, [pc, #20]	@ (800538c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	4203      	tst	r3, r0
 800537c:	d100      	bne.n	8005380 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 800537e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005380:	4b02      	ldr	r3, [pc, #8]	@ (800538c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005382:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005384:	f7ff fff5 	bl	8005372 <HAL_GPIO_EXTI_Callback>
}
 8005388:	e7f9      	b.n	800537e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800538a:	bf00      	nop
 800538c:	40010400 	.word	0x40010400

08005390 <HAL_GPIOEx_ConfigEventout>:
  /* Verify the parameters */
  assert_param(IS_AFIO_EVENTOUT_PORT(GPIO_PortSource));
  assert_param(IS_AFIO_EVENTOUT_PIN(GPIO_PinSource));

  /* Apply the new configuration */
  MODIFY_REG(AFIO->EVCR, (AFIO_EVCR_PORT) | (AFIO_EVCR_PIN), (GPIO_PortSource) | (GPIO_PinSource));
 8005390:	4a03      	ldr	r2, [pc, #12]	@ (80053a0 <HAL_GPIOEx_ConfigEventout+0x10>)
 8005392:	6813      	ldr	r3, [r2, #0]
 8005394:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005398:	4308      	orrs	r0, r1
 800539a:	4303      	orrs	r3, r0
 800539c:	6013      	str	r3, [r2, #0]
}
 800539e:	4770      	bx	lr
 80053a0:	40010000 	.word	0x40010000

080053a4 <HAL_GPIOEx_EnableEventout>:
  * @brief  Enables the Event Output.
  * @retval None
  */
void HAL_GPIOEx_EnableEventout(void)
{
  SET_BIT(AFIO->EVCR, AFIO_EVCR_EVOE);
 80053a4:	4a02      	ldr	r2, [pc, #8]	@ (80053b0 <HAL_GPIOEx_EnableEventout+0xc>)
 80053a6:	6813      	ldr	r3, [r2, #0]
 80053a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ac:	6013      	str	r3, [r2, #0]
}
 80053ae:	4770      	bx	lr
 80053b0:	40010000 	.word	0x40010000

080053b4 <HAL_GPIOEx_DisableEventout>:
  * @brief  Disables the Event Output.
  * @retval None
  */
void HAL_GPIOEx_DisableEventout(void)
{
  CLEAR_BIT(AFIO->EVCR, AFIO_EVCR_EVOE);
 80053b4:	4a02      	ldr	r2, [pc, #8]	@ (80053c0 <HAL_GPIOEx_DisableEventout+0xc>)
 80053b6:	6813      	ldr	r3, [r2, #0]
 80053b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053bc:	6013      	str	r3, [r2, #0]
}
 80053be:	4770      	bx	lr
 80053c0:	40010000 	.word	0x40010000

080053c4 <PWR_OverloadWfe>:

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
  __asm volatile( "wfe" );
 80053c4:	bf20      	wfe
  __asm volatile( "nop" );
 80053c6:	bf00      	nop
}
 80053c8:	4770      	bx	lr
	...

080053cc <HAL_PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.  
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
  __HAL_RCC_PWR_FORCE_RESET();
 80053cc:	4b04      	ldr	r3, [pc, #16]	@ (80053e0 <HAL_PWR_DeInit+0x14>)
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80053d4:	611a      	str	r2, [r3, #16]
  __HAL_RCC_PWR_RELEASE_RESET();
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80053dc:	611a      	str	r2, [r3, #16]
}
 80053de:	4770      	bx	lr
 80053e0:	40021000 	.word	0x40021000

080053e4 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80053e4:	4b01      	ldr	r3, [pc, #4]	@ (80053ec <HAL_PWR_EnableBkUpAccess+0x8>)
 80053e6:	2201      	movs	r2, #1
 80053e8:	621a      	str	r2, [r3, #32]
}
 80053ea:	4770      	bx	lr
 80053ec:	420e0000 	.word	0x420e0000

080053f0 <HAL_PWR_DisableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
  /* Disable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80053f0:	4b01      	ldr	r3, [pc, #4]	@ (80053f8 <HAL_PWR_DisableBkUpAccess+0x8>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	621a      	str	r2, [r3, #32]
}
 80053f6:	4770      	bx	lr
 80053f8:	420e0000 	.word	0x420e0000

080053fc <HAL_PWR_ConfigPVD>:
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 80053fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005478 <HAL_PWR_ConfigPVD+0x7c>)
 80053fe:	6813      	ldr	r3, [r2, #0]
 8005400:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8005404:	6801      	ldr	r1, [r0, #0]
 8005406:	430b      	orrs	r3, r1
 8005408:	6013      	str	r3, [r2, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800540a:	4b1c      	ldr	r3, [pc, #112]	@ (800547c <HAL_PWR_ConfigPVD+0x80>)
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005412:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800541a:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005422:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800542a:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800542c:	6843      	ldr	r3, [r0, #4]
 800542e:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8005432:	d004      	beq.n	800543e <HAL_PWR_ConfigPVD+0x42>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8005434:	4a11      	ldr	r2, [pc, #68]	@ (800547c <HAL_PWR_ConfigPVD+0x80>)
 8005436:	6813      	ldr	r3, [r2, #0]
 8005438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800543c:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800543e:	6843      	ldr	r3, [r0, #4]
 8005440:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005444:	d004      	beq.n	8005450 <HAL_PWR_ConfigPVD+0x54>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8005446:	4a0d      	ldr	r2, [pc, #52]	@ (800547c <HAL_PWR_ConfigPVD+0x80>)
 8005448:	6853      	ldr	r3, [r2, #4]
 800544a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800544e:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8005450:	6843      	ldr	r3, [r0, #4]
 8005452:	f013 0f01 	tst.w	r3, #1
 8005456:	d004      	beq.n	8005462 <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8005458:	4a08      	ldr	r2, [pc, #32]	@ (800547c <HAL_PWR_ConfigPVD+0x80>)
 800545a:	6893      	ldr	r3, [r2, #8]
 800545c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005460:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8005462:	6843      	ldr	r3, [r0, #4]
 8005464:	f013 0f02 	tst.w	r3, #2
 8005468:	d004      	beq.n	8005474 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800546a:	4a04      	ldr	r2, [pc, #16]	@ (800547c <HAL_PWR_ConfigPVD+0x80>)
 800546c:	68d3      	ldr	r3, [r2, #12]
 800546e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005472:	60d3      	str	r3, [r2, #12]
  }
}
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	40007000 	.word	0x40007000
 800547c:	40010400 	.word	0x40010400

08005480 <HAL_PWR_EnablePVD>:
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
  /* Enable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 8005480:	4b01      	ldr	r3, [pc, #4]	@ (8005488 <HAL_PWR_EnablePVD+0x8>)
 8005482:	2201      	movs	r2, #1
 8005484:	611a      	str	r2, [r3, #16]
}
 8005486:	4770      	bx	lr
 8005488:	420e0000 	.word	0x420e0000

0800548c <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 800548c:	4b01      	ldr	r3, [pc, #4]	@ (8005494 <HAL_PWR_DisablePVD+0x8>)
 800548e:	2200      	movs	r2, #0
 8005490:	611a      	str	r2, [r3, #16]
}
 8005492:	4770      	bx	lr
 8005494:	420e0000 	.word	0x420e0000

08005498 <HAL_PWR_EnableWakeUpPin>:
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005498:	fa90 f0a0 	rbit	r0, r0
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 800549c:	fab0 f080 	clz	r0, r0
 80054a0:	4b02      	ldr	r3, [pc, #8]	@ (80054ac <HAL_PWR_EnableWakeUpPin+0x14>)
 80054a2:	4403      	add	r3, r0
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	2201      	movs	r2, #1
 80054a8:	601a      	str	r2, [r3, #0]
}
 80054aa:	4770      	bx	lr
 80054ac:	10838020 	.word	0x10838020

080054b0 <HAL_PWR_DisableWakeUpPin>:
 80054b0:	fa90 f0a0 	rbit	r0, r0
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
 80054b4:	fab0 f080 	clz	r0, r0
 80054b8:	4b02      	ldr	r3, [pc, #8]	@ (80054c4 <HAL_PWR_DisableWakeUpPin+0x14>)
 80054ba:	4403      	add	r3, r0
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]
}
 80054c2:	4770      	bx	lr
 80054c4:	10838020 	.word	0x10838020

080054c8 <HAL_PWR_EnterSLEEPMode>:
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80054c8:	4a06      	ldr	r2, [pc, #24]	@ (80054e4 <HAL_PWR_EnterSLEEPMode+0x1c>)
 80054ca:	6913      	ldr	r3, [r2, #16]
 80054cc:	f023 0304 	bic.w	r3, r3, #4
 80054d0:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80054d2:	2901      	cmp	r1, #1
 80054d4:	d003      	beq.n	80054de <HAL_PWR_EnterSLEEPMode+0x16>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80054d6:	bf40      	sev
    __WFE();
 80054d8:	bf20      	wfe
    __WFE();
 80054da:	bf20      	wfe
  }
}
 80054dc:	4770      	bx	lr
    __WFI();
 80054de:	bf30      	wfi
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	e000ed00 	.word	0xe000ed00

080054e8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80054e8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 80054ea:	4a0f      	ldr	r2, [pc, #60]	@ (8005528 <HAL_PWR_EnterSTOPMode+0x40>)
 80054ec:	6813      	ldr	r3, [r2, #0]
 80054ee:	f023 0302 	bic.w	r3, r3, #2
 80054f2:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 80054f4:	6813      	ldr	r3, [r2, #0]
 80054f6:	f023 0301 	bic.w	r3, r3, #1
 80054fa:	4303      	orrs	r3, r0
 80054fc:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80054fe:	4a0b      	ldr	r2, [pc, #44]	@ (800552c <HAL_PWR_EnterSTOPMode+0x44>)
 8005500:	6913      	ldr	r3, [r2, #16]
 8005502:	f043 0304 	orr.w	r3, r3, #4
 8005506:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8005508:	2901      	cmp	r1, #1
 800550a:	d106      	bne.n	800551a <HAL_PWR_EnterSTOPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800550c:	bf30      	wfi
    __SEV();
    PWR_OverloadWfe(); /* WFE redefine locally */
    PWR_OverloadWfe(); /* WFE redefine locally */
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800550e:	4a07      	ldr	r2, [pc, #28]	@ (800552c <HAL_PWR_EnterSTOPMode+0x44>)
 8005510:	6913      	ldr	r3, [r2, #16]
 8005512:	f023 0304 	bic.w	r3, r3, #4
 8005516:	6113      	str	r3, [r2, #16]
}
 8005518:	bd08      	pop	{r3, pc}
    __SEV();
 800551a:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 800551c:	f7ff ff52 	bl	80053c4 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 8005520:	f7ff ff50 	bl	80053c4 <PWR_OverloadWfe>
 8005524:	e7f3      	b.n	800550e <HAL_PWR_EnterSTOPMode+0x26>
 8005526:	bf00      	nop
 8005528:	40007000 	.word	0x40007000
 800552c:	e000ed00 	.word	0xe000ed00

08005530 <HAL_PWR_EnterSTANDBYMode>:
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8005530:	4a05      	ldr	r2, [pc, #20]	@ (8005548 <HAL_PWR_EnterSTANDBYMode+0x18>)
 8005532:	6813      	ldr	r3, [r2, #0]
 8005534:	f043 0302 	orr.w	r3, r3, #2
 8005538:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800553a:	4a04      	ldr	r2, [pc, #16]	@ (800554c <HAL_PWR_EnterSTANDBYMode+0x1c>)
 800553c:	6913      	ldr	r3, [r2, #16]
 800553e:	f043 0304 	orr.w	r3, r3, #4
 8005542:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8005544:	bf30      	wfi
}
 8005546:	4770      	bx	lr
 8005548:	40007000 	.word	0x40007000
 800554c:	e000ed00 	.word	0xe000ed00

08005550 <HAL_PWR_EnableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8005550:	4a02      	ldr	r2, [pc, #8]	@ (800555c <HAL_PWR_EnableSleepOnExit+0xc>)
 8005552:	6913      	ldr	r3, [r2, #16]
 8005554:	f043 0302 	orr.w	r3, r3, #2
 8005558:	6113      	str	r3, [r2, #16]
}
 800555a:	4770      	bx	lr
 800555c:	e000ed00 	.word	0xe000ed00

08005560 <HAL_PWR_DisableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8005560:	4a02      	ldr	r2, [pc, #8]	@ (800556c <HAL_PWR_DisableSleepOnExit+0xc>)
 8005562:	6913      	ldr	r3, [r2, #16]
 8005564:	f023 0302 	bic.w	r3, r3, #2
 8005568:	6113      	str	r3, [r2, #16]
}
 800556a:	4770      	bx	lr
 800556c:	e000ed00 	.word	0xe000ed00

08005570 <HAL_PWR_EnableSEVOnPend>:
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8005570:	4a02      	ldr	r2, [pc, #8]	@ (800557c <HAL_PWR_EnableSEVOnPend+0xc>)
 8005572:	6913      	ldr	r3, [r2, #16]
 8005574:	f043 0310 	orr.w	r3, r3, #16
 8005578:	6113      	str	r3, [r2, #16]
}
 800557a:	4770      	bx	lr
 800557c:	e000ed00 	.word	0xe000ed00

08005580 <HAL_PWR_DisableSEVOnPend>:
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8005580:	4a02      	ldr	r2, [pc, #8]	@ (800558c <HAL_PWR_DisableSEVOnPend+0xc>)
 8005582:	6913      	ldr	r3, [r2, #16]
 8005584:	f023 0310 	bic.w	r3, r3, #16
 8005588:	6113      	str	r3, [r2, #16]
}
 800558a:	4770      	bx	lr
 800558c:	e000ed00 	.word	0xe000ed00

08005590 <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8005590:	4770      	bx	lr
	...

08005594 <HAL_PWR_PVD_IRQHandler>:
{
 8005594:	b508      	push	{r3, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8005596:	4b06      	ldr	r3, [pc, #24]	@ (80055b0 <HAL_PWR_PVD_IRQHandler+0x1c>)
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800559e:	d100      	bne.n	80055a2 <HAL_PWR_PVD_IRQHandler+0xe>
}
 80055a0:	bd08      	pop	{r3, pc}
    HAL_PWR_PVDCallback();
 80055a2:	f7ff fff5 	bl	8005590 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80055a6:	4b02      	ldr	r3, [pc, #8]	@ (80055b0 <HAL_PWR_PVD_IRQHandler+0x1c>)
 80055a8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80055ac:	615a      	str	r2, [r3, #20]
}
 80055ae:	e7f7      	b.n	80055a0 <HAL_PWR_PVD_IRQHandler+0xc>
 80055b0:	40010400 	.word	0x40010400

080055b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80055b4:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80055b6:	4b08      	ldr	r3, [pc, #32]	@ (80055d8 <RCC_Delay+0x24>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a08      	ldr	r2, [pc, #32]	@ (80055dc <RCC_Delay+0x28>)
 80055bc:	fba2 2303 	umull	r2, r3, r2, r3
 80055c0:	0a5b      	lsrs	r3, r3, #9
 80055c2:	fb00 f303 	mul.w	r3, r0, r3
 80055c6:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80055c8:	bf00      	nop
  }
  while (Delay --);
 80055ca:	9b01      	ldr	r3, [sp, #4]
 80055cc:	1e5a      	subs	r2, r3, #1
 80055ce:	9201      	str	r2, [sp, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1f9      	bne.n	80055c8 <RCC_Delay+0x14>
}
 80055d4:	b002      	add	sp, #8
 80055d6:	4770      	bx	lr
 80055d8:	20000008 	.word	0x20000008
 80055dc:	10624dd3 	.word	0x10624dd3

080055e0 <HAL_RCC_DeInit>:
{
 80055e0:	b570      	push	{r4, r5, r6, lr}
  tickstart = HAL_GetTick();
 80055e2:	f7fd fef5 	bl	80033d0 <HAL_GetTick>
 80055e6:	4604      	mov	r4, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80055e8:	4a36      	ldr	r2, [pc, #216]	@ (80056c4 <HAL_RCC_DeInit+0xe4>)
 80055ea:	6813      	ldr	r3, [r2, #0]
 80055ec:	f043 0301 	orr.w	r3, r3, #1
 80055f0:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80055f2:	4b34      	ldr	r3, [pc, #208]	@ (80056c4 <HAL_RCC_DeInit+0xe4>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f013 0f02 	tst.w	r3, #2
 80055fa:	d107      	bne.n	800560c <HAL_RCC_DeInit+0x2c>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055fc:	f7fd fee8 	bl	80033d0 <HAL_GetTick>
 8005600:	1b00      	subs	r0, r0, r4
 8005602:	2802      	cmp	r0, #2
 8005604:	d9f5      	bls.n	80055f2 <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 8005606:	2403      	movs	r4, #3
}
 8005608:	4620      	mov	r0, r4
 800560a:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 800560c:	4d2d      	ldr	r5, [pc, #180]	@ (80056c4 <HAL_RCC_DeInit+0xe4>)
 800560e:	682b      	ldr	r3, [r5, #0]
 8005610:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005618:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800561a:	f7fd fed9 	bl	80033d0 <HAL_GetTick>
 800561e:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 8005620:	2300      	movs	r3, #0
 8005622:	606b      	str	r3, [r5, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8005624:	4b27      	ldr	r3, [pc, #156]	@ (80056c4 <HAL_RCC_DeInit+0xe4>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f013 0f0c 	tst.w	r3, #12
 800562c:	d008      	beq.n	8005640 <HAL_RCC_DeInit+0x60>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800562e:	f7fd fecf 	bl	80033d0 <HAL_GetTick>
 8005632:	1b00      	subs	r0, r0, r4
 8005634:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005638:	4298      	cmp	r0, r3
 800563a:	d9f3      	bls.n	8005624 <HAL_RCC_DeInit+0x44>
      return HAL_TIMEOUT;
 800563c:	2403      	movs	r4, #3
 800563e:	e7e3      	b.n	8005608 <HAL_RCC_DeInit+0x28>
  SystemCoreClock = HSI_VALUE;
 8005640:	4b21      	ldr	r3, [pc, #132]	@ (80056c8 <HAL_RCC_DeInit+0xe8>)
 8005642:	4a22      	ldr	r2, [pc, #136]	@ (80056cc <HAL_RCC_DeInit+0xec>)
 8005644:	601a      	str	r2, [r3, #0]
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005646:	4b22      	ldr	r3, [pc, #136]	@ (80056d0 <HAL_RCC_DeInit+0xf0>)
 8005648:	6818      	ldr	r0, [r3, #0]
 800564a:	f7fd fe7d 	bl	8003348 <HAL_InitTick>
 800564e:	4604      	mov	r4, r0
 8005650:	b108      	cbz	r0, 8005656 <HAL_RCC_DeInit+0x76>
    return HAL_ERROR;
 8005652:	2401      	movs	r4, #1
 8005654:	e7d8      	b.n	8005608 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8005656:	f7fd febb 	bl	80033d0 <HAL_GetTick>
 800565a:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800565c:	4a19      	ldr	r2, [pc, #100]	@ (80056c4 <HAL_RCC_DeInit+0xe4>)
 800565e:	6813      	ldr	r3, [r2, #0]
 8005660:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005664:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005666:	4b17      	ldr	r3, [pc, #92]	@ (80056c4 <HAL_RCC_DeInit+0xe4>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800566e:	d006      	beq.n	800567e <HAL_RCC_DeInit+0x9e>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005670:	f7fd feae 	bl	80033d0 <HAL_GetTick>
 8005674:	1b40      	subs	r0, r0, r5
 8005676:	2802      	cmp	r0, #2
 8005678:	d9f5      	bls.n	8005666 <HAL_RCC_DeInit+0x86>
      return HAL_TIMEOUT;
 800567a:	2403      	movs	r4, #3
 800567c:	e7c4      	b.n	8005608 <HAL_RCC_DeInit+0x28>
  CLEAR_REG(RCC->CFGR);
 800567e:	4e11      	ldr	r6, [pc, #68]	@ (80056c4 <HAL_RCC_DeInit+0xe4>)
 8005680:	2300      	movs	r3, #0
 8005682:	6073      	str	r3, [r6, #4]
  tickstart = HAL_GetTick();
 8005684:	f7fd fea4 	bl	80033d0 <HAL_GetTick>
 8005688:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 800568a:	6833      	ldr	r3, [r6, #0]
 800568c:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8005690:	6033      	str	r3, [r6, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8005692:	4b0c      	ldr	r3, [pc, #48]	@ (80056c4 <HAL_RCC_DeInit+0xe4>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800569a:	d006      	beq.n	80056aa <HAL_RCC_DeInit+0xca>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800569c:	f7fd fe98 	bl	80033d0 <HAL_GetTick>
 80056a0:	1b40      	subs	r0, r0, r5
 80056a2:	2864      	cmp	r0, #100	@ 0x64
 80056a4:	d9f5      	bls.n	8005692 <HAL_RCC_DeInit+0xb2>
      return HAL_TIMEOUT;
 80056a6:	2403      	movs	r4, #3
 80056a8:	e7ae      	b.n	8005608 <HAL_RCC_DeInit+0x28>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80056aa:	4b06      	ldr	r3, [pc, #24]	@ (80056c4 <HAL_RCC_DeInit+0xe4>)
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80056b2:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80056b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056b6:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80056ba:	625a      	str	r2, [r3, #36]	@ 0x24
  CLEAR_REG(RCC->CIR);
 80056bc:	2200      	movs	r2, #0
 80056be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056c0:	e7a2      	b.n	8005608 <HAL_RCC_DeInit+0x28>
 80056c2:	bf00      	nop
 80056c4:	40021000 	.word	0x40021000
 80056c8:	20000008 	.word	0x20000008
 80056cc:	007a1200 	.word	0x007a1200
 80056d0:	20000010 	.word	0x20000010

080056d4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80056d4:	2800      	cmp	r0, #0
 80056d6:	f000 81f1 	beq.w	8005abc <HAL_RCC_OscConfig+0x3e8>
{
 80056da:	b570      	push	{r4, r5, r6, lr}
 80056dc:	b082      	sub	sp, #8
 80056de:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056e0:	6803      	ldr	r3, [r0, #0]
 80056e2:	f013 0f01 	tst.w	r3, #1
 80056e6:	d02c      	beq.n	8005742 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056e8:	4b99      	ldr	r3, [pc, #612]	@ (8005950 <HAL_RCC_OscConfig+0x27c>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f003 030c 	and.w	r3, r3, #12
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d01d      	beq.n	8005730 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056f4:	4b96      	ldr	r3, [pc, #600]	@ (8005950 <HAL_RCC_OscConfig+0x27c>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f003 030c 	and.w	r3, r3, #12
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	d012      	beq.n	8005726 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005700:	6863      	ldr	r3, [r4, #4]
 8005702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005706:	d041      	beq.n	800578c <HAL_RCC_OscConfig+0xb8>
 8005708:	2b00      	cmp	r3, #0
 800570a:	d155      	bne.n	80057b8 <HAL_RCC_OscConfig+0xe4>
 800570c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005710:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	e037      	b.n	8005796 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005726:	4b8a      	ldr	r3, [pc, #552]	@ (8005950 <HAL_RCC_OscConfig+0x27c>)
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800572e:	d0e7      	beq.n	8005700 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005730:	4b87      	ldr	r3, [pc, #540]	@ (8005950 <HAL_RCC_OscConfig+0x27c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005738:	d003      	beq.n	8005742 <HAL_RCC_OscConfig+0x6e>
 800573a:	6863      	ldr	r3, [r4, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 81bf 	beq.w	8005ac0 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	f013 0f02 	tst.w	r3, #2
 8005748:	d075      	beq.n	8005836 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800574a:	4b81      	ldr	r3, [pc, #516]	@ (8005950 <HAL_RCC_OscConfig+0x27c>)
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f013 0f0c 	tst.w	r3, #12
 8005752:	d05f      	beq.n	8005814 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005754:	4b7e      	ldr	r3, [pc, #504]	@ (8005950 <HAL_RCC_OscConfig+0x27c>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f003 030c 	and.w	r3, r3, #12
 800575c:	2b08      	cmp	r3, #8
 800575e:	d054      	beq.n	800580a <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005760:	6923      	ldr	r3, [r4, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 808a 	beq.w	800587c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8005768:	4b7a      	ldr	r3, [pc, #488]	@ (8005954 <HAL_RCC_OscConfig+0x280>)
 800576a:	2201      	movs	r2, #1
 800576c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800576e:	f7fd fe2f 	bl	80033d0 <HAL_GetTick>
 8005772:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005774:	4b76      	ldr	r3, [pc, #472]	@ (8005950 <HAL_RCC_OscConfig+0x27c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f013 0f02 	tst.w	r3, #2
 800577c:	d175      	bne.n	800586a <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800577e:	f7fd fe27 	bl	80033d0 <HAL_GetTick>
 8005782:	1b40      	subs	r0, r0, r5
 8005784:	2802      	cmp	r0, #2
 8005786:	d9f5      	bls.n	8005774 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8005788:	2003      	movs	r0, #3
 800578a:	e19e      	b.n	8005aca <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800578c:	4a70      	ldr	r2, [pc, #448]	@ (8005950 <HAL_RCC_OscConfig+0x27c>)
 800578e:	6813      	ldr	r3, [r2, #0]
 8005790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005794:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005796:	6863      	ldr	r3, [r4, #4]
 8005798:	b343      	cbz	r3, 80057ec <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 800579a:	f7fd fe19 	bl	80033d0 <HAL_GetTick>
 800579e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057a0:	4b6b      	ldr	r3, [pc, #428]	@ (8005950 <HAL_RCC_OscConfig+0x27c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80057a8:	d1cb      	bne.n	8005742 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057aa:	f7fd fe11 	bl	80033d0 <HAL_GetTick>
 80057ae:	1b40      	subs	r0, r0, r5
 80057b0:	2864      	cmp	r0, #100	@ 0x64
 80057b2:	d9f5      	bls.n	80057a0 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80057b4:	2003      	movs	r0, #3
 80057b6:	e188      	b.n	8005aca <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057bc:	d009      	beq.n	80057d2 <HAL_RCC_OscConfig+0xfe>
 80057be:	4b64      	ldr	r3, [pc, #400]	@ (8005950 <HAL_RCC_OscConfig+0x27c>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	e7e1      	b.n	8005796 <HAL_RCC_OscConfig+0xc2>
 80057d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80057d6:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e7d4      	b.n	8005796 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80057ec:	f7fd fdf0 	bl	80033d0 <HAL_GetTick>
 80057f0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057f2:	4b57      	ldr	r3, [pc, #348]	@ (8005950 <HAL_RCC_OscConfig+0x27c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80057fa:	d0a2      	beq.n	8005742 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057fc:	f7fd fde8 	bl	80033d0 <HAL_GetTick>
 8005800:	1b40      	subs	r0, r0, r5
 8005802:	2864      	cmp	r0, #100	@ 0x64
 8005804:	d9f5      	bls.n	80057f2 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8005806:	2003      	movs	r0, #3
 8005808:	e15f      	b.n	8005aca <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800580a:	4b51      	ldr	r3, [pc, #324]	@ (8005950 <HAL_RCC_OscConfig+0x27c>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8005812:	d1a5      	bne.n	8005760 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005814:	4b4e      	ldr	r3, [pc, #312]	@ (8005950 <HAL_RCC_OscConfig+0x27c>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f013 0f02 	tst.w	r3, #2
 800581c:	d003      	beq.n	8005826 <HAL_RCC_OscConfig+0x152>
 800581e:	6923      	ldr	r3, [r4, #16]
 8005820:	2b01      	cmp	r3, #1
 8005822:	f040 814f 	bne.w	8005ac4 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005826:	4a4a      	ldr	r2, [pc, #296]	@ (8005950 <HAL_RCC_OscConfig+0x27c>)
 8005828:	6813      	ldr	r3, [r2, #0]
 800582a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800582e:	6961      	ldr	r1, [r4, #20]
 8005830:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005834:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	f013 0f08 	tst.w	r3, #8
 800583c:	d033      	beq.n	80058a6 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800583e:	69a3      	ldr	r3, [r4, #24]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d05c      	beq.n	80058fe <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8005844:	4b43      	ldr	r3, [pc, #268]	@ (8005954 <HAL_RCC_OscConfig+0x280>)
 8005846:	2201      	movs	r2, #1
 8005848:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800584c:	f7fd fdc0 	bl	80033d0 <HAL_GetTick>
 8005850:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005852:	4b3f      	ldr	r3, [pc, #252]	@ (8005950 <HAL_RCC_OscConfig+0x27c>)
 8005854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005856:	f013 0f02 	tst.w	r3, #2
 800585a:	d121      	bne.n	80058a0 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800585c:	f7fd fdb8 	bl	80033d0 <HAL_GetTick>
 8005860:	1b40      	subs	r0, r0, r5
 8005862:	2802      	cmp	r0, #2
 8005864:	d9f5      	bls.n	8005852 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8005866:	2003      	movs	r0, #3
 8005868:	e12f      	b.n	8005aca <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800586a:	4a39      	ldr	r2, [pc, #228]	@ (8005950 <HAL_RCC_OscConfig+0x27c>)
 800586c:	6813      	ldr	r3, [r2, #0]
 800586e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005872:	6961      	ldr	r1, [r4, #20]
 8005874:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	e7dc      	b.n	8005836 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800587c:	4b35      	ldr	r3, [pc, #212]	@ (8005954 <HAL_RCC_OscConfig+0x280>)
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005882:	f7fd fda5 	bl	80033d0 <HAL_GetTick>
 8005886:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005888:	4b31      	ldr	r3, [pc, #196]	@ (8005950 <HAL_RCC_OscConfig+0x27c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f013 0f02 	tst.w	r3, #2
 8005890:	d0d1      	beq.n	8005836 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005892:	f7fd fd9d 	bl	80033d0 <HAL_GetTick>
 8005896:	1b40      	subs	r0, r0, r5
 8005898:	2802      	cmp	r0, #2
 800589a:	d9f5      	bls.n	8005888 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 800589c:	2003      	movs	r0, #3
 800589e:	e114      	b.n	8005aca <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 80058a0:	2001      	movs	r0, #1
 80058a2:	f7ff fe87 	bl	80055b4 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	f013 0f04 	tst.w	r3, #4
 80058ac:	f000 8096 	beq.w	80059dc <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058b0:	4b27      	ldr	r3, [pc, #156]	@ (8005950 <HAL_RCC_OscConfig+0x27c>)
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80058b8:	d134      	bne.n	8005924 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ba:	4b25      	ldr	r3, [pc, #148]	@ (8005950 <HAL_RCC_OscConfig+0x27c>)
 80058bc:	69da      	ldr	r2, [r3, #28]
 80058be:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80058c2:	61da      	str	r2, [r3, #28]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ca:	9301      	str	r3, [sp, #4]
 80058cc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80058ce:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d0:	4b21      	ldr	r3, [pc, #132]	@ (8005958 <HAL_RCC_OscConfig+0x284>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80058d8:	d026      	beq.n	8005928 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058da:	68e3      	ldr	r3, [r4, #12]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d03d      	beq.n	800595c <HAL_RCC_OscConfig+0x288>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d153      	bne.n	800598c <HAL_RCC_OscConfig+0x2b8>
 80058e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058e8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80058ec:	6a1a      	ldr	r2, [r3, #32]
 80058ee:	f022 0201 	bic.w	r2, r2, #1
 80058f2:	621a      	str	r2, [r3, #32]
 80058f4:	6a1a      	ldr	r2, [r3, #32]
 80058f6:	f022 0204 	bic.w	r2, r2, #4
 80058fa:	621a      	str	r2, [r3, #32]
 80058fc:	e033      	b.n	8005966 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 80058fe:	4b15      	ldr	r3, [pc, #84]	@ (8005954 <HAL_RCC_OscConfig+0x280>)
 8005900:	2200      	movs	r2, #0
 8005902:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8005906:	f7fd fd63 	bl	80033d0 <HAL_GetTick>
 800590a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800590c:	4b10      	ldr	r3, [pc, #64]	@ (8005950 <HAL_RCC_OscConfig+0x27c>)
 800590e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005910:	f013 0f02 	tst.w	r3, #2
 8005914:	d0c7      	beq.n	80058a6 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005916:	f7fd fd5b 	bl	80033d0 <HAL_GetTick>
 800591a:	1b40      	subs	r0, r0, r5
 800591c:	2802      	cmp	r0, #2
 800591e:	d9f5      	bls.n	800590c <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8005920:	2003      	movs	r0, #3
 8005922:	e0d2      	b.n	8005aca <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8005924:	2500      	movs	r5, #0
 8005926:	e7d3      	b.n	80058d0 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005928:	4a0b      	ldr	r2, [pc, #44]	@ (8005958 <HAL_RCC_OscConfig+0x284>)
 800592a:	6813      	ldr	r3, [r2, #0]
 800592c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005930:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005932:	f7fd fd4d 	bl	80033d0 <HAL_GetTick>
 8005936:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005938:	4b07      	ldr	r3, [pc, #28]	@ (8005958 <HAL_RCC_OscConfig+0x284>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005940:	d1cb      	bne.n	80058da <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005942:	f7fd fd45 	bl	80033d0 <HAL_GetTick>
 8005946:	1b80      	subs	r0, r0, r6
 8005948:	2864      	cmp	r0, #100	@ 0x64
 800594a:	d9f5      	bls.n	8005938 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 800594c:	2003      	movs	r0, #3
 800594e:	e0bc      	b.n	8005aca <HAL_RCC_OscConfig+0x3f6>
 8005950:	40021000 	.word	0x40021000
 8005954:	42420000 	.word	0x42420000
 8005958:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800595c:	4a5f      	ldr	r2, [pc, #380]	@ (8005adc <HAL_RCC_OscConfig+0x408>)
 800595e:	6a13      	ldr	r3, [r2, #32]
 8005960:	f043 0301 	orr.w	r3, r3, #1
 8005964:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005966:	68e3      	ldr	r3, [r4, #12]
 8005968:	b333      	cbz	r3, 80059b8 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 800596a:	f7fd fd31 	bl	80033d0 <HAL_GetTick>
 800596e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005970:	4b5a      	ldr	r3, [pc, #360]	@ (8005adc <HAL_RCC_OscConfig+0x408>)
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	f013 0f02 	tst.w	r3, #2
 8005978:	d12f      	bne.n	80059da <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800597a:	f7fd fd29 	bl	80033d0 <HAL_GetTick>
 800597e:	1b80      	subs	r0, r0, r6
 8005980:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005984:	4298      	cmp	r0, r3
 8005986:	d9f3      	bls.n	8005970 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8005988:	2003      	movs	r0, #3
 800598a:	e09e      	b.n	8005aca <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800598c:	2b05      	cmp	r3, #5
 800598e:	d009      	beq.n	80059a4 <HAL_RCC_OscConfig+0x2d0>
 8005990:	4b52      	ldr	r3, [pc, #328]	@ (8005adc <HAL_RCC_OscConfig+0x408>)
 8005992:	6a1a      	ldr	r2, [r3, #32]
 8005994:	f022 0201 	bic.w	r2, r2, #1
 8005998:	621a      	str	r2, [r3, #32]
 800599a:	6a1a      	ldr	r2, [r3, #32]
 800599c:	f022 0204 	bic.w	r2, r2, #4
 80059a0:	621a      	str	r2, [r3, #32]
 80059a2:	e7e0      	b.n	8005966 <HAL_RCC_OscConfig+0x292>
 80059a4:	4b4d      	ldr	r3, [pc, #308]	@ (8005adc <HAL_RCC_OscConfig+0x408>)
 80059a6:	6a1a      	ldr	r2, [r3, #32]
 80059a8:	f042 0204 	orr.w	r2, r2, #4
 80059ac:	621a      	str	r2, [r3, #32]
 80059ae:	6a1a      	ldr	r2, [r3, #32]
 80059b0:	f042 0201 	orr.w	r2, r2, #1
 80059b4:	621a      	str	r2, [r3, #32]
 80059b6:	e7d6      	b.n	8005966 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 80059b8:	f7fd fd0a 	bl	80033d0 <HAL_GetTick>
 80059bc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059be:	4b47      	ldr	r3, [pc, #284]	@ (8005adc <HAL_RCC_OscConfig+0x408>)
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f013 0f02 	tst.w	r3, #2
 80059c6:	d008      	beq.n	80059da <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059c8:	f7fd fd02 	bl	80033d0 <HAL_GetTick>
 80059cc:	1b80      	subs	r0, r0, r6
 80059ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80059d2:	4298      	cmp	r0, r3
 80059d4:	d9f3      	bls.n	80059be <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 80059d6:	2003      	movs	r0, #3
 80059d8:	e077      	b.n	8005aca <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 80059da:	b9e5      	cbnz	r5, 8005a16 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059dc:	69e3      	ldr	r3, [r4, #28]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d072      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059e2:	4a3e      	ldr	r2, [pc, #248]	@ (8005adc <HAL_RCC_OscConfig+0x408>)
 80059e4:	6852      	ldr	r2, [r2, #4]
 80059e6:	f002 020c 	and.w	r2, r2, #12
 80059ea:	2a08      	cmp	r2, #8
 80059ec:	d056      	beq.n	8005a9c <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d017      	beq.n	8005a22 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80059f2:	4b3b      	ldr	r3, [pc, #236]	@ (8005ae0 <HAL_RCC_OscConfig+0x40c>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80059f8:	f7fd fcea 	bl	80033d0 <HAL_GetTick>
 80059fc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059fe:	4b37      	ldr	r3, [pc, #220]	@ (8005adc <HAL_RCC_OscConfig+0x408>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005a06:	d047      	beq.n	8005a98 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a08:	f7fd fce2 	bl	80033d0 <HAL_GetTick>
 8005a0c:	1b00      	subs	r0, r0, r4
 8005a0e:	2802      	cmp	r0, #2
 8005a10:	d9f5      	bls.n	80059fe <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8005a12:	2003      	movs	r0, #3
 8005a14:	e059      	b.n	8005aca <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a16:	4a31      	ldr	r2, [pc, #196]	@ (8005adc <HAL_RCC_OscConfig+0x408>)
 8005a18:	69d3      	ldr	r3, [r2, #28]
 8005a1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a1e:	61d3      	str	r3, [r2, #28]
 8005a20:	e7dc      	b.n	80059dc <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8005a22:	4b2f      	ldr	r3, [pc, #188]	@ (8005ae0 <HAL_RCC_OscConfig+0x40c>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005a28:	f7fd fcd2 	bl	80033d0 <HAL_GetTick>
 8005a2c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8005adc <HAL_RCC_OscConfig+0x408>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005a36:	d006      	beq.n	8005a46 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a38:	f7fd fcca 	bl	80033d0 <HAL_GetTick>
 8005a3c:	1b40      	subs	r0, r0, r5
 8005a3e:	2802      	cmp	r0, #2
 8005a40:	d9f5      	bls.n	8005a2e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8005a42:	2003      	movs	r0, #3
 8005a44:	e041      	b.n	8005aca <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005a46:	6a23      	ldr	r3, [r4, #32]
 8005a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a4c:	d01a      	beq.n	8005a84 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a4e:	4923      	ldr	r1, [pc, #140]	@ (8005adc <HAL_RCC_OscConfig+0x408>)
 8005a50:	684b      	ldr	r3, [r1, #4]
 8005a52:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 8005a56:	6a22      	ldr	r2, [r4, #32]
 8005a58:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005a5a:	4302      	orrs	r2, r0
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8005a60:	4b1f      	ldr	r3, [pc, #124]	@ (8005ae0 <HAL_RCC_OscConfig+0x40c>)
 8005a62:	2201      	movs	r2, #1
 8005a64:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005a66:	f7fd fcb3 	bl	80033d0 <HAL_GetTick>
 8005a6a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005adc <HAL_RCC_OscConfig+0x408>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005a74:	d10e      	bne.n	8005a94 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a76:	f7fd fcab 	bl	80033d0 <HAL_GetTick>
 8005a7a:	1b00      	subs	r0, r0, r4
 8005a7c:	2802      	cmp	r0, #2
 8005a7e:	d9f5      	bls.n	8005a6c <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8005a80:	2003      	movs	r0, #3
 8005a82:	e022      	b.n	8005aca <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a84:	4a15      	ldr	r2, [pc, #84]	@ (8005adc <HAL_RCC_OscConfig+0x408>)
 8005a86:	6853      	ldr	r3, [r2, #4]
 8005a88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005a8c:	68a1      	ldr	r1, [r4, #8]
 8005a8e:	430b      	orrs	r3, r1
 8005a90:	6053      	str	r3, [r2, #4]
 8005a92:	e7dc      	b.n	8005a4e <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8005a94:	2000      	movs	r0, #0
 8005a96:	e018      	b.n	8005aca <HAL_RCC_OscConfig+0x3f6>
 8005a98:	2000      	movs	r0, #0
 8005a9a:	e016      	b.n	8005aca <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d016      	beq.n	8005ace <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8005aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8005adc <HAL_RCC_OscConfig+0x408>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aa4:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8005aa8:	6a22      	ldr	r2, [r4, #32]
 8005aaa:	4291      	cmp	r1, r2
 8005aac:	d111      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005aae:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8005ab2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d10e      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8005ab8:	2000      	movs	r0, #0
 8005aba:	e006      	b.n	8005aca <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8005abc:	2001      	movs	r0, #1
}
 8005abe:	4770      	bx	lr
        return HAL_ERROR;
 8005ac0:	2001      	movs	r0, #1
 8005ac2:	e002      	b.n	8005aca <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8005ac4:	2001      	movs	r0, #1
 8005ac6:	e000      	b.n	8005aca <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8005ac8:	2000      	movs	r0, #0
}
 8005aca:	b002      	add	sp, #8
 8005acc:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8005ace:	2001      	movs	r0, #1
 8005ad0:	e7fb      	b.n	8005aca <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8005ad2:	2001      	movs	r0, #1
 8005ad4:	e7f9      	b.n	8005aca <HAL_RCC_OscConfig+0x3f6>
 8005ad6:	2001      	movs	r0, #1
 8005ad8:	e7f7      	b.n	8005aca <HAL_RCC_OscConfig+0x3f6>
 8005ada:	bf00      	nop
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	42420000 	.word	0x42420000

08005ae4 <HAL_RCC_MCOConfig>:
{
 8005ae4:	b530      	push	{r4, r5, lr}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	460d      	mov	r5, r1
  GPIO_InitTypeDef gpio = {0U};
 8005aea:	2300      	movs	r3, #0
 8005aec:	9302      	str	r3, [sp, #8]
 8005aee:	9303      	str	r3, [sp, #12]
 8005af0:	9304      	str	r3, [sp, #16]
 8005af2:	9305      	str	r3, [sp, #20]
  gpio.Mode      = GPIO_MODE_AF_PP;
 8005af4:	2302      	movs	r3, #2
 8005af6:	9303      	str	r3, [sp, #12]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005af8:	2303      	movs	r3, #3
 8005afa:	9305      	str	r3, [sp, #20]
  gpio.Pin       = MCO1_PIN;
 8005afc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b00:	9302      	str	r3, [sp, #8]
  MCO1_CLK_ENABLE();
 8005b02:	4c0a      	ldr	r4, [pc, #40]	@ (8005b2c <HAL_RCC_MCOConfig+0x48>)
 8005b04:	69a3      	ldr	r3, [r4, #24]
 8005b06:	f043 0304 	orr.w	r3, r3, #4
 8005b0a:	61a3      	str	r3, [r4, #24]
 8005b0c:	69a3      	ldr	r3, [r4, #24]
 8005b0e:	f003 0304 	and.w	r3, r3, #4
 8005b12:	9301      	str	r3, [sp, #4]
 8005b14:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8005b16:	a902      	add	r1, sp, #8
 8005b18:	4805      	ldr	r0, [pc, #20]	@ (8005b30 <HAL_RCC_MCOConfig+0x4c>)
 8005b1a:	f7ff fa4f 	bl	8004fbc <HAL_GPIO_Init>
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8005b1e:	6863      	ldr	r3, [r4, #4]
 8005b20:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005b24:	432b      	orrs	r3, r5
 8005b26:	6063      	str	r3, [r4, #4]
}
 8005b28:	b007      	add	sp, #28
 8005b2a:	bd30      	pop	{r4, r5, pc}
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	40010800 	.word	0x40010800

08005b34 <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005b34:	4b01      	ldr	r3, [pc, #4]	@ (8005b3c <HAL_RCC_EnableCSS+0x8>)
 8005b36:	2201      	movs	r2, #1
 8005b38:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8005b3a:	4770      	bx	lr
 8005b3c:	42420000 	.word	0x42420000

08005b40 <HAL_RCC_DisableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8005b40:	4b01      	ldr	r3, [pc, #4]	@ (8005b48 <HAL_RCC_DisableCSS+0x8>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8005b46:	4770      	bx	lr
 8005b48:	42420000 	.word	0x42420000

08005b4c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8005b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x40>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005b50:	f003 020c 	and.w	r2, r3, #12
 8005b54:	2a08      	cmp	r2, #8
 8005b56:	d001      	beq.n	8005b5c <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8005b58:	480d      	ldr	r0, [pc, #52]	@ (8005b90 <HAL_RCC_GetSysClockFreq+0x44>)
}
 8005b5a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005b5c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8005b60:	490c      	ldr	r1, [pc, #48]	@ (8005b94 <HAL_RCC_GetSysClockFreq+0x48>)
 8005b62:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b64:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8005b68:	d00b      	beq.n	8005b82 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b6a:	4b08      	ldr	r3, [pc, #32]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x40>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8005b72:	4a09      	ldr	r2, [pc, #36]	@ (8005b98 <HAL_RCC_GetSysClockFreq+0x4c>)
 8005b74:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005b76:	4a06      	ldr	r2, [pc, #24]	@ (8005b90 <HAL_RCC_GetSysClockFreq+0x44>)
 8005b78:	fb02 f000 	mul.w	r0, r2, r0
 8005b7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8005b80:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b82:	4b06      	ldr	r3, [pc, #24]	@ (8005b9c <HAL_RCC_GetSysClockFreq+0x50>)
 8005b84:	fb03 f000 	mul.w	r0, r3, r0
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	007a1200 	.word	0x007a1200
 8005b94:	08010b70 	.word	0x08010b70
 8005b98:	08010b6c 	.word	0x08010b6c
 8005b9c:	003d0900 	.word	0x003d0900

08005ba0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	f000 80a0 	beq.w	8005ce6 <HAL_RCC_ClockConfig+0x146>
{
 8005ba6:	b570      	push	{r4, r5, r6, lr}
 8005ba8:	460d      	mov	r5, r1
 8005baa:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bac:	4b52      	ldr	r3, [pc, #328]	@ (8005cf8 <HAL_RCC_ClockConfig+0x158>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	428b      	cmp	r3, r1
 8005bb6:	d20b      	bcs.n	8005bd0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bb8:	4a4f      	ldr	r2, [pc, #316]	@ (8005cf8 <HAL_RCC_ClockConfig+0x158>)
 8005bba:	6813      	ldr	r3, [r2, #0]
 8005bbc:	f023 0307 	bic.w	r3, r3, #7
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bc4:	6813      	ldr	r3, [r2, #0]
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	428b      	cmp	r3, r1
 8005bcc:	f040 808d 	bne.w	8005cea <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	f013 0f02 	tst.w	r3, #2
 8005bd6:	d017      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd8:	f013 0f04 	tst.w	r3, #4
 8005bdc:	d004      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bde:	4a47      	ldr	r2, [pc, #284]	@ (8005cfc <HAL_RCC_ClockConfig+0x15c>)
 8005be0:	6853      	ldr	r3, [r2, #4]
 8005be2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005be6:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005be8:	6823      	ldr	r3, [r4, #0]
 8005bea:	f013 0f08 	tst.w	r3, #8
 8005bee:	d004      	beq.n	8005bfa <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bf0:	4a42      	ldr	r2, [pc, #264]	@ (8005cfc <HAL_RCC_ClockConfig+0x15c>)
 8005bf2:	6853      	ldr	r3, [r2, #4]
 8005bf4:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005bf8:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bfa:	4a40      	ldr	r2, [pc, #256]	@ (8005cfc <HAL_RCC_ClockConfig+0x15c>)
 8005bfc:	6853      	ldr	r3, [r2, #4]
 8005bfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c02:	68a1      	ldr	r1, [r4, #8]
 8005c04:	430b      	orrs	r3, r1
 8005c06:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	f013 0f01 	tst.w	r3, #1
 8005c0e:	d031      	beq.n	8005c74 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c10:	6863      	ldr	r3, [r4, #4]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d020      	beq.n	8005c58 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d025      	beq.n	8005c66 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c1a:	4a38      	ldr	r2, [pc, #224]	@ (8005cfc <HAL_RCC_ClockConfig+0x15c>)
 8005c1c:	6812      	ldr	r2, [r2, #0]
 8005c1e:	f012 0f02 	tst.w	r2, #2
 8005c22:	d064      	beq.n	8005cee <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c24:	4935      	ldr	r1, [pc, #212]	@ (8005cfc <HAL_RCC_ClockConfig+0x15c>)
 8005c26:	684a      	ldr	r2, [r1, #4]
 8005c28:	f022 0203 	bic.w	r2, r2, #3
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8005c30:	f7fd fbce 	bl	80033d0 <HAL_GetTick>
 8005c34:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c36:	4b31      	ldr	r3, [pc, #196]	@ (8005cfc <HAL_RCC_ClockConfig+0x15c>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f003 030c 	and.w	r3, r3, #12
 8005c3e:	6862      	ldr	r2, [r4, #4]
 8005c40:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005c44:	d016      	beq.n	8005c74 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c46:	f7fd fbc3 	bl	80033d0 <HAL_GetTick>
 8005c4a:	1b80      	subs	r0, r0, r6
 8005c4c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005c50:	4298      	cmp	r0, r3
 8005c52:	d9f0      	bls.n	8005c36 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8005c54:	2003      	movs	r0, #3
 8005c56:	e045      	b.n	8005ce4 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c58:	4a28      	ldr	r2, [pc, #160]	@ (8005cfc <HAL_RCC_ClockConfig+0x15c>)
 8005c5a:	6812      	ldr	r2, [r2, #0]
 8005c5c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8005c60:	d1e0      	bne.n	8005c24 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8005c62:	2001      	movs	r0, #1
 8005c64:	e03e      	b.n	8005ce4 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c66:	4a25      	ldr	r2, [pc, #148]	@ (8005cfc <HAL_RCC_ClockConfig+0x15c>)
 8005c68:	6812      	ldr	r2, [r2, #0]
 8005c6a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8005c6e:	d1d9      	bne.n	8005c24 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8005c70:	2001      	movs	r0, #1
 8005c72:	e037      	b.n	8005ce4 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c74:	4b20      	ldr	r3, [pc, #128]	@ (8005cf8 <HAL_RCC_ClockConfig+0x158>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	42ab      	cmp	r3, r5
 8005c7e:	d90a      	bls.n	8005c96 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c80:	4a1d      	ldr	r2, [pc, #116]	@ (8005cf8 <HAL_RCC_ClockConfig+0x158>)
 8005c82:	6813      	ldr	r3, [r2, #0]
 8005c84:	f023 0307 	bic.w	r3, r3, #7
 8005c88:	432b      	orrs	r3, r5
 8005c8a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c8c:	6813      	ldr	r3, [r2, #0]
 8005c8e:	f003 0307 	and.w	r3, r3, #7
 8005c92:	42ab      	cmp	r3, r5
 8005c94:	d12d      	bne.n	8005cf2 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	f013 0f04 	tst.w	r3, #4
 8005c9c:	d006      	beq.n	8005cac <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c9e:	4a17      	ldr	r2, [pc, #92]	@ (8005cfc <HAL_RCC_ClockConfig+0x15c>)
 8005ca0:	6853      	ldr	r3, [r2, #4]
 8005ca2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005ca6:	68e1      	ldr	r1, [r4, #12]
 8005ca8:	430b      	orrs	r3, r1
 8005caa:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	f013 0f08 	tst.w	r3, #8
 8005cb2:	d007      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005cb4:	4a11      	ldr	r2, [pc, #68]	@ (8005cfc <HAL_RCC_ClockConfig+0x15c>)
 8005cb6:	6853      	ldr	r3, [r2, #4]
 8005cb8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005cbc:	6921      	ldr	r1, [r4, #16]
 8005cbe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005cc2:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005cc4:	f7ff ff42 	bl	8005b4c <HAL_RCC_GetSysClockFreq>
 8005cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8005cfc <HAL_RCC_ClockConfig+0x15c>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8005d00 <HAL_RCC_ClockConfig+0x160>)
 8005cd2:	5cd3      	ldrb	r3, [r2, r3]
 8005cd4:	40d8      	lsrs	r0, r3
 8005cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005d04 <HAL_RCC_ClockConfig+0x164>)
 8005cd8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005cda:	4b0b      	ldr	r3, [pc, #44]	@ (8005d08 <HAL_RCC_ClockConfig+0x168>)
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	f7fd fb33 	bl	8003348 <HAL_InitTick>
  return HAL_OK;
 8005ce2:	2000      	movs	r0, #0
}
 8005ce4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005ce6:	2001      	movs	r0, #1
}
 8005ce8:	4770      	bx	lr
    return HAL_ERROR;
 8005cea:	2001      	movs	r0, #1
 8005cec:	e7fa      	b.n	8005ce4 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8005cee:	2001      	movs	r0, #1
 8005cf0:	e7f8      	b.n	8005ce4 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8005cf2:	2001      	movs	r0, #1
 8005cf4:	e7f6      	b.n	8005ce4 <HAL_RCC_ClockConfig+0x144>
 8005cf6:	bf00      	nop
 8005cf8:	40022000 	.word	0x40022000
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	08010b5c 	.word	0x08010b5c
 8005d04:	20000008 	.word	0x20000008
 8005d08:	20000010 	.word	0x20000010

08005d0c <HAL_RCC_GetHCLKFreq>:
}
 8005d0c:	4b01      	ldr	r3, [pc, #4]	@ (8005d14 <HAL_RCC_GetHCLKFreq+0x8>)
 8005d0e:	6818      	ldr	r0, [r3, #0]
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	20000008 	.word	0x20000008

08005d18 <HAL_RCC_GetPCLK1Freq>:
{
 8005d18:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d1a:	f7ff fff7 	bl	8005d0c <HAL_RCC_GetHCLKFreq>
 8005d1e:	4b04      	ldr	r3, [pc, #16]	@ (8005d30 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005d26:	4a03      	ldr	r2, [pc, #12]	@ (8005d34 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005d28:	5cd3      	ldrb	r3, [r2, r3]
}
 8005d2a:	40d8      	lsrs	r0, r3
 8005d2c:	bd08      	pop	{r3, pc}
 8005d2e:	bf00      	nop
 8005d30:	40021000 	.word	0x40021000
 8005d34:	08010b54 	.word	0x08010b54

08005d38 <HAL_RCC_GetPCLK2Freq>:
{
 8005d38:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d3a:	f7ff ffe7 	bl	8005d0c <HAL_RCC_GetHCLKFreq>
 8005d3e:	4b04      	ldr	r3, [pc, #16]	@ (8005d50 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005d46:	4a03      	ldr	r2, [pc, #12]	@ (8005d54 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005d48:	5cd3      	ldrb	r3, [r2, r3]
}
 8005d4a:	40d8      	lsrs	r0, r3
 8005d4c:	bd08      	pop	{r3, pc}
 8005d4e:	bf00      	nop
 8005d50:	40021000 	.word	0x40021000
 8005d54:	08010b54 	.word	0x08010b54

08005d58 <HAL_RCC_GetOscConfig>:
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 8005d58:	230f      	movs	r3, #15
 8005d5a:	6003      	str	r3, [r0, #0]
  if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8005d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8005e08 <HAL_RCC_GetOscConfig+0xb0>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8005d64:	d030      	beq.n	8005dc8 <HAL_RCC_GetOscConfig+0x70>
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8005d66:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8005d6a:	6043      	str	r3, [r0, #4]
  RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
 8005d6c:	4a26      	ldr	r2, [pc, #152]	@ (8005e08 <HAL_RCC_GetOscConfig+0xb0>)
 8005d6e:	6853      	ldr	r3, [r2, #4]
 8005d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d74:	6083      	str	r3, [r0, #8]
  if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
 8005d76:	6813      	ldr	r3, [r2, #0]
 8005d78:	f013 0f01 	tst.w	r3, #1
 8005d7c:	d030      	beq.n	8005de0 <HAL_RCC_GetOscConfig+0x88>
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	6103      	str	r3, [r0, #16]
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 8005d82:	4a21      	ldr	r2, [pc, #132]	@ (8005e08 <HAL_RCC_GetOscConfig+0xb0>)
 8005d84:	6813      	ldr	r3, [r2, #0]
 8005d86:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8005d8a:	6143      	str	r3, [r0, #20]
  if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8005d8c:	6a13      	ldr	r3, [r2, #32]
 8005d8e:	f013 0f04 	tst.w	r3, #4
 8005d92:	d028      	beq.n	8005de6 <HAL_RCC_GetOscConfig+0x8e>
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8005d94:	2305      	movs	r3, #5
 8005d96:	60c3      	str	r3, [r0, #12]
  if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005d98:	4b1b      	ldr	r3, [pc, #108]	@ (8005e08 <HAL_RCC_GetOscConfig+0xb0>)
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9c:	f013 0f01 	tst.w	r3, #1
 8005da0:	d02c      	beq.n	8005dfc <HAL_RCC_GetOscConfig+0xa4>
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8005da2:	2301      	movs	r3, #1
 8005da4:	6183      	str	r3, [r0, #24]
  if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
 8005da6:	4b18      	ldr	r3, [pc, #96]	@ (8005e08 <HAL_RCC_GetOscConfig+0xb0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8005dae:	d028      	beq.n	8005e02 <HAL_RCC_GetOscConfig+0xaa>
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8005db0:	2302      	movs	r3, #2
 8005db2:	61c3      	str	r3, [r0, #28]
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 8005db4:	4a14      	ldr	r2, [pc, #80]	@ (8005e08 <HAL_RCC_GetOscConfig+0xb0>)
 8005db6:	6853      	ldr	r3, [r2, #4]
 8005db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dbc:	6203      	str	r3, [r0, #32]
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
 8005dbe:	6853      	ldr	r3, [r2, #4]
 8005dc0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8005dc4:	6243      	str	r3, [r0, #36]	@ 0x24
}
 8005dc6:	4770      	bx	lr
  else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
 8005dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8005e08 <HAL_RCC_GetOscConfig+0xb0>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8005dd0:	d003      	beq.n	8005dda <HAL_RCC_GetOscConfig+0x82>
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8005dd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005dd6:	6043      	str	r3, [r0, #4]
 8005dd8:	e7c8      	b.n	8005d6c <HAL_RCC_GetOscConfig+0x14>
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	6043      	str	r3, [r0, #4]
 8005dde:	e7c5      	b.n	8005d6c <HAL_RCC_GetOscConfig+0x14>
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8005de0:	2300      	movs	r3, #0
 8005de2:	6103      	str	r3, [r0, #16]
 8005de4:	e7cd      	b.n	8005d82 <HAL_RCC_GetOscConfig+0x2a>
  else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8005de6:	4b08      	ldr	r3, [pc, #32]	@ (8005e08 <HAL_RCC_GetOscConfig+0xb0>)
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	f013 0f01 	tst.w	r3, #1
 8005dee:	d002      	beq.n	8005df6 <HAL_RCC_GetOscConfig+0x9e>
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8005df0:	2301      	movs	r3, #1
 8005df2:	60c3      	str	r3, [r0, #12]
 8005df4:	e7d0      	b.n	8005d98 <HAL_RCC_GetOscConfig+0x40>
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60c3      	str	r3, [r0, #12]
 8005dfa:	e7cd      	b.n	8005d98 <HAL_RCC_GetOscConfig+0x40>
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	6183      	str	r3, [r0, #24]
 8005e00:	e7d1      	b.n	8005da6 <HAL_RCC_GetOscConfig+0x4e>
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8005e02:	2301      	movs	r3, #1
 8005e04:	61c3      	str	r3, [r0, #28]
 8005e06:	e7d5      	b.n	8005db4 <HAL_RCC_GetOscConfig+0x5c>
 8005e08:	40021000 	.word	0x40021000

08005e0c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e0c:	230f      	movs	r3, #15
 8005e0e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e10:	4b0b      	ldr	r3, [pc, #44]	@ (8005e40 <HAL_RCC_GetClockConfig+0x34>)
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	f002 0203 	and.w	r2, r2, #3
 8005e18:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8005e20:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8005e28:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	08db      	lsrs	r3, r3, #3
 8005e2e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e32:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e34:	4b03      	ldr	r3, [pc, #12]	@ (8005e44 <HAL_RCC_GetClockConfig+0x38>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	600b      	str	r3, [r1, #0]
}
 8005e3e:	4770      	bx	lr
 8005e40:	40021000 	.word	0x40021000
 8005e44:	40022000 	.word	0x40022000

08005e48 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8005e48:	4770      	bx	lr
	...

08005e4c <HAL_RCC_NMI_IRQHandler>:
{
 8005e4c:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005e4e:	4b06      	ldr	r3, [pc, #24]	@ (8005e68 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005e56:	d100      	bne.n	8005e5a <HAL_RCC_NMI_IRQHandler+0xe>
}
 8005e58:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8005e5a:	f7ff fff5 	bl	8005e48 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005e5e:	4b02      	ldr	r3, [pc, #8]	@ (8005e68 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8005e60:	2280      	movs	r2, #128	@ 0x80
 8005e62:	729a      	strb	r2, [r3, #10]
}
 8005e64:	e7f8      	b.n	8005e58 <HAL_RCC_NMI_IRQHandler+0xc>
 8005e66:	bf00      	nop
 8005e68:	40021000 	.word	0x40021000

08005e6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e72:	6803      	ldr	r3, [r0, #0]
 8005e74:	f013 0f01 	tst.w	r3, #1
 8005e78:	d036      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8005e82:	d149      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e84:	4b3c      	ldr	r3, [pc, #240]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8005e86:	69da      	ldr	r2, [r3, #28]
 8005e88:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005e8c:	61da      	str	r2, [r3, #28]
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e94:	9301      	str	r3, [sp, #4]
 8005e96:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005e98:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e9a:	4b38      	ldr	r3, [pc, #224]	@ (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005ea2:	d03b      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ea4:	4b34      	ldr	r3, [pc, #208]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ea8:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005eac:	d013      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005eae:	6862      	ldr	r2, [r4, #4]
 8005eb0:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d00e      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005eb8:	4a2f      	ldr	r2, [pc, #188]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8005eba:	6a13      	ldr	r3, [r2, #32]
 8005ebc:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ec0:	492f      	ldr	r1, [pc, #188]	@ (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8005ec2:	2601      	movs	r6, #1
 8005ec4:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ec8:	2600      	movs	r6, #0
 8005eca:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ece:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ed0:	f013 0f01 	tst.w	r3, #1
 8005ed4:	d136      	bne.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ed6:	4a28      	ldr	r2, [pc, #160]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8005ed8:	6a13      	ldr	r3, [r2, #32]
 8005eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ede:	6861      	ldr	r1, [r4, #4]
 8005ee0:	430b      	orrs	r3, r1
 8005ee2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ee4:	2d00      	cmp	r5, #0
 8005ee6:	d13e      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	f013 0f02 	tst.w	r3, #2
 8005eee:	d006      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ef0:	4a21      	ldr	r2, [pc, #132]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8005ef2:	6853      	ldr	r3, [r2, #4]
 8005ef4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005ef8:	68a1      	ldr	r1, [r4, #8]
 8005efa:	430b      	orrs	r3, r1
 8005efc:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	f013 0f10 	tst.w	r3, #16
 8005f04:	d034      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f06:	4a1c      	ldr	r2, [pc, #112]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8005f08:	6853      	ldr	r3, [r2, #4]
 8005f0a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005f0e:	6961      	ldr	r1, [r4, #20]
 8005f10:	430b      	orrs	r3, r1
 8005f12:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005f14:	2000      	movs	r0, #0
 8005f16:	e02c      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8005f18:	2500      	movs	r5, #0
 8005f1a:	e7be      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f1c:	4a17      	ldr	r2, [pc, #92]	@ (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8005f1e:	6813      	ldr	r3, [r2, #0]
 8005f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f24:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005f26:	f7fd fa53 	bl	80033d0 <HAL_GetTick>
 8005f2a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f2c:	4b13      	ldr	r3, [pc, #76]	@ (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005f34:	d1b6      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f36:	f7fd fa4b 	bl	80033d0 <HAL_GetTick>
 8005f3a:	1b80      	subs	r0, r0, r6
 8005f3c:	2864      	cmp	r0, #100	@ 0x64
 8005f3e:	d9f5      	bls.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8005f40:	2003      	movs	r0, #3
 8005f42:	e016      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8005f44:	f7fd fa44 	bl	80033d0 <HAL_GetTick>
 8005f48:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f013 0f02 	tst.w	r3, #2
 8005f52:	d1c0      	bne.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f54:	f7fd fa3c 	bl	80033d0 <HAL_GetTick>
 8005f58:	1b80      	subs	r0, r0, r6
 8005f5a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005f5e:	4298      	cmp	r0, r3
 8005f60:	d9f3      	bls.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 8005f62:	2003      	movs	r0, #3
 8005f64:	e005      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f66:	69d3      	ldr	r3, [r2, #28]
 8005f68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f6c:	61d3      	str	r3, [r2, #28]
 8005f6e:	e7bb      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8005f70:	2000      	movs	r0, #0
}
 8005f72:	b002      	add	sp, #8
 8005f74:	bd70      	pop	{r4, r5, r6, pc}
 8005f76:	bf00      	nop
 8005f78:	40021000 	.word	0x40021000
 8005f7c:	40007000 	.word	0x40007000
 8005f80:	42420000 	.word	0x42420000

08005f84 <HAL_RCCEx_GetPeriphCLKConfig>:
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t srcclk = 0U;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005f84:	2301      	movs	r3, #1
 8005f86:	6003      	str	r3, [r0, #0]

  /* Get the RTC configuration -----------------------------------------------*/
  srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005f88:	4b0c      	ldr	r3, [pc, #48]	@ (8005fbc <HAL_RCCEx_GetPeriphCLKConfig+0x38>)
 8005f8a:	6a1a      	ldr	r2, [r3, #32]
 8005f8c:	f402 7240 	and.w	r2, r2, #768	@ 0x300
  /* Source clock is LSE or LSI*/
  PeriphClkInit->RTCClockSelection = srcclk;
 8005f90:	6042      	str	r2, [r0, #4]

  /* Get the ADC clock configuration -----------------------------------------*/
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_ADC;
 8005f92:	2203      	movs	r2, #3
 8005f94:	6002      	str	r2, [r0, #0]
  PeriphClkInit->AdcClockSelection = __HAL_RCC_GET_ADC_SOURCE();
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8005f9c:	6082      	str	r2, [r0, #8]

#endif /* STM32F105xC || STM32F107xC */

#if defined(STM32F103xE) || defined(STM32F103xG)
  /* Get the I2S2 clock configuration -----------------------------------------*/
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2S2;
 8005f9e:	2207      	movs	r2, #7
 8005fa0:	6002      	str	r2, [r0, #0]
  PeriphClkInit->I2s2ClockSelection = RCC_I2S2CLKSOURCE_SYSCLK;
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	60c2      	str	r2, [r0, #12]

  /* Get the I2S3 clock configuration -----------------------------------------*/
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2S3;
 8005fa6:	210f      	movs	r1, #15
 8005fa8:	6001      	str	r1, [r0, #0]
  PeriphClkInit->I2s3ClockSelection = RCC_I2S3CLKSOURCE_SYSCLK;
 8005faa:	6102      	str	r2, [r0, #16]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /* Get the USB clock configuration -----------------------------------------*/
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_USB;
 8005fac:	221f      	movs	r2, #31
 8005fae:	6002      	str	r2, [r0, #0]
  PeriphClkInit->UsbClockSelection = __HAL_RCC_GET_USB_SOURCE();
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fb6:	6143      	str	r3, [r0, #20]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
}
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	40021000 	.word	0x40021000

08005fc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005fc0:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005fc2:	3801      	subs	r0, #1
 8005fc4:	280f      	cmp	r0, #15
 8005fc6:	d863      	bhi.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8005fc8:	e8df f000 	tbb	[pc, r0]
 8005fcc:	2f625735 	.word	0x2f625735
 8005fd0:	32626262 	.word	0x32626262
 8005fd4:	62626262 	.word	0x62626262
 8005fd8:	08626262 	.word	0x08626262
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8005fdc:	4b2f      	ldr	r3, [pc, #188]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8005fde:	685a      	ldr	r2, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 8005fe6:	d054      	beq.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005fe8:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8005fec:	492c      	ldr	r1, [pc, #176]	@ (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8005fee:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ff0:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8005ff4:	d015      	beq.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ff6:	4b29      	ldr	r3, [pc, #164]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8005ffe:	4a29      	ldr	r2, [pc, #164]	@ (80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8006000:	5cd2      	ldrb	r2, [r2, r3]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006002:	4b29      	ldr	r3, [pc, #164]	@ (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 8006004:	fbb3 f3f2 	udiv	r3, r3, r2
 8006008:	fb03 f000 	mul.w	r0, r3, r0
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800600c:	4b23      	ldr	r3, [pc, #140]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8006014:	d13d      	bne.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
 8006016:	0040      	lsls	r0, r0, #1
 8006018:	4b24      	ldr	r3, [pc, #144]	@ (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800601a:	fba3 3000 	umull	r3, r0, r3, r0
 800601e:	0840      	lsrs	r0, r0, #1
 8006020:	e037      	b.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006022:	4b23      	ldr	r3, [pc, #140]	@ (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8006024:	fb03 f000 	mul.w	r0, r3, r0
 8006028:	e7f0      	b.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800602a:	f7ff fd8f 	bl	8005b4c <HAL_RCC_GetSysClockFreq>
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800602e:	e030      	b.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8006030:	f7ff fd8c 	bl	8005b4c <HAL_RCC_GetSysClockFreq>
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006034:	e02d      	b.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8006036:	4b19      	ldr	r3, [pc, #100]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8006038:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800603a:	f240 3202 	movw	r2, #770	@ 0x302
 800603e:	401a      	ands	r2, r3
 8006040:	f5b2 7f81 	cmp.w	r2, #258	@ 0x102
 8006044:	d026      	beq.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800604a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800604e:	d004      	beq.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006050:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006054:	d009      	beq.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
  uint32_t temp_reg = 0U, frequency = 0U;
 8006056:	2000      	movs	r0, #0
 8006058:	e01b      	b.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800605a:	4a10      	ldr	r2, [pc, #64]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 800605c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800605e:	f012 0f02 	tst.w	r2, #2
 8006062:	d0f5      	beq.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
        frequency = LSI_VALUE;
 8006064:	f649 4040 	movw	r0, #40000	@ 0x9c40
 8006068:	e013      	b.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800606a:	4b0c      	ldr	r3, [pc, #48]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8006072:	d00e      	beq.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      {
        frequency = HSE_VALUE / 128U;
 8006074:	f24f 4024 	movw	r0, #62500	@ 0xf424
    default:
    {
      break;
    }
  }
  return (frequency);
 8006078:	e00b      	b.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800607a:	f7ff fe5d 	bl	8005d38 <HAL_RCC_GetPCLK2Freq>
 800607e:	4b07      	ldr	r3, [pc, #28]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8006086:	3301      	adds	r3, #1
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800608e:	e000      	b.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  switch (PeriphClk)
 8006090:	2000      	movs	r0, #0
}
 8006092:	bd08      	pop	{r3, pc}
        frequency = LSE_VALUE;
 8006094:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006098:	e7fb      	b.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800609a:	bf00      	nop
 800609c:	40021000 	.word	0x40021000
 80060a0:	08010b84 	.word	0x08010b84
 80060a4:	08010b80 	.word	0x08010b80
 80060a8:	007a1200 	.word	0x007a1200
 80060ac:	aaaaaaab 	.word	0xaaaaaaab
 80060b0:	003d0900 	.word	0x003d0900

080060b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060b4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b6:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060b8:	6a02      	ldr	r2, [r0, #32]
 80060ba:	f022 0201 	bic.w	r2, r2, #1
 80060be:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060c2:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060c4:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060c8:	680c      	ldr	r4, [r1, #0]
 80060ca:	ea44 040c 	orr.w	r4, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060ce:	f023 0c02 	bic.w	ip, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060d2:	688b      	ldr	r3, [r1, #8]
 80060d4:	ea43 030c 	orr.w	r3, r3, ip

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060d8:	4d11      	ldr	r5, [pc, #68]	@ (8006120 <TIM_OC1_SetConfig+0x6c>)
 80060da:	42a8      	cmp	r0, r5
 80060dc:	d003      	beq.n	80060e6 <TIM_OC1_SetConfig+0x32>
 80060de:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80060e2:	42a8      	cmp	r0, r5
 80060e4:	d105      	bne.n	80060f2 <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060e6:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060ea:	68cd      	ldr	r5, [r1, #12]
 80060ec:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060ee:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f2:	4d0b      	ldr	r5, [pc, #44]	@ (8006120 <TIM_OC1_SetConfig+0x6c>)
 80060f4:	42a8      	cmp	r0, r5
 80060f6:	d003      	beq.n	8006100 <TIM_OC1_SetConfig+0x4c>
 80060f8:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80060fc:	42a8      	cmp	r0, r5
 80060fe:	d107      	bne.n	8006110 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006100:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006104:	694d      	ldr	r5, [r1, #20]
 8006106:	ea45 0c02 	orr.w	ip, r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800610a:	698a      	ldr	r2, [r1, #24]
 800610c:	ea42 020c 	orr.w	r2, r2, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006110:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006112:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006114:	684a      	ldr	r2, [r1, #4]
 8006116:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006118:	6203      	str	r3, [r0, #32]
}
 800611a:	bc30      	pop	{r4, r5}
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	40012c00 	.word	0x40012c00

08006124 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006124:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006126:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006128:	6a02      	ldr	r2, [r0, #32]
 800612a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800612e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006130:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006132:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006134:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006138:	680c      	ldr	r4, [r1, #0]
 800613a:	ea44 050c 	orr.w	r5, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800613e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006142:	688c      	ldr	r4, [r1, #8]
 8006144:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006148:	4c11      	ldr	r4, [pc, #68]	@ (8006190 <TIM_OC3_SetConfig+0x6c>)
 800614a:	42a0      	cmp	r0, r4
 800614c:	d003      	beq.n	8006156 <TIM_OC3_SetConfig+0x32>
 800614e:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8006152:	42a0      	cmp	r0, r4
 8006154:	d106      	bne.n	8006164 <TIM_OC3_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006156:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800615a:	68cc      	ldr	r4, [r1, #12]
 800615c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006160:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006164:	4c0a      	ldr	r4, [pc, #40]	@ (8006190 <TIM_OC3_SetConfig+0x6c>)
 8006166:	42a0      	cmp	r0, r4
 8006168:	d003      	beq.n	8006172 <TIM_OC3_SetConfig+0x4e>
 800616a:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 800616e:	42a0      	cmp	r0, r4
 8006170:	d107      	bne.n	8006182 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006172:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006176:	694c      	ldr	r4, [r1, #20]
 8006178:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800617c:	698c      	ldr	r4, [r1, #24]
 800617e:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006182:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006184:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006186:	684a      	ldr	r2, [r1, #4]
 8006188:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800618a:	6203      	str	r3, [r0, #32]
}
 800618c:	bc30      	pop	{r4, r5}
 800618e:	4770      	bx	lr
 8006190:	40012c00 	.word	0x40012c00

08006194 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006194:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006196:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006198:	6a02      	ldr	r2, [r0, #32]
 800619a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800619e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061a2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061a4:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a8:	680d      	ldr	r5, [r1, #0]
 80061aa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061b2:	688d      	ldr	r5, [r1, #8]
 80061b4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b8:	4d09      	ldr	r5, [pc, #36]	@ (80061e0 <TIM_OC4_SetConfig+0x4c>)
 80061ba:	42a8      	cmp	r0, r5
 80061bc:	d003      	beq.n	80061c6 <TIM_OC4_SetConfig+0x32>
 80061be:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80061c2:	42a8      	cmp	r0, r5
 80061c4:	d104      	bne.n	80061d0 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061c6:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061ca:	694d      	ldr	r5, [r1, #20]
 80061cc:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061d2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061d4:	684a      	ldr	r2, [r1, #4]
 80061d6:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d8:	6203      	str	r3, [r0, #32]
}
 80061da:	bc30      	pop	{r4, r5}
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	40012c00 	.word	0x40012c00

080061e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061e4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061e6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061e8:	6a04      	ldr	r4, [r0, #32]
 80061ea:	f024 0401 	bic.w	r4, r4, #1
 80061ee:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061f0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061f2:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061f6:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061fa:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80061fe:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006200:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006202:	6203      	str	r3, [r0, #32]
}
 8006204:	bc10      	pop	{r4}
 8006206:	4770      	bx	lr

08006208 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006208:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800620a:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800620c:	6a04      	ldr	r4, [r0, #32]
 800620e:	f024 0410 	bic.w	r4, r4, #16
 8006212:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006214:	6984      	ldr	r4, [r0, #24]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006216:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800621a:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800621e:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006222:	031b      	lsls	r3, r3, #12
 8006224:	b29b      	uxth	r3, r3
 8006226:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800622a:	f025 05a0 	bic.w	r5, r5, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800622e:	0109      	lsls	r1, r1, #4
 8006230:	f001 01a0 	and.w	r1, r1, #160	@ 0xa0
 8006234:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006236:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006238:	6201      	str	r1, [r0, #32]
}
 800623a:	bc30      	pop	{r4, r5}
 800623c:	4770      	bx	lr

0800623e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800623e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006240:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006242:	6a04      	ldr	r4, [r0, #32]
 8006244:	f024 0410 	bic.w	r4, r4, #16
 8006248:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800624a:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800624c:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006250:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006254:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006258:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800625c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800625e:	6203      	str	r3, [r0, #32]
}
 8006260:	bc10      	pop	{r4}
 8006262:	4770      	bx	lr

08006264 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006264:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006266:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006268:	6a04      	ldr	r4, [r0, #32]
 800626a:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 800626e:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006270:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006272:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8006276:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800627a:	f02c 0cf0 	bic.w	ip, ip, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800627e:	011b      	lsls	r3, r3, #4
 8006280:	b2db      	uxtb	r3, r3
 8006282:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006286:	f425 7500 	bic.w	r5, r5, #512	@ 0x200
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800628a:	0209      	lsls	r1, r1, #8
 800628c:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8006290:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006292:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8006294:	6201      	str	r1, [r0, #32]
}
 8006296:	bc30      	pop	{r4, r5}
 8006298:	4770      	bx	lr

0800629a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800629a:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800629c:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800629e:	6a04      	ldr	r4, [r0, #32]
 80062a0:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 80062a4:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062a6:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80062a8:	f424 7c40 	bic.w	ip, r4, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80062ac:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80062b0:	f42c 4c70 	bic.w	ip, ip, #61440	@ 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80062b4:	031b      	lsls	r3, r3, #12
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80062bc:	f425 5500 	bic.w	r5, r5, #8192	@ 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80062c0:	0309      	lsls	r1, r1, #12
 80062c2:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 80062c6:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062c8:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 80062ca:	6201      	str	r1, [r0, #32]
}
 80062cc:	bc30      	pop	{r4, r5}
 80062ce:	4770      	bx	lr

080062d0 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062d0:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062d6:	430b      	orrs	r3, r1
 80062d8:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062dc:	6083      	str	r3, [r0, #8]
}
 80062de:	4770      	bx	lr
}
 80062e0:	4770      	bx	lr
}
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIM_Base_DeInit>:
{
 80062e4:	b510      	push	{r4, lr}
 80062e6:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80062e8:	2302      	movs	r3, #2
 80062ea:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_DISABLE(htim);
 80062ee:	6803      	ldr	r3, [r0, #0]
 80062f0:	6a19      	ldr	r1, [r3, #32]
 80062f2:	f241 1211 	movw	r2, #4369	@ 0x1111
 80062f6:	4211      	tst	r1, r2
 80062f8:	d108      	bne.n	800630c <HAL_TIM_Base_DeInit+0x28>
 80062fa:	6a19      	ldr	r1, [r3, #32]
 80062fc:	f240 4244 	movw	r2, #1092	@ 0x444
 8006300:	4211      	tst	r1, r2
 8006302:	d103      	bne.n	800630c <HAL_TIM_Base_DeInit+0x28>
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	f022 0201 	bic.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 800630c:	4620      	mov	r0, r4
 800630e:	f7fc fec5 	bl	800309c <HAL_TIM_Base_MspDeInit>
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8006312:	2000      	movs	r0, #0
 8006314:	f884 0046 	strb.w	r0, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8006318:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
 800631c:	f884 003f 	strb.w	r0, [r4, #63]	@ 0x3f
 8006320:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
 8006324:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8006328:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
 800632c:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 8006330:	f884 0044 	strb.w	r0, [r4, #68]	@ 0x44
 8006334:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_RESET;
 8006338:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800633c:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8006340:	bd10      	pop	{r4, pc}
	...

08006344 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006344:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b01      	cmp	r3, #1
 800634c:	d12a      	bne.n	80063a4 <HAL_TIM_Base_Start+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 800634e:	2302      	movs	r3, #2
 8006350:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006354:	6803      	ldr	r3, [r0, #0]
 8006356:	4a15      	ldr	r2, [pc, #84]	@ (80063ac <HAL_TIM_Base_Start+0x68>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d018      	beq.n	800638e <HAL_TIM_Base_Start+0x4a>
 800635c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006360:	4293      	cmp	r3, r2
 8006362:	d014      	beq.n	800638e <HAL_TIM_Base_Start+0x4a>
 8006364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006368:	d011      	beq.n	800638e <HAL_TIM_Base_Start+0x4a>
 800636a:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800636e:	4293      	cmp	r3, r2
 8006370:	d00d      	beq.n	800638e <HAL_TIM_Base_Start+0x4a>
 8006372:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006376:	4293      	cmp	r3, r2
 8006378:	d009      	beq.n	800638e <HAL_TIM_Base_Start+0x4a>
 800637a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800637e:	4293      	cmp	r3, r2
 8006380:	d005      	beq.n	800638e <HAL_TIM_Base_Start+0x4a>
    __HAL_TIM_ENABLE(htim);
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	f042 0201 	orr.w	r2, r2, #1
 8006388:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800638a:	2000      	movs	r0, #0
 800638c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006394:	2a06      	cmp	r2, #6
 8006396:	d007      	beq.n	80063a8 <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	f042 0201 	orr.w	r2, r2, #1
 800639e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80063a0:	2000      	movs	r0, #0
 80063a2:	4770      	bx	lr
    return HAL_ERROR;
 80063a4:	2001      	movs	r0, #1
 80063a6:	4770      	bx	lr
  return HAL_OK;
 80063a8:	2000      	movs	r0, #0
}
 80063aa:	4770      	bx	lr
 80063ac:	40012c00 	.word	0x40012c00

080063b0 <HAL_TIM_Base_Stop>:
  __HAL_TIM_DISABLE(htim);
 80063b0:	6803      	ldr	r3, [r0, #0]
 80063b2:	6a19      	ldr	r1, [r3, #32]
 80063b4:	f241 1211 	movw	r2, #4369	@ 0x1111
 80063b8:	4211      	tst	r1, r2
 80063ba:	d108      	bne.n	80063ce <HAL_TIM_Base_Stop+0x1e>
 80063bc:	6a19      	ldr	r1, [r3, #32]
 80063be:	f240 4244 	movw	r2, #1092	@ 0x444
 80063c2:	4211      	tst	r1, r2
 80063c4:	d103      	bne.n	80063ce <HAL_TIM_Base_Stop+0x1e>
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	f022 0201 	bic.w	r2, r2, #1
 80063cc:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80063ce:	2301      	movs	r3, #1
 80063d0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 80063d4:	2000      	movs	r0, #0
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80063d8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d12f      	bne.n	8006442 <HAL_TIM_Base_Start_IT+0x6a>
  htim->State = HAL_TIM_STATE_BUSY;
 80063e2:	2302      	movs	r3, #2
 80063e4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063e8:	6802      	ldr	r2, [r0, #0]
 80063ea:	68d3      	ldr	r3, [r2, #12]
 80063ec:	f043 0301 	orr.w	r3, r3, #1
 80063f0:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f2:	6803      	ldr	r3, [r0, #0]
 80063f4:	4a15      	ldr	r2, [pc, #84]	@ (800644c <HAL_TIM_Base_Start_IT+0x74>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d018      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x54>
 80063fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063fe:	4293      	cmp	r3, r2
 8006400:	d014      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x54>
 8006402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006406:	d011      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x54>
 8006408:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800640c:	4293      	cmp	r3, r2
 800640e:	d00d      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x54>
 8006410:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006414:	4293      	cmp	r3, r2
 8006416:	d009      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x54>
 8006418:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800641c:	4293      	cmp	r3, r2
 800641e:	d005      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006428:	2000      	movs	r0, #0
 800642a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006432:	2a06      	cmp	r2, #6
 8006434:	d007      	beq.n	8006446 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	f042 0201 	orr.w	r2, r2, #1
 800643c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800643e:	2000      	movs	r0, #0
 8006440:	4770      	bx	lr
    return HAL_ERROR;
 8006442:	2001      	movs	r0, #1
 8006444:	4770      	bx	lr
  return HAL_OK;
 8006446:	2000      	movs	r0, #0
}
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40012c00 	.word	0x40012c00

08006450 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006450:	6802      	ldr	r2, [r0, #0]
 8006452:	68d3      	ldr	r3, [r2, #12]
 8006454:	f023 0301 	bic.w	r3, r3, #1
 8006458:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800645a:	6803      	ldr	r3, [r0, #0]
 800645c:	6a19      	ldr	r1, [r3, #32]
 800645e:	f241 1211 	movw	r2, #4369	@ 0x1111
 8006462:	4211      	tst	r1, r2
 8006464:	d108      	bne.n	8006478 <HAL_TIM_Base_Stop_IT+0x28>
 8006466:	6a19      	ldr	r1, [r3, #32]
 8006468:	f240 4244 	movw	r2, #1092	@ 0x444
 800646c:	4211      	tst	r1, r2
 800646e:	d103      	bne.n	8006478 <HAL_TIM_Base_Stop_IT+0x28>
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	f022 0201 	bic.w	r2, r2, #1
 8006476:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8006478:	2301      	movs	r3, #1
 800647a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 800647e:	2000      	movs	r0, #0
 8006480:	4770      	bx	lr
	...

08006484 <HAL_TIM_Base_Start_DMA>:
{
 8006484:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_BUSY)
 8006486:	f890 403d 	ldrb.w	r4, [r0, #61]	@ 0x3d
 800648a:	b2e4      	uxtb	r4, r4
 800648c:	2c02      	cmp	r4, #2
 800648e:	d04c      	beq.n	800652a <HAL_TIM_Base_Start_DMA+0xa6>
 8006490:	4605      	mov	r5, r0
  else if (htim->State == HAL_TIM_STATE_READY)
 8006492:	f890 403d 	ldrb.w	r4, [r0, #61]	@ 0x3d
 8006496:	b2e4      	uxtb	r4, r4
 8006498:	2c01      	cmp	r4, #1
 800649a:	d145      	bne.n	8006528 <HAL_TIM_Base_Start_DMA+0xa4>
    if ((pData == NULL) || (Length == 0U))
 800649c:	2900      	cmp	r1, #0
 800649e:	d044      	beq.n	800652a <HAL_TIM_Base_Start_DMA+0xa6>
 80064a0:	2a00      	cmp	r2, #0
 80064a2:	d042      	beq.n	800652a <HAL_TIM_Base_Start_DMA+0xa6>
      htim->State = HAL_TIM_STATE_BUSY;
 80064a4:	2302      	movs	r3, #2
 80064a6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 80064aa:	6a03      	ldr	r3, [r0, #32]
 80064ac:	4821      	ldr	r0, [pc, #132]	@ (8006534 <HAL_TIM_Base_Start_DMA+0xb0>)
 80064ae:	6298      	str	r0, [r3, #40]	@ 0x28
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 80064b0:	6a2b      	ldr	r3, [r5, #32]
 80064b2:	4821      	ldr	r0, [pc, #132]	@ (8006538 <HAL_TIM_Base_Start_DMA+0xb4>)
 80064b4:	62d8      	str	r0, [r3, #44]	@ 0x2c
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 80064b6:	6a2b      	ldr	r3, [r5, #32]
 80064b8:	4820      	ldr	r0, [pc, #128]	@ (800653c <HAL_TIM_Base_Start_DMA+0xb8>)
 80064ba:	6318      	str	r0, [r3, #48]	@ 0x30
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR,
 80064bc:	6828      	ldr	r0, [r5, #0]
 80064be:	4613      	mov	r3, r2
 80064c0:	f100 022c 	add.w	r2, r0, #44	@ 0x2c
 80064c4:	6a28      	ldr	r0, [r5, #32]
 80064c6:	f7fd fa32 	bl	800392e <HAL_DMA_Start_IT>
 80064ca:	4601      	mov	r1, r0
 80064cc:	bb68      	cbnz	r0, 800652a <HAL_TIM_Base_Start_DMA+0xa6>
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 80064ce:	682a      	ldr	r2, [r5, #0]
 80064d0:	68d3      	ldr	r3, [r2, #12]
 80064d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064d6:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d8:	682b      	ldr	r3, [r5, #0]
 80064da:	4a19      	ldr	r2, [pc, #100]	@ (8006540 <HAL_TIM_Base_Start_DMA+0xbc>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d018      	beq.n	8006512 <HAL_TIM_Base_Start_DMA+0x8e>
 80064e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d014      	beq.n	8006512 <HAL_TIM_Base_Start_DMA+0x8e>
 80064e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ec:	d011      	beq.n	8006512 <HAL_TIM_Base_Start_DMA+0x8e>
 80064ee:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00d      	beq.n	8006512 <HAL_TIM_Base_Start_DMA+0x8e>
 80064f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d009      	beq.n	8006512 <HAL_TIM_Base_Start_DMA+0x8e>
 80064fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006502:	4293      	cmp	r3, r2
 8006504:	d005      	beq.n	8006512 <HAL_TIM_Base_Start_DMA+0x8e>
    __HAL_TIM_ENABLE(htim);
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	f042 0201 	orr.w	r2, r2, #1
 800650c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800650e:	4604      	mov	r4, r0
 8006510:	e00b      	b.n	800652a <HAL_TIM_Base_Start_DMA+0xa6>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006518:	2a06      	cmp	r2, #6
 800651a:	d008      	beq.n	800652e <HAL_TIM_Base_Start_DMA+0xaa>
      __HAL_TIM_ENABLE(htim);
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006524:	460c      	mov	r4, r1
 8006526:	e000      	b.n	800652a <HAL_TIM_Base_Start_DMA+0xa6>
    return HAL_ERROR;
 8006528:	2401      	movs	r4, #1
}
 800652a:	4620      	mov	r0, r4
 800652c:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800652e:	460c      	mov	r4, r1
 8006530:	e7fb      	b.n	800652a <HAL_TIM_Base_Start_DMA+0xa6>
 8006532:	bf00      	nop
 8006534:	08006c41 	.word	0x08006c41
 8006538:	08006c59 	.word	0x08006c59
 800653c:	08006f5d 	.word	0x08006f5d
 8006540:	40012c00 	.word	0x40012c00

08006544 <HAL_TIM_Base_Stop_DMA>:
{
 8006544:	b510      	push	{r4, lr}
 8006546:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 8006548:	6802      	ldr	r2, [r0, #0]
 800654a:	68d3      	ldr	r3, [r2, #12]
 800654c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006550:	60d3      	str	r3, [r2, #12]
  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 8006552:	6a00      	ldr	r0, [r0, #32]
 8006554:	f7fd fa4a 	bl	80039ec <HAL_DMA_Abort_IT>
  __HAL_TIM_DISABLE(htim);
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	6a19      	ldr	r1, [r3, #32]
 800655c:	f241 1211 	movw	r2, #4369	@ 0x1111
 8006560:	4211      	tst	r1, r2
 8006562:	d108      	bne.n	8006576 <HAL_TIM_Base_Stop_DMA+0x32>
 8006564:	6a19      	ldr	r1, [r3, #32]
 8006566:	f240 4244 	movw	r2, #1092	@ 0x444
 800656a:	4211      	tst	r1, r2
 800656c:	d103      	bne.n	8006576 <HAL_TIM_Base_Stop_DMA+0x32>
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	f022 0201 	bic.w	r2, r2, #1
 8006574:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8006576:	2301      	movs	r3, #1
 8006578:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800657c:	2000      	movs	r0, #0
 800657e:	bd10      	pop	{r4, pc}

08006580 <HAL_TIM_OC_MspInit>:
}
 8006580:	4770      	bx	lr

08006582 <HAL_TIM_OC_MspDeInit>:
}
 8006582:	4770      	bx	lr

08006584 <HAL_TIM_OC_DeInit>:
{
 8006584:	b510      	push	{r4, lr}
 8006586:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	2302      	movs	r3, #2
 800658a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_DISABLE(htim);
 800658e:	6803      	ldr	r3, [r0, #0]
 8006590:	6a19      	ldr	r1, [r3, #32]
 8006592:	f241 1211 	movw	r2, #4369	@ 0x1111
 8006596:	4211      	tst	r1, r2
 8006598:	d108      	bne.n	80065ac <HAL_TIM_OC_DeInit+0x28>
 800659a:	6a19      	ldr	r1, [r3, #32]
 800659c:	f240 4244 	movw	r2, #1092	@ 0x444
 80065a0:	4211      	tst	r1, r2
 80065a2:	d103      	bne.n	80065ac <HAL_TIM_OC_DeInit+0x28>
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	f022 0201 	bic.w	r2, r2, #1
 80065aa:	601a      	str	r2, [r3, #0]
  HAL_TIM_OC_MspDeInit(htim);
 80065ac:	4620      	mov	r0, r4
 80065ae:	f7ff ffe8 	bl	8006582 <HAL_TIM_OC_MspDeInit>
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80065b2:	2000      	movs	r0, #0
 80065b4:	f884 0046 	strb.w	r0, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80065b8:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
 80065bc:	f884 003f 	strb.w	r0, [r4, #63]	@ 0x3f
 80065c0:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
 80065c4:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80065c8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
 80065cc:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 80065d0:	f884 0044 	strb.w	r0, [r4, #68]	@ 0x44
 80065d4:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_RESET;
 80065d8:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80065dc:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 80065e0:	bd10      	pop	{r4, pc}

080065e2 <HAL_TIM_PWM_MspInit>:
}
 80065e2:	4770      	bx	lr

080065e4 <HAL_TIM_PWM_MspDeInit>:
}
 80065e4:	4770      	bx	lr

080065e6 <HAL_TIM_PWM_DeInit>:
{
 80065e6:	b510      	push	{r4, lr}
 80065e8:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80065ea:	2302      	movs	r3, #2
 80065ec:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_DISABLE(htim);
 80065f0:	6803      	ldr	r3, [r0, #0]
 80065f2:	6a19      	ldr	r1, [r3, #32]
 80065f4:	f241 1211 	movw	r2, #4369	@ 0x1111
 80065f8:	4211      	tst	r1, r2
 80065fa:	d108      	bne.n	800660e <HAL_TIM_PWM_DeInit+0x28>
 80065fc:	6a19      	ldr	r1, [r3, #32]
 80065fe:	f240 4244 	movw	r2, #1092	@ 0x444
 8006602:	4211      	tst	r1, r2
 8006604:	d103      	bne.n	800660e <HAL_TIM_PWM_DeInit+0x28>
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	f022 0201 	bic.w	r2, r2, #1
 800660c:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 800660e:	4620      	mov	r0, r4
 8006610:	f7ff ffe8 	bl	80065e4 <HAL_TIM_PWM_MspDeInit>
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8006614:	2000      	movs	r0, #0
 8006616:	f884 0046 	strb.w	r0, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800661a:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
 800661e:	f884 003f 	strb.w	r0, [r4, #63]	@ 0x3f
 8006622:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
 8006626:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800662a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
 800662e:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 8006632:	f884 0044 	strb.w	r0, [r4, #68]	@ 0x44
 8006636:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_RESET;
 800663a:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800663e:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8006642:	bd10      	pop	{r4, pc}

08006644 <HAL_TIM_IC_MspInit>:
}
 8006644:	4770      	bx	lr

08006646 <HAL_TIM_IC_MspDeInit>:
}
 8006646:	4770      	bx	lr

08006648 <HAL_TIM_IC_DeInit>:
{
 8006648:	b510      	push	{r4, lr}
 800664a:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800664c:	2302      	movs	r3, #2
 800664e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_DISABLE(htim);
 8006652:	6803      	ldr	r3, [r0, #0]
 8006654:	6a19      	ldr	r1, [r3, #32]
 8006656:	f241 1211 	movw	r2, #4369	@ 0x1111
 800665a:	4211      	tst	r1, r2
 800665c:	d108      	bne.n	8006670 <HAL_TIM_IC_DeInit+0x28>
 800665e:	6a19      	ldr	r1, [r3, #32]
 8006660:	f240 4244 	movw	r2, #1092	@ 0x444
 8006664:	4211      	tst	r1, r2
 8006666:	d103      	bne.n	8006670 <HAL_TIM_IC_DeInit+0x28>
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	f022 0201 	bic.w	r2, r2, #1
 800666e:	601a      	str	r2, [r3, #0]
  HAL_TIM_IC_MspDeInit(htim);
 8006670:	4620      	mov	r0, r4
 8006672:	f7ff ffe8 	bl	8006646 <HAL_TIM_IC_MspDeInit>
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8006676:	2000      	movs	r0, #0
 8006678:	f884 0046 	strb.w	r0, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800667c:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
 8006680:	f884 003f 	strb.w	r0, [r4, #63]	@ 0x3f
 8006684:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
 8006688:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800668c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
 8006690:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 8006694:	f884 0044 	strb.w	r0, [r4, #68]	@ 0x44
 8006698:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_RESET;
 800669c:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80066a0:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 80066a4:	bd10      	pop	{r4, pc}

080066a6 <HAL_TIM_OnePulse_MspInit>:
}
 80066a6:	4770      	bx	lr

080066a8 <HAL_TIM_OnePulse_MspDeInit>:
}
 80066a8:	4770      	bx	lr

080066aa <HAL_TIM_OnePulse_DeInit>:
{
 80066aa:	b510      	push	{r4, lr}
 80066ac:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80066ae:	2302      	movs	r3, #2
 80066b0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_DISABLE(htim);
 80066b4:	6803      	ldr	r3, [r0, #0]
 80066b6:	6a19      	ldr	r1, [r3, #32]
 80066b8:	f241 1211 	movw	r2, #4369	@ 0x1111
 80066bc:	4211      	tst	r1, r2
 80066be:	d108      	bne.n	80066d2 <HAL_TIM_OnePulse_DeInit+0x28>
 80066c0:	6a19      	ldr	r1, [r3, #32]
 80066c2:	f240 4244 	movw	r2, #1092	@ 0x444
 80066c6:	4211      	tst	r1, r2
 80066c8:	d103      	bne.n	80066d2 <HAL_TIM_OnePulse_DeInit+0x28>
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	f022 0201 	bic.w	r2, r2, #1
 80066d0:	601a      	str	r2, [r3, #0]
  HAL_TIM_OnePulse_MspDeInit(htim);
 80066d2:	4620      	mov	r0, r4
 80066d4:	f7ff ffe8 	bl	80066a8 <HAL_TIM_OnePulse_MspDeInit>
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80066d8:	2000      	movs	r0, #0
 80066da:	f884 0046 	strb.w	r0, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 80066de:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 80066e2:	f884 003f 	strb.w	r0, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 80066e6:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 80066ea:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_RESET;
 80066ee:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80066f2:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 80066f6:	bd10      	pop	{r4, pc}
}
 80066f8:	4770      	bx	lr
}
 80066fa:	4770      	bx	lr

080066fc <HAL_TIM_Encoder_DeInit>:
{
 80066fc:	b510      	push	{r4, lr}
 80066fe:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8006700:	2302      	movs	r3, #2
 8006702:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_DISABLE(htim);
 8006706:	6803      	ldr	r3, [r0, #0]
 8006708:	6a19      	ldr	r1, [r3, #32]
 800670a:	f241 1211 	movw	r2, #4369	@ 0x1111
 800670e:	4211      	tst	r1, r2
 8006710:	d108      	bne.n	8006724 <HAL_TIM_Encoder_DeInit+0x28>
 8006712:	6a19      	ldr	r1, [r3, #32]
 8006714:	f240 4244 	movw	r2, #1092	@ 0x444
 8006718:	4211      	tst	r1, r2
 800671a:	d103      	bne.n	8006724 <HAL_TIM_Encoder_DeInit+0x28>
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	f022 0201 	bic.w	r2, r2, #1
 8006722:	601a      	str	r2, [r3, #0]
  HAL_TIM_Encoder_MspDeInit(htim);
 8006724:	4620      	mov	r0, r4
 8006726:	f7fc fcd3 	bl	80030d0 <HAL_TIM_Encoder_MspDeInit>
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800672a:	2000      	movs	r0, #0
 800672c:	f884 0046 	strb.w	r0, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8006730:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 8006734:	f884 003f 	strb.w	r0, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8006738:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 800673c:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_RESET;
 8006740:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006744:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8006748:	bd10      	pop	{r4, pc}
	...

0800674c <HAL_TIM_DMABurst_MultiWriteStart>:
{
 800674c:	b570      	push	{r4, r5, r6, lr}
 800674e:	4605      	mov	r5, r0
  if (htim->DMABurstState == HAL_DMA_BURST_STATE_BUSY)
 8006750:	f890 0046 	ldrb.w	r0, [r0, #70]	@ 0x46
 8006754:	b2c0      	uxtb	r0, r0
 8006756:	2802      	cmp	r0, #2
 8006758:	d04a      	beq.n	80067f0 <HAL_TIM_DMABurst_MultiWriteStart+0xa4>
 800675a:	460e      	mov	r6, r1
 800675c:	4614      	mov	r4, r2
 800675e:	4619      	mov	r1, r3
  else if (htim->DMABurstState == HAL_DMA_BURST_STATE_READY)
 8006760:	f895 0046 	ldrb.w	r0, [r5, #70]	@ 0x46
 8006764:	b2c0      	uxtb	r0, r0
 8006766:	2801      	cmp	r0, #1
 8006768:	d01c      	beq.n	80067a4 <HAL_TIM_DMABurst_MultiWriteStart+0x58>
  switch (BurstRequestSrc)
 800676a:	f5b4 6f00 	cmp.w	r4, #2048	@ 0x800
 800676e:	f000 8086 	beq.w	800687e <HAL_TIM_DMABurst_MultiWriteStart+0x132>
 8006772:	d840      	bhi.n	80067f6 <HAL_TIM_DMABurst_MultiWriteStart+0xaa>
 8006774:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8006778:	d06e      	beq.n	8006858 <HAL_TIM_DMABurst_MultiWriteStart+0x10c>
 800677a:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 800677e:	d11a      	bne.n	80067b6 <HAL_TIM_DMABurst_MultiWriteStart+0x6a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006780:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8006782:	4a53      	ldr	r2, [pc, #332]	@ (80068d0 <HAL_TIM_DMABurst_MultiWriteStart+0x184>)
 8006784:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006786:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8006788:	4a52      	ldr	r2, [pc, #328]	@ (80068d4 <HAL_TIM_DMABurst_MultiWriteStart+0x188>)
 800678a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800678c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800678e:	4a52      	ldr	r2, [pc, #328]	@ (80068d8 <HAL_TIM_DMABurst_MultiWriteStart+0x18c>)
 8006790:	631a      	str	r2, [r3, #48]	@ 0x30
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8006792:	682a      	ldr	r2, [r5, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 8006794:	9b05      	ldr	r3, [sp, #20]
 8006796:	324c      	adds	r2, #76	@ 0x4c
 8006798:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800679a:	f7fd f8c8 	bl	800392e <HAL_DMA_Start_IT>
 800679e:	b1f0      	cbz	r0, 80067de <HAL_TIM_DMABurst_MultiWriteStart+0x92>
        return HAL_ERROR;
 80067a0:	2001      	movs	r0, #1
 80067a2:	e025      	b.n	80067f0 <HAL_TIM_DMABurst_MultiWriteStart+0xa4>
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 80067a4:	b11b      	cbz	r3, 80067ae <HAL_TIM_DMABurst_MultiWriteStart+0x62>
      htim->DMABurstState = HAL_DMA_BURST_STATE_BUSY;
 80067a6:	2302      	movs	r3, #2
 80067a8:	f885 3046 	strb.w	r3, [r5, #70]	@ 0x46
 80067ac:	e7dd      	b.n	800676a <HAL_TIM_DMABurst_MultiWriteStart+0x1e>
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 80067ae:	9b04      	ldr	r3, [sp, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d0f8      	beq.n	80067a6 <HAL_TIM_DMABurst_MultiWriteStart+0x5a>
 80067b4:	e01c      	b.n	80067f0 <HAL_TIM_DMABurst_MultiWriteStart+0xa4>
  switch (BurstRequestSrc)
 80067b6:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 80067ba:	d11a      	bne.n	80067f2 <HAL_TIM_DMABurst_MultiWriteStart+0xa6>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 80067bc:	6a2b      	ldr	r3, [r5, #32]
 80067be:	4a47      	ldr	r2, [pc, #284]	@ (80068dc <HAL_TIM_DMABurst_MultiWriteStart+0x190>)
 80067c0:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 80067c2:	6a2b      	ldr	r3, [r5, #32]
 80067c4:	4a46      	ldr	r2, [pc, #280]	@ (80068e0 <HAL_TIM_DMABurst_MultiWriteStart+0x194>)
 80067c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 80067c8:	6a2b      	ldr	r3, [r5, #32]
 80067ca:	4a43      	ldr	r2, [pc, #268]	@ (80068d8 <HAL_TIM_DMABurst_MultiWriteStart+0x18c>)
 80067cc:	631a      	str	r2, [r3, #48]	@ 0x30
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 80067ce:	682a      	ldr	r2, [r5, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer,
 80067d0:	9b05      	ldr	r3, [sp, #20]
 80067d2:	324c      	adds	r2, #76	@ 0x4c
 80067d4:	6a28      	ldr	r0, [r5, #32]
 80067d6:	f7fd f8aa 	bl	800392e <HAL_DMA_Start_IT>
 80067da:	2800      	cmp	r0, #0
 80067dc:	d175      	bne.n	80068ca <HAL_TIM_DMABurst_MultiWriteStart+0x17e>
    htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 80067de:	682b      	ldr	r3, [r5, #0]
 80067e0:	9a04      	ldr	r2, [sp, #16]
 80067e2:	4316      	orrs	r6, r2
 80067e4:	649e      	str	r6, [r3, #72]	@ 0x48
    __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 80067e6:	682a      	ldr	r2, [r5, #0]
 80067e8:	68d3      	ldr	r3, [r2, #12]
 80067ea:	4323      	orrs	r3, r4
 80067ec:	60d3      	str	r3, [r2, #12]
 80067ee:	2000      	movs	r0, #0
}
 80067f0:	bd70      	pop	{r4, r5, r6, pc}
  switch (BurstRequestSrc)
 80067f2:	2001      	movs	r0, #1
 80067f4:	e7fc      	b.n	80067f0 <HAL_TIM_DMABurst_MultiWriteStart+0xa4>
 80067f6:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 80067fa:	d053      	beq.n	80068a4 <HAL_TIM_DMABurst_MultiWriteStart+0x158>
 80067fc:	f5b4 4f80 	cmp.w	r4, #16384	@ 0x4000
 8006800:	d112      	bne.n	8006828 <HAL_TIM_DMABurst_MultiWriteStart+0xdc>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8006802:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8006804:	4a37      	ldr	r2, [pc, #220]	@ (80068e4 <HAL_TIM_DMABurst_MultiWriteStart+0x198>)
 8006806:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 8006808:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800680a:	4a37      	ldr	r2, [pc, #220]	@ (80068e8 <HAL_TIM_DMABurst_MultiWriteStart+0x19c>)
 800680c:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800680e:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8006810:	4a31      	ldr	r2, [pc, #196]	@ (80068d8 <HAL_TIM_DMABurst_MultiWriteStart+0x18c>)
 8006812:	631a      	str	r2, [r3, #48]	@ 0x30
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8006814:	682a      	ldr	r2, [r5, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 8006816:	9b05      	ldr	r3, [sp, #20]
 8006818:	324c      	adds	r2, #76	@ 0x4c
 800681a:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800681c:	f7fd f887 	bl	800392e <HAL_DMA_Start_IT>
 8006820:	2800      	cmp	r0, #0
 8006822:	d0dc      	beq.n	80067de <HAL_TIM_DMABurst_MultiWriteStart+0x92>
        return HAL_ERROR;
 8006824:	2001      	movs	r0, #1
 8006826:	e7e3      	b.n	80067f0 <HAL_TIM_DMABurst_MultiWriteStart+0xa4>
  switch (BurstRequestSrc)
 8006828:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 800682c:	d112      	bne.n	8006854 <HAL_TIM_DMABurst_MultiWriteStart+0x108>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800682e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006830:	4a27      	ldr	r2, [pc, #156]	@ (80068d0 <HAL_TIM_DMABurst_MultiWriteStart+0x184>)
 8006832:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006834:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006836:	4a27      	ldr	r2, [pc, #156]	@ (80068d4 <HAL_TIM_DMABurst_MultiWriteStart+0x188>)
 8006838:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800683a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800683c:	4a26      	ldr	r2, [pc, #152]	@ (80068d8 <HAL_TIM_DMABurst_MultiWriteStart+0x18c>)
 800683e:	631a      	str	r2, [r3, #48]	@ 0x30
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8006840:	682a      	ldr	r2, [r5, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 8006842:	9b05      	ldr	r3, [sp, #20]
 8006844:	324c      	adds	r2, #76	@ 0x4c
 8006846:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8006848:	f7fd f871 	bl	800392e <HAL_DMA_Start_IT>
 800684c:	2800      	cmp	r0, #0
 800684e:	d0c6      	beq.n	80067de <HAL_TIM_DMABurst_MultiWriteStart+0x92>
        return HAL_ERROR;
 8006850:	2001      	movs	r0, #1
 8006852:	e7cd      	b.n	80067f0 <HAL_TIM_DMABurst_MultiWriteStart+0xa4>
  switch (BurstRequestSrc)
 8006854:	2001      	movs	r0, #1
 8006856:	e7cb      	b.n	80067f0 <HAL_TIM_DMABurst_MultiWriteStart+0xa4>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006858:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800685a:	4a1d      	ldr	r2, [pc, #116]	@ (80068d0 <HAL_TIM_DMABurst_MultiWriteStart+0x184>)
 800685c:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800685e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8006860:	4a1c      	ldr	r2, [pc, #112]	@ (80068d4 <HAL_TIM_DMABurst_MultiWriteStart+0x188>)
 8006862:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006864:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8006866:	4a1c      	ldr	r2, [pc, #112]	@ (80068d8 <HAL_TIM_DMABurst_MultiWriteStart+0x18c>)
 8006868:	631a      	str	r2, [r3, #48]	@ 0x30
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 800686a:	682a      	ldr	r2, [r5, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 800686c:	9b05      	ldr	r3, [sp, #20]
 800686e:	324c      	adds	r2, #76	@ 0x4c
 8006870:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8006872:	f7fd f85c 	bl	800392e <HAL_DMA_Start_IT>
 8006876:	2800      	cmp	r0, #0
 8006878:	d0b1      	beq.n	80067de <HAL_TIM_DMABurst_MultiWriteStart+0x92>
        return HAL_ERROR;
 800687a:	2001      	movs	r0, #1
 800687c:	e7b8      	b.n	80067f0 <HAL_TIM_DMABurst_MultiWriteStart+0xa4>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800687e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006880:	4a13      	ldr	r2, [pc, #76]	@ (80068d0 <HAL_TIM_DMABurst_MultiWriteStart+0x184>)
 8006882:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006884:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006886:	4a13      	ldr	r2, [pc, #76]	@ (80068d4 <HAL_TIM_DMABurst_MultiWriteStart+0x188>)
 8006888:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800688a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800688c:	4a12      	ldr	r2, [pc, #72]	@ (80068d8 <HAL_TIM_DMABurst_MultiWriteStart+0x18c>)
 800688e:	631a      	str	r2, [r3, #48]	@ 0x30
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8006890:	682a      	ldr	r2, [r5, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 8006892:	9b05      	ldr	r3, [sp, #20]
 8006894:	324c      	adds	r2, #76	@ 0x4c
 8006896:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8006898:	f7fd f849 	bl	800392e <HAL_DMA_Start_IT>
 800689c:	2800      	cmp	r0, #0
 800689e:	d09e      	beq.n	80067de <HAL_TIM_DMABurst_MultiWriteStart+0x92>
        return HAL_ERROR;
 80068a0:	2001      	movs	r0, #1
 80068a2:	e7a5      	b.n	80067f0 <HAL_TIM_DMABurst_MultiWriteStart+0xa4>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 80068a4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80068a6:	4a11      	ldr	r2, [pc, #68]	@ (80068ec <HAL_TIM_DMABurst_MultiWriteStart+0x1a0>)
 80068a8:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 80068aa:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80068ac:	4a10      	ldr	r2, [pc, #64]	@ (80068f0 <HAL_TIM_DMABurst_MultiWriteStart+0x1a4>)
 80068ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 80068b0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80068b2:	4a09      	ldr	r2, [pc, #36]	@ (80068d8 <HAL_TIM_DMABurst_MultiWriteStart+0x18c>)
 80068b4:	631a      	str	r2, [r3, #48]	@ 0x30
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 80068b6:	682a      	ldr	r2, [r5, #0]
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 80068b8:	9b05      	ldr	r3, [sp, #20]
 80068ba:	324c      	adds	r2, #76	@ 0x4c
 80068bc:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 80068be:	f7fd f836 	bl	800392e <HAL_DMA_Start_IT>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d08b      	beq.n	80067de <HAL_TIM_DMABurst_MultiWriteStart+0x92>
        return HAL_ERROR;
 80068c6:	2001      	movs	r0, #1
 80068c8:	e792      	b.n	80067f0 <HAL_TIM_DMABurst_MultiWriteStart+0xa4>
        return HAL_ERROR;
 80068ca:	2001      	movs	r0, #1
 80068cc:	e790      	b.n	80067f0 <HAL_TIM_DMABurst_MultiWriteStart+0xa4>
 80068ce:	bf00      	nop
 80068d0:	08006d29 	.word	0x08006d29
 80068d4:	08006d9b 	.word	0x08006d9b
 80068d8:	08006f5d 	.word	0x08006f5d
 80068dc:	08006c41 	.word	0x08006c41
 80068e0:	08006c59 	.word	0x08006c59
 80068e4:	08006f39 	.word	0x08006f39
 80068e8:	08006f51 	.word	0x08006f51
 80068ec:	0800ada9 	.word	0x0800ada9
 80068f0:	0800adbb 	.word	0x0800adbb

080068f4 <HAL_TIM_DMABurst_WriteStart>:
{
 80068f4:	b530      	push	{r4, r5, lr}
 80068f6:	b083      	sub	sp, #12
 80068f8:	9d06      	ldr	r5, [sp, #24]
                                            ((BurstLength) >> 8U) + 1U);
 80068fa:	0a2c      	lsrs	r4, r5, #8
  status = HAL_TIM_DMABurst_MultiWriteStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
 80068fc:	3401      	adds	r4, #1
 80068fe:	9401      	str	r4, [sp, #4]
 8006900:	9500      	str	r5, [sp, #0]
 8006902:	f7ff ff23 	bl	800674c <HAL_TIM_DMABurst_MultiWriteStart>
}
 8006906:	b003      	add	sp, #12
 8006908:	bd30      	pop	{r4, r5, pc}

0800690a <HAL_TIM_DMABurst_WriteStop>:
{
 800690a:	b538      	push	{r3, r4, r5, lr}
 800690c:	4605      	mov	r5, r0
 800690e:	460c      	mov	r4, r1
  switch (BurstRequestSrc)
 8006910:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006914:	d033      	beq.n	800697e <HAL_TIM_DMABurst_WriteStop+0x74>
 8006916:	d81b      	bhi.n	8006950 <HAL_TIM_DMABurst_WriteStop+0x46>
 8006918:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800691c:	d02b      	beq.n	8006976 <HAL_TIM_DMABurst_WriteStop+0x6c>
 800691e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006922:	d103      	bne.n	800692c <HAL_TIM_DMABurst_WriteStop+0x22>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006924:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8006926:	f7fd f861 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800692a:	e005      	b.n	8006938 <HAL_TIM_DMABurst_WriteStop+0x2e>
  switch (BurstRequestSrc)
 800692c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006930:	d10c      	bne.n	800694c <HAL_TIM_DMABurst_WriteStop+0x42>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 8006932:	6a00      	ldr	r0, [r0, #32]
 8006934:	f7fd f85a 	bl	80039ec <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 8006938:	682a      	ldr	r2, [r5, #0]
 800693a:	68d3      	ldr	r3, [r2, #12]
 800693c:	ea23 0304 	bic.w	r3, r3, r4
 8006940:	60d3      	str	r3, [r2, #12]
    htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006942:	2301      	movs	r3, #1
 8006944:	f885 3046 	strb.w	r3, [r5, #70]	@ 0x46
 8006948:	2000      	movs	r0, #0
}
 800694a:	bd38      	pop	{r3, r4, r5, pc}
  switch (BurstRequestSrc)
 800694c:	2001      	movs	r0, #1
 800694e:	e7fc      	b.n	800694a <HAL_TIM_DMABurst_WriteStop+0x40>
 8006950:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8006954:	d017      	beq.n	8006986 <HAL_TIM_DMABurst_WriteStop+0x7c>
 8006956:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800695a:	d103      	bne.n	8006964 <HAL_TIM_DMABurst_WriteStop+0x5a>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800695c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800695e:	f7fd f845 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8006962:	e7e9      	b.n	8006938 <HAL_TIM_DMABurst_WriteStop+0x2e>
  switch (BurstRequestSrc)
 8006964:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006968:	d103      	bne.n	8006972 <HAL_TIM_DMABurst_WriteStop+0x68>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800696a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800696c:	f7fd f83e 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8006970:	e7e2      	b.n	8006938 <HAL_TIM_DMABurst_WriteStop+0x2e>
  switch (BurstRequestSrc)
 8006972:	2001      	movs	r0, #1
 8006974:	e7e9      	b.n	800694a <HAL_TIM_DMABurst_WriteStop+0x40>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006976:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8006978:	f7fd f838 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800697c:	e7dc      	b.n	8006938 <HAL_TIM_DMABurst_WriteStop+0x2e>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800697e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8006980:	f7fd f834 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8006984:	e7d8      	b.n	8006938 <HAL_TIM_DMABurst_WriteStop+0x2e>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 8006986:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8006988:	f7fd f830 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800698c:	e7d4      	b.n	8006938 <HAL_TIM_DMABurst_WriteStop+0x2e>
	...

08006990 <HAL_TIM_DMABurst_MultiReadStart>:
{
 8006990:	b570      	push	{r4, r5, r6, lr}
 8006992:	4605      	mov	r5, r0
  if (htim->DMABurstState == HAL_DMA_BURST_STATE_BUSY)
 8006994:	f890 0046 	ldrb.w	r0, [r0, #70]	@ 0x46
 8006998:	b2c0      	uxtb	r0, r0
 800699a:	2802      	cmp	r0, #2
 800699c:	d04a      	beq.n	8006a34 <HAL_TIM_DMABurst_MultiReadStart+0xa4>
 800699e:	460e      	mov	r6, r1
 80069a0:	4614      	mov	r4, r2
 80069a2:	461a      	mov	r2, r3
  else if (htim->DMABurstState == HAL_DMA_BURST_STATE_READY)
 80069a4:	f895 0046 	ldrb.w	r0, [r5, #70]	@ 0x46
 80069a8:	b2c0      	uxtb	r0, r0
 80069aa:	2801      	cmp	r0, #1
 80069ac:	d01c      	beq.n	80069e8 <HAL_TIM_DMABurst_MultiReadStart+0x58>
  switch (BurstRequestSrc)
 80069ae:	f5b4 6f00 	cmp.w	r4, #2048	@ 0x800
 80069b2:	f000 8086 	beq.w	8006ac2 <HAL_TIM_DMABurst_MultiReadStart+0x132>
 80069b6:	d840      	bhi.n	8006a3a <HAL_TIM_DMABurst_MultiReadStart+0xaa>
 80069b8:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 80069bc:	d06e      	beq.n	8006a9c <HAL_TIM_DMABurst_MultiReadStart+0x10c>
 80069be:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 80069c2:	d11a      	bne.n	80069fa <HAL_TIM_DMABurst_MultiReadStart+0x6a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80069c4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80069c6:	4953      	ldr	r1, [pc, #332]	@ (8006b14 <HAL_TIM_DMABurst_MultiReadStart+0x184>)
 80069c8:	6299      	str	r1, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80069ca:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80069cc:	4952      	ldr	r1, [pc, #328]	@ (8006b18 <HAL_TIM_DMABurst_MultiReadStart+0x188>)
 80069ce:	62d9      	str	r1, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80069d0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80069d2:	4952      	ldr	r1, [pc, #328]	@ (8006b1c <HAL_TIM_DMABurst_MultiReadStart+0x18c>)
 80069d4:	6319      	str	r1, [r3, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 80069d6:	6829      	ldr	r1, [r5, #0]
 80069d8:	9b05      	ldr	r3, [sp, #20]
 80069da:	314c      	adds	r1, #76	@ 0x4c
 80069dc:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80069de:	f7fc ffa6 	bl	800392e <HAL_DMA_Start_IT>
 80069e2:	b1f0      	cbz	r0, 8006a22 <HAL_TIM_DMABurst_MultiReadStart+0x92>
        return HAL_ERROR;
 80069e4:	2001      	movs	r0, #1
 80069e6:	e025      	b.n	8006a34 <HAL_TIM_DMABurst_MultiReadStart+0xa4>
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 80069e8:	b11b      	cbz	r3, 80069f2 <HAL_TIM_DMABurst_MultiReadStart+0x62>
      htim->DMABurstState = HAL_DMA_BURST_STATE_BUSY;
 80069ea:	2302      	movs	r3, #2
 80069ec:	f885 3046 	strb.w	r3, [r5, #70]	@ 0x46
 80069f0:	e7dd      	b.n	80069ae <HAL_TIM_DMABurst_MultiReadStart+0x1e>
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 80069f2:	9b04      	ldr	r3, [sp, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d0f8      	beq.n	80069ea <HAL_TIM_DMABurst_MultiReadStart+0x5a>
 80069f8:	e01c      	b.n	8006a34 <HAL_TIM_DMABurst_MultiReadStart+0xa4>
  switch (BurstRequestSrc)
 80069fa:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 80069fe:	d11a      	bne.n	8006a36 <HAL_TIM_DMABurst_MultiReadStart+0xa6>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8006a00:	6a2b      	ldr	r3, [r5, #32]
 8006a02:	4947      	ldr	r1, [pc, #284]	@ (8006b20 <HAL_TIM_DMABurst_MultiReadStart+0x190>)
 8006a04:	6299      	str	r1, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 8006a06:	6a2b      	ldr	r3, [r5, #32]
 8006a08:	4946      	ldr	r1, [pc, #280]	@ (8006b24 <HAL_TIM_DMABurst_MultiReadStart+0x194>)
 8006a0a:	62d9      	str	r1, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8006a0c:	6a2b      	ldr	r3, [r5, #32]
 8006a0e:	4943      	ldr	r1, [pc, #268]	@ (8006b1c <HAL_TIM_DMABurst_MultiReadStart+0x18c>)
 8006a10:	6319      	str	r1, [r3, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8006a12:	6829      	ldr	r1, [r5, #0]
 8006a14:	9b05      	ldr	r3, [sp, #20]
 8006a16:	314c      	adds	r1, #76	@ 0x4c
 8006a18:	6a28      	ldr	r0, [r5, #32]
 8006a1a:	f7fc ff88 	bl	800392e <HAL_DMA_Start_IT>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	d175      	bne.n	8006b0e <HAL_TIM_DMABurst_MultiReadStart+0x17e>
    htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 8006a22:	682b      	ldr	r3, [r5, #0]
 8006a24:	9a04      	ldr	r2, [sp, #16]
 8006a26:	4316      	orrs	r6, r2
 8006a28:	649e      	str	r6, [r3, #72]	@ 0x48
    __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 8006a2a:	682a      	ldr	r2, [r5, #0]
 8006a2c:	68d3      	ldr	r3, [r2, #12]
 8006a2e:	4323      	orrs	r3, r4
 8006a30:	60d3      	str	r3, [r2, #12]
 8006a32:	2000      	movs	r0, #0
}
 8006a34:	bd70      	pop	{r4, r5, r6, pc}
  switch (BurstRequestSrc)
 8006a36:	2001      	movs	r0, #1
 8006a38:	e7fc      	b.n	8006a34 <HAL_TIM_DMABurst_MultiReadStart+0xa4>
 8006a3a:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8006a3e:	d053      	beq.n	8006ae8 <HAL_TIM_DMABurst_MultiReadStart+0x158>
 8006a40:	f5b4 4f80 	cmp.w	r4, #16384	@ 0x4000
 8006a44:	d112      	bne.n	8006a6c <HAL_TIM_DMABurst_MultiReadStart+0xdc>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8006a46:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8006a48:	4937      	ldr	r1, [pc, #220]	@ (8006b28 <HAL_TIM_DMABurst_MultiReadStart+0x198>)
 8006a4a:	6299      	str	r1, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 8006a4c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8006a4e:	4937      	ldr	r1, [pc, #220]	@ (8006b2c <HAL_TIM_DMABurst_MultiReadStart+0x19c>)
 8006a50:	62d9      	str	r1, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 8006a52:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8006a54:	4931      	ldr	r1, [pc, #196]	@ (8006b1c <HAL_TIM_DMABurst_MultiReadStart+0x18c>)
 8006a56:	6319      	str	r1, [r3, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8006a58:	6829      	ldr	r1, [r5, #0]
 8006a5a:	9b05      	ldr	r3, [sp, #20]
 8006a5c:	314c      	adds	r1, #76	@ 0x4c
 8006a5e:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8006a60:	f7fc ff65 	bl	800392e <HAL_DMA_Start_IT>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d0dc      	beq.n	8006a22 <HAL_TIM_DMABurst_MultiReadStart+0x92>
        return HAL_ERROR;
 8006a68:	2001      	movs	r0, #1
 8006a6a:	e7e3      	b.n	8006a34 <HAL_TIM_DMABurst_MultiReadStart+0xa4>
  switch (BurstRequestSrc)
 8006a6c:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8006a70:	d112      	bne.n	8006a98 <HAL_TIM_DMABurst_MultiReadStart+0x108>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8006a72:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006a74:	4927      	ldr	r1, [pc, #156]	@ (8006b14 <HAL_TIM_DMABurst_MultiReadStart+0x184>)
 8006a76:	6299      	str	r1, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006a78:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006a7a:	4927      	ldr	r1, [pc, #156]	@ (8006b18 <HAL_TIM_DMABurst_MultiReadStart+0x188>)
 8006a7c:	62d9      	str	r1, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006a7e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006a80:	4926      	ldr	r1, [pc, #152]	@ (8006b1c <HAL_TIM_DMABurst_MultiReadStart+0x18c>)
 8006a82:	6319      	str	r1, [r3, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8006a84:	6829      	ldr	r1, [r5, #0]
 8006a86:	9b05      	ldr	r3, [sp, #20]
 8006a88:	314c      	adds	r1, #76	@ 0x4c
 8006a8a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8006a8c:	f7fc ff4f 	bl	800392e <HAL_DMA_Start_IT>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d0c6      	beq.n	8006a22 <HAL_TIM_DMABurst_MultiReadStart+0x92>
        return HAL_ERROR;
 8006a94:	2001      	movs	r0, #1
 8006a96:	e7cd      	b.n	8006a34 <HAL_TIM_DMABurst_MultiReadStart+0xa4>
  switch (BurstRequestSrc)
 8006a98:	2001      	movs	r0, #1
 8006a9a:	e7cb      	b.n	8006a34 <HAL_TIM_DMABurst_MultiReadStart+0xa4>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006a9c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8006a9e:	491d      	ldr	r1, [pc, #116]	@ (8006b14 <HAL_TIM_DMABurst_MultiReadStart+0x184>)
 8006aa0:	6299      	str	r1, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006aa2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8006aa4:	491c      	ldr	r1, [pc, #112]	@ (8006b18 <HAL_TIM_DMABurst_MultiReadStart+0x188>)
 8006aa6:	62d9      	str	r1, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006aa8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8006aaa:	491c      	ldr	r1, [pc, #112]	@ (8006b1c <HAL_TIM_DMABurst_MultiReadStart+0x18c>)
 8006aac:	6319      	str	r1, [r3, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8006aae:	6829      	ldr	r1, [r5, #0]
 8006ab0:	9b05      	ldr	r3, [sp, #20]
 8006ab2:	314c      	adds	r1, #76	@ 0x4c
 8006ab4:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8006ab6:	f7fc ff3a 	bl	800392e <HAL_DMA_Start_IT>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d0b1      	beq.n	8006a22 <HAL_TIM_DMABurst_MultiReadStart+0x92>
        return HAL_ERROR;
 8006abe:	2001      	movs	r0, #1
 8006ac0:	e7b8      	b.n	8006a34 <HAL_TIM_DMABurst_MultiReadStart+0xa4>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8006ac2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006ac4:	4913      	ldr	r1, [pc, #76]	@ (8006b14 <HAL_TIM_DMABurst_MultiReadStart+0x184>)
 8006ac6:	6299      	str	r1, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006ac8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006aca:	4913      	ldr	r1, [pc, #76]	@ (8006b18 <HAL_TIM_DMABurst_MultiReadStart+0x188>)
 8006acc:	62d9      	str	r1, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006ace:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006ad0:	4912      	ldr	r1, [pc, #72]	@ (8006b1c <HAL_TIM_DMABurst_MultiReadStart+0x18c>)
 8006ad2:	6319      	str	r1, [r3, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8006ad4:	6829      	ldr	r1, [r5, #0]
 8006ad6:	9b05      	ldr	r3, [sp, #20]
 8006ad8:	314c      	adds	r1, #76	@ 0x4c
 8006ada:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8006adc:	f7fc ff27 	bl	800392e <HAL_DMA_Start_IT>
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	d09e      	beq.n	8006a22 <HAL_TIM_DMABurst_MultiReadStart+0x92>
        return HAL_ERROR;
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	e7a5      	b.n	8006a34 <HAL_TIM_DMABurst_MultiReadStart+0xa4>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 8006ae8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8006aea:	4911      	ldr	r1, [pc, #68]	@ (8006b30 <HAL_TIM_DMABurst_MultiReadStart+0x1a0>)
 8006aec:	6299      	str	r1, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 8006aee:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8006af0:	4910      	ldr	r1, [pc, #64]	@ (8006b34 <HAL_TIM_DMABurst_MultiReadStart+0x1a4>)
 8006af2:	62d9      	str	r1, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 8006af4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8006af6:	4909      	ldr	r1, [pc, #36]	@ (8006b1c <HAL_TIM_DMABurst_MultiReadStart+0x18c>)
 8006af8:	6319      	str	r1, [r3, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8006afa:	6829      	ldr	r1, [r5, #0]
 8006afc:	9b05      	ldr	r3, [sp, #20]
 8006afe:	314c      	adds	r1, #76	@ 0x4c
 8006b00:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8006b02:	f7fc ff14 	bl	800392e <HAL_DMA_Start_IT>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	d08b      	beq.n	8006a22 <HAL_TIM_DMABurst_MultiReadStart+0x92>
        return HAL_ERROR;
 8006b0a:	2001      	movs	r0, #1
 8006b0c:	e792      	b.n	8006a34 <HAL_TIM_DMABurst_MultiReadStart+0xa4>
        return HAL_ERROR;
 8006b0e:	2001      	movs	r0, #1
 8006b10:	e790      	b.n	8006a34 <HAL_TIM_DMABurst_MultiReadStart+0xa4>
 8006b12:	bf00      	nop
 8006b14:	08006c67 	.word	0x08006c67
 8006b18:	08006ce9 	.word	0x08006ce9
 8006b1c:	08006f5d 	.word	0x08006f5d
 8006b20:	08006c41 	.word	0x08006c41
 8006b24:	08006c59 	.word	0x08006c59
 8006b28:	08006f39 	.word	0x08006f39
 8006b2c:	08006f51 	.word	0x08006f51
 8006b30:	0800ada9 	.word	0x0800ada9
 8006b34:	0800adbb 	.word	0x0800adbb

08006b38 <HAL_TIM_DMABurst_ReadStart>:
{
 8006b38:	b530      	push	{r4, r5, lr}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	9d06      	ldr	r5, [sp, #24]
                                           ((BurstLength) >> 8U) + 1U);
 8006b3e:	0a2c      	lsrs	r4, r5, #8
  status = HAL_TIM_DMABurst_MultiReadStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
 8006b40:	3401      	adds	r4, #1
 8006b42:	9401      	str	r4, [sp, #4]
 8006b44:	9500      	str	r5, [sp, #0]
 8006b46:	f7ff ff23 	bl	8006990 <HAL_TIM_DMABurst_MultiReadStart>
}
 8006b4a:	b003      	add	sp, #12
 8006b4c:	bd30      	pop	{r4, r5, pc}

08006b4e <HAL_TIM_DMABurst_ReadStop>:
{
 8006b4e:	b538      	push	{r3, r4, r5, lr}
 8006b50:	4605      	mov	r5, r0
 8006b52:	460c      	mov	r4, r1
  switch (BurstRequestSrc)
 8006b54:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006b58:	d033      	beq.n	8006bc2 <HAL_TIM_DMABurst_ReadStop+0x74>
 8006b5a:	d81b      	bhi.n	8006b94 <HAL_TIM_DMABurst_ReadStop+0x46>
 8006b5c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006b60:	d02b      	beq.n	8006bba <HAL_TIM_DMABurst_ReadStop+0x6c>
 8006b62:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006b66:	d103      	bne.n	8006b70 <HAL_TIM_DMABurst_ReadStop+0x22>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006b68:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8006b6a:	f7fc ff3f 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8006b6e:	e005      	b.n	8006b7c <HAL_TIM_DMABurst_ReadStop+0x2e>
  switch (BurstRequestSrc)
 8006b70:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006b74:	d10c      	bne.n	8006b90 <HAL_TIM_DMABurst_ReadStop+0x42>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 8006b76:	6a00      	ldr	r0, [r0, #32]
 8006b78:	f7fc ff38 	bl	80039ec <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 8006b7c:	682a      	ldr	r2, [r5, #0]
 8006b7e:	68d3      	ldr	r3, [r2, #12]
 8006b80:	ea23 0304 	bic.w	r3, r3, r4
 8006b84:	60d3      	str	r3, [r2, #12]
    htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b86:	2301      	movs	r3, #1
 8006b88:	f885 3046 	strb.w	r3, [r5, #70]	@ 0x46
 8006b8c:	2000      	movs	r0, #0
}
 8006b8e:	bd38      	pop	{r3, r4, r5, pc}
  switch (BurstRequestSrc)
 8006b90:	2001      	movs	r0, #1
 8006b92:	e7fc      	b.n	8006b8e <HAL_TIM_DMABurst_ReadStop+0x40>
 8006b94:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8006b98:	d017      	beq.n	8006bca <HAL_TIM_DMABurst_ReadStop+0x7c>
 8006b9a:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8006b9e:	d103      	bne.n	8006ba8 <HAL_TIM_DMABurst_ReadStop+0x5a>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 8006ba0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8006ba2:	f7fc ff23 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8006ba6:	e7e9      	b.n	8006b7c <HAL_TIM_DMABurst_ReadStop+0x2e>
  switch (BurstRequestSrc)
 8006ba8:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006bac:	d103      	bne.n	8006bb6 <HAL_TIM_DMABurst_ReadStop+0x68>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006bae:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8006bb0:	f7fc ff1c 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8006bb4:	e7e2      	b.n	8006b7c <HAL_TIM_DMABurst_ReadStop+0x2e>
  switch (BurstRequestSrc)
 8006bb6:	2001      	movs	r0, #1
 8006bb8:	e7e9      	b.n	8006b8e <HAL_TIM_DMABurst_ReadStop+0x40>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006bba:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8006bbc:	f7fc ff16 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8006bc0:	e7dc      	b.n	8006b7c <HAL_TIM_DMABurst_ReadStop+0x2e>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006bc2:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8006bc4:	f7fc ff12 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8006bc8:	e7d8      	b.n	8006b7c <HAL_TIM_DMABurst_ReadStop+0x2e>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 8006bca:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8006bcc:	f7fc ff0e 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8006bd0:	e7d4      	b.n	8006b7c <HAL_TIM_DMABurst_ReadStop+0x2e>

08006bd2 <HAL_TIM_GenerateEvent>:
  __HAL_LOCK(htim);
 8006bd2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d00e      	beq.n	8006bf8 <HAL_TIM_GenerateEvent+0x26>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006be0:	2202      	movs	r2, #2
 8006be2:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  htim->Instance->EGR = EventSource;
 8006be6:	6802      	ldr	r2, [r0, #0]
 8006be8:	6151      	str	r1, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8006bea:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  return HAL_OK;
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006bf8:	2002      	movs	r0, #2
}
 8006bfa:	4770      	bx	lr

08006bfc <HAL_TIM_ConfigTI1Input>:
  tmpcr2 = htim->Instance->CR2;
 8006bfc:	6802      	ldr	r2, [r0, #0]
 8006bfe:	6853      	ldr	r3, [r2, #4]
  tmpcr2 &= ~TIM_CR2_TI1S;
 8006c00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  tmpcr2 |= TI1_Selection;
 8006c04:	430b      	orrs	r3, r1
  htim->Instance->CR2 = tmpcr2;
 8006c06:	6053      	str	r3, [r2, #4]
}
 8006c08:	2000      	movs	r0, #0
 8006c0a:	4770      	bx	lr

08006c0c <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8006c0c:	290c      	cmp	r1, #12
 8006c0e:	d814      	bhi.n	8006c3a <HAL_TIM_ReadCapturedValue+0x2e>
 8006c10:	e8df f001 	tbb	[pc, r1]
 8006c14:	13131307 	.word	0x13131307
 8006c18:	1313130a 	.word	0x1313130a
 8006c1c:	1313130d 	.word	0x1313130d
 8006c20:	10          	.byte	0x10
 8006c21:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8006c22:	6803      	ldr	r3, [r0, #0]
 8006c24:	6b58      	ldr	r0, [r3, #52]	@ 0x34
      break;
 8006c26:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8006c28:	6803      	ldr	r3, [r0, #0]
 8006c2a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
      break;
 8006c2c:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8006c2e:	6803      	ldr	r3, [r0, #0]
 8006c30:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
      break;
 8006c32:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 8006c34:	6803      	ldr	r3, [r0, #0]
 8006c36:	6c18      	ldr	r0, [r3, #64]	@ 0x40
      break;
 8006c38:	4770      	bx	lr
  switch (Channel)
 8006c3a:	2000      	movs	r0, #0
}
 8006c3c:	4770      	bx	lr

08006c3e <HAL_TIM_PeriodElapsedCallback>:
}
 8006c3e:	4770      	bx	lr

08006c40 <TIM_DMAPeriodElapsedCplt>:
{
 8006c40:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c42:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (htim->hdma[TIM_DMA_ID_UPDATE]->Init.Mode == DMA_NORMAL)
 8006c44:	6a03      	ldr	r3, [r0, #32]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	b913      	cbnz	r3, 8006c50 <TIM_DMAPeriodElapsedCplt+0x10>
    htim->State = HAL_TIM_STATE_READY;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  HAL_TIM_PeriodElapsedCallback(htim);
 8006c50:	f7ff fff5 	bl	8006c3e <HAL_TIM_PeriodElapsedCallback>
}
 8006c54:	bd08      	pop	{r3, pc}

08006c56 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
}
 8006c56:	4770      	bx	lr

08006c58 <TIM_DMAPeriodElapsedHalfCplt>:
{
 8006c58:	b508      	push	{r3, lr}
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 8006c5a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8006c5c:	f7ff fffb 	bl	8006c56 <HAL_TIM_PeriodElapsedHalfCpltCallback>
}
 8006c60:	bd08      	pop	{r3, pc}

08006c62 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8006c62:	4770      	bx	lr

08006c64 <HAL_TIM_IC_CaptureCallback>:
}
 8006c64:	4770      	bx	lr

08006c66 <TIM_DMACaptureCplt>:
{
 8006c66:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c68:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006c6a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006c6c:	4283      	cmp	r3, r0
 8006c6e:	d00e      	beq.n	8006c8e <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006c70:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006c72:	4283      	cmp	r3, r0
 8006c74:	d016      	beq.n	8006ca4 <TIM_DMACaptureCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006c76:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006c78:	4283      	cmp	r3, r0
 8006c7a:	d01e      	beq.n	8006cba <TIM_DMACaptureCplt+0x54>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006c7c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006c7e:	4283      	cmp	r3, r0
 8006c80:	d026      	beq.n	8006cd0 <TIM_DMACaptureCplt+0x6a>
  HAL_TIM_IC_CaptureCallback(htim);
 8006c82:	4620      	mov	r0, r4
 8006c84:	f7ff ffee 	bl	8006c64 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	7723      	strb	r3, [r4, #28]
}
 8006c8c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006c92:	6983      	ldr	r3, [r0, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1f4      	bne.n	8006c82 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c98:	2301      	movs	r3, #1
 8006c9a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c9e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ca2:	e7ee      	b.n	8006c82 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006ca8:	6983      	ldr	r3, [r0, #24]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1e9      	bne.n	8006c82 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cae:	2301      	movs	r3, #1
 8006cb0:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cb8:	e7e3      	b.n	8006c82 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cba:	2304      	movs	r3, #4
 8006cbc:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006cbe:	6983      	ldr	r3, [r0, #24]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1de      	bne.n	8006c82 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006cca:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006cce:	e7d8      	b.n	8006c82 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cd0:	2308      	movs	r3, #8
 8006cd2:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006cd4:	6983      	ldr	r3, [r0, #24]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1d3      	bne.n	8006c82 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006cda:	2301      	movs	r3, #1
 8006cdc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006ce0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006ce4:	e7cd      	b.n	8006c82 <TIM_DMACaptureCplt+0x1c>

08006ce6 <HAL_TIM_IC_CaptureHalfCpltCallback>:
}
 8006ce6:	4770      	bx	lr

08006ce8 <TIM_DMACaptureHalfCplt>:
{
 8006ce8:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cea:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006cec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006cee:	4283      	cmp	r3, r0
 8006cf0:	d00b      	beq.n	8006d0a <TIM_DMACaptureHalfCplt+0x22>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006cf2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006cf4:	4283      	cmp	r3, r0
 8006cf6:	d010      	beq.n	8006d1a <TIM_DMACaptureHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006cf8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006cfa:	4283      	cmp	r3, r0
 8006cfc:	d010      	beq.n	8006d20 <TIM_DMACaptureHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006cfe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006d00:	4283      	cmp	r3, r0
 8006d02:	d104      	bne.n	8006d0e <TIM_DMACaptureHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d04:	2308      	movs	r3, #8
 8006d06:	7723      	strb	r3, [r4, #28]
 8006d08:	e001      	b.n	8006d0e <TIM_DMACaptureHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f7ff ffe9 	bl	8006ce6 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d14:	2300      	movs	r3, #0
 8006d16:	7723      	strb	r3, [r4, #28]
}
 8006d18:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	7723      	strb	r3, [r4, #28]
 8006d1e:	e7f6      	b.n	8006d0e <TIM_DMACaptureHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d20:	2304      	movs	r3, #4
 8006d22:	7723      	strb	r3, [r4, #28]
 8006d24:	e7f3      	b.n	8006d0e <TIM_DMACaptureHalfCplt+0x26>

08006d26 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006d26:	4770      	bx	lr

08006d28 <TIM_DMADelayPulseCplt>:
{
 8006d28:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d2a:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006d2c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006d2e:	4283      	cmp	r3, r0
 8006d30:	d00e      	beq.n	8006d50 <TIM_DMADelayPulseCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006d32:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006d34:	4283      	cmp	r3, r0
 8006d36:	d014      	beq.n	8006d62 <TIM_DMADelayPulseCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006d38:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006d3a:	4283      	cmp	r3, r0
 8006d3c:	d01a      	beq.n	8006d74 <TIM_DMADelayPulseCplt+0x4c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006d3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006d40:	4283      	cmp	r3, r0
 8006d42:	d020      	beq.n	8006d86 <TIM_DMADelayPulseCplt+0x5e>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d44:	4620      	mov	r0, r4
 8006d46:	f7ff ffee 	bl	8006d26 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	7723      	strb	r3, [r4, #28]
}
 8006d4e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d50:	2301      	movs	r3, #1
 8006d52:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006d54:	6983      	ldr	r3, [r0, #24]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1f4      	bne.n	8006d44 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006d60:	e7f0      	b.n	8006d44 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d62:	2302      	movs	r3, #2
 8006d64:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006d66:	6983      	ldr	r3, [r0, #24]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1eb      	bne.n	8006d44 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006d72:	e7e7      	b.n	8006d44 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d74:	2304      	movs	r3, #4
 8006d76:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006d78:	6983      	ldr	r3, [r0, #24]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e2      	bne.n	8006d44 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006d7e:	2301      	movs	r3, #1
 8006d80:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006d84:	e7de      	b.n	8006d44 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d86:	2308      	movs	r3, #8
 8006d88:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006d8a:	6983      	ldr	r3, [r0, #24]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1d9      	bne.n	8006d44 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006d90:	2301      	movs	r3, #1
 8006d92:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006d96:	e7d5      	b.n	8006d44 <TIM_DMADelayPulseCplt+0x1c>

08006d98 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
}
 8006d98:	4770      	bx	lr

08006d9a <TIM_DMADelayPulseHalfCplt>:
{
 8006d9a:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d9c:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006d9e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006da0:	4283      	cmp	r3, r0
 8006da2:	d00b      	beq.n	8006dbc <TIM_DMADelayPulseHalfCplt+0x22>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006da4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006da6:	4283      	cmp	r3, r0
 8006da8:	d010      	beq.n	8006dcc <TIM_DMADelayPulseHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006daa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006dac:	4283      	cmp	r3, r0
 8006dae:	d010      	beq.n	8006dd2 <TIM_DMADelayPulseHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006db0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006db2:	4283      	cmp	r3, r0
 8006db4:	d104      	bne.n	8006dc0 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006db6:	2308      	movs	r3, #8
 8006db8:	7723      	strb	r3, [r4, #28]
 8006dba:	e001      	b.n	8006dc0 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f7ff ffe9 	bl	8006d98 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	7723      	strb	r3, [r4, #28]
}
 8006dca:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dcc:	2302      	movs	r3, #2
 8006dce:	7723      	strb	r3, [r4, #28]
 8006dd0:	e7f6      	b.n	8006dc0 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dd2:	2304      	movs	r3, #4
 8006dd4:	7723      	strb	r3, [r4, #28]
 8006dd6:	e7f3      	b.n	8006dc0 <TIM_DMADelayPulseHalfCplt+0x26>

08006dd8 <HAL_TIM_TriggerCallback>:
}
 8006dd8:	4770      	bx	lr

08006dda <HAL_TIM_IRQHandler>:
{
 8006dda:	b570      	push	{r4, r5, r6, lr}
 8006ddc:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8006dde:	6803      	ldr	r3, [r0, #0]
 8006de0:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006de2:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006de4:	f015 0f02 	tst.w	r5, #2
 8006de8:	d010      	beq.n	8006e0c <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006dea:	f016 0f02 	tst.w	r6, #2
 8006dee:	d00d      	beq.n	8006e0c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006df0:	f06f 0202 	mvn.w	r2, #2
 8006df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006df6:	2301      	movs	r3, #1
 8006df8:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dfa:	6803      	ldr	r3, [r0, #0]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	f013 0f03 	tst.w	r3, #3
 8006e02:	d05e      	beq.n	8006ec2 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8006e04:	f7ff ff2e 	bl	8006c64 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e0c:	f015 0f04 	tst.w	r5, #4
 8006e10:	d012      	beq.n	8006e38 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e12:	f016 0f04 	tst.w	r6, #4
 8006e16:	d00f      	beq.n	8006e38 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006e18:	6823      	ldr	r3, [r4, #0]
 8006e1a:	f06f 0204 	mvn.w	r2, #4
 8006e1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e20:	2302      	movs	r3, #2
 8006e22:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8006e2c:	d04f      	beq.n	8006ece <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f7ff ff18 	bl	8006c64 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e34:	2300      	movs	r3, #0
 8006e36:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e38:	f015 0f08 	tst.w	r5, #8
 8006e3c:	d012      	beq.n	8006e64 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e3e:	f016 0f08 	tst.w	r6, #8
 8006e42:	d00f      	beq.n	8006e64 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	f06f 0208 	mvn.w	r2, #8
 8006e4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e4c:	2304      	movs	r3, #4
 8006e4e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	69db      	ldr	r3, [r3, #28]
 8006e54:	f013 0f03 	tst.w	r3, #3
 8006e58:	d040      	beq.n	8006edc <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f7ff ff02 	bl	8006c64 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e60:	2300      	movs	r3, #0
 8006e62:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e64:	f015 0f10 	tst.w	r5, #16
 8006e68:	d012      	beq.n	8006e90 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e6a:	f016 0f10 	tst.w	r6, #16
 8006e6e:	d00f      	beq.n	8006e90 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e70:	6823      	ldr	r3, [r4, #0]
 8006e72:	f06f 0210 	mvn.w	r2, #16
 8006e76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e78:	2308      	movs	r3, #8
 8006e7a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8006e84:	d031      	beq.n	8006eea <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8006e86:	4620      	mov	r0, r4
 8006e88:	f7ff feec 	bl	8006c64 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006e90:	f015 0f01 	tst.w	r5, #1
 8006e94:	d002      	beq.n	8006e9c <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006e96:	f016 0f01 	tst.w	r6, #1
 8006e9a:	d12d      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006e9c:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8006ea0:	d002      	beq.n	8006ea8 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ea2:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8006ea6:	d12f      	bne.n	8006f08 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ea8:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8006eac:	d002      	beq.n	8006eb4 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006eae:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8006eb2:	d131      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006eb4:	f015 0f20 	tst.w	r5, #32
 8006eb8:	d002      	beq.n	8006ec0 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006eba:	f016 0f20 	tst.w	r6, #32
 8006ebe:	d133      	bne.n	8006f28 <HAL_TIM_IRQHandler+0x14e>
}
 8006ec0:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec2:	f7ff fece 	bl	8006c62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f7ff ff2d 	bl	8006d26 <HAL_TIM_PWM_PulseFinishedCallback>
 8006ecc:	e79c      	b.n	8006e08 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f7ff fec7 	bl	8006c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f7ff ff26 	bl	8006d26 <HAL_TIM_PWM_PulseFinishedCallback>
 8006eda:	e7ab      	b.n	8006e34 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006edc:	4620      	mov	r0, r4
 8006ede:	f7ff fec0 	bl	8006c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f7ff ff1f 	bl	8006d26 <HAL_TIM_PWM_PulseFinishedCallback>
 8006ee8:	e7ba      	b.n	8006e60 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eea:	4620      	mov	r0, r4
 8006eec:	f7ff feb9 	bl	8006c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f7ff ff18 	bl	8006d26 <HAL_TIM_PWM_PulseFinishedCallback>
 8006ef6:	e7c9      	b.n	8006e8c <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	f06f 0201 	mvn.w	r2, #1
 8006efe:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f00:	4620      	mov	r0, r4
 8006f02:	f7ff fe9c 	bl	8006c3e <HAL_TIM_PeriodElapsedCallback>
 8006f06:	e7c9      	b.n	8006e9c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006f0e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006f10:	4620      	mov	r0, r4
 8006f12:	f003 ff5a 	bl	800adca <HAL_TIMEx_BreakCallback>
 8006f16:	e7c7      	b.n	8006ea8 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f1e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006f20:	4620      	mov	r0, r4
 8006f22:	f7ff ff59 	bl	8006dd8 <HAL_TIM_TriggerCallback>
 8006f26:	e7c5      	b.n	8006eb4 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	f06f 0220 	mvn.w	r2, #32
 8006f2e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006f30:	4620      	mov	r0, r4
 8006f32:	f003 ff38 	bl	800ada6 <HAL_TIMEx_CommutCallback>
}
 8006f36:	e7c3      	b.n	8006ec0 <HAL_TIM_IRQHandler+0xe6>

08006f38 <TIM_DMATriggerCplt>:
{
 8006f38:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f3a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (htim->hdma[TIM_DMA_ID_TRIGGER]->Init.Mode == DMA_NORMAL)
 8006f3c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	b913      	cbnz	r3, 8006f48 <TIM_DMATriggerCplt+0x10>
    htim->State = HAL_TIM_STATE_READY;
 8006f42:	2301      	movs	r3, #1
 8006f44:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  HAL_TIM_TriggerCallback(htim);
 8006f48:	f7ff ff46 	bl	8006dd8 <HAL_TIM_TriggerCallback>
}
 8006f4c:	bd08      	pop	{r3, pc}

08006f4e <HAL_TIM_TriggerHalfCpltCallback>:
}
 8006f4e:	4770      	bx	lr

08006f50 <TIM_DMATriggerHalfCplt>:
{
 8006f50:	b508      	push	{r3, lr}
  HAL_TIM_TriggerHalfCpltCallback(htim);
 8006f52:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8006f54:	f7ff fffb 	bl	8006f4e <HAL_TIM_TriggerHalfCpltCallback>
}
 8006f58:	bd08      	pop	{r3, pc}

08006f5a <HAL_TIM_ErrorCallback>:
}
 8006f5a:	4770      	bx	lr

08006f5c <TIM_DMAError>:
{
 8006f5c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f5e:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006f60:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006f62:	4283      	cmp	r3, r0
 8006f64:	d00c      	beq.n	8006f80 <TIM_DMAError+0x24>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006f66:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006f68:	4283      	cmp	r3, r0
 8006f6a:	d013      	beq.n	8006f94 <TIM_DMAError+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006f6c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006f6e:	4283      	cmp	r3, r0
 8006f70:	d016      	beq.n	8006fa0 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006f72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006f74:	4283      	cmp	r3, r0
 8006f76:	d019      	beq.n	8006fac <TIM_DMAError+0x50>
    htim->State = HAL_TIM_STATE_READY;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
 8006f7e:	e003      	b.n	8006f88 <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f80:	2301      	movs	r3, #1
 8006f82:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f84:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  HAL_TIM_ErrorCallback(htim);
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f7ff ffe6 	bl	8006f5a <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	7723      	strb	r3, [r4, #28]
}
 8006f92:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f94:	2302      	movs	r3, #2
 8006f96:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006f9e:	e7f3      	b.n	8006f88 <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006faa:	e7ed      	b.n	8006f88 <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fac:	2308      	movs	r3, #8
 8006fae:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006fb6:	e7e7      	b.n	8006f88 <TIM_DMAError+0x2c>

08006fb8 <HAL_TIM_Base_GetState>:
  return htim->State;
 8006fb8:	f890 003d 	ldrb.w	r0, [r0, #61]	@ 0x3d
}
 8006fbc:	4770      	bx	lr

08006fbe <HAL_TIM_OC_GetState>:
  return htim->State;
 8006fbe:	f890 003d 	ldrb.w	r0, [r0, #61]	@ 0x3d
}
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_TIM_PWM_GetState>:
  return htim->State;
 8006fc4:	f890 003d 	ldrb.w	r0, [r0, #61]	@ 0x3d
}
 8006fc8:	4770      	bx	lr

08006fca <HAL_TIM_IC_GetState>:
  return htim->State;
 8006fca:	f890 003d 	ldrb.w	r0, [r0, #61]	@ 0x3d
}
 8006fce:	4770      	bx	lr

08006fd0 <HAL_TIM_OnePulse_GetState>:
  return htim->State;
 8006fd0:	f890 003d 	ldrb.w	r0, [r0, #61]	@ 0x3d
}
 8006fd4:	4770      	bx	lr

08006fd6 <HAL_TIM_Encoder_GetState>:
  return htim->State;
 8006fd6:	f890 003d 	ldrb.w	r0, [r0, #61]	@ 0x3d
}
 8006fda:	4770      	bx	lr

08006fdc <HAL_TIM_GetActiveChannel>:
}
 8006fdc:	7f00      	ldrb	r0, [r0, #28]
 8006fde:	4770      	bx	lr

08006fe0 <HAL_TIM_GetChannelState>:
  channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006fe0:	b919      	cbnz	r1, 8006fea <HAL_TIM_GetChannelState+0xa>
 8006fe2:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 8006fe6:	b2c0      	uxtb	r0, r0
 8006fe8:	4770      	bx	lr
 8006fea:	2904      	cmp	r1, #4
 8006fec:	d005      	beq.n	8006ffa <HAL_TIM_GetChannelState+0x1a>
 8006fee:	2908      	cmp	r1, #8
 8006ff0:	d007      	beq.n	8007002 <HAL_TIM_GetChannelState+0x22>
 8006ff2:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8006ff6:	b2c0      	uxtb	r0, r0
}
 8006ff8:	4770      	bx	lr
  channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006ffa:	f890 003f 	ldrb.w	r0, [r0, #63]	@ 0x3f
 8006ffe:	b2c0      	uxtb	r0, r0
 8007000:	4770      	bx	lr
 8007002:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8007006:	b2c0      	uxtb	r0, r0
 8007008:	4770      	bx	lr

0800700a <HAL_TIM_DMABurstState>:
  return htim->DMABurstState;
 800700a:	f890 0046 	ldrb.w	r0, [r0, #70]	@ 0x46
}
 800700e:	4770      	bx	lr

08007010 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8007010:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007012:	4a28      	ldr	r2, [pc, #160]	@ (80070b4 <TIM_Base_SetConfig+0xa4>)
 8007014:	4290      	cmp	r0, r2
 8007016:	d012      	beq.n	800703e <TIM_Base_SetConfig+0x2e>
 8007018:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800701c:	4290      	cmp	r0, r2
 800701e:	d00e      	beq.n	800703e <TIM_Base_SetConfig+0x2e>
 8007020:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007024:	d00b      	beq.n	800703e <TIM_Base_SetConfig+0x2e>
 8007026:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800702a:	4290      	cmp	r0, r2
 800702c:	d007      	beq.n	800703e <TIM_Base_SetConfig+0x2e>
 800702e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007032:	4290      	cmp	r0, r2
 8007034:	d003      	beq.n	800703e <TIM_Base_SetConfig+0x2e>
 8007036:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800703a:	4290      	cmp	r0, r2
 800703c:	d103      	bne.n	8007046 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800703e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8007042:	684a      	ldr	r2, [r1, #4]
 8007044:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007046:	4a1b      	ldr	r2, [pc, #108]	@ (80070b4 <TIM_Base_SetConfig+0xa4>)
 8007048:	4290      	cmp	r0, r2
 800704a:	d012      	beq.n	8007072 <TIM_Base_SetConfig+0x62>
 800704c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007050:	4290      	cmp	r0, r2
 8007052:	d00e      	beq.n	8007072 <TIM_Base_SetConfig+0x62>
 8007054:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007058:	d00b      	beq.n	8007072 <TIM_Base_SetConfig+0x62>
 800705a:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800705e:	4290      	cmp	r0, r2
 8007060:	d007      	beq.n	8007072 <TIM_Base_SetConfig+0x62>
 8007062:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007066:	4290      	cmp	r0, r2
 8007068:	d003      	beq.n	8007072 <TIM_Base_SetConfig+0x62>
 800706a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800706e:	4290      	cmp	r0, r2
 8007070:	d103      	bne.n	800707a <TIM_Base_SetConfig+0x6a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8007072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007076:	68ca      	ldr	r2, [r1, #12]
 8007078:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800707a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800707e:	694a      	ldr	r2, [r1, #20]
 8007080:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007082:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007084:	688b      	ldr	r3, [r1, #8]
 8007086:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007088:	680b      	ldr	r3, [r1, #0]
 800708a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800708c:	4b09      	ldr	r3, [pc, #36]	@ (80070b4 <TIM_Base_SetConfig+0xa4>)
 800708e:	4298      	cmp	r0, r3
 8007090:	d003      	beq.n	800709a <TIM_Base_SetConfig+0x8a>
 8007092:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007096:	4298      	cmp	r0, r3
 8007098:	d101      	bne.n	800709e <TIM_Base_SetConfig+0x8e>
    TIMx->RCR = Structure->RepetitionCounter;
 800709a:	690b      	ldr	r3, [r1, #16]
 800709c:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800709e:	2301      	movs	r3, #1
 80070a0:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80070a2:	6903      	ldr	r3, [r0, #16]
 80070a4:	f013 0f01 	tst.w	r3, #1
 80070a8:	d003      	beq.n	80070b2 <TIM_Base_SetConfig+0xa2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80070aa:	6903      	ldr	r3, [r0, #16]
 80070ac:	f023 0301 	bic.w	r3, r3, #1
 80070b0:	6103      	str	r3, [r0, #16]
}
 80070b2:	4770      	bx	lr
 80070b4:	40012c00 	.word	0x40012c00

080070b8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80070b8:	b340      	cbz	r0, 800710c <HAL_TIM_Base_Init+0x54>
{
 80070ba:	b510      	push	{r4, lr}
 80070bc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80070be:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80070c2:	b1f3      	cbz	r3, 8007102 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80070c4:	2302      	movs	r3, #2
 80070c6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070ca:	4621      	mov	r1, r4
 80070cc:	f851 0b04 	ldr.w	r0, [r1], #4
 80070d0:	f7ff ff9e 	bl	8007010 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070d4:	2301      	movs	r3, #1
 80070d6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070da:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80070de:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80070e2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80070e6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070ea:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070f2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80070f6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80070fa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80070fe:	2000      	movs	r0, #0
}
 8007100:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007102:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007106:	f7fb fd6f 	bl	8002be8 <HAL_TIM_Base_MspInit>
 800710a:	e7db      	b.n	80070c4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800710c:	2001      	movs	r0, #1
}
 800710e:	4770      	bx	lr

08007110 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8007110:	b340      	cbz	r0, 8007164 <HAL_TIM_OC_Init+0x54>
{
 8007112:	b510      	push	{r4, lr}
 8007114:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007116:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800711a:	b1f3      	cbz	r3, 800715a <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800711c:	2302      	movs	r3, #2
 800711e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007122:	4621      	mov	r1, r4
 8007124:	f851 0b04 	ldr.w	r0, [r1], #4
 8007128:	f7ff ff72 	bl	8007010 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800712c:	2301      	movs	r3, #1
 800712e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007132:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8007136:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800713a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800713e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007142:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007146:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800714a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800714e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007152:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8007156:	2000      	movs	r0, #0
}
 8007158:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800715a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 800715e:	f7ff fa0f 	bl	8006580 <HAL_TIM_OC_MspInit>
 8007162:	e7db      	b.n	800711c <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8007164:	2001      	movs	r0, #1
}
 8007166:	4770      	bx	lr

08007168 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007168:	b340      	cbz	r0, 80071bc <HAL_TIM_PWM_Init+0x54>
{
 800716a:	b510      	push	{r4, lr}
 800716c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800716e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007172:	b1f3      	cbz	r3, 80071b2 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8007174:	2302      	movs	r3, #2
 8007176:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800717a:	4621      	mov	r1, r4
 800717c:	f851 0b04 	ldr.w	r0, [r1], #4
 8007180:	f7ff ff46 	bl	8007010 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007184:	2301      	movs	r3, #1
 8007186:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800718a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800718e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007192:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8007196:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800719a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800719e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071a2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80071a6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80071aa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80071ae:	2000      	movs	r0, #0
}
 80071b0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80071b2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80071b6:	f7ff fa14 	bl	80065e2 <HAL_TIM_PWM_MspInit>
 80071ba:	e7db      	b.n	8007174 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80071bc:	2001      	movs	r0, #1
}
 80071be:	4770      	bx	lr

080071c0 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 80071c0:	b340      	cbz	r0, 8007214 <HAL_TIM_IC_Init+0x54>
{
 80071c2:	b510      	push	{r4, lr}
 80071c4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80071c6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80071ca:	b1f3      	cbz	r3, 800720a <HAL_TIM_IC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80071cc:	2302      	movs	r3, #2
 80071ce:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071d2:	4621      	mov	r1, r4
 80071d4:	f851 0b04 	ldr.w	r0, [r1], #4
 80071d8:	f7ff ff1a 	bl	8007010 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071dc:	2301      	movs	r3, #1
 80071de:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80071e6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80071ea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80071ee:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071f2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071fa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80071fe:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007202:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8007206:	2000      	movs	r0, #0
}
 8007208:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800720a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 800720e:	f7ff fa19 	bl	8006644 <HAL_TIM_IC_MspInit>
 8007212:	e7db      	b.n	80071cc <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8007214:	2001      	movs	r0, #1
}
 8007216:	4770      	bx	lr

08007218 <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 8007218:	b350      	cbz	r0, 8007270 <HAL_TIM_OnePulse_Init+0x58>
{
 800721a:	b538      	push	{r3, r4, r5, lr}
 800721c:	460d      	mov	r5, r1
 800721e:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007220:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007224:	b1fb      	cbz	r3, 8007266 <HAL_TIM_OnePulse_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8007226:	2302      	movs	r3, #2
 8007228:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800722c:	4621      	mov	r1, r4
 800722e:	f851 0b04 	ldr.w	r0, [r1], #4
 8007232:	f7ff feed 	bl	8007010 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007236:	6822      	ldr	r2, [r4, #0]
 8007238:	6813      	ldr	r3, [r2, #0]
 800723a:	f023 0308 	bic.w	r3, r3, #8
 800723e:	6013      	str	r3, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8007240:	6822      	ldr	r2, [r4, #0]
 8007242:	6813      	ldr	r3, [r2, #0]
 8007244:	432b      	orrs	r3, r5
 8007246:	6013      	str	r3, [r2, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007248:	2301      	movs	r3, #1
 800724a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800724e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007252:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007256:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800725a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 800725e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8007262:	2000      	movs	r0, #0
}
 8007264:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8007266:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 800726a:	f7ff fa1c 	bl	80066a6 <HAL_TIM_OnePulse_MspInit>
 800726e:	e7da      	b.n	8007226 <HAL_TIM_OnePulse_Init+0xe>
    return HAL_ERROR;
 8007270:	2001      	movs	r0, #1
}
 8007272:	4770      	bx	lr

08007274 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8007274:	2800      	cmp	r0, #0
 8007276:	d056      	beq.n	8007326 <HAL_TIM_Encoder_Init+0xb2>
{
 8007278:	b570      	push	{r4, r5, r6, lr}
 800727a:	460d      	mov	r5, r1
 800727c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800727e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007282:	2b00      	cmp	r3, #0
 8007284:	d04a      	beq.n	800731c <HAL_TIM_Encoder_Init+0xa8>
  htim->State = HAL_TIM_STATE_BUSY;
 8007286:	2302      	movs	r3, #2
 8007288:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800728c:	6822      	ldr	r2, [r4, #0]
 800728e:	6893      	ldr	r3, [r2, #8]
 8007290:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007294:	f023 0307 	bic.w	r3, r3, #7
 8007298:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800729a:	4621      	mov	r1, r4
 800729c:	f851 0b04 	ldr.w	r0, [r1], #4
 80072a0:	f7ff feb6 	bl	8007010 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 80072a4:	6821      	ldr	r1, [r4, #0]
 80072a6:	688b      	ldr	r3, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 80072a8:	698a      	ldr	r2, [r1, #24]
  tmpccer = htim->Instance->CCER;
 80072aa:	6a0e      	ldr	r6, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 80072ac:	6828      	ldr	r0, [r5, #0]
 80072ae:	4318      	orrs	r0, r3
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80072b0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80072b4:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80072b8:	68ab      	ldr	r3, [r5, #8]
 80072ba:	f8d5 c018 	ldr.w	ip, [r5, #24]
 80072be:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80072c2:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80072c4:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 80072c8:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80072cc:	68ea      	ldr	r2, [r5, #12]
 80072ce:	f8d5 c01c 	ldr.w	ip, [r5, #28]
 80072d2:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80072d6:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80072d8:	6a2b      	ldr	r3, [r5, #32]
 80072da:	031b      	lsls	r3, r3, #12
 80072dc:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80072e0:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 80072e4:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80072e6:	f026 0622 	bic.w	r6, r6, #34	@ 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80072ea:	686a      	ldr	r2, [r5, #4]
 80072ec:	696d      	ldr	r5, [r5, #20]
 80072ee:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80072f2:	4332      	orrs	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 80072f4:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 80072f6:	6821      	ldr	r1, [r4, #0]
 80072f8:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072fe:	2301      	movs	r3, #1
 8007300:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007304:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007308:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800730c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007310:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 8007314:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8007318:	2000      	movs	r0, #0
}
 800731a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800731c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8007320:	f7fb fc88 	bl	8002c34 <HAL_TIM_Encoder_MspInit>
 8007324:	e7af      	b.n	8007286 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 8007326:	2001      	movs	r0, #1
}
 8007328:	4770      	bx	lr
	...

0800732c <TIM_OC2_SetConfig>:
{
 800732c:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 800732e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007330:	6a02      	ldr	r2, [r0, #32]
 8007332:	f022 0210 	bic.w	r2, r2, #16
 8007336:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007338:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800733a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800733c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007340:	680d      	ldr	r5, [r1, #0]
 8007342:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8007346:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800734a:	688d      	ldr	r5, [r1, #8]
 800734c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007350:	4d11      	ldr	r5, [pc, #68]	@ (8007398 <TIM_OC2_SetConfig+0x6c>)
 8007352:	42a8      	cmp	r0, r5
 8007354:	d003      	beq.n	800735e <TIM_OC2_SetConfig+0x32>
 8007356:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800735a:	42a8      	cmp	r0, r5
 800735c:	d106      	bne.n	800736c <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 800735e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007362:	68cd      	ldr	r5, [r1, #12]
 8007364:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007368:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800736c:	4d0a      	ldr	r5, [pc, #40]	@ (8007398 <TIM_OC2_SetConfig+0x6c>)
 800736e:	42a8      	cmp	r0, r5
 8007370:	d003      	beq.n	800737a <TIM_OC2_SetConfig+0x4e>
 8007372:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8007376:	42a8      	cmp	r0, r5
 8007378:	d107      	bne.n	800738a <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800737a:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800737e:	694d      	ldr	r5, [r1, #20]
 8007380:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007384:	698d      	ldr	r5, [r1, #24]
 8007386:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800738a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800738c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800738e:	684a      	ldr	r2, [r1, #4]
 8007390:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8007392:	6203      	str	r3, [r0, #32]
}
 8007394:	bc30      	pop	{r4, r5}
 8007396:	4770      	bx	lr
 8007398:	40012c00 	.word	0x40012c00

0800739c <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 800739c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d028      	beq.n	80073f6 <HAL_TIM_OC_ConfigChannel+0x5a>
{
 80073a4:	b510      	push	{r4, lr}
 80073a6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80073a8:	2301      	movs	r3, #1
 80073aa:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80073ae:	2a0c      	cmp	r2, #12
 80073b0:	d81c      	bhi.n	80073ec <HAL_TIM_OC_ConfigChannel+0x50>
 80073b2:	e8df f002 	tbb	[pc, r2]
 80073b6:	1b07      	.short	0x1b07
 80073b8:	1b0c1b1b 	.word	0x1b0c1b1b
 80073bc:	1b111b1b 	.word	0x1b111b1b
 80073c0:	1b1b      	.short	0x1b1b
 80073c2:	16          	.byte	0x16
 80073c3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073c4:	6800      	ldr	r0, [r0, #0]
 80073c6:	f7fe fe75 	bl	80060b4 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80073ca:	2000      	movs	r0, #0
      break;
 80073cc:	e00f      	b.n	80073ee <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073ce:	6800      	ldr	r0, [r0, #0]
 80073d0:	f7ff ffac 	bl	800732c <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80073d4:	2000      	movs	r0, #0
      break;
 80073d6:	e00a      	b.n	80073ee <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073d8:	6800      	ldr	r0, [r0, #0]
 80073da:	f7fe fea3 	bl	8006124 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80073de:	2000      	movs	r0, #0
      break;
 80073e0:	e005      	b.n	80073ee <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073e2:	6800      	ldr	r0, [r0, #0]
 80073e4:	f7fe fed6 	bl	8006194 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80073e8:	2000      	movs	r0, #0
      break;
 80073ea:	e000      	b.n	80073ee <HAL_TIM_OC_ConfigChannel+0x52>
  switch (Channel)
 80073ec:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80073ee:	2300      	movs	r3, #0
 80073f0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80073f4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80073f6:	2002      	movs	r0, #2
}
 80073f8:	4770      	bx	lr

080073fa <HAL_TIM_PWM_ConfigChannel>:
{
 80073fa:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80073fc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007400:	2b01      	cmp	r3, #1
 8007402:	d066      	beq.n	80074d2 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8007404:	4604      	mov	r4, r0
 8007406:	460d      	mov	r5, r1
 8007408:	2301      	movs	r3, #1
 800740a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800740e:	2a0c      	cmp	r2, #12
 8007410:	d85a      	bhi.n	80074c8 <HAL_TIM_PWM_ConfigChannel+0xce>
 8007412:	e8df f002 	tbb	[pc, r2]
 8007416:	5907      	.short	0x5907
 8007418:	591b5959 	.word	0x591b5959
 800741c:	59305959 	.word	0x59305959
 8007420:	5959      	.short	0x5959
 8007422:	44          	.byte	0x44
 8007423:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007424:	6800      	ldr	r0, [r0, #0]
 8007426:	f7fe fe45 	bl	80060b4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800742a:	6822      	ldr	r2, [r4, #0]
 800742c:	6993      	ldr	r3, [r2, #24]
 800742e:	f043 0308 	orr.w	r3, r3, #8
 8007432:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007434:	6822      	ldr	r2, [r4, #0]
 8007436:	6993      	ldr	r3, [r2, #24]
 8007438:	f023 0304 	bic.w	r3, r3, #4
 800743c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800743e:	6822      	ldr	r2, [r4, #0]
 8007440:	6993      	ldr	r3, [r2, #24]
 8007442:	6929      	ldr	r1, [r5, #16]
 8007444:	430b      	orrs	r3, r1
 8007446:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007448:	2000      	movs	r0, #0
      break;
 800744a:	e03e      	b.n	80074ca <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800744c:	6800      	ldr	r0, [r0, #0]
 800744e:	f7ff ff6d 	bl	800732c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007452:	6822      	ldr	r2, [r4, #0]
 8007454:	6993      	ldr	r3, [r2, #24]
 8007456:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800745a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800745c:	6822      	ldr	r2, [r4, #0]
 800745e:	6993      	ldr	r3, [r2, #24]
 8007460:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007464:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007466:	6822      	ldr	r2, [r4, #0]
 8007468:	6993      	ldr	r3, [r2, #24]
 800746a:	6929      	ldr	r1, [r5, #16]
 800746c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007470:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007472:	2000      	movs	r0, #0
      break;
 8007474:	e029      	b.n	80074ca <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007476:	6800      	ldr	r0, [r0, #0]
 8007478:	f7fe fe54 	bl	8006124 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800747c:	6822      	ldr	r2, [r4, #0]
 800747e:	69d3      	ldr	r3, [r2, #28]
 8007480:	f043 0308 	orr.w	r3, r3, #8
 8007484:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007486:	6822      	ldr	r2, [r4, #0]
 8007488:	69d3      	ldr	r3, [r2, #28]
 800748a:	f023 0304 	bic.w	r3, r3, #4
 800748e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007490:	6822      	ldr	r2, [r4, #0]
 8007492:	69d3      	ldr	r3, [r2, #28]
 8007494:	6929      	ldr	r1, [r5, #16]
 8007496:	430b      	orrs	r3, r1
 8007498:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800749a:	2000      	movs	r0, #0
      break;
 800749c:	e015      	b.n	80074ca <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800749e:	6800      	ldr	r0, [r0, #0]
 80074a0:	f7fe fe78 	bl	8006194 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074a4:	6822      	ldr	r2, [r4, #0]
 80074a6:	69d3      	ldr	r3, [r2, #28]
 80074a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80074ac:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074ae:	6822      	ldr	r2, [r4, #0]
 80074b0:	69d3      	ldr	r3, [r2, #28]
 80074b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80074b6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074b8:	6822      	ldr	r2, [r4, #0]
 80074ba:	69d3      	ldr	r3, [r2, #28]
 80074bc:	6929      	ldr	r1, [r5, #16]
 80074be:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80074c2:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80074c4:	2000      	movs	r0, #0
      break;
 80074c6:	e000      	b.n	80074ca <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 80074c8:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80074ca:	2300      	movs	r3, #0
 80074cc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80074d0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80074d2:	2002      	movs	r0, #2
 80074d4:	e7fc      	b.n	80074d0 <HAL_TIM_PWM_ConfigChannel+0xd6>
	...

080074d8 <TIM_TI1_SetConfig>:
{
 80074d8:	b470      	push	{r4, r5, r6}
 80074da:	4694      	mov	ip, r2
  tmpccer = TIMx->CCER;
 80074dc:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074de:	6a04      	ldr	r4, [r0, #32]
 80074e0:	f024 0401 	bic.w	r4, r4, #1
 80074e4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074e6:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80074e8:	4d14      	ldr	r5, [pc, #80]	@ (800753c <TIM_TI1_SetConfig+0x64>)
 80074ea:	42a8      	cmp	r0, r5
 80074ec:	d014      	beq.n	8007518 <TIM_TI1_SetConfig+0x40>
 80074ee:	4a14      	ldr	r2, [pc, #80]	@ (8007540 <TIM_TI1_SetConfig+0x68>)
 80074f0:	4290      	cmp	r0, r2
 80074f2:	d011      	beq.n	8007518 <TIM_TI1_SetConfig+0x40>
 80074f4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80074f8:	d00e      	beq.n	8007518 <TIM_TI1_SetConfig+0x40>
 80074fa:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80074fe:	4290      	cmp	r0, r2
 8007500:	d00a      	beq.n	8007518 <TIM_TI1_SetConfig+0x40>
 8007502:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007506:	4290      	cmp	r0, r2
 8007508:	d006      	beq.n	8007518 <TIM_TI1_SetConfig+0x40>
 800750a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800750e:	4290      	cmp	r0, r2
 8007510:	d002      	beq.n	8007518 <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007512:	f044 0201 	orr.w	r2, r4, #1
 8007516:	e003      	b.n	8007520 <TIM_TI1_SetConfig+0x48>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007518:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800751c:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007520:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007524:	011b      	lsls	r3, r3, #4
 8007526:	b2db      	uxtb	r3, r3
 8007528:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800752a:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800752e:	f001 010a 	and.w	r1, r1, #10
 8007532:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8007534:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007536:	6201      	str	r1, [r0, #32]
}
 8007538:	bc70      	pop	{r4, r5, r6}
 800753a:	4770      	bx	lr
 800753c:	40012c00 	.word	0x40012c00
 8007540:	40013400 	.word	0x40013400

08007544 <HAL_TIM_IC_ConfigChannel>:
{
 8007544:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007546:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800754a:	2b01      	cmp	r3, #1
 800754c:	d05a      	beq.n	8007604 <HAL_TIM_IC_ConfigChannel+0xc0>
 800754e:	4604      	mov	r4, r0
 8007550:	460d      	mov	r5, r1
 8007552:	2301      	movs	r3, #1
 8007554:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 8007558:	b152      	cbz	r2, 8007570 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 800755a:	2a04      	cmp	r2, #4
 800755c:	d01a      	beq.n	8007594 <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 800755e:	2a08      	cmp	r2, #8
 8007560:	d02b      	beq.n	80075ba <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 8007562:	2a0c      	cmp	r2, #12
 8007564:	d03b      	beq.n	80075de <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 8007566:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8007568:	2300      	movs	r3, #0
 800756a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800756e:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8007570:	68cb      	ldr	r3, [r1, #12]
 8007572:	684a      	ldr	r2, [r1, #4]
 8007574:	6809      	ldr	r1, [r1, #0]
 8007576:	6800      	ldr	r0, [r0, #0]
 8007578:	f7ff ffae 	bl	80074d8 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800757c:	6822      	ldr	r2, [r4, #0]
 800757e:	6993      	ldr	r3, [r2, #24]
 8007580:	f023 030c 	bic.w	r3, r3, #12
 8007584:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007586:	6822      	ldr	r2, [r4, #0]
 8007588:	6993      	ldr	r3, [r2, #24]
 800758a:	68a9      	ldr	r1, [r5, #8]
 800758c:	430b      	orrs	r3, r1
 800758e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007590:	2000      	movs	r0, #0
 8007592:	e7e9      	b.n	8007568 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 8007594:	68cb      	ldr	r3, [r1, #12]
 8007596:	684a      	ldr	r2, [r1, #4]
 8007598:	6809      	ldr	r1, [r1, #0]
 800759a:	6800      	ldr	r0, [r0, #0]
 800759c:	f7fe fe34 	bl	8006208 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80075a0:	6822      	ldr	r2, [r4, #0]
 80075a2:	6993      	ldr	r3, [r2, #24]
 80075a4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80075a8:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80075aa:	6822      	ldr	r2, [r4, #0]
 80075ac:	6993      	ldr	r3, [r2, #24]
 80075ae:	68a9      	ldr	r1, [r5, #8]
 80075b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80075b4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80075b6:	2000      	movs	r0, #0
 80075b8:	e7d6      	b.n	8007568 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 80075ba:	68cb      	ldr	r3, [r1, #12]
 80075bc:	684a      	ldr	r2, [r1, #4]
 80075be:	6809      	ldr	r1, [r1, #0]
 80075c0:	6800      	ldr	r0, [r0, #0]
 80075c2:	f7fe fe4f 	bl	8006264 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80075c6:	6822      	ldr	r2, [r4, #0]
 80075c8:	69d3      	ldr	r3, [r2, #28]
 80075ca:	f023 030c 	bic.w	r3, r3, #12
 80075ce:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80075d0:	6822      	ldr	r2, [r4, #0]
 80075d2:	69d3      	ldr	r3, [r2, #28]
 80075d4:	68a9      	ldr	r1, [r5, #8]
 80075d6:	430b      	orrs	r3, r1
 80075d8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80075da:	2000      	movs	r0, #0
 80075dc:	e7c4      	b.n	8007568 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 80075de:	68cb      	ldr	r3, [r1, #12]
 80075e0:	684a      	ldr	r2, [r1, #4]
 80075e2:	6809      	ldr	r1, [r1, #0]
 80075e4:	6800      	ldr	r0, [r0, #0]
 80075e6:	f7fe fe58 	bl	800629a <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80075ea:	6822      	ldr	r2, [r4, #0]
 80075ec:	69d3      	ldr	r3, [r2, #28]
 80075ee:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80075f2:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80075f4:	6822      	ldr	r2, [r4, #0]
 80075f6:	69d3      	ldr	r3, [r2, #28]
 80075f8:	68a9      	ldr	r1, [r5, #8]
 80075fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80075fe:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007600:	2000      	movs	r0, #0
 8007602:	e7b1      	b.n	8007568 <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 8007604:	2002      	movs	r0, #2
 8007606:	e7b2      	b.n	800756e <HAL_TIM_IC_ConfigChannel+0x2a>

08007608 <HAL_TIM_OnePulse_ConfigChannel>:
  if (OutputChannel != InputChannel)
 8007608:	429a      	cmp	r2, r3
 800760a:	d076      	beq.n	80076fa <HAL_TIM_OnePulse_ConfigChannel+0xf2>
{
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	b088      	sub	sp, #32
 8007610:	4604      	mov	r4, r0
 8007612:	460d      	mov	r5, r1
 8007614:	461e      	mov	r6, r3
    __HAL_LOCK(htim);
 8007616:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800761a:	2b01      	cmp	r3, #1
 800761c:	d06f      	beq.n	80076fe <HAL_TIM_OnePulse_ConfigChannel+0xf6>
 800761e:	2301      	movs	r3, #1
 8007620:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    htim->State = HAL_TIM_STATE_BUSY;
 8007624:	2302      	movs	r3, #2
 8007626:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    temp1.OCMode = sConfig->OCMode;
 800762a:	680b      	ldr	r3, [r1, #0]
 800762c:	9301      	str	r3, [sp, #4]
    temp1.Pulse = sConfig->Pulse;
 800762e:	684b      	ldr	r3, [r1, #4]
 8007630:	9302      	str	r3, [sp, #8]
    temp1.OCPolarity = sConfig->OCPolarity;
 8007632:	688b      	ldr	r3, [r1, #8]
 8007634:	9303      	str	r3, [sp, #12]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 8007636:	68cb      	ldr	r3, [r1, #12]
 8007638:	9304      	str	r3, [sp, #16]
    temp1.OCIdleState = sConfig->OCIdleState;
 800763a:	690b      	ldr	r3, [r1, #16]
 800763c:	9306      	str	r3, [sp, #24]
    temp1.OCNIdleState = sConfig->OCNIdleState;
 800763e:	694b      	ldr	r3, [r1, #20]
 8007640:	9307      	str	r3, [sp, #28]
    switch (OutputChannel)
 8007642:	b152      	cbz	r2, 800765a <HAL_TIM_OnePulse_ConfigChannel+0x52>
 8007644:	2a04      	cmp	r2, #4
 8007646:	d011      	beq.n	800766c <HAL_TIM_OnePulse_ConfigChannel+0x64>
 8007648:	2001      	movs	r0, #1
    htim->State = HAL_TIM_STATE_READY;
 800764a:	2301      	movs	r3, #1
 800764c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007650:	2300      	movs	r3, #0
 8007652:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8007656:	b008      	add	sp, #32
 8007658:	bd70      	pop	{r4, r5, r6, pc}
        TIM_OC1_SetConfig(htim->Instance, &temp1);
 800765a:	a901      	add	r1, sp, #4
 800765c:	6800      	ldr	r0, [r0, #0]
 800765e:	f7fe fd29 	bl	80060b4 <TIM_OC1_SetConfig>
      switch (InputChannel)
 8007662:	b146      	cbz	r6, 8007676 <HAL_TIM_OnePulse_ConfigChannel+0x6e>
 8007664:	2e04      	cmp	r6, #4
 8007666:	d027      	beq.n	80076b8 <HAL_TIM_OnePulse_ConfigChannel+0xb0>
 8007668:	2001      	movs	r0, #1
 800766a:	e7ee      	b.n	800764a <HAL_TIM_OnePulse_ConfigChannel+0x42>
        TIM_OC2_SetConfig(htim->Instance, &temp1);
 800766c:	a901      	add	r1, sp, #4
 800766e:	6800      	ldr	r0, [r0, #0]
 8007670:	f7ff fe5c 	bl	800732c <TIM_OC2_SetConfig>
    if (status == HAL_OK)
 8007674:	e7f5      	b.n	8007662 <HAL_TIM_OnePulse_ConfigChannel+0x5a>
          TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 8007676:	6a2b      	ldr	r3, [r5, #32]
 8007678:	69ea      	ldr	r2, [r5, #28]
 800767a:	69a9      	ldr	r1, [r5, #24]
 800767c:	6820      	ldr	r0, [r4, #0]
 800767e:	f7ff ff2b 	bl	80074d8 <TIM_TI1_SetConfig>
          htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007682:	6822      	ldr	r2, [r4, #0]
 8007684:	6993      	ldr	r3, [r2, #24]
 8007686:	f023 030c 	bic.w	r3, r3, #12
 800768a:	6193      	str	r3, [r2, #24]
          htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800768c:	6822      	ldr	r2, [r4, #0]
 800768e:	6893      	ldr	r3, [r2, #8]
 8007690:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007694:	6093      	str	r3, [r2, #8]
          htim->Instance->SMCR |= TIM_TS_TI1FP1;
 8007696:	6822      	ldr	r2, [r4, #0]
 8007698:	6893      	ldr	r3, [r2, #8]
 800769a:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800769e:	6093      	str	r3, [r2, #8]
          htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80076a0:	6822      	ldr	r2, [r4, #0]
 80076a2:	6893      	ldr	r3, [r2, #8]
 80076a4:	f023 0307 	bic.w	r3, r3, #7
 80076a8:	6093      	str	r3, [r2, #8]
          htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 80076aa:	6822      	ldr	r2, [r4, #0]
 80076ac:	6893      	ldr	r3, [r2, #8]
 80076ae:	f043 0306 	orr.w	r3, r3, #6
 80076b2:	6093      	str	r3, [r2, #8]
          break;
 80076b4:	2000      	movs	r0, #0
 80076b6:	e7c8      	b.n	800764a <HAL_TIM_OnePulse_ConfigChannel+0x42>
          TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 80076b8:	6a2b      	ldr	r3, [r5, #32]
 80076ba:	69ea      	ldr	r2, [r5, #28]
 80076bc:	69a9      	ldr	r1, [r5, #24]
 80076be:	6820      	ldr	r0, [r4, #0]
 80076c0:	f7fe fda2 	bl	8006208 <TIM_TI2_SetConfig>
          htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80076c4:	6822      	ldr	r2, [r4, #0]
 80076c6:	6993      	ldr	r3, [r2, #24]
 80076c8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80076cc:	6193      	str	r3, [r2, #24]
          htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80076ce:	6822      	ldr	r2, [r4, #0]
 80076d0:	6893      	ldr	r3, [r2, #8]
 80076d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076d6:	6093      	str	r3, [r2, #8]
          htim->Instance->SMCR |= TIM_TS_TI2FP2;
 80076d8:	6822      	ldr	r2, [r4, #0]
 80076da:	6893      	ldr	r3, [r2, #8]
 80076dc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80076e0:	6093      	str	r3, [r2, #8]
          htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80076e2:	6822      	ldr	r2, [r4, #0]
 80076e4:	6893      	ldr	r3, [r2, #8]
 80076e6:	f023 0307 	bic.w	r3, r3, #7
 80076ea:	6093      	str	r3, [r2, #8]
          htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 80076ec:	6822      	ldr	r2, [r4, #0]
 80076ee:	6893      	ldr	r3, [r2, #8]
 80076f0:	f043 0306 	orr.w	r3, r3, #6
 80076f4:	6093      	str	r3, [r2, #8]
          break;
 80076f6:	2000      	movs	r0, #0
 80076f8:	e7a7      	b.n	800764a <HAL_TIM_OnePulse_ConfigChannel+0x42>
    return HAL_ERROR;
 80076fa:	2001      	movs	r0, #1
}
 80076fc:	4770      	bx	lr
    __HAL_LOCK(htim);
 80076fe:	2002      	movs	r0, #2
 8007700:	e7a9      	b.n	8007656 <HAL_TIM_OnePulse_ConfigChannel+0x4e>

08007702 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007702:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007704:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007706:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800770a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800770e:	430a      	orrs	r2, r1
 8007710:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007714:	6082      	str	r2, [r0, #8]
}
 8007716:	bc10      	pop	{r4}
 8007718:	4770      	bx	lr

0800771a <HAL_TIM_ConfigOCrefClear>:
  __HAL_LOCK(htim);
 800771a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800771e:	2b01      	cmp	r3, #1
 8007720:	d076      	beq.n	8007810 <HAL_TIM_ConfigOCrefClear+0xf6>
{
 8007722:	b570      	push	{r4, r5, r6, lr}
 8007724:	4604      	mov	r4, r0
 8007726:	460d      	mov	r5, r1
 8007728:	4616      	mov	r6, r2
  __HAL_LOCK(htim);
 800772a:	2301      	movs	r3, #1
 800772c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007730:	2302      	movs	r3, #2
 8007732:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  switch (sClearInputConfig->ClearInputSource)
 8007736:	684b      	ldr	r3, [r1, #4]
 8007738:	b14b      	cbz	r3, 800774e <HAL_TIM_ConfigOCrefClear+0x34>
 800773a:	2b01      	cmp	r3, #1
 800773c:	d017      	beq.n	800776e <HAL_TIM_ConfigOCrefClear+0x54>
 800773e:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8007740:	2301      	movs	r3, #1
 8007742:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007746:	2300      	movs	r3, #0
 8007748:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800774c:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 800774e:	6802      	ldr	r2, [r0, #0]
 8007750:	6893      	ldr	r3, [r2, #8]
 8007752:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007756:	6093      	str	r3, [r2, #8]
    switch (Channel)
 8007758:	2e0c      	cmp	r6, #12
 800775a:	d857      	bhi.n	800780c <HAL_TIM_ConfigOCrefClear+0xf2>
 800775c:	e8df f006 	tbb	[pc, r6]
 8007760:	56565616 	.word	0x56565616
 8007764:	56565626 	.word	0x56565626
 8007768:	56565636 	.word	0x56565636
 800776c:	46          	.byte	0x46
 800776d:	00          	.byte	0x00
      if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
 800776e:	68c9      	ldr	r1, [r1, #12]
 8007770:	b131      	cbz	r1, 8007780 <HAL_TIM_ConfigOCrefClear+0x66>
        htim->State = HAL_TIM_STATE_READY;
 8007772:	2001      	movs	r0, #1
 8007774:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(htim);
 8007778:	2300      	movs	r3, #0
 800777a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 800777e:	e7e5      	b.n	800774c <HAL_TIM_ConfigOCrefClear+0x32>
      TIM_ETR_SetConfig(htim->Instance,
 8007780:	692b      	ldr	r3, [r5, #16]
 8007782:	68aa      	ldr	r2, [r5, #8]
 8007784:	6800      	ldr	r0, [r0, #0]
 8007786:	f7ff ffbc 	bl	8007702 <TIM_ETR_SetConfig>
  if (status == HAL_OK)
 800778a:	e7e5      	b.n	8007758 <HAL_TIM_ConfigOCrefClear+0x3e>
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800778c:	682b      	ldr	r3, [r5, #0]
 800778e:	b133      	cbz	r3, 800779e <HAL_TIM_ConfigOCrefClear+0x84>
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 8007790:	6822      	ldr	r2, [r4, #0]
 8007792:	6993      	ldr	r3, [r2, #24]
 8007794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007798:	6193      	str	r3, [r2, #24]
 800779a:	2000      	movs	r0, #0
 800779c:	e7d0      	b.n	8007740 <HAL_TIM_ConfigOCrefClear+0x26>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 800779e:	6822      	ldr	r2, [r4, #0]
 80077a0:	6993      	ldr	r3, [r2, #24]
 80077a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077a6:	6193      	str	r3, [r2, #24]
 80077a8:	2000      	movs	r0, #0
 80077aa:	e7c9      	b.n	8007740 <HAL_TIM_ConfigOCrefClear+0x26>
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 80077ac:	682b      	ldr	r3, [r5, #0]
 80077ae:	b133      	cbz	r3, 80077be <HAL_TIM_ConfigOCrefClear+0xa4>
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 80077b0:	6822      	ldr	r2, [r4, #0]
 80077b2:	6993      	ldr	r3, [r2, #24]
 80077b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077b8:	6193      	str	r3, [r2, #24]
 80077ba:	2000      	movs	r0, #0
 80077bc:	e7c0      	b.n	8007740 <HAL_TIM_ConfigOCrefClear+0x26>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 80077be:	6822      	ldr	r2, [r4, #0]
 80077c0:	6993      	ldr	r3, [r2, #24]
 80077c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80077c6:	6193      	str	r3, [r2, #24]
 80077c8:	2000      	movs	r0, #0
 80077ca:	e7b9      	b.n	8007740 <HAL_TIM_ConfigOCrefClear+0x26>
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 80077cc:	682b      	ldr	r3, [r5, #0]
 80077ce:	b133      	cbz	r3, 80077de <HAL_TIM_ConfigOCrefClear+0xc4>
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 80077d0:	6822      	ldr	r2, [r4, #0]
 80077d2:	69d3      	ldr	r3, [r2, #28]
 80077d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077d8:	61d3      	str	r3, [r2, #28]
 80077da:	2000      	movs	r0, #0
 80077dc:	e7b0      	b.n	8007740 <HAL_TIM_ConfigOCrefClear+0x26>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 80077de:	6822      	ldr	r2, [r4, #0]
 80077e0:	69d3      	ldr	r3, [r2, #28]
 80077e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077e6:	61d3      	str	r3, [r2, #28]
 80077e8:	2000      	movs	r0, #0
 80077ea:	e7a9      	b.n	8007740 <HAL_TIM_ConfigOCrefClear+0x26>
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	b133      	cbz	r3, 80077fe <HAL_TIM_ConfigOCrefClear+0xe4>
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 80077f0:	6822      	ldr	r2, [r4, #0]
 80077f2:	69d3      	ldr	r3, [r2, #28]
 80077f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077f8:	61d3      	str	r3, [r2, #28]
 80077fa:	2000      	movs	r0, #0
 80077fc:	e7a0      	b.n	8007740 <HAL_TIM_ConfigOCrefClear+0x26>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 80077fe:	6822      	ldr	r2, [r4, #0]
 8007800:	69d3      	ldr	r3, [r2, #28]
 8007802:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007806:	61d3      	str	r3, [r2, #28]
 8007808:	2000      	movs	r0, #0
 800780a:	e799      	b.n	8007740 <HAL_TIM_ConfigOCrefClear+0x26>
    switch (Channel)
 800780c:	2000      	movs	r0, #0
 800780e:	e797      	b.n	8007740 <HAL_TIM_ConfigOCrefClear+0x26>
  __HAL_LOCK(htim);
 8007810:	2002      	movs	r0, #2
}
 8007812:	4770      	bx	lr

08007814 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007814:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007818:	2b01      	cmp	r3, #1
 800781a:	d078      	beq.n	800790e <HAL_TIM_ConfigClockSource+0xfa>
{
 800781c:	b510      	push	{r4, lr}
 800781e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007820:	2301      	movs	r3, #1
 8007822:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007826:	2302      	movs	r3, #2
 8007828:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800782c:	6802      	ldr	r2, [r0, #0]
 800782e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007830:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007834:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007838:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800783a:	680b      	ldr	r3, [r1, #0]
 800783c:	2b60      	cmp	r3, #96	@ 0x60
 800783e:	d04c      	beq.n	80078da <HAL_TIM_ConfigClockSource+0xc6>
 8007840:	d829      	bhi.n	8007896 <HAL_TIM_ConfigClockSource+0x82>
 8007842:	2b40      	cmp	r3, #64	@ 0x40
 8007844:	d054      	beq.n	80078f0 <HAL_TIM_ConfigClockSource+0xdc>
 8007846:	d90c      	bls.n	8007862 <HAL_TIM_ConfigClockSource+0x4e>
 8007848:	2b50      	cmp	r3, #80	@ 0x50
 800784a:	d122      	bne.n	8007892 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800784c:	68ca      	ldr	r2, [r1, #12]
 800784e:	6849      	ldr	r1, [r1, #4]
 8007850:	6800      	ldr	r0, [r0, #0]
 8007852:	f7fe fcc7 	bl	80061e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007856:	2150      	movs	r1, #80	@ 0x50
 8007858:	6820      	ldr	r0, [r4, #0]
 800785a:	f7fe fd39 	bl	80062d0 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800785e:	2000      	movs	r0, #0
      break;
 8007860:	e005      	b.n	800786e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8007862:	2b20      	cmp	r3, #32
 8007864:	d00d      	beq.n	8007882 <HAL_TIM_ConfigClockSource+0x6e>
 8007866:	d909      	bls.n	800787c <HAL_TIM_ConfigClockSource+0x68>
 8007868:	2b30      	cmp	r3, #48	@ 0x30
 800786a:	d00a      	beq.n	8007882 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 800786c:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800786e:	2301      	movs	r3, #1
 8007870:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007874:	2300      	movs	r3, #0
 8007876:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800787a:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800787c:	b10b      	cbz	r3, 8007882 <HAL_TIM_ConfigClockSource+0x6e>
 800787e:	2b10      	cmp	r3, #16
 8007880:	d105      	bne.n	800788e <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007882:	4619      	mov	r1, r3
 8007884:	6820      	ldr	r0, [r4, #0]
 8007886:	f7fe fd23 	bl	80062d0 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800788a:	2000      	movs	r0, #0
      break;
 800788c:	e7ef      	b.n	800786e <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 800788e:	2001      	movs	r0, #1
 8007890:	e7ed      	b.n	800786e <HAL_TIM_ConfigClockSource+0x5a>
 8007892:	2001      	movs	r0, #1
 8007894:	e7eb      	b.n	800786e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8007896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800789a:	d034      	beq.n	8007906 <HAL_TIM_ConfigClockSource+0xf2>
 800789c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078a0:	d10c      	bne.n	80078bc <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 80078a2:	68cb      	ldr	r3, [r1, #12]
 80078a4:	684a      	ldr	r2, [r1, #4]
 80078a6:	6889      	ldr	r1, [r1, #8]
 80078a8:	6800      	ldr	r0, [r0, #0]
 80078aa:	f7ff ff2a 	bl	8007702 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078ae:	6822      	ldr	r2, [r4, #0]
 80078b0:	6893      	ldr	r3, [r2, #8]
 80078b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078b6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80078b8:	2000      	movs	r0, #0
      break;
 80078ba:	e7d8      	b.n	800786e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80078bc:	2b70      	cmp	r3, #112	@ 0x70
 80078be:	d124      	bne.n	800790a <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 80078c0:	68cb      	ldr	r3, [r1, #12]
 80078c2:	684a      	ldr	r2, [r1, #4]
 80078c4:	6889      	ldr	r1, [r1, #8]
 80078c6:	6800      	ldr	r0, [r0, #0]
 80078c8:	f7ff ff1b 	bl	8007702 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80078cc:	6822      	ldr	r2, [r4, #0]
 80078ce:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80078d4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80078d6:	2000      	movs	r0, #0
      break;
 80078d8:	e7c9      	b.n	800786e <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078da:	68ca      	ldr	r2, [r1, #12]
 80078dc:	6849      	ldr	r1, [r1, #4]
 80078de:	6800      	ldr	r0, [r0, #0]
 80078e0:	f7fe fcad 	bl	800623e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078e4:	2160      	movs	r1, #96	@ 0x60
 80078e6:	6820      	ldr	r0, [r4, #0]
 80078e8:	f7fe fcf2 	bl	80062d0 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80078ec:	2000      	movs	r0, #0
      break;
 80078ee:	e7be      	b.n	800786e <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078f0:	68ca      	ldr	r2, [r1, #12]
 80078f2:	6849      	ldr	r1, [r1, #4]
 80078f4:	6800      	ldr	r0, [r0, #0]
 80078f6:	f7fe fc75 	bl	80061e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078fa:	2140      	movs	r1, #64	@ 0x40
 80078fc:	6820      	ldr	r0, [r4, #0]
 80078fe:	f7fe fce7 	bl	80062d0 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007902:	2000      	movs	r0, #0
      break;
 8007904:	e7b3      	b.n	800786e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8007906:	2000      	movs	r0, #0
 8007908:	e7b1      	b.n	800786e <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 800790a:	2001      	movs	r0, #1
 800790c:	e7af      	b.n	800786e <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800790e:	2002      	movs	r0, #2
}
 8007910:	4770      	bx	lr

08007912 <TIM_SlaveTimer_SetConfig>:
{
 8007912:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 8007914:	6804      	ldr	r4, [r0, #0]
 8007916:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007918:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800791c:	684b      	ldr	r3, [r1, #4]
 800791e:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007920:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007924:	680a      	ldr	r2, [r1, #0]
 8007926:	431a      	orrs	r2, r3
  htim->Instance->SMCR = tmpsmcr;
 8007928:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 800792a:	684b      	ldr	r3, [r1, #4]
 800792c:	2b50      	cmp	r3, #80	@ 0x50
 800792e:	d032      	beq.n	8007996 <TIM_SlaveTimer_SetConfig+0x84>
 8007930:	d90b      	bls.n	800794a <TIM_SlaveTimer_SetConfig+0x38>
 8007932:	2b60      	cmp	r3, #96	@ 0x60
 8007934:	d036      	beq.n	80079a4 <TIM_SlaveTimer_SetConfig+0x92>
 8007936:	2b70      	cmp	r3, #112	@ 0x70
 8007938:	d143      	bne.n	80079c2 <TIM_SlaveTimer_SetConfig+0xb0>
      TIM_ETR_SetConfig(htim->Instance,
 800793a:	690b      	ldr	r3, [r1, #16]
 800793c:	688a      	ldr	r2, [r1, #8]
 800793e:	68c9      	ldr	r1, [r1, #12]
 8007940:	6800      	ldr	r0, [r0, #0]
 8007942:	f7ff fede 	bl	8007702 <TIM_ETR_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007946:	2000      	movs	r0, #0
      break;
 8007948:	e00f      	b.n	800796a <TIM_SlaveTimer_SetConfig+0x58>
  switch (sSlaveConfig->InputTrigger)
 800794a:	2b40      	cmp	r3, #64	@ 0x40
 800794c:	d00e      	beq.n	800796c <TIM_SlaveTimer_SetConfig+0x5a>
 800794e:	d901      	bls.n	8007954 <TIM_SlaveTimer_SetConfig+0x42>
      status = HAL_ERROR;
 8007950:	2001      	movs	r0, #1
 8007952:	e00a      	b.n	800796a <TIM_SlaveTimer_SetConfig+0x58>
  switch (sSlaveConfig->InputTrigger)
 8007954:	2b20      	cmp	r3, #32
 8007956:	d02c      	beq.n	80079b2 <TIM_SlaveTimer_SetConfig+0xa0>
 8007958:	d903      	bls.n	8007962 <TIM_SlaveTimer_SetConfig+0x50>
 800795a:	2b30      	cmp	r3, #48	@ 0x30
 800795c:	d12f      	bne.n	80079be <TIM_SlaveTimer_SetConfig+0xac>
 800795e:	2000      	movs	r0, #0
 8007960:	e003      	b.n	800796a <TIM_SlaveTimer_SetConfig+0x58>
 8007962:	b343      	cbz	r3, 80079b6 <TIM_SlaveTimer_SetConfig+0xa4>
 8007964:	2b10      	cmp	r3, #16
 8007966:	d128      	bne.n	80079ba <TIM_SlaveTimer_SetConfig+0xa8>
 8007968:	2000      	movs	r0, #0
}
 800796a:	bd10      	pop	{r4, pc}
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800796c:	680b      	ldr	r3, [r1, #0]
 800796e:	2b05      	cmp	r3, #5
 8007970:	d029      	beq.n	80079c6 <TIM_SlaveTimer_SetConfig+0xb4>
      tmpccer = htim->Instance->CCER;
 8007972:	6803      	ldr	r3, [r0, #0]
 8007974:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007976:	6a1a      	ldr	r2, [r3, #32]
 8007978:	f022 0201 	bic.w	r2, r2, #1
 800797c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800797e:	6802      	ldr	r2, [r0, #0]
 8007980:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007982:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007986:	6909      	ldr	r1, [r1, #16]
 8007988:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800798c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 800798e:	6803      	ldr	r3, [r0, #0]
 8007990:	621c      	str	r4, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8007992:	2000      	movs	r0, #0
      break;
 8007994:	e7e9      	b.n	800796a <TIM_SlaveTimer_SetConfig+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007996:	690a      	ldr	r2, [r1, #16]
 8007998:	6889      	ldr	r1, [r1, #8]
 800799a:	6800      	ldr	r0, [r0, #0]
 800799c:	f7fe fc22 	bl	80061e4 <TIM_TI1_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 80079a0:	2000      	movs	r0, #0
      break;
 80079a2:	e7e2      	b.n	800796a <TIM_SlaveTimer_SetConfig+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079a4:	690a      	ldr	r2, [r1, #16]
 80079a6:	6889      	ldr	r1, [r1, #8]
 80079a8:	6800      	ldr	r0, [r0, #0]
 80079aa:	f7fe fc48 	bl	800623e <TIM_TI2_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 80079ae:	2000      	movs	r0, #0
      break;
 80079b0:	e7db      	b.n	800796a <TIM_SlaveTimer_SetConfig+0x58>
  switch (sSlaveConfig->InputTrigger)
 80079b2:	2000      	movs	r0, #0
 80079b4:	e7d9      	b.n	800796a <TIM_SlaveTimer_SetConfig+0x58>
 80079b6:	2000      	movs	r0, #0
 80079b8:	e7d7      	b.n	800796a <TIM_SlaveTimer_SetConfig+0x58>
      status = HAL_ERROR;
 80079ba:	2001      	movs	r0, #1
 80079bc:	e7d5      	b.n	800796a <TIM_SlaveTimer_SetConfig+0x58>
 80079be:	2001      	movs	r0, #1
 80079c0:	e7d3      	b.n	800796a <TIM_SlaveTimer_SetConfig+0x58>
 80079c2:	2001      	movs	r0, #1
 80079c4:	e7d1      	b.n	800796a <TIM_SlaveTimer_SetConfig+0x58>
        return HAL_ERROR;
 80079c6:	2001      	movs	r0, #1
 80079c8:	e7cf      	b.n	800796a <TIM_SlaveTimer_SetConfig+0x58>

080079ca <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80079ca:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d022      	beq.n	8007a18 <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 80079d2:	b510      	push	{r4, lr}
 80079d4:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80079d6:	2301      	movs	r3, #1
 80079d8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80079dc:	2302      	movs	r3, #2
 80079de:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80079e2:	f7ff ff96 	bl	8007912 <TIM_SlaveTimer_SetConfig>
 80079e6:	b980      	cbnz	r0, 8007a0a <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80079e8:	6822      	ldr	r2, [r4, #0]
 80079ea:	68d3      	ldr	r3, [r2, #12]
 80079ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079f0:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80079f2:	6822      	ldr	r2, [r4, #0]
 80079f4:	68d3      	ldr	r3, [r2, #12]
 80079f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079fa:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 80079fc:	2301      	movs	r3, #1
 80079fe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007a02:	2300      	movs	r3, #0
 8007a04:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8007a08:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 8007a0a:	2001      	movs	r0, #1
 8007a0c:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007a10:	2300      	movs	r3, #0
 8007a12:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8007a16:	e7f7      	b.n	8007a08 <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 8007a18:	2002      	movs	r0, #2
}
 8007a1a:	4770      	bx	lr

08007a1c <HAL_TIM_SlaveConfigSynchro_IT>:
  __HAL_LOCK(htim);
 8007a1c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d022      	beq.n	8007a6a <HAL_TIM_SlaveConfigSynchro_IT+0x4e>
{
 8007a24:	b510      	push	{r4, lr}
 8007a26:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007a28:	2301      	movs	r3, #1
 8007a2a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007a2e:	2302      	movs	r3, #2
 8007a30:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007a34:	f7ff ff6d 	bl	8007912 <TIM_SlaveTimer_SetConfig>
 8007a38:	b980      	cbnz	r0, 8007a5c <HAL_TIM_SlaveConfigSynchro_IT+0x40>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 8007a3a:	6822      	ldr	r2, [r4, #0]
 8007a3c:	68d3      	ldr	r3, [r2, #12]
 8007a3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a42:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007a44:	6822      	ldr	r2, [r4, #0]
 8007a46:	68d3      	ldr	r3, [r2, #12]
 8007a48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a4c:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007a54:	2300      	movs	r3, #0
 8007a56:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8007a5a:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 8007a5c:	2001      	movs	r0, #1
 8007a5e:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007a62:	2300      	movs	r3, #0
 8007a64:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8007a68:	e7f7      	b.n	8007a5a <HAL_TIM_SlaveConfigSynchro_IT+0x3e>
  __HAL_LOCK(htim);
 8007a6a:	2002      	movs	r0, #2
}
 8007a6c:	4770      	bx	lr

08007a6e <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a6e:	f001 011f 	and.w	r1, r1, #31
 8007a72:	f04f 0c01 	mov.w	ip, #1
 8007a76:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a7a:	6a03      	ldr	r3, [r0, #32]
 8007a7c:	ea23 030c 	bic.w	r3, r3, ip
 8007a80:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a82:	6a03      	ldr	r3, [r0, #32]
 8007a84:	408a      	lsls	r2, r1
 8007a86:	4313      	orrs	r3, r2
 8007a88:	6203      	str	r3, [r0, #32]
}
 8007a8a:	4770      	bx	lr

08007a8c <HAL_TIM_OC_Start>:
{
 8007a8c:	b510      	push	{r4, lr}
 8007a8e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a90:	4608      	mov	r0, r1
 8007a92:	2900      	cmp	r1, #0
 8007a94:	d13a      	bne.n	8007b0c <HAL_TIM_OC_Start+0x80>
 8007a96:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	bf18      	it	ne
 8007aa0:	2301      	movne	r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d166      	bne.n	8007b74 <HAL_TIM_OC_Start+0xe8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d149      	bne.n	8007b3e <HAL_TIM_OC_Start+0xb2>
 8007aaa:	2302      	movs	r3, #2
 8007aac:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	4601      	mov	r1, r0
 8007ab4:	6820      	ldr	r0, [r4, #0]
 8007ab6:	f7ff ffda 	bl	8007a6e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	4a2f      	ldr	r2, [pc, #188]	@ (8007b7c <HAL_TIM_OC_Start+0xf0>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d003      	beq.n	8007aca <HAL_TIM_OC_Start+0x3e>
 8007ac2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d103      	bne.n	8007ad2 <HAL_TIM_OC_Start+0x46>
    __HAL_TIM_MOE_ENABLE(htim);
 8007aca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007acc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ad0:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	4a29      	ldr	r2, [pc, #164]	@ (8007b7c <HAL_TIM_OC_Start+0xf0>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d041      	beq.n	8007b5e <HAL_TIM_OC_Start+0xd2>
 8007ada:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d03d      	beq.n	8007b5e <HAL_TIM_OC_Start+0xd2>
 8007ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ae6:	d03a      	beq.n	8007b5e <HAL_TIM_OC_Start+0xd2>
 8007ae8:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d036      	beq.n	8007b5e <HAL_TIM_OC_Start+0xd2>
 8007af0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d032      	beq.n	8007b5e <HAL_TIM_OC_Start+0xd2>
 8007af8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d02e      	beq.n	8007b5e <HAL_TIM_OC_Start+0xd2>
    __HAL_TIM_ENABLE(htim);
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	f042 0201 	orr.w	r2, r2, #1
 8007b06:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007b08:	2000      	movs	r0, #0
 8007b0a:	e032      	b.n	8007b72 <HAL_TIM_OC_Start+0xe6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b0c:	2904      	cmp	r1, #4
 8007b0e:	d008      	beq.n	8007b22 <HAL_TIM_OC_Start+0x96>
 8007b10:	2908      	cmp	r1, #8
 8007b12:	d00d      	beq.n	8007b30 <HAL_TIM_OC_Start+0xa4>
 8007b14:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	bf18      	it	ne
 8007b1e:	2301      	movne	r3, #1
 8007b20:	e7bf      	b.n	8007aa2 <HAL_TIM_OC_Start+0x16>
 8007b22:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	bf18      	it	ne
 8007b2c:	2301      	movne	r3, #1
 8007b2e:	e7b8      	b.n	8007aa2 <HAL_TIM_OC_Start+0x16>
 8007b30:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	3b01      	subs	r3, #1
 8007b38:	bf18      	it	ne
 8007b3a:	2301      	movne	r3, #1
 8007b3c:	e7b1      	b.n	8007aa2 <HAL_TIM_OC_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b3e:	2804      	cmp	r0, #4
 8007b40:	d005      	beq.n	8007b4e <HAL_TIM_OC_Start+0xc2>
 8007b42:	2808      	cmp	r0, #8
 8007b44:	d007      	beq.n	8007b56 <HAL_TIM_OC_Start+0xca>
 8007b46:	2302      	movs	r3, #2
 8007b48:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8007b4c:	e7b0      	b.n	8007ab0 <HAL_TIM_OC_Start+0x24>
 8007b4e:	2302      	movs	r3, #2
 8007b50:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007b54:	e7ac      	b.n	8007ab0 <HAL_TIM_OC_Start+0x24>
 8007b56:	2302      	movs	r3, #2
 8007b58:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8007b5c:	e7a8      	b.n	8007ab0 <HAL_TIM_OC_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b64:	2a06      	cmp	r2, #6
 8007b66:	d007      	beq.n	8007b78 <HAL_TIM_OC_Start+0xec>
      __HAL_TIM_ENABLE(htim);
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	f042 0201 	orr.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007b70:	2000      	movs	r0, #0
}
 8007b72:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007b74:	2001      	movs	r0, #1
 8007b76:	e7fc      	b.n	8007b72 <HAL_TIM_OC_Start+0xe6>
  return HAL_OK;
 8007b78:	2000      	movs	r0, #0
 8007b7a:	e7fa      	b.n	8007b72 <HAL_TIM_OC_Start+0xe6>
 8007b7c:	40012c00 	.word	0x40012c00

08007b80 <HAL_TIM_OC_Stop>:
{
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4604      	mov	r4, r0
 8007b84:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007b86:	2200      	movs	r2, #0
 8007b88:	6800      	ldr	r0, [r0, #0]
 8007b8a:	f7ff ff70 	bl	8007a6e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	4a1d      	ldr	r2, [pc, #116]	@ (8007c08 <HAL_TIM_OC_Stop+0x88>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d018      	beq.n	8007bc8 <HAL_TIM_OC_Stop+0x48>
 8007b96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d014      	beq.n	8007bc8 <HAL_TIM_OC_Stop+0x48>
  __HAL_TIM_DISABLE(htim);
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	6a19      	ldr	r1, [r3, #32]
 8007ba2:	f241 1211 	movw	r2, #4369	@ 0x1111
 8007ba6:	4211      	tst	r1, r2
 8007ba8:	d108      	bne.n	8007bbc <HAL_TIM_OC_Stop+0x3c>
 8007baa:	6a19      	ldr	r1, [r3, #32]
 8007bac:	f240 4244 	movw	r2, #1092	@ 0x444
 8007bb0:	4211      	tst	r1, r2
 8007bb2:	d103      	bne.n	8007bbc <HAL_TIM_OC_Stop+0x3c>
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	f022 0201 	bic.w	r2, r2, #1
 8007bba:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007bbc:	b99d      	cbnz	r5, 8007be6 <HAL_TIM_OC_Stop+0x66>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
}
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8007bc8:	6a19      	ldr	r1, [r3, #32]
 8007bca:	f241 1211 	movw	r2, #4369	@ 0x1111
 8007bce:	4211      	tst	r1, r2
 8007bd0:	d1e5      	bne.n	8007b9e <HAL_TIM_OC_Stop+0x1e>
 8007bd2:	6a19      	ldr	r1, [r3, #32]
 8007bd4:	f240 4244 	movw	r2, #1092	@ 0x444
 8007bd8:	4211      	tst	r1, r2
 8007bda:	d1e0      	bne.n	8007b9e <HAL_TIM_OC_Stop+0x1e>
 8007bdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bde:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007be2:	645a      	str	r2, [r3, #68]	@ 0x44
 8007be4:	e7db      	b.n	8007b9e <HAL_TIM_OC_Stop+0x1e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007be6:	2d04      	cmp	r5, #4
 8007be8:	d005      	beq.n	8007bf6 <HAL_TIM_OC_Stop+0x76>
 8007bea:	2d08      	cmp	r5, #8
 8007bec:	d007      	beq.n	8007bfe <HAL_TIM_OC_Stop+0x7e>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8007bf4:	e7e6      	b.n	8007bc4 <HAL_TIM_OC_Stop+0x44>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007bfc:	e7e2      	b.n	8007bc4 <HAL_TIM_OC_Stop+0x44>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8007c04:	e7de      	b.n	8007bc4 <HAL_TIM_OC_Stop+0x44>
 8007c06:	bf00      	nop
 8007c08:	40012c00 	.word	0x40012c00

08007c0c <HAL_TIM_OC_Start_IT>:
{
 8007c0c:	b510      	push	{r4, lr}
 8007c0e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c10:	4608      	mov	r0, r1
 8007c12:	2900      	cmp	r1, #0
 8007c14:	d140      	bne.n	8007c98 <HAL_TIM_OC_Start_IT+0x8c>
 8007c16:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	bf18      	it	ne
 8007c20:	2301      	movne	r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f040 809b 	bne.w	8007d5e <HAL_TIM_OC_Start_IT+0x152>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d14e      	bne.n	8007cca <HAL_TIM_OC_Start_IT+0xbe>
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007c32:	6822      	ldr	r2, [r4, #0]
 8007c34:	68d3      	ldr	r3, [r2, #12]
 8007c36:	f043 0302 	orr.w	r3, r3, #2
 8007c3a:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	4601      	mov	r1, r0
 8007c40:	6820      	ldr	r0, [r4, #0]
 8007c42:	f7ff ff14 	bl	8007a6e <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c46:	6823      	ldr	r3, [r4, #0]
 8007c48:	4a48      	ldr	r2, [pc, #288]	@ (8007d6c <HAL_TIM_OC_Start_IT+0x160>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d003      	beq.n	8007c56 <HAL_TIM_OC_Start_IT+0x4a>
 8007c4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d103      	bne.n	8007c5e <HAL_TIM_OC_Start_IT+0x52>
      __HAL_TIM_MOE_ENABLE(htim);
 8007c56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c5c:	645a      	str	r2, [r3, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	4a42      	ldr	r2, [pc, #264]	@ (8007d6c <HAL_TIM_OC_Start_IT+0x160>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d070      	beq.n	8007d48 <HAL_TIM_OC_Start_IT+0x13c>
 8007c66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d06c      	beq.n	8007d48 <HAL_TIM_OC_Start_IT+0x13c>
 8007c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c72:	d069      	beq.n	8007d48 <HAL_TIM_OC_Start_IT+0x13c>
 8007c74:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d065      	beq.n	8007d48 <HAL_TIM_OC_Start_IT+0x13c>
 8007c7c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d061      	beq.n	8007d48 <HAL_TIM_OC_Start_IT+0x13c>
 8007c84:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d05d      	beq.n	8007d48 <HAL_TIM_OC_Start_IT+0x13c>
      __HAL_TIM_ENABLE(htim);
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	f042 0201 	orr.w	r2, r2, #1
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	2000      	movs	r0, #0
 8007c96:	e061      	b.n	8007d5c <HAL_TIM_OC_Start_IT+0x150>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c98:	2904      	cmp	r1, #4
 8007c9a:	d008      	beq.n	8007cae <HAL_TIM_OC_Start_IT+0xa2>
 8007c9c:	2908      	cmp	r1, #8
 8007c9e:	d00d      	beq.n	8007cbc <HAL_TIM_OC_Start_IT+0xb0>
 8007ca0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	bf18      	it	ne
 8007caa:	2301      	movne	r3, #1
 8007cac:	e7b9      	b.n	8007c22 <HAL_TIM_OC_Start_IT+0x16>
 8007cae:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	bf18      	it	ne
 8007cb8:	2301      	movne	r3, #1
 8007cba:	e7b2      	b.n	8007c22 <HAL_TIM_OC_Start_IT+0x16>
 8007cbc:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	bf18      	it	ne
 8007cc6:	2301      	movne	r3, #1
 8007cc8:	e7ab      	b.n	8007c22 <HAL_TIM_OC_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cca:	2804      	cmp	r0, #4
 8007ccc:	d024      	beq.n	8007d18 <HAL_TIM_OC_Start_IT+0x10c>
 8007cce:	2808      	cmp	r0, #8
 8007cd0:	d02b      	beq.n	8007d2a <HAL_TIM_OC_Start_IT+0x11e>
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  switch (Channel)
 8007cd8:	280c      	cmp	r0, #12
 8007cda:	d842      	bhi.n	8007d62 <HAL_TIM_OC_Start_IT+0x156>
 8007cdc:	a301      	add	r3, pc, #4	@ (adr r3, 8007ce4 <HAL_TIM_OC_Start_IT+0xd8>)
 8007cde:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8007ce2:	bf00      	nop
 8007ce4:	08007c33 	.word	0x08007c33
 8007ce8:	08007d63 	.word	0x08007d63
 8007cec:	08007d63 	.word	0x08007d63
 8007cf0:	08007d63 	.word	0x08007d63
 8007cf4:	08007d1f 	.word	0x08007d1f
 8007cf8:	08007d63 	.word	0x08007d63
 8007cfc:	08007d63 	.word	0x08007d63
 8007d00:	08007d63 	.word	0x08007d63
 8007d04:	08007d31 	.word	0x08007d31
 8007d08:	08007d63 	.word	0x08007d63
 8007d0c:	08007d63 	.word	0x08007d63
 8007d10:	08007d63 	.word	0x08007d63
 8007d14:	08007d3d 	.word	0x08007d3d
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d18:	2302      	movs	r3, #2
 8007d1a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d1e:	6822      	ldr	r2, [r4, #0]
 8007d20:	68d3      	ldr	r3, [r2, #12]
 8007d22:	f043 0304 	orr.w	r3, r3, #4
 8007d26:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8007d28:	e788      	b.n	8007c3c <HAL_TIM_OC_Start_IT+0x30>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d2a:	2302      	movs	r3, #2
 8007d2c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007d30:	6822      	ldr	r2, [r4, #0]
 8007d32:	68d3      	ldr	r3, [r2, #12]
 8007d34:	f043 0308 	orr.w	r3, r3, #8
 8007d38:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8007d3a:	e77f      	b.n	8007c3c <HAL_TIM_OC_Start_IT+0x30>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007d3c:	6822      	ldr	r2, [r4, #0]
 8007d3e:	68d3      	ldr	r3, [r2, #12]
 8007d40:	f043 0310 	orr.w	r3, r3, #16
 8007d44:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8007d46:	e779      	b.n	8007c3c <HAL_TIM_OC_Start_IT+0x30>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d48:	689a      	ldr	r2, [r3, #8]
 8007d4a:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d4e:	2a06      	cmp	r2, #6
 8007d50:	d009      	beq.n	8007d66 <HAL_TIM_OC_Start_IT+0x15a>
        __HAL_TIM_ENABLE(htim);
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	f042 0201 	orr.w	r2, r2, #1
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	2000      	movs	r0, #0
}
 8007d5c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007d5e:	2001      	movs	r0, #1
 8007d60:	e7fc      	b.n	8007d5c <HAL_TIM_OC_Start_IT+0x150>
  switch (Channel)
 8007d62:	2001      	movs	r0, #1
 8007d64:	e7fa      	b.n	8007d5c <HAL_TIM_OC_Start_IT+0x150>
 8007d66:	2000      	movs	r0, #0
 8007d68:	e7f8      	b.n	8007d5c <HAL_TIM_OC_Start_IT+0x150>
 8007d6a:	bf00      	nop
 8007d6c:	40012c00 	.word	0x40012c00

08007d70 <HAL_TIM_OC_Stop_IT>:
{
 8007d70:	b538      	push	{r3, r4, r5, lr}
 8007d72:	4605      	mov	r5, r0
 8007d74:	460c      	mov	r4, r1
  switch (Channel)
 8007d76:	290c      	cmp	r1, #12
 8007d78:	d863      	bhi.n	8007e42 <HAL_TIM_OC_Stop_IT+0xd2>
 8007d7a:	e8df f001 	tbb	[pc, r1]
 8007d7e:	6207      	.short	0x6207
 8007d80:	622e6262 	.word	0x622e6262
 8007d84:	62346262 	.word	0x62346262
 8007d88:	6262      	.short	0x6262
 8007d8a:	3a          	.byte	0x3a
 8007d8b:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007d8c:	6802      	ldr	r2, [r0, #0]
 8007d8e:	68d3      	ldr	r3, [r2, #12]
 8007d90:	f023 0302 	bic.w	r3, r3, #2
 8007d94:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007d96:	2200      	movs	r2, #0
 8007d98:	4621      	mov	r1, r4
 8007d9a:	6828      	ldr	r0, [r5, #0]
 8007d9c:	f7ff fe67 	bl	8007a6e <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007da0:	682b      	ldr	r3, [r5, #0]
 8007da2:	4a29      	ldr	r2, [pc, #164]	@ (8007e48 <HAL_TIM_OC_Stop_IT+0xd8>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d02a      	beq.n	8007dfe <HAL_TIM_OC_Stop_IT+0x8e>
 8007da8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d026      	beq.n	8007dfe <HAL_TIM_OC_Stop_IT+0x8e>
    __HAL_TIM_DISABLE(htim);
 8007db0:	682b      	ldr	r3, [r5, #0]
 8007db2:	6a19      	ldr	r1, [r3, #32]
 8007db4:	f241 1211 	movw	r2, #4369	@ 0x1111
 8007db8:	4211      	tst	r1, r2
 8007dba:	d108      	bne.n	8007dce <HAL_TIM_OC_Stop_IT+0x5e>
 8007dbc:	6a19      	ldr	r1, [r3, #32]
 8007dbe:	f240 4244 	movw	r2, #1092	@ 0x444
 8007dc2:	4211      	tst	r1, r2
 8007dc4:	d103      	bne.n	8007dce <HAL_TIM_OC_Stop_IT+0x5e>
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	f022 0201 	bic.w	r2, r2, #1
 8007dcc:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007dce:	bb2c      	cbnz	r4, 8007e1c <HAL_TIM_OC_Stop_IT+0xac>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	e034      	b.n	8007e44 <HAL_TIM_OC_Stop_IT+0xd4>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007dda:	6802      	ldr	r2, [r0, #0]
 8007ddc:	68d3      	ldr	r3, [r2, #12]
 8007dde:	f023 0304 	bic.w	r3, r3, #4
 8007de2:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8007de4:	e7d7      	b.n	8007d96 <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007de6:	6802      	ldr	r2, [r0, #0]
 8007de8:	68d3      	ldr	r3, [r2, #12]
 8007dea:	f023 0308 	bic.w	r3, r3, #8
 8007dee:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8007df0:	e7d1      	b.n	8007d96 <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007df2:	6802      	ldr	r2, [r0, #0]
 8007df4:	68d3      	ldr	r3, [r2, #12]
 8007df6:	f023 0310 	bic.w	r3, r3, #16
 8007dfa:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8007dfc:	e7cb      	b.n	8007d96 <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_MOE_DISABLE(htim);
 8007dfe:	6a19      	ldr	r1, [r3, #32]
 8007e00:	f241 1211 	movw	r2, #4369	@ 0x1111
 8007e04:	4211      	tst	r1, r2
 8007e06:	d1d3      	bne.n	8007db0 <HAL_TIM_OC_Stop_IT+0x40>
 8007e08:	6a19      	ldr	r1, [r3, #32]
 8007e0a:	f240 4244 	movw	r2, #1092	@ 0x444
 8007e0e:	4211      	tst	r1, r2
 8007e10:	d1ce      	bne.n	8007db0 <HAL_TIM_OC_Stop_IT+0x40>
 8007e12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007e18:	645a      	str	r2, [r3, #68]	@ 0x44
 8007e1a:	e7c9      	b.n	8007db0 <HAL_TIM_OC_Stop_IT+0x40>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007e1c:	2c04      	cmp	r4, #4
 8007e1e:	d006      	beq.n	8007e2e <HAL_TIM_OC_Stop_IT+0xbe>
 8007e20:	2c08      	cmp	r4, #8
 8007e22:	d009      	beq.n	8007e38 <HAL_TIM_OC_Stop_IT+0xc8>
 8007e24:	2301      	movs	r3, #1
 8007e26:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	e00a      	b.n	8007e44 <HAL_TIM_OC_Stop_IT+0xd4>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	f885 303f 	strb.w	r3, [r5, #63]	@ 0x3f
 8007e34:	2000      	movs	r0, #0
 8007e36:	e005      	b.n	8007e44 <HAL_TIM_OC_Stop_IT+0xd4>
 8007e38:	2301      	movs	r3, #1
 8007e3a:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8007e3e:	2000      	movs	r0, #0
 8007e40:	e000      	b.n	8007e44 <HAL_TIM_OC_Stop_IT+0xd4>
  switch (Channel)
 8007e42:	2001      	movs	r0, #1
}
 8007e44:	bd38      	pop	{r3, r4, r5, pc}
 8007e46:	bf00      	nop
 8007e48:	40012c00 	.word	0x40012c00

08007e4c <HAL_TIM_OC_Start_DMA>:
{
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	4604      	mov	r4, r0
 8007e50:	4616      	mov	r6, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007e52:	460d      	mov	r5, r1
 8007e54:	2900      	cmp	r1, #0
 8007e56:	d16c      	bne.n	8007f32 <HAL_TIM_OC_Start_DMA+0xe6>
 8007e58:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 8007e5c:	b2c0      	uxtb	r0, r0
 8007e5e:	2802      	cmp	r0, #2
 8007e60:	bf14      	ite	ne
 8007e62:	2000      	movne	r0, #0
 8007e64:	2001      	moveq	r0, #1
 8007e66:	2800      	cmp	r0, #0
 8007e68:	f040 8117 	bne.w	800809a <HAL_TIM_OC_Start_DMA+0x24e>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007e6c:	2d00      	cmp	r5, #0
 8007e6e:	d17c      	bne.n	8007f6a <HAL_TIM_OC_Start_DMA+0x11e>
 8007e70:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 8007e74:	b2d2      	uxtb	r2, r2
 8007e76:	2a01      	cmp	r2, #1
 8007e78:	bf14      	ite	ne
 8007e7a:	2200      	movne	r2, #0
 8007e7c:	2201      	moveq	r2, #1
 8007e7e:	2a00      	cmp	r2, #0
 8007e80:	f000 810d 	beq.w	800809e <HAL_TIM_OC_Start_DMA+0x252>
    if ((pData == NULL) || (Length == 0U))
 8007e84:	2e00      	cmp	r6, #0
 8007e86:	f000 810c 	beq.w	80080a2 <HAL_TIM_OC_Start_DMA+0x256>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 810b 	beq.w	80080a6 <HAL_TIM_OC_Start_DMA+0x25a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e90:	2d00      	cmp	r5, #0
 8007e92:	f040 8086 	bne.w	8007fa2 <HAL_TIM_OC_Start_DMA+0x156>
 8007e96:	2202      	movs	r2, #2
 8007e98:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007e9c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007e9e:	4989      	ldr	r1, [pc, #548]	@ (80080c4 <HAL_TIM_OC_Start_DMA+0x278>)
 8007ea0:	6291      	str	r1, [r2, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007ea2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007ea4:	4988      	ldr	r1, [pc, #544]	@ (80080c8 <HAL_TIM_OC_Start_DMA+0x27c>)
 8007ea6:	62d1      	str	r1, [r2, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007ea8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007eaa:	4988      	ldr	r1, [pc, #544]	@ (80080cc <HAL_TIM_OC_Start_DMA+0x280>)
 8007eac:	6311      	str	r1, [r2, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007eae:	6822      	ldr	r2, [r4, #0]
 8007eb0:	3234      	adds	r2, #52	@ 0x34
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8007eb6:	f7fb fd3a 	bl	800392e <HAL_DMA_Start_IT>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	f040 80f7 	bne.w	80080ae <HAL_TIM_OC_Start_DMA+0x262>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007ec0:	6822      	ldr	r2, [r4, #0]
 8007ec2:	68d3      	ldr	r3, [r2, #12]
 8007ec4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007ec8:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007eca:	2201      	movs	r2, #1
 8007ecc:	4629      	mov	r1, r5
 8007ece:	6820      	ldr	r0, [r4, #0]
 8007ed0:	f7ff fdcd 	bl	8007a6e <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ed4:	6823      	ldr	r3, [r4, #0]
 8007ed6:	4a7e      	ldr	r2, [pc, #504]	@ (80080d0 <HAL_TIM_OC_Start_DMA+0x284>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d003      	beq.n	8007ee4 <HAL_TIM_OC_Start_DMA+0x98>
 8007edc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d103      	bne.n	8007eec <HAL_TIM_OC_Start_DMA+0xa0>
      __HAL_TIM_MOE_ENABLE(htim);
 8007ee4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ee6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007eea:	645a      	str	r2, [r3, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	4a78      	ldr	r2, [pc, #480]	@ (80080d0 <HAL_TIM_OC_Start_DMA+0x284>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	f000 80c7 	beq.w	8008084 <HAL_TIM_OC_Start_DMA+0x238>
 8007ef6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007efa:	4293      	cmp	r3, r2
 8007efc:	f000 80c2 	beq.w	8008084 <HAL_TIM_OC_Start_DMA+0x238>
 8007f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f04:	f000 80be 	beq.w	8008084 <HAL_TIM_OC_Start_DMA+0x238>
 8007f08:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	f000 80b9 	beq.w	8008084 <HAL_TIM_OC_Start_DMA+0x238>
 8007f12:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007f16:	4293      	cmp	r3, r2
 8007f18:	f000 80b4 	beq.w	8008084 <HAL_TIM_OC_Start_DMA+0x238>
 8007f1c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007f20:	4293      	cmp	r3, r2
 8007f22:	f000 80af 	beq.w	8008084 <HAL_TIM_OC_Start_DMA+0x238>
      __HAL_TIM_ENABLE(htim);
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	f042 0201 	orr.w	r2, r2, #1
 8007f2c:	601a      	str	r2, [r3, #0]
 8007f2e:	2000      	movs	r0, #0
 8007f30:	e0b6      	b.n	80080a0 <HAL_TIM_OC_Start_DMA+0x254>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007f32:	2904      	cmp	r1, #4
 8007f34:	d009      	beq.n	8007f4a <HAL_TIM_OC_Start_DMA+0xfe>
 8007f36:	2908      	cmp	r1, #8
 8007f38:	d00f      	beq.n	8007f5a <HAL_TIM_OC_Start_DMA+0x10e>
 8007f3a:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8007f3e:	b2c0      	uxtb	r0, r0
 8007f40:	2802      	cmp	r0, #2
 8007f42:	bf14      	ite	ne
 8007f44:	2000      	movne	r0, #0
 8007f46:	2001      	moveq	r0, #1
 8007f48:	e78d      	b.n	8007e66 <HAL_TIM_OC_Start_DMA+0x1a>
 8007f4a:	f890 003f 	ldrb.w	r0, [r0, #63]	@ 0x3f
 8007f4e:	b2c0      	uxtb	r0, r0
 8007f50:	2802      	cmp	r0, #2
 8007f52:	bf14      	ite	ne
 8007f54:	2000      	movne	r0, #0
 8007f56:	2001      	moveq	r0, #1
 8007f58:	e785      	b.n	8007e66 <HAL_TIM_OC_Start_DMA+0x1a>
 8007f5a:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8007f5e:	b2c0      	uxtb	r0, r0
 8007f60:	2802      	cmp	r0, #2
 8007f62:	bf14      	ite	ne
 8007f64:	2000      	movne	r0, #0
 8007f66:	2001      	moveq	r0, #1
 8007f68:	e77d      	b.n	8007e66 <HAL_TIM_OC_Start_DMA+0x1a>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007f6a:	2d04      	cmp	r5, #4
 8007f6c:	d009      	beq.n	8007f82 <HAL_TIM_OC_Start_DMA+0x136>
 8007f6e:	2d08      	cmp	r5, #8
 8007f70:	d00f      	beq.n	8007f92 <HAL_TIM_OC_Start_DMA+0x146>
 8007f72:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8007f76:	b2d2      	uxtb	r2, r2
 8007f78:	2a01      	cmp	r2, #1
 8007f7a:	bf14      	ite	ne
 8007f7c:	2200      	movne	r2, #0
 8007f7e:	2201      	moveq	r2, #1
 8007f80:	e77d      	b.n	8007e7e <HAL_TIM_OC_Start_DMA+0x32>
 8007f82:	f894 203f 	ldrb.w	r2, [r4, #63]	@ 0x3f
 8007f86:	b2d2      	uxtb	r2, r2
 8007f88:	2a01      	cmp	r2, #1
 8007f8a:	bf14      	ite	ne
 8007f8c:	2200      	movne	r2, #0
 8007f8e:	2201      	moveq	r2, #1
 8007f90:	e775      	b.n	8007e7e <HAL_TIM_OC_Start_DMA+0x32>
 8007f92:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 8007f96:	b2d2      	uxtb	r2, r2
 8007f98:	2a01      	cmp	r2, #1
 8007f9a:	bf14      	ite	ne
 8007f9c:	2200      	movne	r2, #0
 8007f9e:	2201      	moveq	r2, #1
 8007fa0:	e76d      	b.n	8007e7e <HAL_TIM_OC_Start_DMA+0x32>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fa2:	2d04      	cmp	r5, #4
 8007fa4:	d024      	beq.n	8007ff0 <HAL_TIM_OC_Start_DMA+0x1a4>
 8007fa6:	2d08      	cmp	r5, #8
 8007fa8:	d03c      	beq.n	8008024 <HAL_TIM_OC_Start_DMA+0x1d8>
 8007faa:	2202      	movs	r2, #2
 8007fac:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  switch (Channel)
 8007fb0:	2d0c      	cmp	r5, #12
 8007fb2:	d87a      	bhi.n	80080aa <HAL_TIM_OC_Start_DMA+0x25e>
 8007fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8007fbc <HAL_TIM_OC_Start_DMA+0x170>)
 8007fb6:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8007fba:	bf00      	nop
 8007fbc:	08007e9d 	.word	0x08007e9d
 8007fc0:	080080ab 	.word	0x080080ab
 8007fc4:	080080ab 	.word	0x080080ab
 8007fc8:	080080ab 	.word	0x080080ab
 8007fcc:	08007ff7 	.word	0x08007ff7
 8007fd0:	080080ab 	.word	0x080080ab
 8007fd4:	080080ab 	.word	0x080080ab
 8007fd8:	080080ab 	.word	0x080080ab
 8007fdc:	0800802b 	.word	0x0800802b
 8007fe0:	080080ab 	.word	0x080080ab
 8007fe4:	080080ab 	.word	0x080080ab
 8007fe8:	080080ab 	.word	0x080080ab
 8007fec:	08008059 	.word	0x08008059
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007ff6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007ff8:	4932      	ldr	r1, [pc, #200]	@ (80080c4 <HAL_TIM_OC_Start_DMA+0x278>)
 8007ffa:	6291      	str	r1, [r2, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007ffc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007ffe:	4932      	ldr	r1, [pc, #200]	@ (80080c8 <HAL_TIM_OC_Start_DMA+0x27c>)
 8008000:	62d1      	str	r1, [r2, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008002:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008004:	4931      	ldr	r1, [pc, #196]	@ (80080cc <HAL_TIM_OC_Start_DMA+0x280>)
 8008006:	6311      	str	r1, [r2, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008008:	6822      	ldr	r2, [r4, #0]
 800800a:	3238      	adds	r2, #56	@ 0x38
 800800c:	4631      	mov	r1, r6
 800800e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8008010:	f7fb fc8d 	bl	800392e <HAL_DMA_Start_IT>
 8008014:	2800      	cmp	r0, #0
 8008016:	d14c      	bne.n	80080b2 <HAL_TIM_OC_Start_DMA+0x266>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008018:	6822      	ldr	r2, [r4, #0]
 800801a:	68d3      	ldr	r3, [r2, #12]
 800801c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008020:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8008022:	e752      	b.n	8007eca <HAL_TIM_OC_Start_DMA+0x7e>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008024:	2202      	movs	r2, #2
 8008026:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800802a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800802c:	4925      	ldr	r1, [pc, #148]	@ (80080c4 <HAL_TIM_OC_Start_DMA+0x278>)
 800802e:	6291      	str	r1, [r2, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008030:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008032:	4925      	ldr	r1, [pc, #148]	@ (80080c8 <HAL_TIM_OC_Start_DMA+0x27c>)
 8008034:	62d1      	str	r1, [r2, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008036:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008038:	4924      	ldr	r1, [pc, #144]	@ (80080cc <HAL_TIM_OC_Start_DMA+0x280>)
 800803a:	6311      	str	r1, [r2, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800803c:	6822      	ldr	r2, [r4, #0]
 800803e:	323c      	adds	r2, #60	@ 0x3c
 8008040:	4631      	mov	r1, r6
 8008042:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008044:	f7fb fc73 	bl	800392e <HAL_DMA_Start_IT>
 8008048:	2800      	cmp	r0, #0
 800804a:	d134      	bne.n	80080b6 <HAL_TIM_OC_Start_DMA+0x26a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800804c:	6822      	ldr	r2, [r4, #0]
 800804e:	68d3      	ldr	r3, [r2, #12]
 8008050:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008054:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8008056:	e738      	b.n	8007eca <HAL_TIM_OC_Start_DMA+0x7e>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008058:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800805a:	491a      	ldr	r1, [pc, #104]	@ (80080c4 <HAL_TIM_OC_Start_DMA+0x278>)
 800805c:	6291      	str	r1, [r2, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800805e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8008060:	4919      	ldr	r1, [pc, #100]	@ (80080c8 <HAL_TIM_OC_Start_DMA+0x27c>)
 8008062:	62d1      	str	r1, [r2, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008064:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8008066:	4919      	ldr	r1, [pc, #100]	@ (80080cc <HAL_TIM_OC_Start_DMA+0x280>)
 8008068:	6311      	str	r1, [r2, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800806a:	6822      	ldr	r2, [r4, #0]
 800806c:	3240      	adds	r2, #64	@ 0x40
 800806e:	4631      	mov	r1, r6
 8008070:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008072:	f7fb fc5c 	bl	800392e <HAL_DMA_Start_IT>
 8008076:	bb00      	cbnz	r0, 80080ba <HAL_TIM_OC_Start_DMA+0x26e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008078:	6822      	ldr	r2, [r4, #0]
 800807a:	68d3      	ldr	r3, [r2, #12]
 800807c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008080:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8008082:	e722      	b.n	8007eca <HAL_TIM_OC_Start_DMA+0x7e>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008084:	689a      	ldr	r2, [r3, #8]
 8008086:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800808a:	2a06      	cmp	r2, #6
 800808c:	d017      	beq.n	80080be <HAL_TIM_OC_Start_DMA+0x272>
        __HAL_TIM_ENABLE(htim);
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	f042 0201 	orr.w	r2, r2, #1
 8008094:	601a      	str	r2, [r3, #0]
 8008096:	2000      	movs	r0, #0
 8008098:	e002      	b.n	80080a0 <HAL_TIM_OC_Start_DMA+0x254>
    return HAL_BUSY;
 800809a:	2002      	movs	r0, #2
 800809c:	e000      	b.n	80080a0 <HAL_TIM_OC_Start_DMA+0x254>
    return HAL_ERROR;
 800809e:	2001      	movs	r0, #1
}
 80080a0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80080a2:	2001      	movs	r0, #1
 80080a4:	e7fc      	b.n	80080a0 <HAL_TIM_OC_Start_DMA+0x254>
 80080a6:	2001      	movs	r0, #1
 80080a8:	e7fa      	b.n	80080a0 <HAL_TIM_OC_Start_DMA+0x254>
  switch (Channel)
 80080aa:	2001      	movs	r0, #1
 80080ac:	e7f8      	b.n	80080a0 <HAL_TIM_OC_Start_DMA+0x254>
        return HAL_ERROR;
 80080ae:	2001      	movs	r0, #1
 80080b0:	e7f6      	b.n	80080a0 <HAL_TIM_OC_Start_DMA+0x254>
        return HAL_ERROR;
 80080b2:	2001      	movs	r0, #1
 80080b4:	e7f4      	b.n	80080a0 <HAL_TIM_OC_Start_DMA+0x254>
        return HAL_ERROR;
 80080b6:	2001      	movs	r0, #1
 80080b8:	e7f2      	b.n	80080a0 <HAL_TIM_OC_Start_DMA+0x254>
        return HAL_ERROR;
 80080ba:	2001      	movs	r0, #1
 80080bc:	e7f0      	b.n	80080a0 <HAL_TIM_OC_Start_DMA+0x254>
 80080be:	2000      	movs	r0, #0
 80080c0:	e7ee      	b.n	80080a0 <HAL_TIM_OC_Start_DMA+0x254>
 80080c2:	bf00      	nop
 80080c4:	08006d29 	.word	0x08006d29
 80080c8:	08006d9b 	.word	0x08006d9b
 80080cc:	08006f5d 	.word	0x08006f5d
 80080d0:	40012c00 	.word	0x40012c00

080080d4 <HAL_TIM_OC_Stop_DMA>:
{
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	4604      	mov	r4, r0
 80080d8:	460d      	mov	r5, r1
  switch (Channel)
 80080da:	290c      	cmp	r1, #12
 80080dc:	d870      	bhi.n	80081c0 <HAL_TIM_OC_Stop_DMA+0xec>
 80080de:	e8df f001 	tbb	[pc, r1]
 80080e2:	6f07      	.short	0x6f07
 80080e4:	6f326f6f 	.word	0x6f326f6f
 80080e8:	6f3b6f6f 	.word	0x6f3b6f6f
 80080ec:	6f6f      	.short	0x6f6f
 80080ee:	44          	.byte	0x44
 80080ef:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80080f0:	6802      	ldr	r2, [r0, #0]
 80080f2:	68d3      	ldr	r3, [r2, #12]
 80080f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80080f8:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80080fa:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80080fc:	f7fb fc76 	bl	80039ec <HAL_DMA_Abort_IT>
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008100:	2200      	movs	r2, #0
 8008102:	4629      	mov	r1, r5
 8008104:	6820      	ldr	r0, [r4, #0]
 8008106:	f7ff fcb2 	bl	8007a6e <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	4a2d      	ldr	r2, [pc, #180]	@ (80081c4 <HAL_TIM_OC_Stop_DMA+0xf0>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d034      	beq.n	800817c <HAL_TIM_OC_Stop_DMA+0xa8>
 8008112:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008116:	4293      	cmp	r3, r2
 8008118:	d030      	beq.n	800817c <HAL_TIM_OC_Stop_DMA+0xa8>
    __HAL_TIM_DISABLE(htim);
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	6a19      	ldr	r1, [r3, #32]
 800811e:	f241 1211 	movw	r2, #4369	@ 0x1111
 8008122:	4211      	tst	r1, r2
 8008124:	d108      	bne.n	8008138 <HAL_TIM_OC_Stop_DMA+0x64>
 8008126:	6a19      	ldr	r1, [r3, #32]
 8008128:	f240 4244 	movw	r2, #1092	@ 0x444
 800812c:	4211      	tst	r1, r2
 800812e:	d103      	bne.n	8008138 <HAL_TIM_OC_Stop_DMA+0x64>
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	f022 0201 	bic.w	r2, r2, #1
 8008136:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008138:	2d00      	cmp	r5, #0
 800813a:	d12e      	bne.n	800819a <HAL_TIM_OC_Stop_DMA+0xc6>
 800813c:	2301      	movs	r3, #1
 800813e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8008142:	2000      	movs	r0, #0
 8008144:	e03d      	b.n	80081c2 <HAL_TIM_OC_Stop_DMA+0xee>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008146:	6802      	ldr	r2, [r0, #0]
 8008148:	68d3      	ldr	r3, [r2, #12]
 800814a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800814e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008150:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8008152:	f7fb fc4b 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8008156:	e7d3      	b.n	8008100 <HAL_TIM_OC_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008158:	6802      	ldr	r2, [r0, #0]
 800815a:	68d3      	ldr	r3, [r2, #12]
 800815c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008160:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008162:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8008164:	f7fb fc42 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8008168:	e7ca      	b.n	8008100 <HAL_TIM_OC_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800816a:	6802      	ldr	r2, [r0, #0]
 800816c:	68d3      	ldr	r3, [r2, #12]
 800816e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008172:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008174:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8008176:	f7fb fc39 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800817a:	e7c1      	b.n	8008100 <HAL_TIM_OC_Stop_DMA+0x2c>
      __HAL_TIM_MOE_DISABLE(htim);
 800817c:	6a19      	ldr	r1, [r3, #32]
 800817e:	f241 1211 	movw	r2, #4369	@ 0x1111
 8008182:	4211      	tst	r1, r2
 8008184:	d1c9      	bne.n	800811a <HAL_TIM_OC_Stop_DMA+0x46>
 8008186:	6a19      	ldr	r1, [r3, #32]
 8008188:	f240 4244 	movw	r2, #1092	@ 0x444
 800818c:	4211      	tst	r1, r2
 800818e:	d1c4      	bne.n	800811a <HAL_TIM_OC_Stop_DMA+0x46>
 8008190:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008192:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008196:	645a      	str	r2, [r3, #68]	@ 0x44
 8008198:	e7bf      	b.n	800811a <HAL_TIM_OC_Stop_DMA+0x46>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800819a:	2d04      	cmp	r5, #4
 800819c:	d006      	beq.n	80081ac <HAL_TIM_OC_Stop_DMA+0xd8>
 800819e:	2d08      	cmp	r5, #8
 80081a0:	d009      	beq.n	80081b6 <HAL_TIM_OC_Stop_DMA+0xe2>
 80081a2:	2301      	movs	r3, #1
 80081a4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80081a8:	2000      	movs	r0, #0
 80081aa:	e00a      	b.n	80081c2 <HAL_TIM_OC_Stop_DMA+0xee>
 80081ac:	2301      	movs	r3, #1
 80081ae:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80081b2:	2000      	movs	r0, #0
 80081b4:	e005      	b.n	80081c2 <HAL_TIM_OC_Stop_DMA+0xee>
 80081b6:	2301      	movs	r3, #1
 80081b8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80081bc:	2000      	movs	r0, #0
 80081be:	e000      	b.n	80081c2 <HAL_TIM_OC_Stop_DMA+0xee>
  switch (Channel)
 80081c0:	2001      	movs	r0, #1
}
 80081c2:	bd38      	pop	{r3, r4, r5, pc}
 80081c4:	40012c00 	.word	0x40012c00

080081c8 <HAL_TIM_PWM_Start>:
{
 80081c8:	b510      	push	{r4, lr}
 80081ca:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081cc:	4608      	mov	r0, r1
 80081ce:	2900      	cmp	r1, #0
 80081d0:	d13a      	bne.n	8008248 <HAL_TIM_PWM_Start+0x80>
 80081d2:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	3b01      	subs	r3, #1
 80081da:	bf18      	it	ne
 80081dc:	2301      	movne	r3, #1
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d166      	bne.n	80082b0 <HAL_TIM_PWM_Start+0xe8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d149      	bne.n	800827a <HAL_TIM_PWM_Start+0xb2>
 80081e6:	2302      	movs	r3, #2
 80081e8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081ec:	2201      	movs	r2, #1
 80081ee:	4601      	mov	r1, r0
 80081f0:	6820      	ldr	r0, [r4, #0]
 80081f2:	f7ff fc3c 	bl	8007a6e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	4a2f      	ldr	r2, [pc, #188]	@ (80082b8 <HAL_TIM_PWM_Start+0xf0>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d003      	beq.n	8008206 <HAL_TIM_PWM_Start+0x3e>
 80081fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008202:	4293      	cmp	r3, r2
 8008204:	d103      	bne.n	800820e <HAL_TIM_PWM_Start+0x46>
    __HAL_TIM_MOE_ENABLE(htim);
 8008206:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008208:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800820c:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	4a29      	ldr	r2, [pc, #164]	@ (80082b8 <HAL_TIM_PWM_Start+0xf0>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d041      	beq.n	800829a <HAL_TIM_PWM_Start+0xd2>
 8008216:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800821a:	4293      	cmp	r3, r2
 800821c:	d03d      	beq.n	800829a <HAL_TIM_PWM_Start+0xd2>
 800821e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008222:	d03a      	beq.n	800829a <HAL_TIM_PWM_Start+0xd2>
 8008224:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8008228:	4293      	cmp	r3, r2
 800822a:	d036      	beq.n	800829a <HAL_TIM_PWM_Start+0xd2>
 800822c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008230:	4293      	cmp	r3, r2
 8008232:	d032      	beq.n	800829a <HAL_TIM_PWM_Start+0xd2>
 8008234:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008238:	4293      	cmp	r3, r2
 800823a:	d02e      	beq.n	800829a <HAL_TIM_PWM_Start+0xd2>
    __HAL_TIM_ENABLE(htim);
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	f042 0201 	orr.w	r2, r2, #1
 8008242:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008244:	2000      	movs	r0, #0
 8008246:	e032      	b.n	80082ae <HAL_TIM_PWM_Start+0xe6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008248:	2904      	cmp	r1, #4
 800824a:	d008      	beq.n	800825e <HAL_TIM_PWM_Start+0x96>
 800824c:	2908      	cmp	r1, #8
 800824e:	d00d      	beq.n	800826c <HAL_TIM_PWM_Start+0xa4>
 8008250:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8008254:	b2db      	uxtb	r3, r3
 8008256:	3b01      	subs	r3, #1
 8008258:	bf18      	it	ne
 800825a:	2301      	movne	r3, #1
 800825c:	e7bf      	b.n	80081de <HAL_TIM_PWM_Start+0x16>
 800825e:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8008262:	b2db      	uxtb	r3, r3
 8008264:	3b01      	subs	r3, #1
 8008266:	bf18      	it	ne
 8008268:	2301      	movne	r3, #1
 800826a:	e7b8      	b.n	80081de <HAL_TIM_PWM_Start+0x16>
 800826c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8008270:	b2db      	uxtb	r3, r3
 8008272:	3b01      	subs	r3, #1
 8008274:	bf18      	it	ne
 8008276:	2301      	movne	r3, #1
 8008278:	e7b1      	b.n	80081de <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800827a:	2804      	cmp	r0, #4
 800827c:	d005      	beq.n	800828a <HAL_TIM_PWM_Start+0xc2>
 800827e:	2808      	cmp	r0, #8
 8008280:	d007      	beq.n	8008292 <HAL_TIM_PWM_Start+0xca>
 8008282:	2302      	movs	r3, #2
 8008284:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8008288:	e7b0      	b.n	80081ec <HAL_TIM_PWM_Start+0x24>
 800828a:	2302      	movs	r3, #2
 800828c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008290:	e7ac      	b.n	80081ec <HAL_TIM_PWM_Start+0x24>
 8008292:	2302      	movs	r3, #2
 8008294:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008298:	e7a8      	b.n	80081ec <HAL_TIM_PWM_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800829a:	689a      	ldr	r2, [r3, #8]
 800829c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082a0:	2a06      	cmp	r2, #6
 80082a2:	d007      	beq.n	80082b4 <HAL_TIM_PWM_Start+0xec>
      __HAL_TIM_ENABLE(htim);
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	f042 0201 	orr.w	r2, r2, #1
 80082aa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80082ac:	2000      	movs	r0, #0
}
 80082ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80082b0:	2001      	movs	r0, #1
 80082b2:	e7fc      	b.n	80082ae <HAL_TIM_PWM_Start+0xe6>
  return HAL_OK;
 80082b4:	2000      	movs	r0, #0
 80082b6:	e7fa      	b.n	80082ae <HAL_TIM_PWM_Start+0xe6>
 80082b8:	40012c00 	.word	0x40012c00

080082bc <HAL_TIM_PWM_Stop>:
{
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4604      	mov	r4, r0
 80082c0:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80082c2:	2200      	movs	r2, #0
 80082c4:	6800      	ldr	r0, [r0, #0]
 80082c6:	f7ff fbd2 	bl	8007a6e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	4a1d      	ldr	r2, [pc, #116]	@ (8008344 <HAL_TIM_PWM_Stop+0x88>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d018      	beq.n	8008304 <HAL_TIM_PWM_Stop+0x48>
 80082d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d014      	beq.n	8008304 <HAL_TIM_PWM_Stop+0x48>
  __HAL_TIM_DISABLE(htim);
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	6a19      	ldr	r1, [r3, #32]
 80082de:	f241 1211 	movw	r2, #4369	@ 0x1111
 80082e2:	4211      	tst	r1, r2
 80082e4:	d108      	bne.n	80082f8 <HAL_TIM_PWM_Stop+0x3c>
 80082e6:	6a19      	ldr	r1, [r3, #32]
 80082e8:	f240 4244 	movw	r2, #1092	@ 0x444
 80082ec:	4211      	tst	r1, r2
 80082ee:	d103      	bne.n	80082f8 <HAL_TIM_PWM_Stop+0x3c>
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	f022 0201 	bic.w	r2, r2, #1
 80082f6:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80082f8:	b99d      	cbnz	r5, 8008322 <HAL_TIM_PWM_Stop+0x66>
 80082fa:	2301      	movs	r3, #1
 80082fc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
}
 8008300:	2000      	movs	r0, #0
 8008302:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8008304:	6a19      	ldr	r1, [r3, #32]
 8008306:	f241 1211 	movw	r2, #4369	@ 0x1111
 800830a:	4211      	tst	r1, r2
 800830c:	d1e5      	bne.n	80082da <HAL_TIM_PWM_Stop+0x1e>
 800830e:	6a19      	ldr	r1, [r3, #32]
 8008310:	f240 4244 	movw	r2, #1092	@ 0x444
 8008314:	4211      	tst	r1, r2
 8008316:	d1e0      	bne.n	80082da <HAL_TIM_PWM_Stop+0x1e>
 8008318:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800831a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800831e:	645a      	str	r2, [r3, #68]	@ 0x44
 8008320:	e7db      	b.n	80082da <HAL_TIM_PWM_Stop+0x1e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008322:	2d04      	cmp	r5, #4
 8008324:	d005      	beq.n	8008332 <HAL_TIM_PWM_Stop+0x76>
 8008326:	2d08      	cmp	r5, #8
 8008328:	d007      	beq.n	800833a <HAL_TIM_PWM_Stop+0x7e>
 800832a:	2301      	movs	r3, #1
 800832c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8008330:	e7e6      	b.n	8008300 <HAL_TIM_PWM_Stop+0x44>
 8008332:	2301      	movs	r3, #1
 8008334:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008338:	e7e2      	b.n	8008300 <HAL_TIM_PWM_Stop+0x44>
 800833a:	2301      	movs	r3, #1
 800833c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008340:	e7de      	b.n	8008300 <HAL_TIM_PWM_Stop+0x44>
 8008342:	bf00      	nop
 8008344:	40012c00 	.word	0x40012c00

08008348 <HAL_TIM_PWM_Start_IT>:
{
 8008348:	b510      	push	{r4, lr}
 800834a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800834c:	4608      	mov	r0, r1
 800834e:	2900      	cmp	r1, #0
 8008350:	d140      	bne.n	80083d4 <HAL_TIM_PWM_Start_IT+0x8c>
 8008352:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8008356:	b2db      	uxtb	r3, r3
 8008358:	3b01      	subs	r3, #1
 800835a:	bf18      	it	ne
 800835c:	2301      	movne	r3, #1
 800835e:	2b00      	cmp	r3, #0
 8008360:	f040 809b 	bne.w	800849a <HAL_TIM_PWM_Start_IT+0x152>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008364:	2800      	cmp	r0, #0
 8008366:	d14e      	bne.n	8008406 <HAL_TIM_PWM_Start_IT+0xbe>
 8008368:	2302      	movs	r3, #2
 800836a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800836e:	6822      	ldr	r2, [r4, #0]
 8008370:	68d3      	ldr	r3, [r2, #12]
 8008372:	f043 0302 	orr.w	r3, r3, #2
 8008376:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008378:	2201      	movs	r2, #1
 800837a:	4601      	mov	r1, r0
 800837c:	6820      	ldr	r0, [r4, #0]
 800837e:	f7ff fb76 	bl	8007a6e <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	4a48      	ldr	r2, [pc, #288]	@ (80084a8 <HAL_TIM_PWM_Start_IT+0x160>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d003      	beq.n	8008392 <HAL_TIM_PWM_Start_IT+0x4a>
 800838a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800838e:	4293      	cmp	r3, r2
 8008390:	d103      	bne.n	800839a <HAL_TIM_PWM_Start_IT+0x52>
      __HAL_TIM_MOE_ENABLE(htim);
 8008392:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008394:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008398:	645a      	str	r2, [r3, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	4a42      	ldr	r2, [pc, #264]	@ (80084a8 <HAL_TIM_PWM_Start_IT+0x160>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d070      	beq.n	8008484 <HAL_TIM_PWM_Start_IT+0x13c>
 80083a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d06c      	beq.n	8008484 <HAL_TIM_PWM_Start_IT+0x13c>
 80083aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ae:	d069      	beq.n	8008484 <HAL_TIM_PWM_Start_IT+0x13c>
 80083b0:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d065      	beq.n	8008484 <HAL_TIM_PWM_Start_IT+0x13c>
 80083b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80083bc:	4293      	cmp	r3, r2
 80083be:	d061      	beq.n	8008484 <HAL_TIM_PWM_Start_IT+0x13c>
 80083c0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d05d      	beq.n	8008484 <HAL_TIM_PWM_Start_IT+0x13c>
      __HAL_TIM_ENABLE(htim);
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	f042 0201 	orr.w	r2, r2, #1
 80083ce:	601a      	str	r2, [r3, #0]
 80083d0:	2000      	movs	r0, #0
 80083d2:	e061      	b.n	8008498 <HAL_TIM_PWM_Start_IT+0x150>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80083d4:	2904      	cmp	r1, #4
 80083d6:	d008      	beq.n	80083ea <HAL_TIM_PWM_Start_IT+0xa2>
 80083d8:	2908      	cmp	r1, #8
 80083da:	d00d      	beq.n	80083f8 <HAL_TIM_PWM_Start_IT+0xb0>
 80083dc:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	3b01      	subs	r3, #1
 80083e4:	bf18      	it	ne
 80083e6:	2301      	movne	r3, #1
 80083e8:	e7b9      	b.n	800835e <HAL_TIM_PWM_Start_IT+0x16>
 80083ea:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	3b01      	subs	r3, #1
 80083f2:	bf18      	it	ne
 80083f4:	2301      	movne	r3, #1
 80083f6:	e7b2      	b.n	800835e <HAL_TIM_PWM_Start_IT+0x16>
 80083f8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	3b01      	subs	r3, #1
 8008400:	bf18      	it	ne
 8008402:	2301      	movne	r3, #1
 8008404:	e7ab      	b.n	800835e <HAL_TIM_PWM_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008406:	2804      	cmp	r0, #4
 8008408:	d024      	beq.n	8008454 <HAL_TIM_PWM_Start_IT+0x10c>
 800840a:	2808      	cmp	r0, #8
 800840c:	d02b      	beq.n	8008466 <HAL_TIM_PWM_Start_IT+0x11e>
 800840e:	2302      	movs	r3, #2
 8008410:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  switch (Channel)
 8008414:	280c      	cmp	r0, #12
 8008416:	d842      	bhi.n	800849e <HAL_TIM_PWM_Start_IT+0x156>
 8008418:	a301      	add	r3, pc, #4	@ (adr r3, 8008420 <HAL_TIM_PWM_Start_IT+0xd8>)
 800841a:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 800841e:	bf00      	nop
 8008420:	0800836f 	.word	0x0800836f
 8008424:	0800849f 	.word	0x0800849f
 8008428:	0800849f 	.word	0x0800849f
 800842c:	0800849f 	.word	0x0800849f
 8008430:	0800845b 	.word	0x0800845b
 8008434:	0800849f 	.word	0x0800849f
 8008438:	0800849f 	.word	0x0800849f
 800843c:	0800849f 	.word	0x0800849f
 8008440:	0800846d 	.word	0x0800846d
 8008444:	0800849f 	.word	0x0800849f
 8008448:	0800849f 	.word	0x0800849f
 800844c:	0800849f 	.word	0x0800849f
 8008450:	08008479 	.word	0x08008479
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008454:	2302      	movs	r3, #2
 8008456:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800845a:	6822      	ldr	r2, [r4, #0]
 800845c:	68d3      	ldr	r3, [r2, #12]
 800845e:	f043 0304 	orr.w	r3, r3, #4
 8008462:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8008464:	e788      	b.n	8008378 <HAL_TIM_PWM_Start_IT+0x30>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008466:	2302      	movs	r3, #2
 8008468:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800846c:	6822      	ldr	r2, [r4, #0]
 800846e:	68d3      	ldr	r3, [r2, #12]
 8008470:	f043 0308 	orr.w	r3, r3, #8
 8008474:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8008476:	e77f      	b.n	8008378 <HAL_TIM_PWM_Start_IT+0x30>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008478:	6822      	ldr	r2, [r4, #0]
 800847a:	68d3      	ldr	r3, [r2, #12]
 800847c:	f043 0310 	orr.w	r3, r3, #16
 8008480:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8008482:	e779      	b.n	8008378 <HAL_TIM_PWM_Start_IT+0x30>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008484:	689a      	ldr	r2, [r3, #8]
 8008486:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800848a:	2a06      	cmp	r2, #6
 800848c:	d009      	beq.n	80084a2 <HAL_TIM_PWM_Start_IT+0x15a>
        __HAL_TIM_ENABLE(htim);
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	f042 0201 	orr.w	r2, r2, #1
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	2000      	movs	r0, #0
}
 8008498:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800849a:	2001      	movs	r0, #1
 800849c:	e7fc      	b.n	8008498 <HAL_TIM_PWM_Start_IT+0x150>
  switch (Channel)
 800849e:	2001      	movs	r0, #1
 80084a0:	e7fa      	b.n	8008498 <HAL_TIM_PWM_Start_IT+0x150>
 80084a2:	2000      	movs	r0, #0
 80084a4:	e7f8      	b.n	8008498 <HAL_TIM_PWM_Start_IT+0x150>
 80084a6:	bf00      	nop
 80084a8:	40012c00 	.word	0x40012c00

080084ac <HAL_TIM_PWM_Stop_IT>:
{
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	4605      	mov	r5, r0
 80084b0:	460c      	mov	r4, r1
  switch (Channel)
 80084b2:	290c      	cmp	r1, #12
 80084b4:	d863      	bhi.n	800857e <HAL_TIM_PWM_Stop_IT+0xd2>
 80084b6:	e8df f001 	tbb	[pc, r1]
 80084ba:	6207      	.short	0x6207
 80084bc:	622e6262 	.word	0x622e6262
 80084c0:	62346262 	.word	0x62346262
 80084c4:	6262      	.short	0x6262
 80084c6:	3a          	.byte	0x3a
 80084c7:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80084c8:	6802      	ldr	r2, [r0, #0]
 80084ca:	68d3      	ldr	r3, [r2, #12]
 80084cc:	f023 0302 	bic.w	r3, r3, #2
 80084d0:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80084d2:	2200      	movs	r2, #0
 80084d4:	4621      	mov	r1, r4
 80084d6:	6828      	ldr	r0, [r5, #0]
 80084d8:	f7ff fac9 	bl	8007a6e <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084dc:	682b      	ldr	r3, [r5, #0]
 80084de:	4a29      	ldr	r2, [pc, #164]	@ (8008584 <HAL_TIM_PWM_Stop_IT+0xd8>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d02a      	beq.n	800853a <HAL_TIM_PWM_Stop_IT+0x8e>
 80084e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d026      	beq.n	800853a <HAL_TIM_PWM_Stop_IT+0x8e>
    __HAL_TIM_DISABLE(htim);
 80084ec:	682b      	ldr	r3, [r5, #0]
 80084ee:	6a19      	ldr	r1, [r3, #32]
 80084f0:	f241 1211 	movw	r2, #4369	@ 0x1111
 80084f4:	4211      	tst	r1, r2
 80084f6:	d108      	bne.n	800850a <HAL_TIM_PWM_Stop_IT+0x5e>
 80084f8:	6a19      	ldr	r1, [r3, #32]
 80084fa:	f240 4244 	movw	r2, #1092	@ 0x444
 80084fe:	4211      	tst	r1, r2
 8008500:	d103      	bne.n	800850a <HAL_TIM_PWM_Stop_IT+0x5e>
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	f022 0201 	bic.w	r2, r2, #1
 8008508:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800850a:	bb2c      	cbnz	r4, 8008558 <HAL_TIM_PWM_Stop_IT+0xac>
 800850c:	2301      	movs	r3, #1
 800850e:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
 8008512:	2000      	movs	r0, #0
 8008514:	e034      	b.n	8008580 <HAL_TIM_PWM_Stop_IT+0xd4>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008516:	6802      	ldr	r2, [r0, #0]
 8008518:	68d3      	ldr	r3, [r2, #12]
 800851a:	f023 0304 	bic.w	r3, r3, #4
 800851e:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8008520:	e7d7      	b.n	80084d2 <HAL_TIM_PWM_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008522:	6802      	ldr	r2, [r0, #0]
 8008524:	68d3      	ldr	r3, [r2, #12]
 8008526:	f023 0308 	bic.w	r3, r3, #8
 800852a:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800852c:	e7d1      	b.n	80084d2 <HAL_TIM_PWM_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800852e:	6802      	ldr	r2, [r0, #0]
 8008530:	68d3      	ldr	r3, [r2, #12]
 8008532:	f023 0310 	bic.w	r3, r3, #16
 8008536:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8008538:	e7cb      	b.n	80084d2 <HAL_TIM_PWM_Stop_IT+0x26>
      __HAL_TIM_MOE_DISABLE(htim);
 800853a:	6a19      	ldr	r1, [r3, #32]
 800853c:	f241 1211 	movw	r2, #4369	@ 0x1111
 8008540:	4211      	tst	r1, r2
 8008542:	d1d3      	bne.n	80084ec <HAL_TIM_PWM_Stop_IT+0x40>
 8008544:	6a19      	ldr	r1, [r3, #32]
 8008546:	f240 4244 	movw	r2, #1092	@ 0x444
 800854a:	4211      	tst	r1, r2
 800854c:	d1ce      	bne.n	80084ec <HAL_TIM_PWM_Stop_IT+0x40>
 800854e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008550:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008554:	645a      	str	r2, [r3, #68]	@ 0x44
 8008556:	e7c9      	b.n	80084ec <HAL_TIM_PWM_Stop_IT+0x40>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008558:	2c04      	cmp	r4, #4
 800855a:	d006      	beq.n	800856a <HAL_TIM_PWM_Stop_IT+0xbe>
 800855c:	2c08      	cmp	r4, #8
 800855e:	d009      	beq.n	8008574 <HAL_TIM_PWM_Stop_IT+0xc8>
 8008560:	2301      	movs	r3, #1
 8008562:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
 8008566:	2000      	movs	r0, #0
 8008568:	e00a      	b.n	8008580 <HAL_TIM_PWM_Stop_IT+0xd4>
 800856a:	2301      	movs	r3, #1
 800856c:	f885 303f 	strb.w	r3, [r5, #63]	@ 0x3f
 8008570:	2000      	movs	r0, #0
 8008572:	e005      	b.n	8008580 <HAL_TIM_PWM_Stop_IT+0xd4>
 8008574:	2301      	movs	r3, #1
 8008576:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 800857a:	2000      	movs	r0, #0
 800857c:	e000      	b.n	8008580 <HAL_TIM_PWM_Stop_IT+0xd4>
  switch (Channel)
 800857e:	2001      	movs	r0, #1
}
 8008580:	bd38      	pop	{r3, r4, r5, pc}
 8008582:	bf00      	nop
 8008584:	40012c00 	.word	0x40012c00

08008588 <HAL_TIM_PWM_Start_DMA>:
{
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	4604      	mov	r4, r0
 800858c:	4616      	mov	r6, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800858e:	460d      	mov	r5, r1
 8008590:	2900      	cmp	r1, #0
 8008592:	d16c      	bne.n	800866e <HAL_TIM_PWM_Start_DMA+0xe6>
 8008594:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 8008598:	b2c0      	uxtb	r0, r0
 800859a:	2802      	cmp	r0, #2
 800859c:	bf14      	ite	ne
 800859e:	2000      	movne	r0, #0
 80085a0:	2001      	moveq	r0, #1
 80085a2:	2800      	cmp	r0, #0
 80085a4:	f040 8117 	bne.w	80087d6 <HAL_TIM_PWM_Start_DMA+0x24e>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80085a8:	2d00      	cmp	r5, #0
 80085aa:	d17c      	bne.n	80086a6 <HAL_TIM_PWM_Start_DMA+0x11e>
 80085ac:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 80085b0:	b2d2      	uxtb	r2, r2
 80085b2:	2a01      	cmp	r2, #1
 80085b4:	bf14      	ite	ne
 80085b6:	2200      	movne	r2, #0
 80085b8:	2201      	moveq	r2, #1
 80085ba:	2a00      	cmp	r2, #0
 80085bc:	f000 810d 	beq.w	80087da <HAL_TIM_PWM_Start_DMA+0x252>
    if ((pData == NULL) || (Length == 0U))
 80085c0:	2e00      	cmp	r6, #0
 80085c2:	f000 810c 	beq.w	80087de <HAL_TIM_PWM_Start_DMA+0x256>
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 810b 	beq.w	80087e2 <HAL_TIM_PWM_Start_DMA+0x25a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085cc:	2d00      	cmp	r5, #0
 80085ce:	f040 8086 	bne.w	80086de <HAL_TIM_PWM_Start_DMA+0x156>
 80085d2:	2202      	movs	r2, #2
 80085d4:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80085d8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80085da:	4989      	ldr	r1, [pc, #548]	@ (8008800 <HAL_TIM_PWM_Start_DMA+0x278>)
 80085dc:	6291      	str	r1, [r2, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80085de:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80085e0:	4988      	ldr	r1, [pc, #544]	@ (8008804 <HAL_TIM_PWM_Start_DMA+0x27c>)
 80085e2:	62d1      	str	r1, [r2, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80085e4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80085e6:	4988      	ldr	r1, [pc, #544]	@ (8008808 <HAL_TIM_PWM_Start_DMA+0x280>)
 80085e8:	6311      	str	r1, [r2, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80085ea:	6822      	ldr	r2, [r4, #0]
 80085ec:	3234      	adds	r2, #52	@ 0x34
 80085ee:	4631      	mov	r1, r6
 80085f0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80085f2:	f7fb f99c 	bl	800392e <HAL_DMA_Start_IT>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	f040 80f7 	bne.w	80087ea <HAL_TIM_PWM_Start_DMA+0x262>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80085fc:	6822      	ldr	r2, [r4, #0]
 80085fe:	68d3      	ldr	r3, [r2, #12]
 8008600:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008604:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008606:	2201      	movs	r2, #1
 8008608:	4629      	mov	r1, r5
 800860a:	6820      	ldr	r0, [r4, #0]
 800860c:	f7ff fa2f 	bl	8007a6e <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008610:	6823      	ldr	r3, [r4, #0]
 8008612:	4a7e      	ldr	r2, [pc, #504]	@ (800880c <HAL_TIM_PWM_Start_DMA+0x284>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d003      	beq.n	8008620 <HAL_TIM_PWM_Start_DMA+0x98>
 8008618:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800861c:	4293      	cmp	r3, r2
 800861e:	d103      	bne.n	8008628 <HAL_TIM_PWM_Start_DMA+0xa0>
      __HAL_TIM_MOE_ENABLE(htim);
 8008620:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008622:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008626:	645a      	str	r2, [r3, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008628:	6823      	ldr	r3, [r4, #0]
 800862a:	4a78      	ldr	r2, [pc, #480]	@ (800880c <HAL_TIM_PWM_Start_DMA+0x284>)
 800862c:	4293      	cmp	r3, r2
 800862e:	f000 80c7 	beq.w	80087c0 <HAL_TIM_PWM_Start_DMA+0x238>
 8008632:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008636:	4293      	cmp	r3, r2
 8008638:	f000 80c2 	beq.w	80087c0 <HAL_TIM_PWM_Start_DMA+0x238>
 800863c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008640:	f000 80be 	beq.w	80087c0 <HAL_TIM_PWM_Start_DMA+0x238>
 8008644:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8008648:	4293      	cmp	r3, r2
 800864a:	f000 80b9 	beq.w	80087c0 <HAL_TIM_PWM_Start_DMA+0x238>
 800864e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008652:	4293      	cmp	r3, r2
 8008654:	f000 80b4 	beq.w	80087c0 <HAL_TIM_PWM_Start_DMA+0x238>
 8008658:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800865c:	4293      	cmp	r3, r2
 800865e:	f000 80af 	beq.w	80087c0 <HAL_TIM_PWM_Start_DMA+0x238>
      __HAL_TIM_ENABLE(htim);
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	f042 0201 	orr.w	r2, r2, #1
 8008668:	601a      	str	r2, [r3, #0]
 800866a:	2000      	movs	r0, #0
 800866c:	e0b6      	b.n	80087dc <HAL_TIM_PWM_Start_DMA+0x254>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800866e:	2904      	cmp	r1, #4
 8008670:	d009      	beq.n	8008686 <HAL_TIM_PWM_Start_DMA+0xfe>
 8008672:	2908      	cmp	r1, #8
 8008674:	d00f      	beq.n	8008696 <HAL_TIM_PWM_Start_DMA+0x10e>
 8008676:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 800867a:	b2c0      	uxtb	r0, r0
 800867c:	2802      	cmp	r0, #2
 800867e:	bf14      	ite	ne
 8008680:	2000      	movne	r0, #0
 8008682:	2001      	moveq	r0, #1
 8008684:	e78d      	b.n	80085a2 <HAL_TIM_PWM_Start_DMA+0x1a>
 8008686:	f890 003f 	ldrb.w	r0, [r0, #63]	@ 0x3f
 800868a:	b2c0      	uxtb	r0, r0
 800868c:	2802      	cmp	r0, #2
 800868e:	bf14      	ite	ne
 8008690:	2000      	movne	r0, #0
 8008692:	2001      	moveq	r0, #1
 8008694:	e785      	b.n	80085a2 <HAL_TIM_PWM_Start_DMA+0x1a>
 8008696:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 800869a:	b2c0      	uxtb	r0, r0
 800869c:	2802      	cmp	r0, #2
 800869e:	bf14      	ite	ne
 80086a0:	2000      	movne	r0, #0
 80086a2:	2001      	moveq	r0, #1
 80086a4:	e77d      	b.n	80085a2 <HAL_TIM_PWM_Start_DMA+0x1a>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80086a6:	2d04      	cmp	r5, #4
 80086a8:	d009      	beq.n	80086be <HAL_TIM_PWM_Start_DMA+0x136>
 80086aa:	2d08      	cmp	r5, #8
 80086ac:	d00f      	beq.n	80086ce <HAL_TIM_PWM_Start_DMA+0x146>
 80086ae:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 80086b2:	b2d2      	uxtb	r2, r2
 80086b4:	2a01      	cmp	r2, #1
 80086b6:	bf14      	ite	ne
 80086b8:	2200      	movne	r2, #0
 80086ba:	2201      	moveq	r2, #1
 80086bc:	e77d      	b.n	80085ba <HAL_TIM_PWM_Start_DMA+0x32>
 80086be:	f894 203f 	ldrb.w	r2, [r4, #63]	@ 0x3f
 80086c2:	b2d2      	uxtb	r2, r2
 80086c4:	2a01      	cmp	r2, #1
 80086c6:	bf14      	ite	ne
 80086c8:	2200      	movne	r2, #0
 80086ca:	2201      	moveq	r2, #1
 80086cc:	e775      	b.n	80085ba <HAL_TIM_PWM_Start_DMA+0x32>
 80086ce:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 80086d2:	b2d2      	uxtb	r2, r2
 80086d4:	2a01      	cmp	r2, #1
 80086d6:	bf14      	ite	ne
 80086d8:	2200      	movne	r2, #0
 80086da:	2201      	moveq	r2, #1
 80086dc:	e76d      	b.n	80085ba <HAL_TIM_PWM_Start_DMA+0x32>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086de:	2d04      	cmp	r5, #4
 80086e0:	d024      	beq.n	800872c <HAL_TIM_PWM_Start_DMA+0x1a4>
 80086e2:	2d08      	cmp	r5, #8
 80086e4:	d03c      	beq.n	8008760 <HAL_TIM_PWM_Start_DMA+0x1d8>
 80086e6:	2202      	movs	r2, #2
 80086e8:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  switch (Channel)
 80086ec:	2d0c      	cmp	r5, #12
 80086ee:	d87a      	bhi.n	80087e6 <HAL_TIM_PWM_Start_DMA+0x25e>
 80086f0:	a201      	add	r2, pc, #4	@ (adr r2, 80086f8 <HAL_TIM_PWM_Start_DMA+0x170>)
 80086f2:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	080085d9 	.word	0x080085d9
 80086fc:	080087e7 	.word	0x080087e7
 8008700:	080087e7 	.word	0x080087e7
 8008704:	080087e7 	.word	0x080087e7
 8008708:	08008733 	.word	0x08008733
 800870c:	080087e7 	.word	0x080087e7
 8008710:	080087e7 	.word	0x080087e7
 8008714:	080087e7 	.word	0x080087e7
 8008718:	08008767 	.word	0x08008767
 800871c:	080087e7 	.word	0x080087e7
 8008720:	080087e7 	.word	0x080087e7
 8008724:	080087e7 	.word	0x080087e7
 8008728:	08008795 	.word	0x08008795
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800872c:	2202      	movs	r2, #2
 800872e:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008732:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008734:	4932      	ldr	r1, [pc, #200]	@ (8008800 <HAL_TIM_PWM_Start_DMA+0x278>)
 8008736:	6291      	str	r1, [r2, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008738:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800873a:	4932      	ldr	r1, [pc, #200]	@ (8008804 <HAL_TIM_PWM_Start_DMA+0x27c>)
 800873c:	62d1      	str	r1, [r2, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800873e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008740:	4931      	ldr	r1, [pc, #196]	@ (8008808 <HAL_TIM_PWM_Start_DMA+0x280>)
 8008742:	6311      	str	r1, [r2, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008744:	6822      	ldr	r2, [r4, #0]
 8008746:	3238      	adds	r2, #56	@ 0x38
 8008748:	4631      	mov	r1, r6
 800874a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800874c:	f7fb f8ef 	bl	800392e <HAL_DMA_Start_IT>
 8008750:	2800      	cmp	r0, #0
 8008752:	d14c      	bne.n	80087ee <HAL_TIM_PWM_Start_DMA+0x266>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008754:	6822      	ldr	r2, [r4, #0]
 8008756:	68d3      	ldr	r3, [r2, #12]
 8008758:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800875c:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800875e:	e752      	b.n	8008606 <HAL_TIM_PWM_Start_DMA+0x7e>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008760:	2202      	movs	r2, #2
 8008762:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008766:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008768:	4925      	ldr	r1, [pc, #148]	@ (8008800 <HAL_TIM_PWM_Start_DMA+0x278>)
 800876a:	6291      	str	r1, [r2, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800876c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800876e:	4925      	ldr	r1, [pc, #148]	@ (8008804 <HAL_TIM_PWM_Start_DMA+0x27c>)
 8008770:	62d1      	str	r1, [r2, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008772:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008774:	4924      	ldr	r1, [pc, #144]	@ (8008808 <HAL_TIM_PWM_Start_DMA+0x280>)
 8008776:	6311      	str	r1, [r2, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008778:	6822      	ldr	r2, [r4, #0]
 800877a:	323c      	adds	r2, #60	@ 0x3c
 800877c:	4631      	mov	r1, r6
 800877e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008780:	f7fb f8d5 	bl	800392e <HAL_DMA_Start_IT>
 8008784:	2800      	cmp	r0, #0
 8008786:	d134      	bne.n	80087f2 <HAL_TIM_PWM_Start_DMA+0x26a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008788:	6822      	ldr	r2, [r4, #0]
 800878a:	68d3      	ldr	r3, [r2, #12]
 800878c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008790:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8008792:	e738      	b.n	8008606 <HAL_TIM_PWM_Start_DMA+0x7e>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008794:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8008796:	491a      	ldr	r1, [pc, #104]	@ (8008800 <HAL_TIM_PWM_Start_DMA+0x278>)
 8008798:	6291      	str	r1, [r2, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800879a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800879c:	4919      	ldr	r1, [pc, #100]	@ (8008804 <HAL_TIM_PWM_Start_DMA+0x27c>)
 800879e:	62d1      	str	r1, [r2, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80087a0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80087a2:	4919      	ldr	r1, [pc, #100]	@ (8008808 <HAL_TIM_PWM_Start_DMA+0x280>)
 80087a4:	6311      	str	r1, [r2, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80087a6:	6822      	ldr	r2, [r4, #0]
 80087a8:	3240      	adds	r2, #64	@ 0x40
 80087aa:	4631      	mov	r1, r6
 80087ac:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80087ae:	f7fb f8be 	bl	800392e <HAL_DMA_Start_IT>
 80087b2:	bb00      	cbnz	r0, 80087f6 <HAL_TIM_PWM_Start_DMA+0x26e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80087b4:	6822      	ldr	r2, [r4, #0]
 80087b6:	68d3      	ldr	r3, [r2, #12]
 80087b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80087bc:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80087be:	e722      	b.n	8008606 <HAL_TIM_PWM_Start_DMA+0x7e>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087c0:	689a      	ldr	r2, [r3, #8]
 80087c2:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087c6:	2a06      	cmp	r2, #6
 80087c8:	d017      	beq.n	80087fa <HAL_TIM_PWM_Start_DMA+0x272>
        __HAL_TIM_ENABLE(htim);
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	f042 0201 	orr.w	r2, r2, #1
 80087d0:	601a      	str	r2, [r3, #0]
 80087d2:	2000      	movs	r0, #0
 80087d4:	e002      	b.n	80087dc <HAL_TIM_PWM_Start_DMA+0x254>
    return HAL_BUSY;
 80087d6:	2002      	movs	r0, #2
 80087d8:	e000      	b.n	80087dc <HAL_TIM_PWM_Start_DMA+0x254>
    return HAL_ERROR;
 80087da:	2001      	movs	r0, #1
}
 80087dc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80087de:	2001      	movs	r0, #1
 80087e0:	e7fc      	b.n	80087dc <HAL_TIM_PWM_Start_DMA+0x254>
 80087e2:	2001      	movs	r0, #1
 80087e4:	e7fa      	b.n	80087dc <HAL_TIM_PWM_Start_DMA+0x254>
  switch (Channel)
 80087e6:	2001      	movs	r0, #1
 80087e8:	e7f8      	b.n	80087dc <HAL_TIM_PWM_Start_DMA+0x254>
        return HAL_ERROR;
 80087ea:	2001      	movs	r0, #1
 80087ec:	e7f6      	b.n	80087dc <HAL_TIM_PWM_Start_DMA+0x254>
        return HAL_ERROR;
 80087ee:	2001      	movs	r0, #1
 80087f0:	e7f4      	b.n	80087dc <HAL_TIM_PWM_Start_DMA+0x254>
        return HAL_ERROR;
 80087f2:	2001      	movs	r0, #1
 80087f4:	e7f2      	b.n	80087dc <HAL_TIM_PWM_Start_DMA+0x254>
        return HAL_ERROR;
 80087f6:	2001      	movs	r0, #1
 80087f8:	e7f0      	b.n	80087dc <HAL_TIM_PWM_Start_DMA+0x254>
 80087fa:	2000      	movs	r0, #0
 80087fc:	e7ee      	b.n	80087dc <HAL_TIM_PWM_Start_DMA+0x254>
 80087fe:	bf00      	nop
 8008800:	08006d29 	.word	0x08006d29
 8008804:	08006d9b 	.word	0x08006d9b
 8008808:	08006f5d 	.word	0x08006f5d
 800880c:	40012c00 	.word	0x40012c00

08008810 <HAL_TIM_PWM_Stop_DMA>:
{
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4604      	mov	r4, r0
 8008814:	460d      	mov	r5, r1
  switch (Channel)
 8008816:	290c      	cmp	r1, #12
 8008818:	d870      	bhi.n	80088fc <HAL_TIM_PWM_Stop_DMA+0xec>
 800881a:	e8df f001 	tbb	[pc, r1]
 800881e:	6f07      	.short	0x6f07
 8008820:	6f326f6f 	.word	0x6f326f6f
 8008824:	6f3b6f6f 	.word	0x6f3b6f6f
 8008828:	6f6f      	.short	0x6f6f
 800882a:	44          	.byte	0x44
 800882b:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800882c:	6802      	ldr	r2, [r0, #0]
 800882e:	68d3      	ldr	r3, [r2, #12]
 8008830:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008834:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008836:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8008838:	f7fb f8d8 	bl	80039ec <HAL_DMA_Abort_IT>
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800883c:	2200      	movs	r2, #0
 800883e:	4629      	mov	r1, r5
 8008840:	6820      	ldr	r0, [r4, #0]
 8008842:	f7ff f914 	bl	8007a6e <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	4a2d      	ldr	r2, [pc, #180]	@ (8008900 <HAL_TIM_PWM_Stop_DMA+0xf0>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d034      	beq.n	80088b8 <HAL_TIM_PWM_Stop_DMA+0xa8>
 800884e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008852:	4293      	cmp	r3, r2
 8008854:	d030      	beq.n	80088b8 <HAL_TIM_PWM_Stop_DMA+0xa8>
    __HAL_TIM_DISABLE(htim);
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	6a19      	ldr	r1, [r3, #32]
 800885a:	f241 1211 	movw	r2, #4369	@ 0x1111
 800885e:	4211      	tst	r1, r2
 8008860:	d108      	bne.n	8008874 <HAL_TIM_PWM_Stop_DMA+0x64>
 8008862:	6a19      	ldr	r1, [r3, #32]
 8008864:	f240 4244 	movw	r2, #1092	@ 0x444
 8008868:	4211      	tst	r1, r2
 800886a:	d103      	bne.n	8008874 <HAL_TIM_PWM_Stop_DMA+0x64>
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	f022 0201 	bic.w	r2, r2, #1
 8008872:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008874:	2d00      	cmp	r5, #0
 8008876:	d12e      	bne.n	80088d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
 8008878:	2301      	movs	r3, #1
 800887a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800887e:	2000      	movs	r0, #0
 8008880:	e03d      	b.n	80088fe <HAL_TIM_PWM_Stop_DMA+0xee>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008882:	6802      	ldr	r2, [r0, #0]
 8008884:	68d3      	ldr	r3, [r2, #12]
 8008886:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800888a:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800888c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800888e:	f7fb f8ad 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8008892:	e7d3      	b.n	800883c <HAL_TIM_PWM_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008894:	6802      	ldr	r2, [r0, #0]
 8008896:	68d3      	ldr	r3, [r2, #12]
 8008898:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800889c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800889e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80088a0:	f7fb f8a4 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 80088a4:	e7ca      	b.n	800883c <HAL_TIM_PWM_Stop_DMA+0x2c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80088a6:	6802      	ldr	r2, [r0, #0]
 80088a8:	68d3      	ldr	r3, [r2, #12]
 80088aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088ae:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80088b0:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80088b2:	f7fb f89b 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 80088b6:	e7c1      	b.n	800883c <HAL_TIM_PWM_Stop_DMA+0x2c>
      __HAL_TIM_MOE_DISABLE(htim);
 80088b8:	6a19      	ldr	r1, [r3, #32]
 80088ba:	f241 1211 	movw	r2, #4369	@ 0x1111
 80088be:	4211      	tst	r1, r2
 80088c0:	d1c9      	bne.n	8008856 <HAL_TIM_PWM_Stop_DMA+0x46>
 80088c2:	6a19      	ldr	r1, [r3, #32]
 80088c4:	f240 4244 	movw	r2, #1092	@ 0x444
 80088c8:	4211      	tst	r1, r2
 80088ca:	d1c4      	bne.n	8008856 <HAL_TIM_PWM_Stop_DMA+0x46>
 80088cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80088d2:	645a      	str	r2, [r3, #68]	@ 0x44
 80088d4:	e7bf      	b.n	8008856 <HAL_TIM_PWM_Stop_DMA+0x46>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80088d6:	2d04      	cmp	r5, #4
 80088d8:	d006      	beq.n	80088e8 <HAL_TIM_PWM_Stop_DMA+0xd8>
 80088da:	2d08      	cmp	r5, #8
 80088dc:	d009      	beq.n	80088f2 <HAL_TIM_PWM_Stop_DMA+0xe2>
 80088de:	2301      	movs	r3, #1
 80088e0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80088e4:	2000      	movs	r0, #0
 80088e6:	e00a      	b.n	80088fe <HAL_TIM_PWM_Stop_DMA+0xee>
 80088e8:	2301      	movs	r3, #1
 80088ea:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80088ee:	2000      	movs	r0, #0
 80088f0:	e005      	b.n	80088fe <HAL_TIM_PWM_Stop_DMA+0xee>
 80088f2:	2301      	movs	r3, #1
 80088f4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80088f8:	2000      	movs	r0, #0
 80088fa:	e000      	b.n	80088fe <HAL_TIM_PWM_Stop_DMA+0xee>
  switch (Channel)
 80088fc:	2001      	movs	r0, #1
}
 80088fe:	bd38      	pop	{r3, r4, r5, pc}
 8008900:	40012c00 	.word	0x40012c00

08008904 <HAL_TIM_IC_Start>:
{
 8008904:	b510      	push	{r4, lr}
 8008906:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008908:	460b      	mov	r3, r1
 800890a:	2900      	cmp	r1, #0
 800890c:	d134      	bne.n	8008978 <HAL_TIM_IC_Start+0x74>
 800890e:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 8008912:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008914:	2b00      	cmp	r3, #0
 8008916:	d13f      	bne.n	8008998 <HAL_TIM_IC_Start+0x94>
 8008918:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 800891c:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800891e:	2801      	cmp	r0, #1
 8008920:	d174      	bne.n	8008a0c <HAL_TIM_IC_Start+0x108>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008922:	2a01      	cmp	r2, #1
 8008924:	d173      	bne.n	8008a0e <HAL_TIM_IC_Start+0x10a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008926:	2b00      	cmp	r3, #0
 8008928:	d146      	bne.n	80089b8 <HAL_TIM_IC_Start+0xb4>
 800892a:	2202      	movs	r2, #2
 800892c:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008930:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008934:	2201      	movs	r2, #1
 8008936:	4619      	mov	r1, r3
 8008938:	6820      	ldr	r0, [r4, #0]
 800893a:	f7ff f898 	bl	8007a6e <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	4a34      	ldr	r2, [pc, #208]	@ (8008a14 <HAL_TIM_IC_Start+0x110>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d057      	beq.n	80089f6 <HAL_TIM_IC_Start+0xf2>
 8008946:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800894a:	4293      	cmp	r3, r2
 800894c:	d053      	beq.n	80089f6 <HAL_TIM_IC_Start+0xf2>
 800894e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008952:	d050      	beq.n	80089f6 <HAL_TIM_IC_Start+0xf2>
 8008954:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8008958:	4293      	cmp	r3, r2
 800895a:	d04c      	beq.n	80089f6 <HAL_TIM_IC_Start+0xf2>
 800895c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008960:	4293      	cmp	r3, r2
 8008962:	d048      	beq.n	80089f6 <HAL_TIM_IC_Start+0xf2>
 8008964:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008968:	4293      	cmp	r3, r2
 800896a:	d044      	beq.n	80089f6 <HAL_TIM_IC_Start+0xf2>
    __HAL_TIM_ENABLE(htim);
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	f042 0201 	orr.w	r2, r2, #1
 8008972:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008974:	2000      	movs	r0, #0
 8008976:	e04a      	b.n	8008a0e <HAL_TIM_IC_Start+0x10a>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008978:	2904      	cmp	r1, #4
 800897a:	d005      	beq.n	8008988 <HAL_TIM_IC_Start+0x84>
 800897c:	2908      	cmp	r1, #8
 800897e:	d007      	beq.n	8008990 <HAL_TIM_IC_Start+0x8c>
 8008980:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8008984:	b2c0      	uxtb	r0, r0
 8008986:	e7c5      	b.n	8008914 <HAL_TIM_IC_Start+0x10>
 8008988:	f890 003f 	ldrb.w	r0, [r0, #63]	@ 0x3f
 800898c:	b2c0      	uxtb	r0, r0
 800898e:	e7c1      	b.n	8008914 <HAL_TIM_IC_Start+0x10>
 8008990:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8008994:	b2c0      	uxtb	r0, r0
 8008996:	e7bd      	b.n	8008914 <HAL_TIM_IC_Start+0x10>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008998:	2b04      	cmp	r3, #4
 800899a:	d005      	beq.n	80089a8 <HAL_TIM_IC_Start+0xa4>
 800899c:	2b08      	cmp	r3, #8
 800899e:	d007      	beq.n	80089b0 <HAL_TIM_IC_Start+0xac>
 80089a0:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 80089a4:	b2d2      	uxtb	r2, r2
 80089a6:	e7ba      	b.n	800891e <HAL_TIM_IC_Start+0x1a>
 80089a8:	f894 2043 	ldrb.w	r2, [r4, #67]	@ 0x43
 80089ac:	b2d2      	uxtb	r2, r2
 80089ae:	e7b6      	b.n	800891e <HAL_TIM_IC_Start+0x1a>
 80089b0:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80089b4:	b2d2      	uxtb	r2, r2
 80089b6:	e7b2      	b.n	800891e <HAL_TIM_IC_Start+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089b8:	2b04      	cmp	r3, #4
 80089ba:	d00c      	beq.n	80089d6 <HAL_TIM_IC_Start+0xd2>
 80089bc:	2b08      	cmp	r3, #8
 80089be:	d00e      	beq.n	80089de <HAL_TIM_IC_Start+0xda>
 80089c0:	2202      	movs	r2, #2
 80089c2:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d00d      	beq.n	80089e6 <HAL_TIM_IC_Start+0xe2>
 80089ca:	2b08      	cmp	r3, #8
 80089cc:	d00f      	beq.n	80089ee <HAL_TIM_IC_Start+0xea>
 80089ce:	2202      	movs	r2, #2
 80089d0:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 80089d4:	e7ae      	b.n	8008934 <HAL_TIM_IC_Start+0x30>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089d6:	2202      	movs	r2, #2
 80089d8:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089dc:	e7f3      	b.n	80089c6 <HAL_TIM_IC_Start+0xc2>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089de:	2202      	movs	r2, #2
 80089e0:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089e4:	e7ef      	b.n	80089c6 <HAL_TIM_IC_Start+0xc2>
 80089e6:	2202      	movs	r2, #2
 80089e8:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
 80089ec:	e7a2      	b.n	8008934 <HAL_TIM_IC_Start+0x30>
 80089ee:	2202      	movs	r2, #2
 80089f0:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 80089f4:	e79e      	b.n	8008934 <HAL_TIM_IC_Start+0x30>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089f6:	689a      	ldr	r2, [r3, #8]
 80089f8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089fc:	2a06      	cmp	r2, #6
 80089fe:	d007      	beq.n	8008a10 <HAL_TIM_IC_Start+0x10c>
      __HAL_TIM_ENABLE(htim);
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	f042 0201 	orr.w	r2, r2, #1
 8008a06:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008a08:	2000      	movs	r0, #0
 8008a0a:	e000      	b.n	8008a0e <HAL_TIM_IC_Start+0x10a>
    return HAL_ERROR;
 8008a0c:	2001      	movs	r0, #1
}
 8008a0e:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8008a10:	2000      	movs	r0, #0
 8008a12:	e7fc      	b.n	8008a0e <HAL_TIM_IC_Start+0x10a>
 8008a14:	40012c00 	.word	0x40012c00

08008a18 <HAL_TIM_IC_Stop>:
{
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008a1e:	2200      	movs	r2, #0
 8008a20:	6800      	ldr	r0, [r0, #0]
 8008a22:	f7ff f824 	bl	8007a6e <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	6a19      	ldr	r1, [r3, #32]
 8008a2a:	f241 1211 	movw	r2, #4369	@ 0x1111
 8008a2e:	4211      	tst	r1, r2
 8008a30:	d108      	bne.n	8008a44 <HAL_TIM_IC_Stop+0x2c>
 8008a32:	6a19      	ldr	r1, [r3, #32]
 8008a34:	f240 4244 	movw	r2, #1092	@ 0x444
 8008a38:	4211      	tst	r1, r2
 8008a3a:	d103      	bne.n	8008a44 <HAL_TIM_IC_Stop+0x2c>
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	f022 0201 	bic.w	r2, r2, #1
 8008a42:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a44:	b935      	cbnz	r5, 8008a54 <HAL_TIM_IC_Stop+0x3c>
 8008a46:	2301      	movs	r3, #1
 8008a48:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 8008a50:	2000      	movs	r0, #0
 8008a52:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a54:	2d04      	cmp	r5, #4
 8008a56:	d00c      	beq.n	8008a72 <HAL_TIM_IC_Stop+0x5a>
 8008a58:	2d08      	cmp	r5, #8
 8008a5a:	d00e      	beq.n	8008a7a <HAL_TIM_IC_Stop+0x62>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a62:	2d04      	cmp	r5, #4
 8008a64:	d00d      	beq.n	8008a82 <HAL_TIM_IC_Stop+0x6a>
 8008a66:	2d08      	cmp	r5, #8
 8008a68:	d00f      	beq.n	8008a8a <HAL_TIM_IC_Stop+0x72>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8008a70:	e7ee      	b.n	8008a50 <HAL_TIM_IC_Stop+0x38>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a72:	2301      	movs	r3, #1
 8008a74:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a78:	e7f3      	b.n	8008a62 <HAL_TIM_IC_Stop+0x4a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a80:	e7ef      	b.n	8008a62 <HAL_TIM_IC_Stop+0x4a>
 8008a82:	2301      	movs	r3, #1
 8008a84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a88:	e7e2      	b.n	8008a50 <HAL_TIM_IC_Stop+0x38>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008a90:	e7de      	b.n	8008a50 <HAL_TIM_IC_Stop+0x38>
	...

08008a94 <HAL_TIM_IC_Start_IT>:
{
 8008a94:	b510      	push	{r4, lr}
 8008a96:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008a98:	460b      	mov	r3, r1
 8008a9a:	b9f1      	cbnz	r1, 8008ada <HAL_TIM_IC_Start_IT+0x46>
 8008a9c:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 8008aa0:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008aa2:	bb53      	cbnz	r3, 8008afa <HAL_TIM_IC_Start_IT+0x66>
 8008aa4:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8008aa8:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008aaa:	2801      	cmp	r0, #1
 8008aac:	f040 8096 	bne.w	8008bdc <HAL_TIM_IC_Start_IT+0x148>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ab0:	2a01      	cmp	r2, #1
 8008ab2:	f040 8094 	bne.w	8008bde <HAL_TIM_IC_Start_IT+0x14a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ab6:	bb83      	cbnz	r3, 8008b1a <HAL_TIM_IC_Start_IT+0x86>
 8008ab8:	2102      	movs	r1, #2
 8008aba:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008abe:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  switch (Channel)
 8008ac2:	2b0c      	cmp	r3, #12
 8008ac4:	f200 808c 	bhi.w	8008be0 <HAL_TIM_IC_Start_IT+0x14c>
 8008ac8:	e8df f003 	tbb	[pc, r3]
 8008acc:	8a8a8a71 	.word	0x8a8a8a71
 8008ad0:	8a8a8a41 	.word	0x8a8a8a41
 8008ad4:	8a8a8a6b 	.word	0x8a8a8a6b
 8008ad8:	77          	.byte	0x77
 8008ad9:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008ada:	2904      	cmp	r1, #4
 8008adc:	d005      	beq.n	8008aea <HAL_TIM_IC_Start_IT+0x56>
 8008ade:	2908      	cmp	r1, #8
 8008ae0:	d007      	beq.n	8008af2 <HAL_TIM_IC_Start_IT+0x5e>
 8008ae2:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8008ae6:	b2c0      	uxtb	r0, r0
 8008ae8:	e7db      	b.n	8008aa2 <HAL_TIM_IC_Start_IT+0xe>
 8008aea:	f890 003f 	ldrb.w	r0, [r0, #63]	@ 0x3f
 8008aee:	b2c0      	uxtb	r0, r0
 8008af0:	e7d7      	b.n	8008aa2 <HAL_TIM_IC_Start_IT+0xe>
 8008af2:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8008af6:	b2c0      	uxtb	r0, r0
 8008af8:	e7d3      	b.n	8008aa2 <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008afa:	2b04      	cmp	r3, #4
 8008afc:	d005      	beq.n	8008b0a <HAL_TIM_IC_Start_IT+0x76>
 8008afe:	2b08      	cmp	r3, #8
 8008b00:	d007      	beq.n	8008b12 <HAL_TIM_IC_Start_IT+0x7e>
 8008b02:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8008b06:	b2d2      	uxtb	r2, r2
 8008b08:	e7cf      	b.n	8008aaa <HAL_TIM_IC_Start_IT+0x16>
 8008b0a:	f894 2043 	ldrb.w	r2, [r4, #67]	@ 0x43
 8008b0e:	b2d2      	uxtb	r2, r2
 8008b10:	e7cb      	b.n	8008aaa <HAL_TIM_IC_Start_IT+0x16>
 8008b12:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8008b16:	b2d2      	uxtb	r2, r2
 8008b18:	e7c7      	b.n	8008aaa <HAL_TIM_IC_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b1a:	2b04      	cmp	r3, #4
 8008b1c:	d00c      	beq.n	8008b38 <HAL_TIM_IC_Start_IT+0xa4>
 8008b1e:	2b08      	cmp	r3, #8
 8008b20:	d00e      	beq.n	8008b40 <HAL_TIM_IC_Start_IT+0xac>
 8008b22:	2102      	movs	r1, #2
 8008b24:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b28:	2b04      	cmp	r3, #4
 8008b2a:	d00d      	beq.n	8008b48 <HAL_TIM_IC_Start_IT+0xb4>
 8008b2c:	2b08      	cmp	r3, #8
 8008b2e:	d035      	beq.n	8008b9c <HAL_TIM_IC_Start_IT+0x108>
 8008b30:	2102      	movs	r1, #2
 8008b32:	f884 1045 	strb.w	r1, [r4, #69]	@ 0x45
 8008b36:	e7c4      	b.n	8008ac2 <HAL_TIM_IC_Start_IT+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b38:	2102      	movs	r1, #2
 8008b3a:	f884 103f 	strb.w	r1, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b3e:	e7f3      	b.n	8008b28 <HAL_TIM_IC_Start_IT+0x94>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b40:	2102      	movs	r1, #2
 8008b42:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b46:	e7ef      	b.n	8008b28 <HAL_TIM_IC_Start_IT+0x94>
 8008b48:	2202      	movs	r2, #2
 8008b4a:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008b4e:	6821      	ldr	r1, [r4, #0]
 8008b50:	68ca      	ldr	r2, [r1, #12]
 8008b52:	f042 0204 	orr.w	r2, r2, #4
 8008b56:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b58:	2201      	movs	r2, #1
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6820      	ldr	r0, [r4, #0]
 8008b5e:	f7fe ff86 	bl	8007a6e <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	4a20      	ldr	r2, [pc, #128]	@ (8008be8 <HAL_TIM_IC_Start_IT+0x154>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d02d      	beq.n	8008bc6 <HAL_TIM_IC_Start_IT+0x132>
 8008b6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d029      	beq.n	8008bc6 <HAL_TIM_IC_Start_IT+0x132>
 8008b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b76:	d026      	beq.n	8008bc6 <HAL_TIM_IC_Start_IT+0x132>
 8008b78:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d022      	beq.n	8008bc6 <HAL_TIM_IC_Start_IT+0x132>
 8008b80:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d01e      	beq.n	8008bc6 <HAL_TIM_IC_Start_IT+0x132>
 8008b88:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d01a      	beq.n	8008bc6 <HAL_TIM_IC_Start_IT+0x132>
      __HAL_TIM_ENABLE(htim);
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	f042 0201 	orr.w	r2, r2, #1
 8008b96:	601a      	str	r2, [r3, #0]
 8008b98:	2000      	movs	r0, #0
 8008b9a:	e020      	b.n	8008bde <HAL_TIM_IC_Start_IT+0x14a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008ba2:	6821      	ldr	r1, [r4, #0]
 8008ba4:	68ca      	ldr	r2, [r1, #12]
 8008ba6:	f042 0208 	orr.w	r2, r2, #8
 8008baa:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8008bac:	e7d4      	b.n	8008b58 <HAL_TIM_IC_Start_IT+0xc4>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008bae:	6821      	ldr	r1, [r4, #0]
 8008bb0:	68ca      	ldr	r2, [r1, #12]
 8008bb2:	f042 0202 	orr.w	r2, r2, #2
 8008bb6:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8008bb8:	e7ce      	b.n	8008b58 <HAL_TIM_IC_Start_IT+0xc4>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008bba:	6821      	ldr	r1, [r4, #0]
 8008bbc:	68ca      	ldr	r2, [r1, #12]
 8008bbe:	f042 0210 	orr.w	r2, r2, #16
 8008bc2:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8008bc4:	e7c8      	b.n	8008b58 <HAL_TIM_IC_Start_IT+0xc4>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bc6:	689a      	ldr	r2, [r3, #8]
 8008bc8:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bcc:	2a06      	cmp	r2, #6
 8008bce:	d009      	beq.n	8008be4 <HAL_TIM_IC_Start_IT+0x150>
        __HAL_TIM_ENABLE(htim);
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	f042 0201 	orr.w	r2, r2, #1
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	2000      	movs	r0, #0
 8008bda:	e000      	b.n	8008bde <HAL_TIM_IC_Start_IT+0x14a>
    return HAL_ERROR;
 8008bdc:	2001      	movs	r0, #1
}
 8008bde:	bd10      	pop	{r4, pc}
  switch (Channel)
 8008be0:	4610      	mov	r0, r2
 8008be2:	e7fc      	b.n	8008bde <HAL_TIM_IC_Start_IT+0x14a>
 8008be4:	2000      	movs	r0, #0
 8008be6:	e7fa      	b.n	8008bde <HAL_TIM_IC_Start_IT+0x14a>
 8008be8:	40012c00 	.word	0x40012c00

08008bec <HAL_TIM_IC_Stop_IT>:
{
 8008bec:	b538      	push	{r3, r4, r5, lr}
 8008bee:	4605      	mov	r5, r0
 8008bf0:	460c      	mov	r4, r1
  switch (Channel)
 8008bf2:	290c      	cmp	r1, #12
 8008bf4:	d85d      	bhi.n	8008cb2 <HAL_TIM_IC_Stop_IT+0xc6>
 8008bf6:	e8df f001 	tbb	[pc, r1]
 8008bfa:	5c07      	.short	0x5c07
 8008bfc:	5c285c5c 	.word	0x5c285c5c
 8008c00:	5c2e5c5c 	.word	0x5c2e5c5c
 8008c04:	5c5c      	.short	0x5c5c
 8008c06:	34          	.byte	0x34
 8008c07:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008c08:	6802      	ldr	r2, [r0, #0]
 8008c0a:	68d3      	ldr	r3, [r2, #12]
 8008c0c:	f023 0302 	bic.w	r3, r3, #2
 8008c10:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008c12:	2200      	movs	r2, #0
 8008c14:	4621      	mov	r1, r4
 8008c16:	6828      	ldr	r0, [r5, #0]
 8008c18:	f7fe ff29 	bl	8007a6e <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE(htim);
 8008c1c:	682b      	ldr	r3, [r5, #0]
 8008c1e:	6a19      	ldr	r1, [r3, #32]
 8008c20:	f241 1211 	movw	r2, #4369	@ 0x1111
 8008c24:	4211      	tst	r1, r2
 8008c26:	d108      	bne.n	8008c3a <HAL_TIM_IC_Stop_IT+0x4e>
 8008c28:	6a19      	ldr	r1, [r3, #32]
 8008c2a:	f240 4244 	movw	r2, #1092	@ 0x444
 8008c2e:	4211      	tst	r1, r2
 8008c30:	d103      	bne.n	8008c3a <HAL_TIM_IC_Stop_IT+0x4e>
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	f022 0201 	bic.w	r2, r2, #1
 8008c38:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c3a:	b9c4      	cbnz	r4, 8008c6e <HAL_TIM_IC_Stop_IT+0x82>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c42:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
 8008c46:	2000      	movs	r0, #0
 8008c48:	e034      	b.n	8008cb4 <HAL_TIM_IC_Stop_IT+0xc8>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008c4a:	6802      	ldr	r2, [r0, #0]
 8008c4c:	68d3      	ldr	r3, [r2, #12]
 8008c4e:	f023 0304 	bic.w	r3, r3, #4
 8008c52:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8008c54:	e7dd      	b.n	8008c12 <HAL_TIM_IC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008c56:	6802      	ldr	r2, [r0, #0]
 8008c58:	68d3      	ldr	r3, [r2, #12]
 8008c5a:	f023 0308 	bic.w	r3, r3, #8
 8008c5e:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8008c60:	e7d7      	b.n	8008c12 <HAL_TIM_IC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008c62:	6802      	ldr	r2, [r0, #0]
 8008c64:	68d3      	ldr	r3, [r2, #12]
 8008c66:	f023 0310 	bic.w	r3, r3, #16
 8008c6a:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8008c6c:	e7d1      	b.n	8008c12 <HAL_TIM_IC_Stop_IT+0x26>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c6e:	2c04      	cmp	r4, #4
 8008c70:	d00d      	beq.n	8008c8e <HAL_TIM_IC_Stop_IT+0xa2>
 8008c72:	2c08      	cmp	r4, #8
 8008c74:	d00f      	beq.n	8008c96 <HAL_TIM_IC_Stop_IT+0xaa>
 8008c76:	2301      	movs	r3, #1
 8008c78:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c7c:	2c04      	cmp	r4, #4
 8008c7e:	d00e      	beq.n	8008c9e <HAL_TIM_IC_Stop_IT+0xb2>
 8008c80:	2c08      	cmp	r4, #8
 8008c82:	d011      	beq.n	8008ca8 <HAL_TIM_IC_Stop_IT+0xbc>
 8008c84:	2301      	movs	r3, #1
 8008c86:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
 8008c8a:	2000      	movs	r0, #0
 8008c8c:	e012      	b.n	8008cb4 <HAL_TIM_IC_Stop_IT+0xc8>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c8e:	2301      	movs	r3, #1
 8008c90:	f885 303f 	strb.w	r3, [r5, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c94:	e7f2      	b.n	8008c7c <HAL_TIM_IC_Stop_IT+0x90>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c96:	2301      	movs	r3, #1
 8008c98:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c9c:	e7ee      	b.n	8008c7c <HAL_TIM_IC_Stop_IT+0x90>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	f885 3043 	strb.w	r3, [r5, #67]	@ 0x43
 8008ca4:	2000      	movs	r0, #0
 8008ca6:	e005      	b.n	8008cb4 <HAL_TIM_IC_Stop_IT+0xc8>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
 8008cae:	2000      	movs	r0, #0
 8008cb0:	e000      	b.n	8008cb4 <HAL_TIM_IC_Stop_IT+0xc8>
  switch (Channel)
 8008cb2:	2001      	movs	r0, #1
}
 8008cb4:	bd38      	pop	{r3, r4, r5, pc}
	...

08008cb8 <HAL_TIM_IC_Start_DMA>:
{
 8008cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cbc:	4604      	mov	r4, r0
 8008cbe:	4616      	mov	r6, r2
 8008cc0:	461f      	mov	r7, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008cc2:	460d      	mov	r5, r1
 8008cc4:	bb99      	cbnz	r1, 8008d2e <HAL_TIM_IC_Start_DMA+0x76>
 8008cc6:	f890 103e 	ldrb.w	r1, [r0, #62]	@ 0x3e
 8008cca:	b2c8      	uxtb	r0, r1
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008ccc:	2d00      	cmp	r5, #0
 8008cce:	d13e      	bne.n	8008d4e <HAL_TIM_IC_Start_DMA+0x96>
 8008cd0:	f894 8042 	ldrb.w	r8, [r4, #66]	@ 0x42
 8008cd4:	fa5f f888 	uxtb.w	r8, r8
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8008cd8:	2802      	cmp	r0, #2
 8008cda:	f000 80f8 	beq.w	8008ece <HAL_TIM_IC_Start_DMA+0x216>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8008cde:	f1b8 0f02 	cmp.w	r8, #2
 8008ce2:	f000 80f1 	beq.w	8008ec8 <HAL_TIM_IC_Start_DMA+0x210>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8008ce6:	2801      	cmp	r0, #1
 8008ce8:	f040 80f0 	bne.w	8008ecc <HAL_TIM_IC_Start_DMA+0x214>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8008cec:	f1b8 0f01 	cmp.w	r8, #1
 8008cf0:	f040 80ed 	bne.w	8008ece <HAL_TIM_IC_Start_DMA+0x216>
    if ((pData == NULL) || (Length == 0U))
 8008cf4:	2e00      	cmp	r6, #0
 8008cf6:	f000 80ec 	beq.w	8008ed2 <HAL_TIM_IC_Start_DMA+0x21a>
 8008cfa:	2f00      	cmp	r7, #0
 8008cfc:	f000 80eb 	beq.w	8008ed6 <HAL_TIM_IC_Start_DMA+0x21e>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d00:	2d00      	cmp	r5, #0
 8008d02:	d137      	bne.n	8008d74 <HAL_TIM_IC_Start_DMA+0xbc>
 8008d04:	2302      	movs	r3, #2
 8008d06:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d0a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d0e:	2201      	movs	r2, #1
 8008d10:	4629      	mov	r1, r5
 8008d12:	6820      	ldr	r0, [r4, #0]
 8008d14:	f7fe feab 	bl	8007a6e <TIM_CCxChannelCmd>
  switch (Channel)
 8008d18:	2d0c      	cmp	r5, #12
 8008d1a:	d863      	bhi.n	8008de4 <HAL_TIM_IC_Start_DMA+0x12c>
 8008d1c:	e8df f005 	tbb	[pc, r5]
 8008d20:	62626249 	.word	0x62626249
 8008d24:	6262627f 	.word	0x6262627f
 8008d28:	62626298 	.word	0x62626298
 8008d2c:	b1          	.byte	0xb1
 8008d2d:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008d2e:	2904      	cmp	r1, #4
 8008d30:	d005      	beq.n	8008d3e <HAL_TIM_IC_Start_DMA+0x86>
 8008d32:	2908      	cmp	r1, #8
 8008d34:	d007      	beq.n	8008d46 <HAL_TIM_IC_Start_DMA+0x8e>
 8008d36:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8008d3a:	b2c8      	uxtb	r0, r1
 8008d3c:	e7c6      	b.n	8008ccc <HAL_TIM_IC_Start_DMA+0x14>
 8008d3e:	f890 103f 	ldrb.w	r1, [r0, #63]	@ 0x3f
 8008d42:	b2c8      	uxtb	r0, r1
 8008d44:	e7c2      	b.n	8008ccc <HAL_TIM_IC_Start_DMA+0x14>
 8008d46:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8008d4a:	b2c0      	uxtb	r0, r0
 8008d4c:	e7be      	b.n	8008ccc <HAL_TIM_IC_Start_DMA+0x14>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008d4e:	2d04      	cmp	r5, #4
 8008d50:	d006      	beq.n	8008d60 <HAL_TIM_IC_Start_DMA+0xa8>
 8008d52:	2d08      	cmp	r5, #8
 8008d54:	d009      	beq.n	8008d6a <HAL_TIM_IC_Start_DMA+0xb2>
 8008d56:	f894 8045 	ldrb.w	r8, [r4, #69]	@ 0x45
 8008d5a:	fa5f f888 	uxtb.w	r8, r8
 8008d5e:	e7bb      	b.n	8008cd8 <HAL_TIM_IC_Start_DMA+0x20>
 8008d60:	f894 8043 	ldrb.w	r8, [r4, #67]	@ 0x43
 8008d64:	fa5f f888 	uxtb.w	r8, r8
 8008d68:	e7b6      	b.n	8008cd8 <HAL_TIM_IC_Start_DMA+0x20>
 8008d6a:	f894 8044 	ldrb.w	r8, [r4, #68]	@ 0x44
 8008d6e:	fa5f f888 	uxtb.w	r8, r8
 8008d72:	e7b1      	b.n	8008cd8 <HAL_TIM_IC_Start_DMA+0x20>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d74:	2d04      	cmp	r5, #4
 8008d76:	d00c      	beq.n	8008d92 <HAL_TIM_IC_Start_DMA+0xda>
 8008d78:	2d08      	cmp	r5, #8
 8008d7a:	d00e      	beq.n	8008d9a <HAL_TIM_IC_Start_DMA+0xe2>
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d82:	2d04      	cmp	r5, #4
 8008d84:	d00d      	beq.n	8008da2 <HAL_TIM_IC_Start_DMA+0xea>
 8008d86:	2d08      	cmp	r5, #8
 8008d88:	d00f      	beq.n	8008daa <HAL_TIM_IC_Start_DMA+0xf2>
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8008d90:	e7bd      	b.n	8008d0e <HAL_TIM_IC_Start_DMA+0x56>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d92:	2302      	movs	r3, #2
 8008d94:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d98:	e7f3      	b.n	8008d82 <HAL_TIM_IC_Start_DMA+0xca>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008da0:	e7ef      	b.n	8008d82 <HAL_TIM_IC_Start_DMA+0xca>
 8008da2:	2302      	movs	r3, #2
 8008da4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008da8:	e7b1      	b.n	8008d0e <HAL_TIM_IC_Start_DMA+0x56>
 8008daa:	2302      	movs	r3, #2
 8008dac:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008db0:	e7ad      	b.n	8008d0e <HAL_TIM_IC_Start_DMA+0x56>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8008db2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008db4:	4a4e      	ldr	r2, [pc, #312]	@ (8008ef0 <HAL_TIM_IC_Start_DMA+0x238>)
 8008db6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008db8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008dba:	4a4e      	ldr	r2, [pc, #312]	@ (8008ef4 <HAL_TIM_IC_Start_DMA+0x23c>)
 8008dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008dbe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008dc0:	4a4d      	ldr	r2, [pc, #308]	@ (8008ef8 <HAL_TIM_IC_Start_DMA+0x240>)
 8008dc2:	631a      	str	r2, [r3, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8008dc4:	6821      	ldr	r1, [r4, #0]
 8008dc6:	463b      	mov	r3, r7
 8008dc8:	4632      	mov	r2, r6
 8008dca:	3134      	adds	r1, #52	@ 0x34
 8008dcc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008dce:	f7fa fdae 	bl	800392e <HAL_DMA_Start_IT>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	f040 8081 	bne.w	8008eda <HAL_TIM_IC_Start_DMA+0x222>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008dd8:	6822      	ldr	r2, [r4, #0]
 8008dda:	68d3      	ldr	r3, [r2, #12]
 8008ddc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008de0:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008de2:	4680      	mov	r8, r0
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008de4:	6823      	ldr	r3, [r4, #0]
 8008de6:	4a45      	ldr	r2, [pc, #276]	@ (8008efc <HAL_TIM_IC_Start_DMA+0x244>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d062      	beq.n	8008eb2 <HAL_TIM_IC_Start_DMA+0x1fa>
 8008dec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d05e      	beq.n	8008eb2 <HAL_TIM_IC_Start_DMA+0x1fa>
 8008df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008df8:	d05b      	beq.n	8008eb2 <HAL_TIM_IC_Start_DMA+0x1fa>
 8008dfa:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d057      	beq.n	8008eb2 <HAL_TIM_IC_Start_DMA+0x1fa>
 8008e02:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d053      	beq.n	8008eb2 <HAL_TIM_IC_Start_DMA+0x1fa>
 8008e0a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d04f      	beq.n	8008eb2 <HAL_TIM_IC_Start_DMA+0x1fa>
    __HAL_TIM_ENABLE(htim);
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	f042 0201 	orr.w	r2, r2, #1
 8008e18:	601a      	str	r2, [r3, #0]
  return status;
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	e057      	b.n	8008ece <HAL_TIM_IC_Start_DMA+0x216>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8008e1e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008e20:	4a33      	ldr	r2, [pc, #204]	@ (8008ef0 <HAL_TIM_IC_Start_DMA+0x238>)
 8008e22:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008e24:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008e26:	4a33      	ldr	r2, [pc, #204]	@ (8008ef4 <HAL_TIM_IC_Start_DMA+0x23c>)
 8008e28:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008e2a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008e2c:	4a32      	ldr	r2, [pc, #200]	@ (8008ef8 <HAL_TIM_IC_Start_DMA+0x240>)
 8008e2e:	631a      	str	r2, [r3, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8008e30:	6821      	ldr	r1, [r4, #0]
 8008e32:	463b      	mov	r3, r7
 8008e34:	4632      	mov	r2, r6
 8008e36:	3138      	adds	r1, #56	@ 0x38
 8008e38:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8008e3a:	f7fa fd78 	bl	800392e <HAL_DMA_Start_IT>
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d14d      	bne.n	8008ede <HAL_TIM_IC_Start_DMA+0x226>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008e42:	6822      	ldr	r2, [r4, #0]
 8008e44:	68d3      	ldr	r3, [r2, #12]
 8008e46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008e4a:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008e4c:	4680      	mov	r8, r0
      break;
 8008e4e:	e7c9      	b.n	8008de4 <HAL_TIM_IC_Start_DMA+0x12c>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8008e50:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008e52:	4a27      	ldr	r2, [pc, #156]	@ (8008ef0 <HAL_TIM_IC_Start_DMA+0x238>)
 8008e54:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008e56:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008e58:	4a26      	ldr	r2, [pc, #152]	@ (8008ef4 <HAL_TIM_IC_Start_DMA+0x23c>)
 8008e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008e5c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008e5e:	4a26      	ldr	r2, [pc, #152]	@ (8008ef8 <HAL_TIM_IC_Start_DMA+0x240>)
 8008e60:	631a      	str	r2, [r3, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8008e62:	6821      	ldr	r1, [r4, #0]
 8008e64:	463b      	mov	r3, r7
 8008e66:	4632      	mov	r2, r6
 8008e68:	313c      	adds	r1, #60	@ 0x3c
 8008e6a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008e6c:	f7fa fd5f 	bl	800392e <HAL_DMA_Start_IT>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d136      	bne.n	8008ee2 <HAL_TIM_IC_Start_DMA+0x22a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008e74:	6822      	ldr	r2, [r4, #0]
 8008e76:	68d3      	ldr	r3, [r2, #12]
 8008e78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008e7c:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008e7e:	4680      	mov	r8, r0
      break;
 8008e80:	e7b0      	b.n	8008de4 <HAL_TIM_IC_Start_DMA+0x12c>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8008e82:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008e84:	4a1a      	ldr	r2, [pc, #104]	@ (8008ef0 <HAL_TIM_IC_Start_DMA+0x238>)
 8008e86:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008e88:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8008ef4 <HAL_TIM_IC_Start_DMA+0x23c>)
 8008e8c:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008e8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008e90:	4a19      	ldr	r2, [pc, #100]	@ (8008ef8 <HAL_TIM_IC_Start_DMA+0x240>)
 8008e92:	631a      	str	r2, [r3, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8008e94:	6821      	ldr	r1, [r4, #0]
 8008e96:	463b      	mov	r3, r7
 8008e98:	4632      	mov	r2, r6
 8008e9a:	3140      	adds	r1, #64	@ 0x40
 8008e9c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008e9e:	f7fa fd46 	bl	800392e <HAL_DMA_Start_IT>
 8008ea2:	bb00      	cbnz	r0, 8008ee6 <HAL_TIM_IC_Start_DMA+0x22e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008ea4:	6822      	ldr	r2, [r4, #0]
 8008ea6:	68d3      	ldr	r3, [r2, #12]
 8008ea8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008eac:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008eae:	4680      	mov	r8, r0
      break;
 8008eb0:	e798      	b.n	8008de4 <HAL_TIM_IC_Start_DMA+0x12c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008eb2:	689a      	ldr	r2, [r3, #8]
 8008eb4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eb8:	2a06      	cmp	r2, #6
 8008eba:	d016      	beq.n	8008eea <HAL_TIM_IC_Start_DMA+0x232>
      __HAL_TIM_ENABLE(htim);
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	f042 0201 	orr.w	r2, r2, #1
 8008ec2:	601a      	str	r2, [r3, #0]
  return status;
 8008ec4:	4640      	mov	r0, r8
 8008ec6:	e002      	b.n	8008ece <HAL_TIM_IC_Start_DMA+0x216>
    return HAL_BUSY;
 8008ec8:	4640      	mov	r0, r8
 8008eca:	e000      	b.n	8008ece <HAL_TIM_IC_Start_DMA+0x216>
    return HAL_ERROR;
 8008ecc:	2001      	movs	r0, #1
}
 8008ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	e7fb      	b.n	8008ece <HAL_TIM_IC_Start_DMA+0x216>
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	e7f9      	b.n	8008ece <HAL_TIM_IC_Start_DMA+0x216>
        return HAL_ERROR;
 8008eda:	4640      	mov	r0, r8
 8008edc:	e7f7      	b.n	8008ece <HAL_TIM_IC_Start_DMA+0x216>
        return HAL_ERROR;
 8008ede:	4640      	mov	r0, r8
 8008ee0:	e7f5      	b.n	8008ece <HAL_TIM_IC_Start_DMA+0x216>
        return HAL_ERROR;
 8008ee2:	4640      	mov	r0, r8
 8008ee4:	e7f3      	b.n	8008ece <HAL_TIM_IC_Start_DMA+0x216>
        return HAL_ERROR;
 8008ee6:	4640      	mov	r0, r8
 8008ee8:	e7f1      	b.n	8008ece <HAL_TIM_IC_Start_DMA+0x216>
  return status;
 8008eea:	4640      	mov	r0, r8
 8008eec:	e7ef      	b.n	8008ece <HAL_TIM_IC_Start_DMA+0x216>
 8008eee:	bf00      	nop
 8008ef0:	08006c67 	.word	0x08006c67
 8008ef4:	08006ce9 	.word	0x08006ce9
 8008ef8:	08006f5d 	.word	0x08006f5d
 8008efc:	40012c00 	.word	0x40012c00

08008f00 <HAL_TIM_IC_Stop_DMA>:
{
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4604      	mov	r4, r0
 8008f04:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008f06:	2200      	movs	r2, #0
 8008f08:	6800      	ldr	r0, [r0, #0]
 8008f0a:	f7fe fdb0 	bl	8007a6e <TIM_CCxChannelCmd>
  switch (Channel)
 8008f0e:	2d0c      	cmp	r5, #12
 8008f10:	d864      	bhi.n	8008fdc <HAL_TIM_IC_Stop_DMA+0xdc>
 8008f12:	e8df f005 	tbb	[pc, r5]
 8008f16:	6307      	.short	0x6307
 8008f18:	63266363 	.word	0x63266363
 8008f1c:	632f6363 	.word	0x632f6363
 8008f20:	6363      	.short	0x6363
 8008f22:	38          	.byte	0x38
 8008f23:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008f24:	6822      	ldr	r2, [r4, #0]
 8008f26:	68d3      	ldr	r3, [r2, #12]
 8008f28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f2c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008f2e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008f30:	f7fa fd5c 	bl	80039ec <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8008f34:	6823      	ldr	r3, [r4, #0]
 8008f36:	6a19      	ldr	r1, [r3, #32]
 8008f38:	f241 1211 	movw	r2, #4369	@ 0x1111
 8008f3c:	4211      	tst	r1, r2
 8008f3e:	d108      	bne.n	8008f52 <HAL_TIM_IC_Stop_DMA+0x52>
 8008f40:	6a19      	ldr	r1, [r3, #32]
 8008f42:	f240 4244 	movw	r2, #1092	@ 0x444
 8008f46:	4211      	tst	r1, r2
 8008f48:	d103      	bne.n	8008f52 <HAL_TIM_IC_Stop_DMA+0x52>
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	f022 0201 	bic.w	r2, r2, #1
 8008f50:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008f52:	bb0d      	cbnz	r5, 8008f98 <HAL_TIM_IC_Stop_DMA+0x98>
 8008f54:	2301      	movs	r3, #1
 8008f56:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008f5a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f5e:	2000      	movs	r0, #0
 8008f60:	e03d      	b.n	8008fde <HAL_TIM_IC_Stop_DMA+0xde>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008f62:	6822      	ldr	r2, [r4, #0]
 8008f64:	68d3      	ldr	r3, [r2, #12]
 8008f66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f6a:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008f6c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8008f6e:	f7fa fd3d 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8008f72:	e7df      	b.n	8008f34 <HAL_TIM_IC_Stop_DMA+0x34>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008f74:	6822      	ldr	r2, [r4, #0]
 8008f76:	68d3      	ldr	r3, [r2, #12]
 8008f78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f7c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008f7e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008f80:	f7fa fd34 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8008f84:	e7d6      	b.n	8008f34 <HAL_TIM_IC_Stop_DMA+0x34>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008f86:	6822      	ldr	r2, [r4, #0]
 8008f88:	68d3      	ldr	r3, [r2, #12]
 8008f8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f8e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008f90:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008f92:	f7fa fd2b 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8008f96:	e7cd      	b.n	8008f34 <HAL_TIM_IC_Stop_DMA+0x34>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008f98:	2d04      	cmp	r5, #4
 8008f9a:	d00d      	beq.n	8008fb8 <HAL_TIM_IC_Stop_DMA+0xb8>
 8008f9c:	2d08      	cmp	r5, #8
 8008f9e:	d00f      	beq.n	8008fc0 <HAL_TIM_IC_Stop_DMA+0xc0>
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008fa6:	2d04      	cmp	r5, #4
 8008fa8:	d00e      	beq.n	8008fc8 <HAL_TIM_IC_Stop_DMA+0xc8>
 8008faa:	2d08      	cmp	r5, #8
 8008fac:	d011      	beq.n	8008fd2 <HAL_TIM_IC_Stop_DMA+0xd2>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	e012      	b.n	8008fde <HAL_TIM_IC_Stop_DMA+0xde>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008fb8:	2301      	movs	r3, #1
 8008fba:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008fbe:	e7f2      	b.n	8008fa6 <HAL_TIM_IC_Stop_DMA+0xa6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008fc6:	e7ee      	b.n	8008fa6 <HAL_TIM_IC_Stop_DMA+0xa6>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fce:	2000      	movs	r0, #0
 8008fd0:	e005      	b.n	8008fde <HAL_TIM_IC_Stop_DMA+0xde>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008fd8:	2000      	movs	r0, #0
 8008fda:	e000      	b.n	8008fde <HAL_TIM_IC_Stop_DMA+0xde>
  switch (Channel)
 8008fdc:	2001      	movs	r0, #1
}
 8008fde:	bd38      	pop	{r3, r4, r5, pc}

08008fe0 <HAL_TIM_OnePulse_Start>:
{
 8008fe0:	b510      	push	{r4, lr}
 8008fe2:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008fe4:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 8008fe8:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008fea:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008fee:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008ff2:	f894 1043 	ldrb.w	r1, [r4, #67]	@ 0x43
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ff6:	2801      	cmp	r0, #1
 8008ff8:	d12c      	bne.n	8009054 <HAL_TIM_OnePulse_Start+0x74>
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	b2d2      	uxtb	r2, r2
 8008ffe:	b2c9      	uxtb	r1, r1
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009000:	2b01      	cmp	r3, #1
 8009002:	d128      	bne.n	8009056 <HAL_TIM_OnePulse_Start+0x76>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009004:	2a01      	cmp	r2, #1
 8009006:	d127      	bne.n	8009058 <HAL_TIM_OnePulse_Start+0x78>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009008:	2901      	cmp	r1, #1
 800900a:	d001      	beq.n	8009010 <HAL_TIM_OnePulse_Start+0x30>
    return HAL_ERROR;
 800900c:	4610      	mov	r0, r2
 800900e:	e022      	b.n	8009056 <HAL_TIM_OnePulse_Start+0x76>
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009010:	2302      	movs	r3, #2
 8009012:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009016:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800901a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800901e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009022:	2100      	movs	r1, #0
 8009024:	6820      	ldr	r0, [r4, #0]
 8009026:	f7fe fd22 	bl	8007a6e <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800902a:	2201      	movs	r2, #1
 800902c:	2104      	movs	r1, #4
 800902e:	6820      	ldr	r0, [r4, #0]
 8009030:	f7fe fd1d 	bl	8007a6e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009034:	6823      	ldr	r3, [r4, #0]
 8009036:	4a09      	ldr	r2, [pc, #36]	@ (800905c <HAL_TIM_OnePulse_Start+0x7c>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d005      	beq.n	8009048 <HAL_TIM_OnePulse_Start+0x68>
 800903c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009040:	4293      	cmp	r3, r2
 8009042:	d001      	beq.n	8009048 <HAL_TIM_OnePulse_Start+0x68>
  return HAL_OK;
 8009044:	2000      	movs	r0, #0
 8009046:	e006      	b.n	8009056 <HAL_TIM_OnePulse_Start+0x76>
    __HAL_TIM_MOE_ENABLE(htim);
 8009048:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800904a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800904e:	645a      	str	r2, [r3, #68]	@ 0x44
  return HAL_OK;
 8009050:	2000      	movs	r0, #0
 8009052:	e000      	b.n	8009056 <HAL_TIM_OnePulse_Start+0x76>
    return HAL_ERROR;
 8009054:	2001      	movs	r0, #1
}
 8009056:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009058:	4618      	mov	r0, r3
 800905a:	e7fc      	b.n	8009056 <HAL_TIM_OnePulse_Start+0x76>
 800905c:	40012c00 	.word	0x40012c00

08009060 <HAL_TIM_OnePulse_Stop>:
{
 8009060:	b510      	push	{r4, lr}
 8009062:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009064:	2200      	movs	r2, #0
 8009066:	4611      	mov	r1, r2
 8009068:	6800      	ldr	r0, [r0, #0]
 800906a:	f7fe fd00 	bl	8007a6e <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800906e:	2200      	movs	r2, #0
 8009070:	2104      	movs	r1, #4
 8009072:	6820      	ldr	r0, [r4, #0]
 8009074:	f7fe fcfb 	bl	8007a6e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009078:	6823      	ldr	r3, [r4, #0]
 800907a:	4a18      	ldr	r2, [pc, #96]	@ (80090dc <HAL_TIM_OnePulse_Stop+0x7c>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d01d      	beq.n	80090bc <HAL_TIM_OnePulse_Stop+0x5c>
 8009080:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009084:	4293      	cmp	r3, r2
 8009086:	d019      	beq.n	80090bc <HAL_TIM_OnePulse_Stop+0x5c>
  __HAL_TIM_DISABLE(htim);
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	6a19      	ldr	r1, [r3, #32]
 800908c:	f241 1211 	movw	r2, #4369	@ 0x1111
 8009090:	4211      	tst	r1, r2
 8009092:	d108      	bne.n	80090a6 <HAL_TIM_OnePulse_Stop+0x46>
 8009094:	6a19      	ldr	r1, [r3, #32]
 8009096:	f240 4244 	movw	r2, #1092	@ 0x444
 800909a:	4211      	tst	r1, r2
 800909c:	d103      	bne.n	80090a6 <HAL_TIM_OnePulse_Stop+0x46>
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	f022 0201 	bic.w	r2, r2, #1
 80090a4:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80090a6:	2301      	movs	r3, #1
 80090a8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80090ac:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80090b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80090b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
}
 80090b8:	2000      	movs	r0, #0
 80090ba:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 80090bc:	6a19      	ldr	r1, [r3, #32]
 80090be:	f241 1211 	movw	r2, #4369	@ 0x1111
 80090c2:	4211      	tst	r1, r2
 80090c4:	d1e0      	bne.n	8009088 <HAL_TIM_OnePulse_Stop+0x28>
 80090c6:	6a19      	ldr	r1, [r3, #32]
 80090c8:	f240 4244 	movw	r2, #1092	@ 0x444
 80090cc:	4211      	tst	r1, r2
 80090ce:	d1db      	bne.n	8009088 <HAL_TIM_OnePulse_Stop+0x28>
 80090d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80090d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80090d8:	e7d6      	b.n	8009088 <HAL_TIM_OnePulse_Stop+0x28>
 80090da:	bf00      	nop
 80090dc:	40012c00 	.word	0x40012c00

080090e0 <HAL_TIM_OnePulse_Start_IT>:
{
 80090e0:	b510      	push	{r4, lr}
 80090e2:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80090e4:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 80090e8:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80090ea:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80090ee:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80090f2:	f894 1043 	ldrb.w	r1, [r4, #67]	@ 0x43
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80090f6:	2801      	cmp	r0, #1
 80090f8:	d137      	bne.n	800916a <HAL_TIM_OnePulse_Start_IT+0x8a>
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	b2d2      	uxtb	r2, r2
 80090fe:	b2c9      	uxtb	r1, r1
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009100:	2b01      	cmp	r3, #1
 8009102:	d133      	bne.n	800916c <HAL_TIM_OnePulse_Start_IT+0x8c>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009104:	2a01      	cmp	r2, #1
 8009106:	d132      	bne.n	800916e <HAL_TIM_OnePulse_Start_IT+0x8e>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009108:	2901      	cmp	r1, #1
 800910a:	d001      	beq.n	8009110 <HAL_TIM_OnePulse_Start_IT+0x30>
    return HAL_ERROR;
 800910c:	4610      	mov	r0, r2
 800910e:	e02d      	b.n	800916c <HAL_TIM_OnePulse_Start_IT+0x8c>
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009110:	2302      	movs	r3, #2
 8009112:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009116:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800911a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800911e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009122:	6822      	ldr	r2, [r4, #0]
 8009124:	68d3      	ldr	r3, [r2, #12]
 8009126:	f043 0302 	orr.w	r3, r3, #2
 800912a:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800912c:	6822      	ldr	r2, [r4, #0]
 800912e:	68d3      	ldr	r3, [r2, #12]
 8009130:	f043 0304 	orr.w	r3, r3, #4
 8009134:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009136:	2201      	movs	r2, #1
 8009138:	2100      	movs	r1, #0
 800913a:	6820      	ldr	r0, [r4, #0]
 800913c:	f7fe fc97 	bl	8007a6e <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009140:	2201      	movs	r2, #1
 8009142:	2104      	movs	r1, #4
 8009144:	6820      	ldr	r0, [r4, #0]
 8009146:	f7fe fc92 	bl	8007a6e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	4a09      	ldr	r2, [pc, #36]	@ (8009174 <HAL_TIM_OnePulse_Start_IT+0x94>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d005      	beq.n	800915e <HAL_TIM_OnePulse_Start_IT+0x7e>
 8009152:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009156:	4293      	cmp	r3, r2
 8009158:	d001      	beq.n	800915e <HAL_TIM_OnePulse_Start_IT+0x7e>
  return HAL_OK;
 800915a:	2000      	movs	r0, #0
 800915c:	e006      	b.n	800916c <HAL_TIM_OnePulse_Start_IT+0x8c>
    __HAL_TIM_MOE_ENABLE(htim);
 800915e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009160:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009164:	645a      	str	r2, [r3, #68]	@ 0x44
  return HAL_OK;
 8009166:	2000      	movs	r0, #0
 8009168:	e000      	b.n	800916c <HAL_TIM_OnePulse_Start_IT+0x8c>
    return HAL_ERROR;
 800916a:	2001      	movs	r0, #1
}
 800916c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800916e:	4618      	mov	r0, r3
 8009170:	e7fc      	b.n	800916c <HAL_TIM_OnePulse_Start_IT+0x8c>
 8009172:	bf00      	nop
 8009174:	40012c00 	.word	0x40012c00

08009178 <HAL_TIM_OnePulse_Stop_IT>:
{
 8009178:	b510      	push	{r4, lr}
 800917a:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800917c:	6802      	ldr	r2, [r0, #0]
 800917e:	68d3      	ldr	r3, [r2, #12]
 8009180:	f023 0302 	bic.w	r3, r3, #2
 8009184:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009186:	6802      	ldr	r2, [r0, #0]
 8009188:	68d3      	ldr	r3, [r2, #12]
 800918a:	f023 0304 	bic.w	r3, r3, #4
 800918e:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009190:	2200      	movs	r2, #0
 8009192:	4611      	mov	r1, r2
 8009194:	6800      	ldr	r0, [r0, #0]
 8009196:	f7fe fc6a 	bl	8007a6e <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800919a:	2200      	movs	r2, #0
 800919c:	2104      	movs	r1, #4
 800919e:	6820      	ldr	r0, [r4, #0]
 80091a0:	f7fe fc65 	bl	8007a6e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091a4:	6823      	ldr	r3, [r4, #0]
 80091a6:	4a18      	ldr	r2, [pc, #96]	@ (8009208 <HAL_TIM_OnePulse_Stop_IT+0x90>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d01d      	beq.n	80091e8 <HAL_TIM_OnePulse_Stop_IT+0x70>
 80091ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d019      	beq.n	80091e8 <HAL_TIM_OnePulse_Stop_IT+0x70>
  __HAL_TIM_DISABLE(htim);
 80091b4:	6823      	ldr	r3, [r4, #0]
 80091b6:	6a19      	ldr	r1, [r3, #32]
 80091b8:	f241 1211 	movw	r2, #4369	@ 0x1111
 80091bc:	4211      	tst	r1, r2
 80091be:	d108      	bne.n	80091d2 <HAL_TIM_OnePulse_Stop_IT+0x5a>
 80091c0:	6a19      	ldr	r1, [r3, #32]
 80091c2:	f240 4244 	movw	r2, #1092	@ 0x444
 80091c6:	4211      	tst	r1, r2
 80091c8:	d103      	bne.n	80091d2 <HAL_TIM_OnePulse_Stop_IT+0x5a>
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	f022 0201 	bic.w	r2, r2, #1
 80091d0:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80091d2:	2301      	movs	r3, #1
 80091d4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80091d8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80091dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80091e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
}
 80091e4:	2000      	movs	r0, #0
 80091e6:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 80091e8:	6a19      	ldr	r1, [r3, #32]
 80091ea:	f241 1211 	movw	r2, #4369	@ 0x1111
 80091ee:	4211      	tst	r1, r2
 80091f0:	d1e0      	bne.n	80091b4 <HAL_TIM_OnePulse_Stop_IT+0x3c>
 80091f2:	6a19      	ldr	r1, [r3, #32]
 80091f4:	f240 4244 	movw	r2, #1092	@ 0x444
 80091f8:	4211      	tst	r1, r2
 80091fa:	d1db      	bne.n	80091b4 <HAL_TIM_OnePulse_Stop_IT+0x3c>
 80091fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009202:	645a      	str	r2, [r3, #68]	@ 0x44
 8009204:	e7d6      	b.n	80091b4 <HAL_TIM_OnePulse_Stop_IT+0x3c>
 8009206:	bf00      	nop
 8009208:	40012c00 	.word	0x40012c00

0800920c <HAL_TIM_Encoder_Start>:
{
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009210:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 8009214:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009216:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800921a:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 800921e:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009220:	f894 c043 	ldrb.w	ip, [r4, #67]	@ 0x43
  if (Channel == TIM_CHANNEL_1)
 8009224:	460d      	mov	r5, r1
 8009226:	b9b1      	cbnz	r1, 8009256 <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009228:	2801      	cmp	r0, #1
 800922a:	d149      	bne.n	80092c0 <HAL_TIM_Encoder_Start+0xb4>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800922c:	2a01      	cmp	r2, #1
 800922e:	d148      	bne.n	80092c2 <HAL_TIM_Encoder_Start+0xb6>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009230:	2302      	movs	r3, #2
 8009232:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009236:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  switch (Channel)
 800923a:	b37d      	cbz	r5, 800929c <HAL_TIM_Encoder_Start+0x90>
 800923c:	2d04      	cmp	r5, #4
 800923e:	d039      	beq.n	80092b4 <HAL_TIM_Encoder_Start+0xa8>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009240:	2201      	movs	r2, #1
 8009242:	2100      	movs	r1, #0
 8009244:	6820      	ldr	r0, [r4, #0]
 8009246:	f7fe fc12 	bl	8007a6e <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800924a:	2201      	movs	r2, #1
 800924c:	2104      	movs	r1, #4
 800924e:	6820      	ldr	r0, [r4, #0]
 8009250:	f7fe fc0d 	bl	8007a6e <TIM_CCxChannelCmd>
      break;
 8009254:	e027      	b.n	80092a6 <HAL_TIM_Encoder_Start+0x9a>
 8009256:	b2db      	uxtb	r3, r3
 8009258:	fa5f fc8c 	uxtb.w	ip, ip
  else if (Channel == TIM_CHANNEL_2)
 800925c:	2904      	cmp	r1, #4
 800925e:	d012      	beq.n	8009286 <HAL_TIM_Encoder_Start+0x7a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009260:	2801      	cmp	r0, #1
 8009262:	d133      	bne.n	80092cc <HAL_TIM_Encoder_Start+0xc0>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009264:	2b01      	cmp	r3, #1
 8009266:	d12c      	bne.n	80092c2 <HAL_TIM_Encoder_Start+0xb6>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009268:	2a01      	cmp	r2, #1
 800926a:	d131      	bne.n	80092d0 <HAL_TIM_Encoder_Start+0xc4>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800926c:	f1bc 0f01 	cmp.w	ip, #1
 8009270:	d130      	bne.n	80092d4 <HAL_TIM_Encoder_Start+0xc8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009272:	2302      	movs	r3, #2
 8009274:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009278:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800927c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009280:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009284:	e7d9      	b.n	800923a <HAL_TIM_Encoder_Start+0x2e>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009286:	2b01      	cmp	r3, #1
 8009288:	d11c      	bne.n	80092c4 <HAL_TIM_Encoder_Start+0xb8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800928a:	f1bc 0f01 	cmp.w	ip, #1
 800928e:	d11b      	bne.n	80092c8 <HAL_TIM_Encoder_Start+0xbc>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009290:	2302      	movs	r3, #2
 8009292:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009296:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800929a:	e7ce      	b.n	800923a <HAL_TIM_Encoder_Start+0x2e>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800929c:	2201      	movs	r2, #1
 800929e:	2100      	movs	r1, #0
 80092a0:	6820      	ldr	r0, [r4, #0]
 80092a2:	f7fe fbe4 	bl	8007a6e <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 80092a6:	6822      	ldr	r2, [r4, #0]
 80092a8:	6813      	ldr	r3, [r2, #0]
 80092aa:	f043 0301 	orr.w	r3, r3, #1
 80092ae:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80092b0:	2000      	movs	r0, #0
 80092b2:	e006      	b.n	80092c2 <HAL_TIM_Encoder_Start+0xb6>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80092b4:	2201      	movs	r2, #1
 80092b6:	2104      	movs	r1, #4
 80092b8:	6820      	ldr	r0, [r4, #0]
 80092ba:	f7fe fbd8 	bl	8007a6e <TIM_CCxChannelCmd>
      break;
 80092be:	e7f2      	b.n	80092a6 <HAL_TIM_Encoder_Start+0x9a>
      return HAL_ERROR;
 80092c0:	2001      	movs	r0, #1
}
 80092c2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80092c4:	2001      	movs	r0, #1
 80092c6:	e7fc      	b.n	80092c2 <HAL_TIM_Encoder_Start+0xb6>
 80092c8:	4618      	mov	r0, r3
 80092ca:	e7fa      	b.n	80092c2 <HAL_TIM_Encoder_Start+0xb6>
      return HAL_ERROR;
 80092cc:	2001      	movs	r0, #1
 80092ce:	e7f8      	b.n	80092c2 <HAL_TIM_Encoder_Start+0xb6>
 80092d0:	4618      	mov	r0, r3
 80092d2:	e7f6      	b.n	80092c2 <HAL_TIM_Encoder_Start+0xb6>
 80092d4:	4610      	mov	r0, r2
 80092d6:	e7f4      	b.n	80092c2 <HAL_TIM_Encoder_Start+0xb6>

080092d8 <HAL_TIM_Encoder_Stop>:
{
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	4604      	mov	r4, r0
  switch (Channel)
 80092dc:	460d      	mov	r5, r1
 80092de:	b161      	cbz	r1, 80092fa <HAL_TIM_Encoder_Stop+0x22>
 80092e0:	2904      	cmp	r1, #4
 80092e2:	d02b      	beq.n	800933c <HAL_TIM_Encoder_Stop+0x64>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80092e4:	2200      	movs	r2, #0
 80092e6:	4611      	mov	r1, r2
 80092e8:	6800      	ldr	r0, [r0, #0]
 80092ea:	f7fe fbc0 	bl	8007a6e <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80092ee:	2200      	movs	r2, #0
 80092f0:	2104      	movs	r1, #4
 80092f2:	6820      	ldr	r0, [r4, #0]
 80092f4:	f7fe fbbb 	bl	8007a6e <TIM_CCxChannelCmd>
      break;
 80092f8:	e004      	b.n	8009304 <HAL_TIM_Encoder_Stop+0x2c>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80092fa:	2200      	movs	r2, #0
 80092fc:	4611      	mov	r1, r2
 80092fe:	6800      	ldr	r0, [r0, #0]
 8009300:	f7fe fbb5 	bl	8007a6e <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	6a19      	ldr	r1, [r3, #32]
 8009308:	f241 1211 	movw	r2, #4369	@ 0x1111
 800930c:	4211      	tst	r1, r2
 800930e:	d108      	bne.n	8009322 <HAL_TIM_Encoder_Stop+0x4a>
 8009310:	6a19      	ldr	r1, [r3, #32]
 8009312:	f240 4244 	movw	r2, #1092	@ 0x444
 8009316:	4211      	tst	r1, r2
 8009318:	d103      	bne.n	8009322 <HAL_TIM_Encoder_Stop+0x4a>
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	f022 0201 	bic.w	r2, r2, #1
 8009320:	601a      	str	r2, [r3, #0]
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8009322:	b18d      	cbz	r5, 8009348 <HAL_TIM_Encoder_Stop+0x70>
 8009324:	2d04      	cmp	r5, #4
 8009326:	d016      	beq.n	8009356 <HAL_TIM_Encoder_Stop+0x7e>
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009328:	2301      	movs	r3, #1
 800932a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800932e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009332:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009336:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800933a:	e00a      	b.n	8009352 <HAL_TIM_Encoder_Stop+0x7a>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800933c:	2200      	movs	r2, #0
 800933e:	2104      	movs	r1, #4
 8009340:	6800      	ldr	r0, [r0, #0]
 8009342:	f7fe fb94 	bl	8007a6e <TIM_CCxChannelCmd>
      break;
 8009346:	e7dd      	b.n	8009304 <HAL_TIM_Encoder_Stop+0x2c>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009348:	2301      	movs	r3, #1
 800934a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800934e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 8009352:	2000      	movs	r0, #0
 8009354:	bd38      	pop	{r3, r4, r5, pc}
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009356:	2301      	movs	r3, #1
 8009358:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800935c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009360:	e7f7      	b.n	8009352 <HAL_TIM_Encoder_Stop+0x7a>

08009362 <HAL_TIM_Encoder_Start_IT>:
{
 8009362:	b538      	push	{r3, r4, r5, lr}
 8009364:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009366:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 800936a:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800936c:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009370:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8009374:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009376:	f894 c043 	ldrb.w	ip, [r4, #67]	@ 0x43
  if (Channel == TIM_CHANNEL_1)
 800937a:	460d      	mov	r5, r1
 800937c:	bb09      	cbnz	r1, 80093c2 <HAL_TIM_Encoder_Start_IT+0x60>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800937e:	2801      	cmp	r0, #1
 8009380:	d15e      	bne.n	8009440 <HAL_TIM_Encoder_Start_IT+0xde>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009382:	2a01      	cmp	r2, #1
 8009384:	d15d      	bne.n	8009442 <HAL_TIM_Encoder_Start_IT+0xe0>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009386:	2302      	movs	r3, #2
 8009388:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800938c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  switch (Channel)
 8009390:	2d00      	cmp	r5, #0
 8009392:	d039      	beq.n	8009408 <HAL_TIM_Encoder_Start_IT+0xa6>
 8009394:	2d04      	cmp	r5, #4
 8009396:	d048      	beq.n	800942a <HAL_TIM_Encoder_Start_IT+0xc8>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009398:	2201      	movs	r2, #1
 800939a:	2100      	movs	r1, #0
 800939c:	6820      	ldr	r0, [r4, #0]
 800939e:	f7fe fb66 	bl	8007a6e <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80093a2:	2201      	movs	r2, #1
 80093a4:	2104      	movs	r1, #4
 80093a6:	6820      	ldr	r0, [r4, #0]
 80093a8:	f7fe fb61 	bl	8007a6e <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80093ac:	6822      	ldr	r2, [r4, #0]
 80093ae:	68d3      	ldr	r3, [r2, #12]
 80093b0:	f043 0302 	orr.w	r3, r3, #2
 80093b4:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80093b6:	6822      	ldr	r2, [r4, #0]
 80093b8:	68d3      	ldr	r3, [r2, #12]
 80093ba:	f043 0304 	orr.w	r3, r3, #4
 80093be:	60d3      	str	r3, [r2, #12]
      break;
 80093c0:	e02c      	b.n	800941c <HAL_TIM_Encoder_Start_IT+0xba>
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	fa5f fc8c 	uxtb.w	ip, ip
  else if (Channel == TIM_CHANNEL_2)
 80093c8:	2904      	cmp	r1, #4
 80093ca:	d012      	beq.n	80093f2 <HAL_TIM_Encoder_Start_IT+0x90>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80093cc:	2801      	cmp	r0, #1
 80093ce:	d13d      	bne.n	800944c <HAL_TIM_Encoder_Start_IT+0xea>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d136      	bne.n	8009442 <HAL_TIM_Encoder_Start_IT+0xe0>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80093d4:	2a01      	cmp	r2, #1
 80093d6:	d13b      	bne.n	8009450 <HAL_TIM_Encoder_Start_IT+0xee>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80093d8:	f1bc 0f01 	cmp.w	ip, #1
 80093dc:	d13a      	bne.n	8009454 <HAL_TIM_Encoder_Start_IT+0xf2>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80093de:	2302      	movs	r3, #2
 80093e0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093e4:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80093e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093f0:	e7ce      	b.n	8009390 <HAL_TIM_Encoder_Start_IT+0x2e>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d126      	bne.n	8009444 <HAL_TIM_Encoder_Start_IT+0xe2>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80093f6:	f1bc 0f01 	cmp.w	ip, #1
 80093fa:	d125      	bne.n	8009448 <HAL_TIM_Encoder_Start_IT+0xe6>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093fc:	2302      	movs	r3, #2
 80093fe:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009402:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009406:	e7c3      	b.n	8009390 <HAL_TIM_Encoder_Start_IT+0x2e>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009408:	2201      	movs	r2, #1
 800940a:	2100      	movs	r1, #0
 800940c:	6820      	ldr	r0, [r4, #0]
 800940e:	f7fe fb2e 	bl	8007a6e <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009412:	6822      	ldr	r2, [r4, #0]
 8009414:	68d3      	ldr	r3, [r2, #12]
 8009416:	f043 0302 	orr.w	r3, r3, #2
 800941a:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 800941c:	6822      	ldr	r2, [r4, #0]
 800941e:	6813      	ldr	r3, [r2, #0]
 8009420:	f043 0301 	orr.w	r3, r3, #1
 8009424:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8009426:	2000      	movs	r0, #0
 8009428:	e00b      	b.n	8009442 <HAL_TIM_Encoder_Start_IT+0xe0>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800942a:	2201      	movs	r2, #1
 800942c:	2104      	movs	r1, #4
 800942e:	6820      	ldr	r0, [r4, #0]
 8009430:	f7fe fb1d 	bl	8007a6e <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009434:	6822      	ldr	r2, [r4, #0]
 8009436:	68d3      	ldr	r3, [r2, #12]
 8009438:	f043 0304 	orr.w	r3, r3, #4
 800943c:	60d3      	str	r3, [r2, #12]
      break;
 800943e:	e7ed      	b.n	800941c <HAL_TIM_Encoder_Start_IT+0xba>
      return HAL_ERROR;
 8009440:	2001      	movs	r0, #1
}
 8009442:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8009444:	2001      	movs	r0, #1
 8009446:	e7fc      	b.n	8009442 <HAL_TIM_Encoder_Start_IT+0xe0>
 8009448:	4618      	mov	r0, r3
 800944a:	e7fa      	b.n	8009442 <HAL_TIM_Encoder_Start_IT+0xe0>
      return HAL_ERROR;
 800944c:	2001      	movs	r0, #1
 800944e:	e7f8      	b.n	8009442 <HAL_TIM_Encoder_Start_IT+0xe0>
 8009450:	4618      	mov	r0, r3
 8009452:	e7f6      	b.n	8009442 <HAL_TIM_Encoder_Start_IT+0xe0>
 8009454:	4610      	mov	r0, r2
 8009456:	e7f4      	b.n	8009442 <HAL_TIM_Encoder_Start_IT+0xe0>

08009458 <HAL_TIM_Encoder_Stop_IT>:
{
 8009458:	b538      	push	{r3, r4, r5, lr}
 800945a:	4604      	mov	r4, r0
  if (Channel == TIM_CHANNEL_1)
 800945c:	460d      	mov	r5, r1
 800945e:	2900      	cmp	r1, #0
 8009460:	d031      	beq.n	80094c6 <HAL_TIM_Encoder_Stop_IT+0x6e>
  else if (Channel == TIM_CHANNEL_2)
 8009462:	2904      	cmp	r1, #4
 8009464:	d03a      	beq.n	80094dc <HAL_TIM_Encoder_Stop_IT+0x84>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009466:	2200      	movs	r2, #0
 8009468:	4611      	mov	r1, r2
 800946a:	6800      	ldr	r0, [r0, #0]
 800946c:	f7fe faff 	bl	8007a6e <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009470:	2200      	movs	r2, #0
 8009472:	2104      	movs	r1, #4
 8009474:	6820      	ldr	r0, [r4, #0]
 8009476:	f7fe fafa 	bl	8007a6e <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800947a:	6822      	ldr	r2, [r4, #0]
 800947c:	68d3      	ldr	r3, [r2, #12]
 800947e:	f023 0302 	bic.w	r3, r3, #2
 8009482:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009484:	6822      	ldr	r2, [r4, #0]
 8009486:	68d3      	ldr	r3, [r2, #12]
 8009488:	f023 0304 	bic.w	r3, r3, #4
 800948c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800948e:	6823      	ldr	r3, [r4, #0]
 8009490:	6a19      	ldr	r1, [r3, #32]
 8009492:	f241 1211 	movw	r2, #4369	@ 0x1111
 8009496:	4211      	tst	r1, r2
 8009498:	d108      	bne.n	80094ac <HAL_TIM_Encoder_Stop_IT+0x54>
 800949a:	6a19      	ldr	r1, [r3, #32]
 800949c:	f240 4244 	movw	r2, #1092	@ 0x444
 80094a0:	4211      	tst	r1, r2
 80094a2:	d103      	bne.n	80094ac <HAL_TIM_Encoder_Stop_IT+0x54>
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	f022 0201 	bic.w	r2, r2, #1
 80094aa:	601a      	str	r2, [r3, #0]
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80094ac:	b30d      	cbz	r5, 80094f2 <HAL_TIM_Encoder_Stop_IT+0x9a>
 80094ae:	2d04      	cmp	r5, #4
 80094b0:	d026      	beq.n	8009500 <HAL_TIM_Encoder_Stop_IT+0xa8>
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094b2:	2301      	movs	r3, #1
 80094b4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094b8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094c4:	e01a      	b.n	80094fc <HAL_TIM_Encoder_Stop_IT+0xa4>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80094c6:	2200      	movs	r2, #0
 80094c8:	4611      	mov	r1, r2
 80094ca:	6800      	ldr	r0, [r0, #0]
 80094cc:	f7fe facf 	bl	8007a6e <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80094d0:	6822      	ldr	r2, [r4, #0]
 80094d2:	68d3      	ldr	r3, [r2, #12]
 80094d4:	f023 0302 	bic.w	r3, r3, #2
 80094d8:	60d3      	str	r3, [r2, #12]
 80094da:	e7d8      	b.n	800948e <HAL_TIM_Encoder_Stop_IT+0x36>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80094dc:	2200      	movs	r2, #0
 80094de:	2104      	movs	r1, #4
 80094e0:	6800      	ldr	r0, [r0, #0]
 80094e2:	f7fe fac4 	bl	8007a6e <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80094e6:	6822      	ldr	r2, [r4, #0]
 80094e8:	68d3      	ldr	r3, [r2, #12]
 80094ea:	f023 0304 	bic.w	r3, r3, #4
 80094ee:	60d3      	str	r3, [r2, #12]
 80094f0:	e7cd      	b.n	800948e <HAL_TIM_Encoder_Stop_IT+0x36>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80094f2:	2301      	movs	r3, #1
 80094f4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80094f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 80094fc:	2000      	movs	r0, #0
 80094fe:	bd38      	pop	{r3, r4, r5, pc}
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009500:	2301      	movs	r3, #1
 8009502:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009506:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800950a:	e7f7      	b.n	80094fc <HAL_TIM_Encoder_Stop_IT+0xa4>

0800950c <HAL_TIM_Encoder_Start_DMA>:
{
 800950c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950e:	4604      	mov	r4, r0
 8009510:	461e      	mov	r6, r3
 8009512:	f8bd 7018 	ldrh.w	r7, [sp, #24]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009516:	f890 503e 	ldrb.w	r5, [r0, #62]	@ 0x3e
 800951a:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800951c:	f890 003f 	ldrb.w	r0, [r0, #63]	@ 0x3f
 8009520:	fa5f fc80 	uxtb.w	ip, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009524:	f894 0042 	ldrb.w	r0, [r4, #66]	@ 0x42
 8009528:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800952a:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
  if (Channel == TIM_CHANNEL_1)
 800952e:	468e      	mov	lr, r1
 8009530:	2900      	cmp	r1, #0
 8009532:	d131      	bne.n	8009598 <HAL_TIM_Encoder_Start_DMA+0x8c>
    if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8009534:	2d02      	cmp	r5, #2
 8009536:	f000 80f1 	beq.w	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
        || (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800953a:	2802      	cmp	r0, #2
 800953c:	f000 80eb 	beq.w	8009716 <HAL_TIM_Encoder_Start_DMA+0x20a>
    else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 8009540:	2d01      	cmp	r5, #1
 8009542:	f040 80ea 	bne.w	800971a <HAL_TIM_Encoder_Start_DMA+0x20e>
             && (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_READY))
 8009546:	2801      	cmp	r0, #1
 8009548:	f040 80e8 	bne.w	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
      if ((pData1 == NULL) || (Length == 0U))
 800954c:	2a00      	cmp	r2, #0
 800954e:	f000 80e7 	beq.w	8009720 <HAL_TIM_Encoder_Start_DMA+0x214>
 8009552:	2f00      	cmp	r7, #0
 8009554:	f000 80e6 	beq.w	8009724 <HAL_TIM_Encoder_Start_DMA+0x218>
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009558:	2302      	movs	r3, #2
 800955a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800955e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  switch (Channel)
 8009562:	f1be 0f00 	cmp.w	lr, #0
 8009566:	d061      	beq.n	800962c <HAL_TIM_Encoder_Start_DMA+0x120>
 8009568:	f1be 0f04 	cmp.w	lr, #4
 800956c:	f000 8081 	beq.w	8009672 <HAL_TIM_Encoder_Start_DMA+0x166>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8009570:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009572:	497c      	ldr	r1, [pc, #496]	@ (8009764 <HAL_TIM_Encoder_Start_DMA+0x258>)
 8009574:	6299      	str	r1, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009576:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009578:	497b      	ldr	r1, [pc, #492]	@ (8009768 <HAL_TIM_Encoder_Start_DMA+0x25c>)
 800957a:	62d9      	str	r1, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800957c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800957e:	497b      	ldr	r1, [pc, #492]	@ (800976c <HAL_TIM_Encoder_Start_DMA+0x260>)
 8009580:	6319      	str	r1, [r3, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1,
 8009582:	6821      	ldr	r1, [r4, #0]
 8009584:	463b      	mov	r3, r7
 8009586:	3134      	adds	r1, #52	@ 0x34
 8009588:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800958a:	f7fa f9d0 	bl	800392e <HAL_DMA_Start_IT>
 800958e:	2800      	cmp	r0, #0
 8009590:	f000 8093 	beq.w	80096ba <HAL_TIM_Encoder_Start_DMA+0x1ae>
        return HAL_ERROR;
 8009594:	2501      	movs	r5, #1
 8009596:	e0c1      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
 8009598:	b2db      	uxtb	r3, r3
  else if (Channel == TIM_CHANNEL_2)
 800959a:	2904      	cmp	r1, #4
 800959c:	d02c      	beq.n	80095f8 <HAL_TIM_Encoder_Start_DMA+0xec>
    if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800959e:	2d02      	cmp	r5, #2
 80095a0:	f000 80bc 	beq.w	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
        || (channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80095a4:	f1bc 0f02 	cmp.w	ip, #2
 80095a8:	f000 80ca 	beq.w	8009740 <HAL_TIM_Encoder_Start_DMA+0x234>
        || (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80095ac:	2802      	cmp	r0, #2
 80095ae:	f000 80c9 	beq.w	8009744 <HAL_TIM_Encoder_Start_DMA+0x238>
        || (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	f000 80c8 	beq.w	8009748 <HAL_TIM_Encoder_Start_DMA+0x23c>
    else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 80095b8:	2d01      	cmp	r5, #1
 80095ba:	f040 80c7 	bne.w	800974c <HAL_TIM_Encoder_Start_DMA+0x240>
             && (channel_2_state == HAL_TIM_CHANNEL_STATE_READY)
 80095be:	f1bc 0f01 	cmp.w	ip, #1
 80095c2:	f040 80ab 	bne.w	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
             && (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 80095c6:	2801      	cmp	r0, #1
 80095c8:	f040 80c2 	bne.w	8009750 <HAL_TIM_Encoder_Start_DMA+0x244>
             && (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_READY))
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	f040 80c1 	bne.w	8009754 <HAL_TIM_Encoder_Start_DMA+0x248>
      if ((((pData1 == NULL) || (pData2 == NULL))) || (Length == 0U))
 80095d2:	2a00      	cmp	r2, #0
 80095d4:	f000 80c0 	beq.w	8009758 <HAL_TIM_Encoder_Start_DMA+0x24c>
 80095d8:	2e00      	cmp	r6, #0
 80095da:	f000 80bf 	beq.w	800975c <HAL_TIM_Encoder_Start_DMA+0x250>
 80095de:	2f00      	cmp	r7, #0
 80095e0:	f000 80be 	beq.w	8009760 <HAL_TIM_Encoder_Start_DMA+0x254>
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095e4:	2302      	movs	r3, #2
 80095e6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095ea:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095ee:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
      if ((((pData1 == NULL) || (pData2 == NULL))) || (Length == 0U))
 80095f6:	e7b4      	b.n	8009562 <HAL_TIM_Encoder_Start_DMA+0x56>
    if ((channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80095f8:	f1bc 0f02 	cmp.w	ip, #2
 80095fc:	f000 8094 	beq.w	8009728 <HAL_TIM_Encoder_Start_DMA+0x21c>
        || (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8009600:	2b02      	cmp	r3, #2
 8009602:	f000 8093 	beq.w	800972c <HAL_TIM_Encoder_Start_DMA+0x220>
    else if ((channel_2_state == HAL_TIM_CHANNEL_STATE_READY)
 8009606:	f1bc 0f01 	cmp.w	ip, #1
 800960a:	f040 8091 	bne.w	8009730 <HAL_TIM_Encoder_Start_DMA+0x224>
             && (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_READY))
 800960e:	2b01      	cmp	r3, #1
 8009610:	f040 8090 	bne.w	8009734 <HAL_TIM_Encoder_Start_DMA+0x228>
      if ((pData2 == NULL) || (Length == 0U))
 8009614:	2e00      	cmp	r6, #0
 8009616:	f000 808f 	beq.w	8009738 <HAL_TIM_Encoder_Start_DMA+0x22c>
 800961a:	2f00      	cmp	r7, #0
 800961c:	f000 808e 	beq.w	800973c <HAL_TIM_Encoder_Start_DMA+0x230>
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009620:	2302      	movs	r3, #2
 8009622:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009626:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800962a:	e79a      	b.n	8009562 <HAL_TIM_Encoder_Start_DMA+0x56>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800962c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800962e:	494d      	ldr	r1, [pc, #308]	@ (8009764 <HAL_TIM_Encoder_Start_DMA+0x258>)
 8009630:	6299      	str	r1, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009632:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009634:	494c      	ldr	r1, [pc, #304]	@ (8009768 <HAL_TIM_Encoder_Start_DMA+0x25c>)
 8009636:	62d9      	str	r1, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009638:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800963a:	494c      	ldr	r1, [pc, #304]	@ (800976c <HAL_TIM_Encoder_Start_DMA+0x260>)
 800963c:	6319      	str	r1, [r3, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1,
 800963e:	6821      	ldr	r1, [r4, #0]
 8009640:	463b      	mov	r3, r7
 8009642:	3134      	adds	r1, #52	@ 0x34
 8009644:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8009646:	f7fa f972 	bl	800392e <HAL_DMA_Start_IT>
 800964a:	4605      	mov	r5, r0
 800964c:	b108      	cbz	r0, 8009652 <HAL_TIM_Encoder_Start_DMA+0x146>
        return HAL_ERROR;
 800964e:	2501      	movs	r5, #1
 8009650:	e064      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009652:	6822      	ldr	r2, [r4, #0]
 8009654:	68d3      	ldr	r3, [r2, #12]
 8009656:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800965a:	60d3      	str	r3, [r2, #12]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800965c:	2201      	movs	r2, #1
 800965e:	2100      	movs	r1, #0
 8009660:	6820      	ldr	r0, [r4, #0]
 8009662:	f7fe fa04 	bl	8007a6e <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE(htim);
 8009666:	6822      	ldr	r2, [r4, #0]
 8009668:	6813      	ldr	r3, [r2, #0]
 800966a:	f043 0301 	orr.w	r3, r3, #1
 800966e:	6013      	str	r3, [r2, #0]
      break;
 8009670:	e054      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8009672:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009674:	4a3b      	ldr	r2, [pc, #236]	@ (8009764 <HAL_TIM_Encoder_Start_DMA+0x258>)
 8009676:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009678:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800967a:	4a3b      	ldr	r2, [pc, #236]	@ (8009768 <HAL_TIM_Encoder_Start_DMA+0x25c>)
 800967c:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 800967e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009680:	4a3a      	ldr	r2, [pc, #232]	@ (800976c <HAL_TIM_Encoder_Start_DMA+0x260>)
 8009682:	631a      	str	r2, [r3, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2,
 8009684:	6821      	ldr	r1, [r4, #0]
 8009686:	463b      	mov	r3, r7
 8009688:	4632      	mov	r2, r6
 800968a:	3138      	adds	r1, #56	@ 0x38
 800968c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800968e:	f7fa f94e 	bl	800392e <HAL_DMA_Start_IT>
 8009692:	4605      	mov	r5, r0
 8009694:	b108      	cbz	r0, 800969a <HAL_TIM_Encoder_Start_DMA+0x18e>
        return HAL_ERROR;
 8009696:	2501      	movs	r5, #1
 8009698:	e040      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800969a:	6822      	ldr	r2, [r4, #0]
 800969c:	68d3      	ldr	r3, [r2, #12]
 800969e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80096a2:	60d3      	str	r3, [r2, #12]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80096a4:	2201      	movs	r2, #1
 80096a6:	2104      	movs	r1, #4
 80096a8:	6820      	ldr	r0, [r4, #0]
 80096aa:	f7fe f9e0 	bl	8007a6e <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE(htim);
 80096ae:	6822      	ldr	r2, [r4, #0]
 80096b0:	6813      	ldr	r3, [r2, #0]
 80096b2:	f043 0301 	orr.w	r3, r3, #1
 80096b6:	6013      	str	r3, [r2, #0]
      break;
 80096b8:	e030      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80096ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80096bc:	4a29      	ldr	r2, [pc, #164]	@ (8009764 <HAL_TIM_Encoder_Start_DMA+0x258>)
 80096be:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80096c0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80096c2:	4a29      	ldr	r2, [pc, #164]	@ (8009768 <HAL_TIM_Encoder_Start_DMA+0x25c>)
 80096c4:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80096c6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80096c8:	4a28      	ldr	r2, [pc, #160]	@ (800976c <HAL_TIM_Encoder_Start_DMA+0x260>)
 80096ca:	631a      	str	r2, [r3, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2,
 80096cc:	6821      	ldr	r1, [r4, #0]
 80096ce:	463b      	mov	r3, r7
 80096d0:	4632      	mov	r2, r6
 80096d2:	3138      	adds	r1, #56	@ 0x38
 80096d4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80096d6:	f7fa f92a 	bl	800392e <HAL_DMA_Start_IT>
 80096da:	4605      	mov	r5, r0
 80096dc:	b108      	cbz	r0, 80096e2 <HAL_TIM_Encoder_Start_DMA+0x1d6>
        return HAL_ERROR;
 80096de:	2501      	movs	r5, #1
 80096e0:	e01c      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80096e2:	6822      	ldr	r2, [r4, #0]
 80096e4:	68d3      	ldr	r3, [r2, #12]
 80096e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80096ea:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80096ec:	6822      	ldr	r2, [r4, #0]
 80096ee:	68d3      	ldr	r3, [r2, #12]
 80096f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80096f4:	60d3      	str	r3, [r2, #12]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80096f6:	2201      	movs	r2, #1
 80096f8:	2100      	movs	r1, #0
 80096fa:	6820      	ldr	r0, [r4, #0]
 80096fc:	f7fe f9b7 	bl	8007a6e <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009700:	2201      	movs	r2, #1
 8009702:	2104      	movs	r1, #4
 8009704:	6820      	ldr	r0, [r4, #0]
 8009706:	f7fe f9b2 	bl	8007a6e <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE(htim);
 800970a:	6822      	ldr	r2, [r4, #0]
 800970c:	6813      	ldr	r3, [r2, #0]
 800970e:	f043 0301 	orr.w	r3, r3, #1
 8009712:	6013      	str	r3, [r2, #0]
      break;
 8009714:	e002      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
      return HAL_BUSY;
 8009716:	4605      	mov	r5, r0
 8009718:	e000      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
      return HAL_ERROR;
 800971a:	2501      	movs	r5, #1
}
 800971c:	4628      	mov	r0, r5
 800971e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8009720:	4605      	mov	r5, r0
 8009722:	e7fb      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
 8009724:	4605      	mov	r5, r0
 8009726:	e7f9      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
      return HAL_BUSY;
 8009728:	4665      	mov	r5, ip
 800972a:	e7f7      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
 800972c:	461d      	mov	r5, r3
 800972e:	e7f5      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
      return HAL_ERROR;
 8009730:	2501      	movs	r5, #1
 8009732:	e7f3      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
 8009734:	4665      	mov	r5, ip
 8009736:	e7f1      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
        return HAL_ERROR;
 8009738:	461d      	mov	r5, r3
 800973a:	e7ef      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
 800973c:	461d      	mov	r5, r3
 800973e:	e7ed      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
      return HAL_BUSY;
 8009740:	4665      	mov	r5, ip
 8009742:	e7eb      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
 8009744:	4605      	mov	r5, r0
 8009746:	e7e9      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
 8009748:	461d      	mov	r5, r3
 800974a:	e7e7      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
      return HAL_ERROR;
 800974c:	2501      	movs	r5, #1
 800974e:	e7e5      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
 8009750:	4665      	mov	r5, ip
 8009752:	e7e3      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
 8009754:	4605      	mov	r5, r0
 8009756:	e7e1      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
        return HAL_ERROR;
 8009758:	461d      	mov	r5, r3
 800975a:	e7df      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
 800975c:	461d      	mov	r5, r3
 800975e:	e7dd      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
 8009760:	461d      	mov	r5, r3
 8009762:	e7db      	b.n	800971c <HAL_TIM_Encoder_Start_DMA+0x210>
 8009764:	08006c67 	.word	0x08006c67
 8009768:	08006ce9 	.word	0x08006ce9
 800976c:	08006f5d 	.word	0x08006f5d

08009770 <HAL_TIM_Encoder_Stop_DMA>:
{
 8009770:	b538      	push	{r3, r4, r5, lr}
 8009772:	4604      	mov	r4, r0
  if (Channel == TIM_CHANNEL_1)
 8009774:	460d      	mov	r5, r1
 8009776:	2900      	cmp	r1, #0
 8009778:	d037      	beq.n	80097ea <HAL_TIM_Encoder_Stop_DMA+0x7a>
  else if (Channel == TIM_CHANNEL_2)
 800977a:	2904      	cmp	r1, #4
 800977c:	d043      	beq.n	8009806 <HAL_TIM_Encoder_Stop_DMA+0x96>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800977e:	2200      	movs	r2, #0
 8009780:	4611      	mov	r1, r2
 8009782:	6800      	ldr	r0, [r0, #0]
 8009784:	f7fe f973 	bl	8007a6e <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009788:	2200      	movs	r2, #0
 800978a:	2104      	movs	r1, #4
 800978c:	6820      	ldr	r0, [r4, #0]
 800978e:	f7fe f96e 	bl	8007a6e <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009792:	6822      	ldr	r2, [r4, #0]
 8009794:	68d3      	ldr	r3, [r2, #12]
 8009796:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800979a:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800979c:	6822      	ldr	r2, [r4, #0]
 800979e:	68d3      	ldr	r3, [r2, #12]
 80097a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80097a4:	60d3      	str	r3, [r2, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80097a6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80097a8:	f7fa f920 	bl	80039ec <HAL_DMA_Abort_IT>
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80097ac:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80097ae:	f7fa f91d 	bl	80039ec <HAL_DMA_Abort_IT>
  __HAL_TIM_DISABLE(htim);
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	6a19      	ldr	r1, [r3, #32]
 80097b6:	f241 1211 	movw	r2, #4369	@ 0x1111
 80097ba:	4211      	tst	r1, r2
 80097bc:	d108      	bne.n	80097d0 <HAL_TIM_Encoder_Stop_DMA+0x60>
 80097be:	6a19      	ldr	r1, [r3, #32]
 80097c0:	f240 4244 	movw	r2, #1092	@ 0x444
 80097c4:	4211      	tst	r1, r2
 80097c6:	d103      	bne.n	80097d0 <HAL_TIM_Encoder_Stop_DMA+0x60>
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	f022 0201 	bic.w	r2, r2, #1
 80097ce:	601a      	str	r2, [r3, #0]
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80097d0:	b33d      	cbz	r5, 8009822 <HAL_TIM_Encoder_Stop_DMA+0xb2>
 80097d2:	2d04      	cmp	r5, #4
 80097d4:	d02c      	beq.n	8009830 <HAL_TIM_Encoder_Stop_DMA+0xc0>
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80097d6:	2301      	movs	r3, #1
 80097d8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80097dc:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80097e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80097e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097e8:	e020      	b.n	800982c <HAL_TIM_Encoder_Stop_DMA+0xbc>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80097ea:	2200      	movs	r2, #0
 80097ec:	4611      	mov	r1, r2
 80097ee:	6800      	ldr	r0, [r0, #0]
 80097f0:	f7fe f93d 	bl	8007a6e <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80097f4:	6822      	ldr	r2, [r4, #0]
 80097f6:	68d3      	ldr	r3, [r2, #12]
 80097f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80097fc:	60d3      	str	r3, [r2, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80097fe:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8009800:	f7fa f8f4 	bl	80039ec <HAL_DMA_Abort_IT>
 8009804:	e7d5      	b.n	80097b2 <HAL_TIM_Encoder_Stop_DMA+0x42>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009806:	2200      	movs	r2, #0
 8009808:	2104      	movs	r1, #4
 800980a:	6800      	ldr	r0, [r0, #0]
 800980c:	f7fe f92f 	bl	8007a6e <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8009810:	6822      	ldr	r2, [r4, #0]
 8009812:	68d3      	ldr	r3, [r2, #12]
 8009814:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009818:	60d3      	str	r3, [r2, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800981a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800981c:	f7fa f8e6 	bl	80039ec <HAL_DMA_Abort_IT>
 8009820:	e7c7      	b.n	80097b2 <HAL_TIM_Encoder_Stop_DMA+0x42>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009822:	2301      	movs	r3, #1
 8009824:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009828:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 800982c:	2000      	movs	r0, #0
 800982e:	bd38      	pop	{r3, r4, r5, pc}
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009830:	2301      	movs	r3, #1
 8009832:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800983a:	e7f7      	b.n	800982c <HAL_TIM_Encoder_Stop_DMA+0xbc>

0800983c <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800983c:	f001 010f 	and.w	r1, r1, #15
 8009840:	f04f 0c04 	mov.w	ip, #4
 8009844:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009848:	6a03      	ldr	r3, [r0, #32]
 800984a:	ea23 030c 	bic.w	r3, r3, ip
 800984e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8009850:	6a03      	ldr	r3, [r0, #32]
 8009852:	408a      	lsls	r2, r1
 8009854:	4313      	orrs	r3, r2
 8009856:	6203      	str	r3, [r0, #32]
}
 8009858:	4770      	bx	lr

0800985a <TIM_DMAErrorCCxN>:
{
 800985a:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800985c:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800985e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009860:	4283      	cmp	r3, r0
 8009862:	d00b      	beq.n	800987c <TIM_DMAErrorCCxN+0x22>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009864:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009866:	4283      	cmp	r3, r0
 8009868:	d00d      	beq.n	8009886 <TIM_DMAErrorCCxN+0x2c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800986a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800986c:	4283      	cmp	r3, r0
 800986e:	d010      	beq.n	8009892 <TIM_DMAErrorCCxN+0x38>
  HAL_TIM_ErrorCallback(htim);
 8009870:	4620      	mov	r0, r4
 8009872:	f7fd fb72 	bl	8006f5a <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009876:	2300      	movs	r3, #0
 8009878:	7723      	strb	r3, [r4, #28]
}
 800987a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800987c:	2301      	movs	r3, #1
 800987e:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009880:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009884:	e7f4      	b.n	8009870 <TIM_DMAErrorCCxN+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009886:	2302      	movs	r3, #2
 8009888:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800988a:	2301      	movs	r3, #1
 800988c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009890:	e7ee      	b.n	8009870 <TIM_DMAErrorCCxN+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009892:	2304      	movs	r3, #4
 8009894:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009896:	2301      	movs	r3, #1
 8009898:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800989c:	e7e8      	b.n	8009870 <TIM_DMAErrorCCxN+0x16>

0800989e <TIM_DMADelayPulseNCplt>:
{
 800989e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098a0:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80098a2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80098a4:	4283      	cmp	r3, r0
 80098a6:	d00b      	beq.n	80098c0 <TIM_DMADelayPulseNCplt+0x22>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80098a8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80098aa:	4283      	cmp	r3, r0
 80098ac:	d011      	beq.n	80098d2 <TIM_DMADelayPulseNCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80098ae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80098b0:	4283      	cmp	r3, r0
 80098b2:	d017      	beq.n	80098e4 <TIM_DMADelayPulseNCplt+0x46>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098b4:	4620      	mov	r0, r4
 80098b6:	f7fd fa36 	bl	8006d26 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098ba:	2300      	movs	r3, #0
 80098bc:	7723      	strb	r3, [r4, #28]
}
 80098be:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098c0:	2301      	movs	r3, #1
 80098c2:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80098c4:	6983      	ldr	r3, [r0, #24]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1f4      	bne.n	80098b4 <TIM_DMADelayPulseNCplt+0x16>
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80098ca:	2301      	movs	r3, #1
 80098cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80098d0:	e7f0      	b.n	80098b4 <TIM_DMADelayPulseNCplt+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098d2:	2302      	movs	r3, #2
 80098d4:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80098d6:	6983      	ldr	r3, [r0, #24]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1eb      	bne.n	80098b4 <TIM_DMADelayPulseNCplt+0x16>
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80098dc:	2301      	movs	r3, #1
 80098de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098e2:	e7e7      	b.n	80098b4 <TIM_DMADelayPulseNCplt+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098e4:	2304      	movs	r3, #4
 80098e6:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80098e8:	6983      	ldr	r3, [r0, #24]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1e2      	bne.n	80098b4 <TIM_DMADelayPulseNCplt+0x16>
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80098ee:	2301      	movs	r3, #1
 80098f0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80098f4:	e7de      	b.n	80098b4 <TIM_DMADelayPulseNCplt+0x16>

080098f6 <HAL_TIMEx_HallSensor_MspInit>:
}
 80098f6:	4770      	bx	lr

080098f8 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d065      	beq.n	80099c8 <HAL_TIMEx_HallSensor_Init+0xd0>
{
 80098fc:	b570      	push	{r4, r5, r6, lr}
 80098fe:	b088      	sub	sp, #32
 8009900:	460e      	mov	r6, r1
 8009902:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8009904:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009908:	2b00      	cmp	r3, #0
 800990a:	d058      	beq.n	80099be <HAL_TIMEx_HallSensor_Init+0xc6>
  htim->State = HAL_TIM_STATE_BUSY;
 800990c:	2302      	movs	r3, #2
 800990e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009912:	4621      	mov	r1, r4
 8009914:	f851 0b04 	ldr.w	r0, [r1], #4
 8009918:	f7fd fb7a 	bl	8007010 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800991c:	68b3      	ldr	r3, [r6, #8]
 800991e:	2203      	movs	r2, #3
 8009920:	6831      	ldr	r1, [r6, #0]
 8009922:	6820      	ldr	r0, [r4, #0]
 8009924:	f7fd fdd8 	bl	80074d8 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009928:	6822      	ldr	r2, [r4, #0]
 800992a:	6993      	ldr	r3, [r2, #24]
 800992c:	f023 030c 	bic.w	r3, r3, #12
 8009930:	6193      	str	r3, [r2, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8009932:	6822      	ldr	r2, [r4, #0]
 8009934:	6993      	ldr	r3, [r2, #24]
 8009936:	6871      	ldr	r1, [r6, #4]
 8009938:	430b      	orrs	r3, r1
 800993a:	6193      	str	r3, [r2, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800993c:	6822      	ldr	r2, [r4, #0]
 800993e:	6853      	ldr	r3, [r2, #4]
 8009940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009944:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8009946:	6822      	ldr	r2, [r4, #0]
 8009948:	6893      	ldr	r3, [r2, #8]
 800994a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800994e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8009950:	6822      	ldr	r2, [r4, #0]
 8009952:	6893      	ldr	r3, [r2, #8]
 8009954:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009958:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800995a:	6822      	ldr	r2, [r4, #0]
 800995c:	6893      	ldr	r3, [r2, #8]
 800995e:	f023 0307 	bic.w	r3, r3, #7
 8009962:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8009964:	6822      	ldr	r2, [r4, #0]
 8009966:	6893      	ldr	r3, [r2, #8]
 8009968:	f043 0304 	orr.w	r3, r3, #4
 800996c:	6093      	str	r3, [r2, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800996e:	2500      	movs	r5, #0
 8009970:	9505      	str	r5, [sp, #20]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009972:	9506      	str	r5, [sp, #24]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8009974:	2370      	movs	r3, #112	@ 0x70
 8009976:	9301      	str	r3, [sp, #4]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009978:	9507      	str	r5, [sp, #28]
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800997a:	9504      	str	r5, [sp, #16]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800997c:	9503      	str	r5, [sp, #12]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800997e:	68f3      	ldr	r3, [r6, #12]
 8009980:	9302      	str	r3, [sp, #8]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8009982:	a901      	add	r1, sp, #4
 8009984:	6820      	ldr	r0, [r4, #0]
 8009986:	f7fd fcd1 	bl	800732c <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800998a:	6822      	ldr	r2, [r4, #0]
 800998c:	6853      	ldr	r3, [r2, #4]
 800998e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009992:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8009994:	6822      	ldr	r2, [r4, #0]
 8009996:	6853      	ldr	r3, [r2, #4]
 8009998:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800999c:	6053      	str	r3, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800999e:	2301      	movs	r3, #1
 80099a0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80099a4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80099a8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80099ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80099b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 80099b4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80099b8:	4628      	mov	r0, r5
}
 80099ba:	b008      	add	sp, #32
 80099bc:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80099be:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 80099c2:	f7ff ff98 	bl	80098f6 <HAL_TIMEx_HallSensor_MspInit>
 80099c6:	e7a1      	b.n	800990c <HAL_TIMEx_HallSensor_Init+0x14>
    return HAL_ERROR;
 80099c8:	2001      	movs	r0, #1
}
 80099ca:	4770      	bx	lr

080099cc <HAL_TIMEx_HallSensor_MspDeInit>:
}
 80099cc:	4770      	bx	lr

080099ce <HAL_TIMEx_HallSensor_DeInit>:
{
 80099ce:	b510      	push	{r4, lr}
 80099d0:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80099d2:	2302      	movs	r3, #2
 80099d4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_DISABLE(htim);
 80099d8:	6803      	ldr	r3, [r0, #0]
 80099da:	6a19      	ldr	r1, [r3, #32]
 80099dc:	f241 1211 	movw	r2, #4369	@ 0x1111
 80099e0:	4211      	tst	r1, r2
 80099e2:	d108      	bne.n	80099f6 <HAL_TIMEx_HallSensor_DeInit+0x28>
 80099e4:	6a19      	ldr	r1, [r3, #32]
 80099e6:	f240 4244 	movw	r2, #1092	@ 0x444
 80099ea:	4211      	tst	r1, r2
 80099ec:	d103      	bne.n	80099f6 <HAL_TIMEx_HallSensor_DeInit+0x28>
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	f022 0201 	bic.w	r2, r2, #1
 80099f4:	601a      	str	r2, [r3, #0]
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 80099f6:	4620      	mov	r0, r4
 80099f8:	f7ff ffe8 	bl	80099cc <HAL_TIMEx_HallSensor_MspDeInit>
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80099fc:	2000      	movs	r0, #0
 80099fe:	f884 0046 	strb.w	r0, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8009a02:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 8009a06:	f884 003f 	strb.w	r0, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8009a0a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 8009a0e:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_RESET;
 8009a12:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8009a16:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8009a1a:	bd10      	pop	{r4, pc}

08009a1c <HAL_TIMEx_HallSensor_Start>:
{
 8009a1c:	b510      	push	{r4, lr}
 8009a1e:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009a20:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 8009a24:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009a26:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009a2a:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009a2e:	f894 1043 	ldrb.w	r1, [r4, #67]	@ 0x43
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a32:	2801      	cmp	r0, #1
 8009a34:	d13f      	bne.n	8009ab6 <HAL_TIMEx_HallSensor_Start+0x9a>
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	b2d2      	uxtb	r2, r2
 8009a3a:	b2c9      	uxtb	r1, r1
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d13b      	bne.n	8009ab8 <HAL_TIMEx_HallSensor_Start+0x9c>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a40:	2a01      	cmp	r2, #1
 8009a42:	d13a      	bne.n	8009aba <HAL_TIMEx_HallSensor_Start+0x9e>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a44:	2901      	cmp	r1, #1
 8009a46:	d001      	beq.n	8009a4c <HAL_TIMEx_HallSensor_Start+0x30>
    return HAL_ERROR;
 8009a48:	4610      	mov	r0, r2
 8009a4a:	e035      	b.n	8009ab8 <HAL_TIMEx_HallSensor_Start+0x9c>
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a52:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a56:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009a5e:	2100      	movs	r1, #0
 8009a60:	6820      	ldr	r0, [r4, #0]
 8009a62:	f7fe f804 	bl	8007a6e <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	4a16      	ldr	r2, [pc, #88]	@ (8009ac4 <HAL_TIMEx_HallSensor_Start+0xa8>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d018      	beq.n	8009aa0 <HAL_TIMEx_HallSensor_Start+0x84>
 8009a6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d014      	beq.n	8009aa0 <HAL_TIMEx_HallSensor_Start+0x84>
 8009a76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a7a:	d011      	beq.n	8009aa0 <HAL_TIMEx_HallSensor_Start+0x84>
 8009a7c:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d00d      	beq.n	8009aa0 <HAL_TIMEx_HallSensor_Start+0x84>
 8009a84:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d009      	beq.n	8009aa0 <HAL_TIMEx_HallSensor_Start+0x84>
 8009a8c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d005      	beq.n	8009aa0 <HAL_TIMEx_HallSensor_Start+0x84>
    __HAL_TIM_ENABLE(htim);
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	f042 0201 	orr.w	r2, r2, #1
 8009a9a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	e00b      	b.n	8009ab8 <HAL_TIMEx_HallSensor_Start+0x9c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009aa0:	689a      	ldr	r2, [r3, #8]
 8009aa2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aa6:	2a06      	cmp	r2, #6
 8009aa8:	d009      	beq.n	8009abe <HAL_TIMEx_HallSensor_Start+0xa2>
      __HAL_TIM_ENABLE(htim);
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	f042 0201 	orr.w	r2, r2, #1
 8009ab0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	e000      	b.n	8009ab8 <HAL_TIMEx_HallSensor_Start+0x9c>
    return HAL_ERROR;
 8009ab6:	2001      	movs	r0, #1
}
 8009ab8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009aba:	4618      	mov	r0, r3
 8009abc:	e7fc      	b.n	8009ab8 <HAL_TIMEx_HallSensor_Start+0x9c>
  return HAL_OK;
 8009abe:	2000      	movs	r0, #0
 8009ac0:	e7fa      	b.n	8009ab8 <HAL_TIMEx_HallSensor_Start+0x9c>
 8009ac2:	bf00      	nop
 8009ac4:	40012c00 	.word	0x40012c00

08009ac8 <HAL_TIMEx_HallSensor_Stop>:
{
 8009ac8:	b510      	push	{r4, lr}
 8009aca:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009acc:	2200      	movs	r2, #0
 8009ace:	4611      	mov	r1, r2
 8009ad0:	6800      	ldr	r0, [r0, #0]
 8009ad2:	f7fd ffcc 	bl	8007a6e <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	6a19      	ldr	r1, [r3, #32]
 8009ada:	f241 1211 	movw	r2, #4369	@ 0x1111
 8009ade:	4211      	tst	r1, r2
 8009ae0:	d108      	bne.n	8009af4 <HAL_TIMEx_HallSensor_Stop+0x2c>
 8009ae2:	6a19      	ldr	r1, [r3, #32]
 8009ae4:	f240 4244 	movw	r2, #1092	@ 0x444
 8009ae8:	4211      	tst	r1, r2
 8009aea:	d103      	bne.n	8009af4 <HAL_TIMEx_HallSensor_Stop+0x2c>
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	f022 0201 	bic.w	r2, r2, #1
 8009af2:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009af4:	2301      	movs	r3, #1
 8009af6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009afa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009afe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
}
 8009b06:	2000      	movs	r0, #0
 8009b08:	bd10      	pop	{r4, pc}
	...

08009b0c <HAL_TIMEx_HallSensor_Start_IT>:
{
 8009b0c:	b510      	push	{r4, lr}
 8009b0e:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009b10:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
 8009b14:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009b16:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009b1a:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009b1e:	f894 1043 	ldrb.w	r1, [r4, #67]	@ 0x43
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b22:	2801      	cmp	r0, #1
 8009b24:	d145      	bne.n	8009bb2 <HAL_TIMEx_HallSensor_Start_IT+0xa6>
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	b2d2      	uxtb	r2, r2
 8009b2a:	b2c9      	uxtb	r1, r1
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d141      	bne.n	8009bb4 <HAL_TIMEx_HallSensor_Start_IT+0xa8>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b30:	2a01      	cmp	r2, #1
 8009b32:	d140      	bne.n	8009bb6 <HAL_TIMEx_HallSensor_Start_IT+0xaa>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b34:	2901      	cmp	r1, #1
 8009b36:	d001      	beq.n	8009b3c <HAL_TIMEx_HallSensor_Start_IT+0x30>
    return HAL_ERROR;
 8009b38:	4610      	mov	r0, r2
 8009b3a:	e03b      	b.n	8009bb4 <HAL_TIMEx_HallSensor_Start_IT+0xa8>
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b3c:	2302      	movs	r3, #2
 8009b3e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b42:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b46:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009b4e:	6822      	ldr	r2, [r4, #0]
 8009b50:	68d3      	ldr	r3, [r2, #12]
 8009b52:	f043 0302 	orr.w	r3, r3, #2
 8009b56:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009b58:	2201      	movs	r2, #1
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	6820      	ldr	r0, [r4, #0]
 8009b5e:	f7fd ff86 	bl	8007a6e <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	4a16      	ldr	r2, [pc, #88]	@ (8009bc0 <HAL_TIMEx_HallSensor_Start_IT+0xb4>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d018      	beq.n	8009b9c <HAL_TIMEx_HallSensor_Start_IT+0x90>
 8009b6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d014      	beq.n	8009b9c <HAL_TIMEx_HallSensor_Start_IT+0x90>
 8009b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b76:	d011      	beq.n	8009b9c <HAL_TIMEx_HallSensor_Start_IT+0x90>
 8009b78:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d00d      	beq.n	8009b9c <HAL_TIMEx_HallSensor_Start_IT+0x90>
 8009b80:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d009      	beq.n	8009b9c <HAL_TIMEx_HallSensor_Start_IT+0x90>
 8009b88:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d005      	beq.n	8009b9c <HAL_TIMEx_HallSensor_Start_IT+0x90>
    __HAL_TIM_ENABLE(htim);
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	f042 0201 	orr.w	r2, r2, #1
 8009b96:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009b98:	2000      	movs	r0, #0
 8009b9a:	e00b      	b.n	8009bb4 <HAL_TIMEx_HallSensor_Start_IT+0xa8>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b9c:	689a      	ldr	r2, [r3, #8]
 8009b9e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ba2:	2a06      	cmp	r2, #6
 8009ba4:	d009      	beq.n	8009bba <HAL_TIMEx_HallSensor_Start_IT+0xae>
      __HAL_TIM_ENABLE(htim);
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	f042 0201 	orr.w	r2, r2, #1
 8009bac:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009bae:	2000      	movs	r0, #0
 8009bb0:	e000      	b.n	8009bb4 <HAL_TIMEx_HallSensor_Start_IT+0xa8>
    return HAL_ERROR;
 8009bb2:	2001      	movs	r0, #1
}
 8009bb4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	e7fc      	b.n	8009bb4 <HAL_TIMEx_HallSensor_Start_IT+0xa8>
  return HAL_OK;
 8009bba:	2000      	movs	r0, #0
 8009bbc:	e7fa      	b.n	8009bb4 <HAL_TIMEx_HallSensor_Start_IT+0xa8>
 8009bbe:	bf00      	nop
 8009bc0:	40012c00 	.word	0x40012c00

08009bc4 <HAL_TIMEx_HallSensor_Stop_IT>:
{
 8009bc4:	b510      	push	{r4, lr}
 8009bc6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009bc8:	2200      	movs	r2, #0
 8009bca:	4611      	mov	r1, r2
 8009bcc:	6800      	ldr	r0, [r0, #0]
 8009bce:	f7fd ff4e 	bl	8007a6e <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009bd2:	6822      	ldr	r2, [r4, #0]
 8009bd4:	68d3      	ldr	r3, [r2, #12]
 8009bd6:	f023 0302 	bic.w	r3, r3, #2
 8009bda:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	6a19      	ldr	r1, [r3, #32]
 8009be0:	f241 1211 	movw	r2, #4369	@ 0x1111
 8009be4:	4211      	tst	r1, r2
 8009be6:	d108      	bne.n	8009bfa <HAL_TIMEx_HallSensor_Stop_IT+0x36>
 8009be8:	6a19      	ldr	r1, [r3, #32]
 8009bea:	f240 4244 	movw	r2, #1092	@ 0x444
 8009bee:	4211      	tst	r1, r2
 8009bf0:	d103      	bne.n	8009bfa <HAL_TIMEx_HallSensor_Stop_IT+0x36>
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	f022 0201 	bic.w	r2, r2, #1
 8009bf8:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c00:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009c04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
}
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	bd10      	pop	{r4, pc}

08009c10 <HAL_TIMEx_HallSensor_Start_DMA>:
{
 8009c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c12:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009c14:	f890 c03e 	ldrb.w	ip, [r0, #62]	@ 0x3e
 8009c18:	fa5f f08c 	uxtb.w	r0, ip
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009c1c:	f894 c042 	ldrb.w	ip, [r4, #66]	@ 0x42
  if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8009c20:	2802      	cmp	r0, #2
 8009c22:	d057      	beq.n	8009cd4 <HAL_TIMEx_HallSensor_Start_DMA+0xc4>
 8009c24:	460f      	mov	r7, r1
 8009c26:	4616      	mov	r6, r2
 8009c28:	fa5f f58c 	uxtb.w	r5, ip
      || (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8009c2c:	2d02      	cmp	r5, #2
 8009c2e:	d04e      	beq.n	8009cce <HAL_TIMEx_HallSensor_Start_DMA+0xbe>
  else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 8009c30:	2801      	cmp	r0, #1
 8009c32:	d14e      	bne.n	8009cd2 <HAL_TIMEx_HallSensor_Start_DMA+0xc2>
           && (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_READY))
 8009c34:	2d01      	cmp	r5, #1
 8009c36:	d14d      	bne.n	8009cd4 <HAL_TIMEx_HallSensor_Start_DMA+0xc4>
    if ((pData == NULL) || (Length == 0U))
 8009c38:	2900      	cmp	r1, #0
 8009c3a:	d04c      	beq.n	8009cd6 <HAL_TIMEx_HallSensor_Start_DMA+0xc6>
 8009c3c:	b90a      	cbnz	r2, 8009c42 <HAL_TIMEx_HallSensor_Start_DMA+0x32>
      return HAL_ERROR;
 8009c3e:	4628      	mov	r0, r5
 8009c40:	e048      	b.n	8009cd4 <HAL_TIMEx_HallSensor_Start_DMA+0xc4>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c42:	2302      	movs	r3, #2
 8009c44:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	2100      	movs	r1, #0
 8009c50:	6820      	ldr	r0, [r4, #0]
 8009c52:	f7fd ff0c 	bl	8007a6e <TIM_CCxChannelCmd>
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8009c56:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009c58:	4a21      	ldr	r2, [pc, #132]	@ (8009ce0 <HAL_TIMEx_HallSensor_Start_DMA+0xd0>)
 8009c5a:	629a      	str	r2, [r3, #40]	@ 0x28
  htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009c5c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009c5e:	4a21      	ldr	r2, [pc, #132]	@ (8009ce4 <HAL_TIMEx_HallSensor_Start_DMA+0xd4>)
 8009c60:	62da      	str	r2, [r3, #44]	@ 0x2c
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009c62:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009c64:	4a20      	ldr	r2, [pc, #128]	@ (8009ce8 <HAL_TIMEx_HallSensor_Start_DMA+0xd8>)
 8009c66:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8009c68:	6821      	ldr	r1, [r4, #0]
 8009c6a:	4633      	mov	r3, r6
 8009c6c:	463a      	mov	r2, r7
 8009c6e:	3134      	adds	r1, #52	@ 0x34
 8009c70:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8009c72:	f7f9 fe5c 	bl	800392e <HAL_DMA_Start_IT>
 8009c76:	bb80      	cbnz	r0, 8009cda <HAL_TIMEx_HallSensor_Start_DMA+0xca>
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009c78:	6822      	ldr	r2, [r4, #0]
 8009c7a:	68d3      	ldr	r3, [r2, #12]
 8009c7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009c80:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	4a19      	ldr	r2, [pc, #100]	@ (8009cec <HAL_TIMEx_HallSensor_Start_DMA+0xdc>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d017      	beq.n	8009cba <HAL_TIMEx_HallSensor_Start_DMA+0xaa>
 8009c8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d013      	beq.n	8009cba <HAL_TIMEx_HallSensor_Start_DMA+0xaa>
 8009c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c96:	d010      	beq.n	8009cba <HAL_TIMEx_HallSensor_Start_DMA+0xaa>
 8009c98:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d00c      	beq.n	8009cba <HAL_TIMEx_HallSensor_Start_DMA+0xaa>
 8009ca0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d008      	beq.n	8009cba <HAL_TIMEx_HallSensor_Start_DMA+0xaa>
 8009ca8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d004      	beq.n	8009cba <HAL_TIMEx_HallSensor_Start_DMA+0xaa>
    __HAL_TIM_ENABLE(htim);
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	f042 0201 	orr.w	r2, r2, #1
 8009cb6:	601a      	str	r2, [r3, #0]
 8009cb8:	e00c      	b.n	8009cd4 <HAL_TIMEx_HallSensor_Start_DMA+0xc4>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cba:	689a      	ldr	r2, [r3, #8]
 8009cbc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cc0:	2a06      	cmp	r2, #6
 8009cc2:	d007      	beq.n	8009cd4 <HAL_TIMEx_HallSensor_Start_DMA+0xc4>
      __HAL_TIM_ENABLE(htim);
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	f042 0201 	orr.w	r2, r2, #1
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	e002      	b.n	8009cd4 <HAL_TIMEx_HallSensor_Start_DMA+0xc4>
    return HAL_BUSY;
 8009cce:	4628      	mov	r0, r5
 8009cd0:	e000      	b.n	8009cd4 <HAL_TIMEx_HallSensor_Start_DMA+0xc4>
    return HAL_ERROR;
 8009cd2:	2001      	movs	r0, #1
}
 8009cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	e7fc      	b.n	8009cd4 <HAL_TIMEx_HallSensor_Start_DMA+0xc4>
    return HAL_ERROR;
 8009cda:	4628      	mov	r0, r5
 8009cdc:	e7fa      	b.n	8009cd4 <HAL_TIMEx_HallSensor_Start_DMA+0xc4>
 8009cde:	bf00      	nop
 8009ce0:	08006c67 	.word	0x08006c67
 8009ce4:	08006ce9 	.word	0x08006ce9
 8009ce8:	08006f5d 	.word	0x08006f5d
 8009cec:	40012c00 	.word	0x40012c00

08009cf0 <HAL_TIMEx_HallSensor_Stop_DMA>:
{
 8009cf0:	b510      	push	{r4, lr}
 8009cf2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	6800      	ldr	r0, [r0, #0]
 8009cfa:	f7fd feb8 	bl	8007a6e <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009cfe:	6822      	ldr	r2, [r4, #0]
 8009d00:	68d3      	ldr	r3, [r2, #12]
 8009d02:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009d06:	60d3      	str	r3, [r2, #12]
  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8009d08:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8009d0a:	f7f9 fe6f 	bl	80039ec <HAL_DMA_Abort_IT>
  __HAL_TIM_DISABLE(htim);
 8009d0e:	6823      	ldr	r3, [r4, #0]
 8009d10:	6a19      	ldr	r1, [r3, #32]
 8009d12:	f241 1211 	movw	r2, #4369	@ 0x1111
 8009d16:	4211      	tst	r1, r2
 8009d18:	d108      	bne.n	8009d2c <HAL_TIMEx_HallSensor_Stop_DMA+0x3c>
 8009d1a:	6a19      	ldr	r1, [r3, #32]
 8009d1c:	f240 4244 	movw	r2, #1092	@ 0x444
 8009d20:	4211      	tst	r1, r2
 8009d22:	d103      	bne.n	8009d2c <HAL_TIMEx_HallSensor_Stop_DMA+0x3c>
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	f022 0201 	bic.w	r2, r2, #1
 8009d2a:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d32:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 8009d36:	2000      	movs	r0, #0
 8009d38:	bd10      	pop	{r4, pc}
	...

08009d3c <HAL_TIMEx_OCN_Start>:
{
 8009d3c:	b510      	push	{r4, lr}
 8009d3e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009d40:	4608      	mov	r0, r1
 8009d42:	2900      	cmp	r1, #0
 8009d44:	d133      	bne.n	8009dae <HAL_TIMEx_OCN_Start+0x72>
 8009d46:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	bf18      	it	ne
 8009d50:	2301      	movne	r3, #1
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d15f      	bne.n	8009e16 <HAL_TIMEx_OCN_Start+0xda>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d142      	bne.n	8009de0 <HAL_TIMEx_OCN_Start+0xa4>
 8009d5a:	2302      	movs	r3, #2
 8009d5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009d60:	2204      	movs	r2, #4
 8009d62:	4601      	mov	r1, r0
 8009d64:	6820      	ldr	r0, [r4, #0]
 8009d66:	f7ff fd69 	bl	800983c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8009d6a:	6822      	ldr	r2, [r4, #0]
 8009d6c:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8009d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d72:	6453      	str	r3, [r2, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	4a2a      	ldr	r2, [pc, #168]	@ (8009e20 <HAL_TIMEx_OCN_Start+0xe4>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d041      	beq.n	8009e00 <HAL_TIMEx_OCN_Start+0xc4>
 8009d7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d03d      	beq.n	8009e00 <HAL_TIMEx_OCN_Start+0xc4>
 8009d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d88:	d03a      	beq.n	8009e00 <HAL_TIMEx_OCN_Start+0xc4>
 8009d8a:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d036      	beq.n	8009e00 <HAL_TIMEx_OCN_Start+0xc4>
 8009d92:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d032      	beq.n	8009e00 <HAL_TIMEx_OCN_Start+0xc4>
 8009d9a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d02e      	beq.n	8009e00 <HAL_TIMEx_OCN_Start+0xc4>
    __HAL_TIM_ENABLE(htim);
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	f042 0201 	orr.w	r2, r2, #1
 8009da8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009daa:	2000      	movs	r0, #0
 8009dac:	e032      	b.n	8009e14 <HAL_TIMEx_OCN_Start+0xd8>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009dae:	2904      	cmp	r1, #4
 8009db0:	d008      	beq.n	8009dc4 <HAL_TIMEx_OCN_Start+0x88>
 8009db2:	2908      	cmp	r1, #8
 8009db4:	d00d      	beq.n	8009dd2 <HAL_TIMEx_OCN_Start+0x96>
 8009db6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	bf18      	it	ne
 8009dc0:	2301      	movne	r3, #1
 8009dc2:	e7c6      	b.n	8009d52 <HAL_TIMEx_OCN_Start+0x16>
 8009dc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	bf18      	it	ne
 8009dce:	2301      	movne	r3, #1
 8009dd0:	e7bf      	b.n	8009d52 <HAL_TIMEx_OCN_Start+0x16>
 8009dd2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	bf18      	it	ne
 8009ddc:	2301      	movne	r3, #1
 8009dde:	e7b8      	b.n	8009d52 <HAL_TIMEx_OCN_Start+0x16>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009de0:	2804      	cmp	r0, #4
 8009de2:	d005      	beq.n	8009df0 <HAL_TIMEx_OCN_Start+0xb4>
 8009de4:	2808      	cmp	r0, #8
 8009de6:	d007      	beq.n	8009df8 <HAL_TIMEx_OCN_Start+0xbc>
 8009de8:	2302      	movs	r3, #2
 8009dea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8009dee:	e7b7      	b.n	8009d60 <HAL_TIMEx_OCN_Start+0x24>
 8009df0:	2302      	movs	r3, #2
 8009df2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009df6:	e7b3      	b.n	8009d60 <HAL_TIMEx_OCN_Start+0x24>
 8009df8:	2302      	movs	r3, #2
 8009dfa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8009dfe:	e7af      	b.n	8009d60 <HAL_TIMEx_OCN_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e00:	689a      	ldr	r2, [r3, #8]
 8009e02:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e06:	2a06      	cmp	r2, #6
 8009e08:	d007      	beq.n	8009e1a <HAL_TIMEx_OCN_Start+0xde>
      __HAL_TIM_ENABLE(htim);
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	f042 0201 	orr.w	r2, r2, #1
 8009e10:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009e12:	2000      	movs	r0, #0
}
 8009e14:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009e16:	2001      	movs	r0, #1
 8009e18:	e7fc      	b.n	8009e14 <HAL_TIMEx_OCN_Start+0xd8>
  return HAL_OK;
 8009e1a:	2000      	movs	r0, #0
 8009e1c:	e7fa      	b.n	8009e14 <HAL_TIMEx_OCN_Start+0xd8>
 8009e1e:	bf00      	nop
 8009e20:	40012c00 	.word	0x40012c00

08009e24 <HAL_TIMEx_OCN_Stop>:
{
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	4604      	mov	r4, r0
 8009e28:	460d      	mov	r5, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	6800      	ldr	r0, [r0, #0]
 8009e2e:	f7ff fd05 	bl	800983c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 8009e32:	6823      	ldr	r3, [r4, #0]
 8009e34:	6a19      	ldr	r1, [r3, #32]
 8009e36:	f241 1211 	movw	r2, #4369	@ 0x1111
 8009e3a:	4211      	tst	r1, r2
 8009e3c:	d108      	bne.n	8009e50 <HAL_TIMEx_OCN_Stop+0x2c>
 8009e3e:	6a19      	ldr	r1, [r3, #32]
 8009e40:	f240 4244 	movw	r2, #1092	@ 0x444
 8009e44:	4211      	tst	r1, r2
 8009e46:	d103      	bne.n	8009e50 <HAL_TIMEx_OCN_Stop+0x2c>
 8009e48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009e4e:	645a      	str	r2, [r3, #68]	@ 0x44
  __HAL_TIM_DISABLE(htim);
 8009e50:	6823      	ldr	r3, [r4, #0]
 8009e52:	6a19      	ldr	r1, [r3, #32]
 8009e54:	f241 1211 	movw	r2, #4369	@ 0x1111
 8009e58:	4211      	tst	r1, r2
 8009e5a:	d108      	bne.n	8009e6e <HAL_TIMEx_OCN_Stop+0x4a>
 8009e5c:	6a19      	ldr	r1, [r3, #32]
 8009e5e:	f240 4244 	movw	r2, #1092	@ 0x444
 8009e62:	4211      	tst	r1, r2
 8009e64:	d103      	bne.n	8009e6e <HAL_TIMEx_OCN_Stop+0x4a>
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	f022 0201 	bic.w	r2, r2, #1
 8009e6c:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009e6e:	b925      	cbnz	r5, 8009e7a <HAL_TIMEx_OCN_Stop+0x56>
 8009e70:	2301      	movs	r3, #1
 8009e72:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 8009e76:	2000      	movs	r0, #0
 8009e78:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009e7a:	2d04      	cmp	r5, #4
 8009e7c:	d005      	beq.n	8009e8a <HAL_TIMEx_OCN_Stop+0x66>
 8009e7e:	2d08      	cmp	r5, #8
 8009e80:	d007      	beq.n	8009e92 <HAL_TIMEx_OCN_Stop+0x6e>
 8009e82:	2301      	movs	r3, #1
 8009e84:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8009e88:	e7f5      	b.n	8009e76 <HAL_TIMEx_OCN_Stop+0x52>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e90:	e7f1      	b.n	8009e76 <HAL_TIMEx_OCN_Stop+0x52>
 8009e92:	2301      	movs	r3, #1
 8009e94:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8009e98:	e7ed      	b.n	8009e76 <HAL_TIMEx_OCN_Stop+0x52>
	...

08009e9c <HAL_TIMEx_OCN_Start_IT>:
{
 8009e9c:	b510      	push	{r4, lr}
 8009e9e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009ea0:	4608      	mov	r0, r1
 8009ea2:	2900      	cmp	r1, #0
 8009ea4:	d13d      	bne.n	8009f22 <HAL_TIMEx_OCN_Start_IT+0x86>
 8009ea6:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	3b01      	subs	r3, #1
 8009eae:	bf18      	it	ne
 8009eb0:	2301      	movne	r3, #1
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d17a      	bne.n	8009fac <HAL_TIMEx_OCN_Start_IT+0x110>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d14c      	bne.n	8009f54 <HAL_TIMEx_OCN_Start_IT+0xb8>
 8009eba:	2302      	movs	r3, #2
 8009ebc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009ec0:	6822      	ldr	r2, [r4, #0]
 8009ec2:	68d3      	ldr	r3, [r2, #12]
 8009ec4:	f043 0302 	orr.w	r3, r3, #2
 8009ec8:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8009eca:	6822      	ldr	r2, [r4, #0]
 8009ecc:	68d3      	ldr	r3, [r2, #12]
 8009ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ed2:	60d3      	str	r3, [r2, #12]
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009ed4:	2204      	movs	r2, #4
 8009ed6:	4601      	mov	r1, r0
 8009ed8:	6820      	ldr	r0, [r4, #0]
 8009eda:	f7ff fcaf 	bl	800983c <TIM_CCxNChannelCmd>
    __HAL_TIM_MOE_ENABLE(htim);
 8009ede:	6822      	ldr	r2, [r4, #0]
 8009ee0:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8009ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ee6:	6453      	str	r3, [r2, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	4a32      	ldr	r2, [pc, #200]	@ (8009fb4 <HAL_TIMEx_OCN_Start_IT+0x118>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d052      	beq.n	8009f96 <HAL_TIMEx_OCN_Start_IT+0xfa>
 8009ef0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d04e      	beq.n	8009f96 <HAL_TIMEx_OCN_Start_IT+0xfa>
 8009ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009efc:	d04b      	beq.n	8009f96 <HAL_TIMEx_OCN_Start_IT+0xfa>
 8009efe:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d047      	beq.n	8009f96 <HAL_TIMEx_OCN_Start_IT+0xfa>
 8009f06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d043      	beq.n	8009f96 <HAL_TIMEx_OCN_Start_IT+0xfa>
 8009f0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d03f      	beq.n	8009f96 <HAL_TIMEx_OCN_Start_IT+0xfa>
      __HAL_TIM_ENABLE(htim);
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	f042 0201 	orr.w	r2, r2, #1
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	2000      	movs	r0, #0
 8009f20:	e043      	b.n	8009faa <HAL_TIMEx_OCN_Start_IT+0x10e>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009f22:	2904      	cmp	r1, #4
 8009f24:	d008      	beq.n	8009f38 <HAL_TIMEx_OCN_Start_IT+0x9c>
 8009f26:	2908      	cmp	r1, #8
 8009f28:	d00d      	beq.n	8009f46 <HAL_TIMEx_OCN_Start_IT+0xaa>
 8009f2a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	3b01      	subs	r3, #1
 8009f32:	bf18      	it	ne
 8009f34:	2301      	movne	r3, #1
 8009f36:	e7bc      	b.n	8009eb2 <HAL_TIMEx_OCN_Start_IT+0x16>
 8009f38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	bf18      	it	ne
 8009f42:	2301      	movne	r3, #1
 8009f44:	e7b5      	b.n	8009eb2 <HAL_TIMEx_OCN_Start_IT+0x16>
 8009f46:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	bf18      	it	ne
 8009f50:	2301      	movne	r3, #1
 8009f52:	e7ae      	b.n	8009eb2 <HAL_TIMEx_OCN_Start_IT+0x16>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f54:	2804      	cmp	r0, #4
 8009f56:	d00c      	beq.n	8009f72 <HAL_TIMEx_OCN_Start_IT+0xd6>
 8009f58:	2808      	cmp	r0, #8
 8009f5a:	d013      	beq.n	8009f84 <HAL_TIMEx_OCN_Start_IT+0xe8>
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  switch (Channel)
 8009f62:	2804      	cmp	r0, #4
 8009f64:	d008      	beq.n	8009f78 <HAL_TIMEx_OCN_Start_IT+0xdc>
 8009f66:	2808      	cmp	r0, #8
 8009f68:	d00f      	beq.n	8009f8a <HAL_TIMEx_OCN_Start_IT+0xee>
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d0a8      	beq.n	8009ec0 <HAL_TIMEx_OCN_Start_IT+0x24>
 8009f6e:	2001      	movs	r0, #1
 8009f70:	e01b      	b.n	8009faa <HAL_TIMEx_OCN_Start_IT+0x10e>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f72:	2302      	movs	r3, #2
 8009f74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009f78:	6822      	ldr	r2, [r4, #0]
 8009f7a:	68d3      	ldr	r3, [r2, #12]
 8009f7c:	f043 0304 	orr.w	r3, r3, #4
 8009f80:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8009f82:	e7a2      	b.n	8009eca <HAL_TIMEx_OCN_Start_IT+0x2e>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f84:	2302      	movs	r3, #2
 8009f86:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009f8a:	6822      	ldr	r2, [r4, #0]
 8009f8c:	68d3      	ldr	r3, [r2, #12]
 8009f8e:	f043 0308 	orr.w	r3, r3, #8
 8009f92:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8009f94:	e799      	b.n	8009eca <HAL_TIMEx_OCN_Start_IT+0x2e>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f96:	689a      	ldr	r2, [r3, #8]
 8009f98:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f9c:	2a06      	cmp	r2, #6
 8009f9e:	d007      	beq.n	8009fb0 <HAL_TIMEx_OCN_Start_IT+0x114>
        __HAL_TIM_ENABLE(htim);
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	f042 0201 	orr.w	r2, r2, #1
 8009fa6:	601a      	str	r2, [r3, #0]
 8009fa8:	2000      	movs	r0, #0
}
 8009faa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009fac:	2001      	movs	r0, #1
 8009fae:	e7fc      	b.n	8009faa <HAL_TIMEx_OCN_Start_IT+0x10e>
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	e7fa      	b.n	8009faa <HAL_TIMEx_OCN_Start_IT+0x10e>
 8009fb4:	40012c00 	.word	0x40012c00

08009fb8 <HAL_TIMEx_OCN_Stop_IT>:
{
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	4605      	mov	r5, r0
 8009fbc:	460c      	mov	r4, r1
  switch (Channel)
 8009fbe:	2904      	cmp	r1, #4
 8009fc0:	d03c      	beq.n	800a03c <HAL_TIMEx_OCN_Stop_IT+0x84>
 8009fc2:	2908      	cmp	r1, #8
 8009fc4:	d040      	beq.n	800a048 <HAL_TIMEx_OCN_Stop_IT+0x90>
 8009fc6:	b109      	cbz	r1, 8009fcc <HAL_TIMEx_OCN_Stop_IT+0x14>
 8009fc8:	2001      	movs	r0, #1
}
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009fcc:	6802      	ldr	r2, [r0, #0]
 8009fce:	68d3      	ldr	r3, [r2, #12]
 8009fd0:	f023 0302 	bic.w	r3, r3, #2
 8009fd4:	60d3      	str	r3, [r2, #12]
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	4621      	mov	r1, r4
 8009fda:	6828      	ldr	r0, [r5, #0]
 8009fdc:	f7ff fc2e 	bl	800983c <TIM_CCxNChannelCmd>
    tmpccer = htim->Instance->CCER;
 8009fe0:	682b      	ldr	r3, [r5, #0]
 8009fe2:	6a19      	ldr	r1, [r3, #32]
    if ((tmpccer & TIM_CCER_CCxNE_MASK) == (uint32_t)RESET)
 8009fe4:	f240 4244 	movw	r2, #1092	@ 0x444
 8009fe8:	4211      	tst	r1, r2
 8009fea:	d103      	bne.n	8009ff4 <HAL_TIMEx_OCN_Stop_IT+0x3c>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8009fec:	68da      	ldr	r2, [r3, #12]
 8009fee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009ff2:	60da      	str	r2, [r3, #12]
    __HAL_TIM_MOE_DISABLE(htim);
 8009ff4:	682b      	ldr	r3, [r5, #0]
 8009ff6:	6a19      	ldr	r1, [r3, #32]
 8009ff8:	f241 1211 	movw	r2, #4369	@ 0x1111
 8009ffc:	4211      	tst	r1, r2
 8009ffe:	d108      	bne.n	800a012 <HAL_TIMEx_OCN_Stop_IT+0x5a>
 800a000:	6a19      	ldr	r1, [r3, #32]
 800a002:	f240 4244 	movw	r2, #1092	@ 0x444
 800a006:	4211      	tst	r1, r2
 800a008:	d103      	bne.n	800a012 <HAL_TIMEx_OCN_Stop_IT+0x5a>
 800a00a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a00c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a010:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_TIM_DISABLE(htim);
 800a012:	682b      	ldr	r3, [r5, #0]
 800a014:	6a19      	ldr	r1, [r3, #32]
 800a016:	f241 1211 	movw	r2, #4369	@ 0x1111
 800a01a:	4211      	tst	r1, r2
 800a01c:	d108      	bne.n	800a030 <HAL_TIMEx_OCN_Stop_IT+0x78>
 800a01e:	6a19      	ldr	r1, [r3, #32]
 800a020:	f240 4244 	movw	r2, #1092	@ 0x444
 800a024:	4211      	tst	r1, r2
 800a026:	d103      	bne.n	800a030 <HAL_TIMEx_OCN_Stop_IT+0x78>
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	f022 0201 	bic.w	r2, r2, #1
 800a02e:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a030:	b984      	cbnz	r4, 800a054 <HAL_TIMEx_OCN_Stop_IT+0x9c>
 800a032:	2301      	movs	r3, #1
 800a034:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
 800a038:	2000      	movs	r0, #0
 800a03a:	e7c6      	b.n	8009fca <HAL_TIMEx_OCN_Stop_IT+0x12>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a03c:	6802      	ldr	r2, [r0, #0]
 800a03e:	68d3      	ldr	r3, [r2, #12]
 800a040:	f023 0304 	bic.w	r3, r3, #4
 800a044:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800a046:	e7c6      	b.n	8009fd6 <HAL_TIMEx_OCN_Stop_IT+0x1e>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a048:	6802      	ldr	r2, [r0, #0]
 800a04a:	68d3      	ldr	r3, [r2, #12]
 800a04c:	f023 0308 	bic.w	r3, r3, #8
 800a050:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800a052:	e7c0      	b.n	8009fd6 <HAL_TIMEx_OCN_Stop_IT+0x1e>
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a054:	2c04      	cmp	r4, #4
 800a056:	d006      	beq.n	800a066 <HAL_TIMEx_OCN_Stop_IT+0xae>
 800a058:	2c08      	cmp	r4, #8
 800a05a:	d009      	beq.n	800a070 <HAL_TIMEx_OCN_Stop_IT+0xb8>
 800a05c:	2301      	movs	r3, #1
 800a05e:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
 800a062:	2000      	movs	r0, #0
 800a064:	e7b1      	b.n	8009fca <HAL_TIMEx_OCN_Stop_IT+0x12>
 800a066:	2301      	movs	r3, #1
 800a068:	f885 3043 	strb.w	r3, [r5, #67]	@ 0x43
 800a06c:	2000      	movs	r0, #0
 800a06e:	e7ac      	b.n	8009fca <HAL_TIMEx_OCN_Stop_IT+0x12>
 800a070:	2301      	movs	r3, #1
 800a072:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
 800a076:	2000      	movs	r0, #0
 800a078:	e7a7      	b.n	8009fca <HAL_TIMEx_OCN_Stop_IT+0x12>
	...

0800a07c <HAL_TIMEx_OCN_Start_DMA>:
{
 800a07c:	b570      	push	{r4, r5, r6, lr}
 800a07e:	4604      	mov	r4, r0
 800a080:	4616      	mov	r6, r2
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800a082:	460d      	mov	r5, r1
 800a084:	2900      	cmp	r1, #0
 800a086:	d164      	bne.n	800a152 <HAL_TIMEx_OCN_Start_DMA+0xd6>
 800a088:	f890 0042 	ldrb.w	r0, [r0, #66]	@ 0x42
 800a08c:	b2c0      	uxtb	r0, r0
 800a08e:	2802      	cmp	r0, #2
 800a090:	bf14      	ite	ne
 800a092:	2000      	movne	r0, #0
 800a094:	2001      	moveq	r0, #1
 800a096:	2800      	cmp	r0, #0
 800a098:	f040 80e1 	bne.w	800a25e <HAL_TIMEx_OCN_Start_DMA+0x1e2>
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800a09c:	2d00      	cmp	r5, #0
 800a09e:	d174      	bne.n	800a18a <HAL_TIMEx_OCN_Start_DMA+0x10e>
 800a0a0:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 800a0a4:	b2d2      	uxtb	r2, r2
 800a0a6:	2a01      	cmp	r2, #1
 800a0a8:	bf14      	ite	ne
 800a0aa:	2200      	movne	r2, #0
 800a0ac:	2201      	moveq	r2, #1
 800a0ae:	2a00      	cmp	r2, #0
 800a0b0:	f000 80d7 	beq.w	800a262 <HAL_TIMEx_OCN_Start_DMA+0x1e6>
    if ((pData == NULL) || (Length == 0U))
 800a0b4:	2e00      	cmp	r6, #0
 800a0b6:	f000 80d6 	beq.w	800a266 <HAL_TIMEx_OCN_Start_DMA+0x1ea>
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f000 80d5 	beq.w	800a26a <HAL_TIMEx_OCN_Start_DMA+0x1ee>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0c0:	2d00      	cmp	r5, #0
 800a0c2:	d17e      	bne.n	800a1c2 <HAL_TIMEx_OCN_Start_DMA+0x146>
 800a0c4:	2202      	movs	r2, #2
 800a0c6:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800a0ca:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a0cc:	496c      	ldr	r1, [pc, #432]	@ (800a280 <HAL_TIMEx_OCN_Start_DMA+0x204>)
 800a0ce:	6291      	str	r1, [r2, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a0d0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a0d2:	496c      	ldr	r1, [pc, #432]	@ (800a284 <HAL_TIMEx_OCN_Start_DMA+0x208>)
 800a0d4:	62d1      	str	r1, [r2, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800a0d6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a0d8:	496b      	ldr	r1, [pc, #428]	@ (800a288 <HAL_TIMEx_OCN_Start_DMA+0x20c>)
 800a0da:	6311      	str	r1, [r2, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800a0dc:	6822      	ldr	r2, [r4, #0]
 800a0de:	3234      	adds	r2, #52	@ 0x34
 800a0e0:	4631      	mov	r1, r6
 800a0e2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a0e4:	f7f9 fc23 	bl	800392e <HAL_DMA_Start_IT>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	f040 80c0 	bne.w	800a26e <HAL_TIMEx_OCN_Start_DMA+0x1f2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800a0ee:	6822      	ldr	r2, [r4, #0]
 800a0f0:	68d3      	ldr	r3, [r2, #12]
 800a0f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a0f6:	60d3      	str	r3, [r2, #12]
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a0f8:	2204      	movs	r2, #4
 800a0fa:	4629      	mov	r1, r5
 800a0fc:	6820      	ldr	r0, [r4, #0]
 800a0fe:	f7ff fb9d 	bl	800983c <TIM_CCxNChannelCmd>
    __HAL_TIM_MOE_ENABLE(htim);
 800a102:	6822      	ldr	r2, [r4, #0]
 800a104:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800a106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a10a:	6453      	str	r3, [r2, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a10c:	6823      	ldr	r3, [r4, #0]
 800a10e:	4a5f      	ldr	r2, [pc, #380]	@ (800a28c <HAL_TIMEx_OCN_Start_DMA+0x210>)
 800a110:	4293      	cmp	r3, r2
 800a112:	f000 8099 	beq.w	800a248 <HAL_TIMEx_OCN_Start_DMA+0x1cc>
 800a116:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a11a:	4293      	cmp	r3, r2
 800a11c:	f000 8094 	beq.w	800a248 <HAL_TIMEx_OCN_Start_DMA+0x1cc>
 800a120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a124:	f000 8090 	beq.w	800a248 <HAL_TIMEx_OCN_Start_DMA+0x1cc>
 800a128:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800a12c:	4293      	cmp	r3, r2
 800a12e:	f000 808b 	beq.w	800a248 <HAL_TIMEx_OCN_Start_DMA+0x1cc>
 800a132:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a136:	4293      	cmp	r3, r2
 800a138:	f000 8086 	beq.w	800a248 <HAL_TIMEx_OCN_Start_DMA+0x1cc>
 800a13c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a140:	4293      	cmp	r3, r2
 800a142:	f000 8081 	beq.w	800a248 <HAL_TIMEx_OCN_Start_DMA+0x1cc>
      __HAL_TIM_ENABLE(htim);
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	f042 0201 	orr.w	r2, r2, #1
 800a14c:	601a      	str	r2, [r3, #0]
 800a14e:	2000      	movs	r0, #0
 800a150:	e088      	b.n	800a264 <HAL_TIMEx_OCN_Start_DMA+0x1e8>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800a152:	2904      	cmp	r1, #4
 800a154:	d009      	beq.n	800a16a <HAL_TIMEx_OCN_Start_DMA+0xee>
 800a156:	2908      	cmp	r1, #8
 800a158:	d00f      	beq.n	800a17a <HAL_TIMEx_OCN_Start_DMA+0xfe>
 800a15a:	f890 0045 	ldrb.w	r0, [r0, #69]	@ 0x45
 800a15e:	b2c0      	uxtb	r0, r0
 800a160:	2802      	cmp	r0, #2
 800a162:	bf14      	ite	ne
 800a164:	2000      	movne	r0, #0
 800a166:	2001      	moveq	r0, #1
 800a168:	e795      	b.n	800a096 <HAL_TIMEx_OCN_Start_DMA+0x1a>
 800a16a:	f890 0043 	ldrb.w	r0, [r0, #67]	@ 0x43
 800a16e:	b2c0      	uxtb	r0, r0
 800a170:	2802      	cmp	r0, #2
 800a172:	bf14      	ite	ne
 800a174:	2000      	movne	r0, #0
 800a176:	2001      	moveq	r0, #1
 800a178:	e78d      	b.n	800a096 <HAL_TIMEx_OCN_Start_DMA+0x1a>
 800a17a:	f890 0044 	ldrb.w	r0, [r0, #68]	@ 0x44
 800a17e:	b2c0      	uxtb	r0, r0
 800a180:	2802      	cmp	r0, #2
 800a182:	bf14      	ite	ne
 800a184:	2000      	movne	r0, #0
 800a186:	2001      	moveq	r0, #1
 800a188:	e785      	b.n	800a096 <HAL_TIMEx_OCN_Start_DMA+0x1a>
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800a18a:	2d04      	cmp	r5, #4
 800a18c:	d009      	beq.n	800a1a2 <HAL_TIMEx_OCN_Start_DMA+0x126>
 800a18e:	2d08      	cmp	r5, #8
 800a190:	d00f      	beq.n	800a1b2 <HAL_TIMEx_OCN_Start_DMA+0x136>
 800a192:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 800a196:	b2d2      	uxtb	r2, r2
 800a198:	2a01      	cmp	r2, #1
 800a19a:	bf14      	ite	ne
 800a19c:	2200      	movne	r2, #0
 800a19e:	2201      	moveq	r2, #1
 800a1a0:	e785      	b.n	800a0ae <HAL_TIMEx_OCN_Start_DMA+0x32>
 800a1a2:	f894 2043 	ldrb.w	r2, [r4, #67]	@ 0x43
 800a1a6:	b2d2      	uxtb	r2, r2
 800a1a8:	2a01      	cmp	r2, #1
 800a1aa:	bf14      	ite	ne
 800a1ac:	2200      	movne	r2, #0
 800a1ae:	2201      	moveq	r2, #1
 800a1b0:	e77d      	b.n	800a0ae <HAL_TIMEx_OCN_Start_DMA+0x32>
 800a1b2:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 800a1b6:	b2d2      	uxtb	r2, r2
 800a1b8:	2a01      	cmp	r2, #1
 800a1ba:	bf14      	ite	ne
 800a1bc:	2200      	movne	r2, #0
 800a1be:	2201      	moveq	r2, #1
 800a1c0:	e775      	b.n	800a0ae <HAL_TIMEx_OCN_Start_DMA+0x32>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1c2:	2d04      	cmp	r5, #4
 800a1c4:	d00d      	beq.n	800a1e2 <HAL_TIMEx_OCN_Start_DMA+0x166>
 800a1c6:	2d08      	cmp	r5, #8
 800a1c8:	d025      	beq.n	800a216 <HAL_TIMEx_OCN_Start_DMA+0x19a>
 800a1ca:	2202      	movs	r2, #2
 800a1cc:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
  switch (Channel)
 800a1d0:	2d04      	cmp	r5, #4
 800a1d2:	d009      	beq.n	800a1e8 <HAL_TIMEx_OCN_Start_DMA+0x16c>
 800a1d4:	2d08      	cmp	r5, #8
 800a1d6:	d021      	beq.n	800a21c <HAL_TIMEx_OCN_Start_DMA+0x1a0>
 800a1d8:	2d00      	cmp	r5, #0
 800a1da:	f43f af76 	beq.w	800a0ca <HAL_TIMEx_OCN_Start_DMA+0x4e>
 800a1de:	2001      	movs	r0, #1
 800a1e0:	e040      	b.n	800a264 <HAL_TIMEx_OCN_Start_DMA+0x1e8>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800a1e8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a1ea:	4925      	ldr	r1, [pc, #148]	@ (800a280 <HAL_TIMEx_OCN_Start_DMA+0x204>)
 800a1ec:	6291      	str	r1, [r2, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a1ee:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a1f0:	4924      	ldr	r1, [pc, #144]	@ (800a284 <HAL_TIMEx_OCN_Start_DMA+0x208>)
 800a1f2:	62d1      	str	r1, [r2, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800a1f4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a1f6:	4924      	ldr	r1, [pc, #144]	@ (800a288 <HAL_TIMEx_OCN_Start_DMA+0x20c>)
 800a1f8:	6311      	str	r1, [r2, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800a1fa:	6822      	ldr	r2, [r4, #0]
 800a1fc:	3238      	adds	r2, #56	@ 0x38
 800a1fe:	4631      	mov	r1, r6
 800a200:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a202:	f7f9 fb94 	bl	800392e <HAL_DMA_Start_IT>
 800a206:	2800      	cmp	r0, #0
 800a208:	d133      	bne.n	800a272 <HAL_TIMEx_OCN_Start_DMA+0x1f6>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800a20a:	6822      	ldr	r2, [r4, #0]
 800a20c:	68d3      	ldr	r3, [r2, #12]
 800a20e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a212:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800a214:	e770      	b.n	800a0f8 <HAL_TIMEx_OCN_Start_DMA+0x7c>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a216:	2202      	movs	r2, #2
 800a218:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800a21c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a21e:	4918      	ldr	r1, [pc, #96]	@ (800a280 <HAL_TIMEx_OCN_Start_DMA+0x204>)
 800a220:	6291      	str	r1, [r2, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a222:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a224:	4917      	ldr	r1, [pc, #92]	@ (800a284 <HAL_TIMEx_OCN_Start_DMA+0x208>)
 800a226:	62d1      	str	r1, [r2, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800a228:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a22a:	4917      	ldr	r1, [pc, #92]	@ (800a288 <HAL_TIMEx_OCN_Start_DMA+0x20c>)
 800a22c:	6311      	str	r1, [r2, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800a22e:	6822      	ldr	r2, [r4, #0]
 800a230:	323c      	adds	r2, #60	@ 0x3c
 800a232:	4631      	mov	r1, r6
 800a234:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800a236:	f7f9 fb7a 	bl	800392e <HAL_DMA_Start_IT>
 800a23a:	b9e0      	cbnz	r0, 800a276 <HAL_TIMEx_OCN_Start_DMA+0x1fa>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800a23c:	6822      	ldr	r2, [r4, #0]
 800a23e:	68d3      	ldr	r3, [r2, #12]
 800a240:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a244:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800a246:	e757      	b.n	800a0f8 <HAL_TIMEx_OCN_Start_DMA+0x7c>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a248:	689a      	ldr	r2, [r3, #8]
 800a24a:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a24e:	2a06      	cmp	r2, #6
 800a250:	d013      	beq.n	800a27a <HAL_TIMEx_OCN_Start_DMA+0x1fe>
        __HAL_TIM_ENABLE(htim);
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	f042 0201 	orr.w	r2, r2, #1
 800a258:	601a      	str	r2, [r3, #0]
 800a25a:	2000      	movs	r0, #0
 800a25c:	e002      	b.n	800a264 <HAL_TIMEx_OCN_Start_DMA+0x1e8>
    return HAL_BUSY;
 800a25e:	2002      	movs	r0, #2
 800a260:	e000      	b.n	800a264 <HAL_TIMEx_OCN_Start_DMA+0x1e8>
    return HAL_ERROR;
 800a262:	2001      	movs	r0, #1
}
 800a264:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800a266:	2001      	movs	r0, #1
 800a268:	e7fc      	b.n	800a264 <HAL_TIMEx_OCN_Start_DMA+0x1e8>
 800a26a:	2001      	movs	r0, #1
 800a26c:	e7fa      	b.n	800a264 <HAL_TIMEx_OCN_Start_DMA+0x1e8>
        return HAL_ERROR;
 800a26e:	2001      	movs	r0, #1
 800a270:	e7f8      	b.n	800a264 <HAL_TIMEx_OCN_Start_DMA+0x1e8>
        return HAL_ERROR;
 800a272:	2001      	movs	r0, #1
 800a274:	e7f6      	b.n	800a264 <HAL_TIMEx_OCN_Start_DMA+0x1e8>
        return HAL_ERROR;
 800a276:	2001      	movs	r0, #1
 800a278:	e7f4      	b.n	800a264 <HAL_TIMEx_OCN_Start_DMA+0x1e8>
 800a27a:	2000      	movs	r0, #0
 800a27c:	e7f2      	b.n	800a264 <HAL_TIMEx_OCN_Start_DMA+0x1e8>
 800a27e:	bf00      	nop
 800a280:	0800989f 	.word	0x0800989f
 800a284:	08006d9b 	.word	0x08006d9b
 800a288:	0800985b 	.word	0x0800985b
 800a28c:	40012c00 	.word	0x40012c00

0800a290 <HAL_TIMEx_OCN_Stop_DMA>:
{
 800a290:	b538      	push	{r3, r4, r5, lr}
 800a292:	4605      	mov	r5, r0
 800a294:	460c      	mov	r4, r1
  switch (Channel)
 800a296:	2904      	cmp	r1, #4
 800a298:	d035      	beq.n	800a306 <HAL_TIMEx_OCN_Stop_DMA+0x76>
 800a29a:	2908      	cmp	r1, #8
 800a29c:	d03c      	beq.n	800a318 <HAL_TIMEx_OCN_Stop_DMA+0x88>
 800a29e:	b109      	cbz	r1, 800a2a4 <HAL_TIMEx_OCN_Stop_DMA+0x14>
 800a2a0:	2001      	movs	r0, #1
}
 800a2a2:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800a2a4:	6802      	ldr	r2, [r0, #0]
 800a2a6:	68d3      	ldr	r3, [r2, #12]
 800a2a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a2ac:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800a2ae:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800a2b0:	f7f9 fb9c 	bl	80039ec <HAL_DMA_Abort_IT>
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	4621      	mov	r1, r4
 800a2b8:	6828      	ldr	r0, [r5, #0]
 800a2ba:	f7ff fabf 	bl	800983c <TIM_CCxNChannelCmd>
    __HAL_TIM_MOE_DISABLE(htim);
 800a2be:	682b      	ldr	r3, [r5, #0]
 800a2c0:	6a19      	ldr	r1, [r3, #32]
 800a2c2:	f241 1211 	movw	r2, #4369	@ 0x1111
 800a2c6:	4211      	tst	r1, r2
 800a2c8:	d108      	bne.n	800a2dc <HAL_TIMEx_OCN_Stop_DMA+0x4c>
 800a2ca:	6a19      	ldr	r1, [r3, #32]
 800a2cc:	f240 4244 	movw	r2, #1092	@ 0x444
 800a2d0:	4211      	tst	r1, r2
 800a2d2:	d103      	bne.n	800a2dc <HAL_TIMEx_OCN_Stop_DMA+0x4c>
 800a2d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a2da:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_TIM_DISABLE(htim);
 800a2dc:	682b      	ldr	r3, [r5, #0]
 800a2de:	6a19      	ldr	r1, [r3, #32]
 800a2e0:	f241 1211 	movw	r2, #4369	@ 0x1111
 800a2e4:	4211      	tst	r1, r2
 800a2e6:	d108      	bne.n	800a2fa <HAL_TIMEx_OCN_Stop_DMA+0x6a>
 800a2e8:	6a19      	ldr	r1, [r3, #32]
 800a2ea:	f240 4244 	movw	r2, #1092	@ 0x444
 800a2ee:	4211      	tst	r1, r2
 800a2f0:	d103      	bne.n	800a2fa <HAL_TIMEx_OCN_Stop_DMA+0x6a>
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	f022 0201 	bic.w	r2, r2, #1
 800a2f8:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a2fa:	b9b4      	cbnz	r4, 800a32a <HAL_TIMEx_OCN_Stop_DMA+0x9a>
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
 800a302:	2000      	movs	r0, #0
 800a304:	e7cd      	b.n	800a2a2 <HAL_TIMEx_OCN_Stop_DMA+0x12>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800a306:	6802      	ldr	r2, [r0, #0]
 800a308:	68d3      	ldr	r3, [r2, #12]
 800a30a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a30e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800a310:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800a312:	f7f9 fb6b 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800a316:	e7cd      	b.n	800a2b4 <HAL_TIMEx_OCN_Stop_DMA+0x24>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800a318:	6802      	ldr	r2, [r0, #0]
 800a31a:	68d3      	ldr	r3, [r2, #12]
 800a31c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a320:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800a322:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800a324:	f7f9 fb62 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800a328:	e7c4      	b.n	800a2b4 <HAL_TIMEx_OCN_Stop_DMA+0x24>
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a32a:	2c04      	cmp	r4, #4
 800a32c:	d006      	beq.n	800a33c <HAL_TIMEx_OCN_Stop_DMA+0xac>
 800a32e:	2c08      	cmp	r4, #8
 800a330:	d009      	beq.n	800a346 <HAL_TIMEx_OCN_Stop_DMA+0xb6>
 800a332:	2301      	movs	r3, #1
 800a334:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
 800a338:	2000      	movs	r0, #0
 800a33a:	e7b2      	b.n	800a2a2 <HAL_TIMEx_OCN_Stop_DMA+0x12>
 800a33c:	2301      	movs	r3, #1
 800a33e:	f885 3043 	strb.w	r3, [r5, #67]	@ 0x43
 800a342:	2000      	movs	r0, #0
 800a344:	e7ad      	b.n	800a2a2 <HAL_TIMEx_OCN_Stop_DMA+0x12>
 800a346:	2301      	movs	r3, #1
 800a348:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
 800a34c:	2000      	movs	r0, #0
 800a34e:	e7a8      	b.n	800a2a2 <HAL_TIMEx_OCN_Stop_DMA+0x12>

0800a350 <HAL_TIMEx_PWMN_Start>:
{
 800a350:	b510      	push	{r4, lr}
 800a352:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a354:	4608      	mov	r0, r1
 800a356:	2900      	cmp	r1, #0
 800a358:	d133      	bne.n	800a3c2 <HAL_TIMEx_PWMN_Start+0x72>
 800a35a:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	3b01      	subs	r3, #1
 800a362:	bf18      	it	ne
 800a364:	2301      	movne	r3, #1
 800a366:	2b00      	cmp	r3, #0
 800a368:	d15f      	bne.n	800a42a <HAL_TIMEx_PWMN_Start+0xda>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a36a:	2800      	cmp	r0, #0
 800a36c:	d142      	bne.n	800a3f4 <HAL_TIMEx_PWMN_Start+0xa4>
 800a36e:	2302      	movs	r3, #2
 800a370:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a374:	2204      	movs	r2, #4
 800a376:	4601      	mov	r1, r0
 800a378:	6820      	ldr	r0, [r4, #0]
 800a37a:	f7ff fa5f 	bl	800983c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800a37e:	6822      	ldr	r2, [r4, #0]
 800a380:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800a382:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a386:	6453      	str	r3, [r2, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a388:	6823      	ldr	r3, [r4, #0]
 800a38a:	4a2a      	ldr	r2, [pc, #168]	@ (800a434 <HAL_TIMEx_PWMN_Start+0xe4>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d041      	beq.n	800a414 <HAL_TIMEx_PWMN_Start+0xc4>
 800a390:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a394:	4293      	cmp	r3, r2
 800a396:	d03d      	beq.n	800a414 <HAL_TIMEx_PWMN_Start+0xc4>
 800a398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a39c:	d03a      	beq.n	800a414 <HAL_TIMEx_PWMN_Start+0xc4>
 800a39e:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d036      	beq.n	800a414 <HAL_TIMEx_PWMN_Start+0xc4>
 800a3a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d032      	beq.n	800a414 <HAL_TIMEx_PWMN_Start+0xc4>
 800a3ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d02e      	beq.n	800a414 <HAL_TIMEx_PWMN_Start+0xc4>
    __HAL_TIM_ENABLE(htim);
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	f042 0201 	orr.w	r2, r2, #1
 800a3bc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a3be:	2000      	movs	r0, #0
 800a3c0:	e032      	b.n	800a428 <HAL_TIMEx_PWMN_Start+0xd8>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a3c2:	2904      	cmp	r1, #4
 800a3c4:	d008      	beq.n	800a3d8 <HAL_TIMEx_PWMN_Start+0x88>
 800a3c6:	2908      	cmp	r1, #8
 800a3c8:	d00d      	beq.n	800a3e6 <HAL_TIMEx_PWMN_Start+0x96>
 800a3ca:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	bf18      	it	ne
 800a3d4:	2301      	movne	r3, #1
 800a3d6:	e7c6      	b.n	800a366 <HAL_TIMEx_PWMN_Start+0x16>
 800a3d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	bf18      	it	ne
 800a3e2:	2301      	movne	r3, #1
 800a3e4:	e7bf      	b.n	800a366 <HAL_TIMEx_PWMN_Start+0x16>
 800a3e6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	bf18      	it	ne
 800a3f0:	2301      	movne	r3, #1
 800a3f2:	e7b8      	b.n	800a366 <HAL_TIMEx_PWMN_Start+0x16>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3f4:	2804      	cmp	r0, #4
 800a3f6:	d005      	beq.n	800a404 <HAL_TIMEx_PWMN_Start+0xb4>
 800a3f8:	2808      	cmp	r0, #8
 800a3fa:	d007      	beq.n	800a40c <HAL_TIMEx_PWMN_Start+0xbc>
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800a402:	e7b7      	b.n	800a374 <HAL_TIMEx_PWMN_Start+0x24>
 800a404:	2302      	movs	r3, #2
 800a406:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a40a:	e7b3      	b.n	800a374 <HAL_TIMEx_PWMN_Start+0x24>
 800a40c:	2302      	movs	r3, #2
 800a40e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800a412:	e7af      	b.n	800a374 <HAL_TIMEx_PWMN_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a414:	689a      	ldr	r2, [r3, #8]
 800a416:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a41a:	2a06      	cmp	r2, #6
 800a41c:	d007      	beq.n	800a42e <HAL_TIMEx_PWMN_Start+0xde>
      __HAL_TIM_ENABLE(htim);
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	f042 0201 	orr.w	r2, r2, #1
 800a424:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a426:	2000      	movs	r0, #0
}
 800a428:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a42a:	2001      	movs	r0, #1
 800a42c:	e7fc      	b.n	800a428 <HAL_TIMEx_PWMN_Start+0xd8>
  return HAL_OK;
 800a42e:	2000      	movs	r0, #0
 800a430:	e7fa      	b.n	800a428 <HAL_TIMEx_PWMN_Start+0xd8>
 800a432:	bf00      	nop
 800a434:	40012c00 	.word	0x40012c00

0800a438 <HAL_TIMEx_PWMN_Stop>:
{
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	4604      	mov	r4, r0
 800a43c:	460d      	mov	r5, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a43e:	2200      	movs	r2, #0
 800a440:	6800      	ldr	r0, [r0, #0]
 800a442:	f7ff f9fb 	bl	800983c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800a446:	6823      	ldr	r3, [r4, #0]
 800a448:	6a19      	ldr	r1, [r3, #32]
 800a44a:	f241 1211 	movw	r2, #4369	@ 0x1111
 800a44e:	4211      	tst	r1, r2
 800a450:	d108      	bne.n	800a464 <HAL_TIMEx_PWMN_Stop+0x2c>
 800a452:	6a19      	ldr	r1, [r3, #32]
 800a454:	f240 4244 	movw	r2, #1092	@ 0x444
 800a458:	4211      	tst	r1, r2
 800a45a:	d103      	bne.n	800a464 <HAL_TIMEx_PWMN_Stop+0x2c>
 800a45c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a45e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a462:	645a      	str	r2, [r3, #68]	@ 0x44
  __HAL_TIM_DISABLE(htim);
 800a464:	6823      	ldr	r3, [r4, #0]
 800a466:	6a19      	ldr	r1, [r3, #32]
 800a468:	f241 1211 	movw	r2, #4369	@ 0x1111
 800a46c:	4211      	tst	r1, r2
 800a46e:	d108      	bne.n	800a482 <HAL_TIMEx_PWMN_Stop+0x4a>
 800a470:	6a19      	ldr	r1, [r3, #32]
 800a472:	f240 4244 	movw	r2, #1092	@ 0x444
 800a476:	4211      	tst	r1, r2
 800a478:	d103      	bne.n	800a482 <HAL_TIMEx_PWMN_Stop+0x4a>
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	f022 0201 	bic.w	r2, r2, #1
 800a480:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a482:	b925      	cbnz	r5, 800a48e <HAL_TIMEx_PWMN_Stop+0x56>
 800a484:	2301      	movs	r3, #1
 800a486:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 800a48a:	2000      	movs	r0, #0
 800a48c:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a48e:	2d04      	cmp	r5, #4
 800a490:	d005      	beq.n	800a49e <HAL_TIMEx_PWMN_Stop+0x66>
 800a492:	2d08      	cmp	r5, #8
 800a494:	d007      	beq.n	800a4a6 <HAL_TIMEx_PWMN_Stop+0x6e>
 800a496:	2301      	movs	r3, #1
 800a498:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800a49c:	e7f5      	b.n	800a48a <HAL_TIMEx_PWMN_Stop+0x52>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4a4:	e7f1      	b.n	800a48a <HAL_TIMEx_PWMN_Stop+0x52>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800a4ac:	e7ed      	b.n	800a48a <HAL_TIMEx_PWMN_Stop+0x52>
	...

0800a4b0 <HAL_TIMEx_PWMN_Start_IT>:
{
 800a4b0:	b510      	push	{r4, lr}
 800a4b2:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a4b4:	4608      	mov	r0, r1
 800a4b6:	2900      	cmp	r1, #0
 800a4b8:	d13d      	bne.n	800a536 <HAL_TIMEx_PWMN_Start_IT+0x86>
 800a4ba:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	bf18      	it	ne
 800a4c4:	2301      	movne	r3, #1
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d17a      	bne.n	800a5c0 <HAL_TIMEx_PWMN_Start_IT+0x110>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	d14c      	bne.n	800a568 <HAL_TIMEx_PWMN_Start_IT+0xb8>
 800a4ce:	2302      	movs	r3, #2
 800a4d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a4d4:	6822      	ldr	r2, [r4, #0]
 800a4d6:	68d3      	ldr	r3, [r2, #12]
 800a4d8:	f043 0302 	orr.w	r3, r3, #2
 800a4dc:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800a4de:	6822      	ldr	r2, [r4, #0]
 800a4e0:	68d3      	ldr	r3, [r2, #12]
 800a4e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4e6:	60d3      	str	r3, [r2, #12]
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a4e8:	2204      	movs	r2, #4
 800a4ea:	4601      	mov	r1, r0
 800a4ec:	6820      	ldr	r0, [r4, #0]
 800a4ee:	f7ff f9a5 	bl	800983c <TIM_CCxNChannelCmd>
    __HAL_TIM_MOE_ENABLE(htim);
 800a4f2:	6822      	ldr	r2, [r4, #0]
 800a4f4:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800a4f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4fa:	6453      	str	r3, [r2, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4fc:	6823      	ldr	r3, [r4, #0]
 800a4fe:	4a32      	ldr	r2, [pc, #200]	@ (800a5c8 <HAL_TIMEx_PWMN_Start_IT+0x118>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d052      	beq.n	800a5aa <HAL_TIMEx_PWMN_Start_IT+0xfa>
 800a504:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a508:	4293      	cmp	r3, r2
 800a50a:	d04e      	beq.n	800a5aa <HAL_TIMEx_PWMN_Start_IT+0xfa>
 800a50c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a510:	d04b      	beq.n	800a5aa <HAL_TIMEx_PWMN_Start_IT+0xfa>
 800a512:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800a516:	4293      	cmp	r3, r2
 800a518:	d047      	beq.n	800a5aa <HAL_TIMEx_PWMN_Start_IT+0xfa>
 800a51a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a51e:	4293      	cmp	r3, r2
 800a520:	d043      	beq.n	800a5aa <HAL_TIMEx_PWMN_Start_IT+0xfa>
 800a522:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a526:	4293      	cmp	r3, r2
 800a528:	d03f      	beq.n	800a5aa <HAL_TIMEx_PWMN_Start_IT+0xfa>
      __HAL_TIM_ENABLE(htim);
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	f042 0201 	orr.w	r2, r2, #1
 800a530:	601a      	str	r2, [r3, #0]
 800a532:	2000      	movs	r0, #0
 800a534:	e043      	b.n	800a5be <HAL_TIMEx_PWMN_Start_IT+0x10e>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a536:	2904      	cmp	r1, #4
 800a538:	d008      	beq.n	800a54c <HAL_TIMEx_PWMN_Start_IT+0x9c>
 800a53a:	2908      	cmp	r1, #8
 800a53c:	d00d      	beq.n	800a55a <HAL_TIMEx_PWMN_Start_IT+0xaa>
 800a53e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a542:	b2db      	uxtb	r3, r3
 800a544:	3b01      	subs	r3, #1
 800a546:	bf18      	it	ne
 800a548:	2301      	movne	r3, #1
 800a54a:	e7bc      	b.n	800a4c6 <HAL_TIMEx_PWMN_Start_IT+0x16>
 800a54c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a550:	b2db      	uxtb	r3, r3
 800a552:	3b01      	subs	r3, #1
 800a554:	bf18      	it	ne
 800a556:	2301      	movne	r3, #1
 800a558:	e7b5      	b.n	800a4c6 <HAL_TIMEx_PWMN_Start_IT+0x16>
 800a55a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	3b01      	subs	r3, #1
 800a562:	bf18      	it	ne
 800a564:	2301      	movne	r3, #1
 800a566:	e7ae      	b.n	800a4c6 <HAL_TIMEx_PWMN_Start_IT+0x16>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a568:	2804      	cmp	r0, #4
 800a56a:	d00c      	beq.n	800a586 <HAL_TIMEx_PWMN_Start_IT+0xd6>
 800a56c:	2808      	cmp	r0, #8
 800a56e:	d013      	beq.n	800a598 <HAL_TIMEx_PWMN_Start_IT+0xe8>
 800a570:	2302      	movs	r3, #2
 800a572:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  switch (Channel)
 800a576:	2804      	cmp	r0, #4
 800a578:	d008      	beq.n	800a58c <HAL_TIMEx_PWMN_Start_IT+0xdc>
 800a57a:	2808      	cmp	r0, #8
 800a57c:	d00f      	beq.n	800a59e <HAL_TIMEx_PWMN_Start_IT+0xee>
 800a57e:	2800      	cmp	r0, #0
 800a580:	d0a8      	beq.n	800a4d4 <HAL_TIMEx_PWMN_Start_IT+0x24>
 800a582:	2001      	movs	r0, #1
 800a584:	e01b      	b.n	800a5be <HAL_TIMEx_PWMN_Start_IT+0x10e>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a586:	2302      	movs	r3, #2
 800a588:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a58c:	6822      	ldr	r2, [r4, #0]
 800a58e:	68d3      	ldr	r3, [r2, #12]
 800a590:	f043 0304 	orr.w	r3, r3, #4
 800a594:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800a596:	e7a2      	b.n	800a4de <HAL_TIMEx_PWMN_Start_IT+0x2e>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a598:	2302      	movs	r3, #2
 800a59a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a59e:	6822      	ldr	r2, [r4, #0]
 800a5a0:	68d3      	ldr	r3, [r2, #12]
 800a5a2:	f043 0308 	orr.w	r3, r3, #8
 800a5a6:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800a5a8:	e799      	b.n	800a4de <HAL_TIMEx_PWMN_Start_IT+0x2e>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5aa:	689a      	ldr	r2, [r3, #8]
 800a5ac:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5b0:	2a06      	cmp	r2, #6
 800a5b2:	d007      	beq.n	800a5c4 <HAL_TIMEx_PWMN_Start_IT+0x114>
        __HAL_TIM_ENABLE(htim);
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	f042 0201 	orr.w	r2, r2, #1
 800a5ba:	601a      	str	r2, [r3, #0]
 800a5bc:	2000      	movs	r0, #0
}
 800a5be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a5c0:	2001      	movs	r0, #1
 800a5c2:	e7fc      	b.n	800a5be <HAL_TIMEx_PWMN_Start_IT+0x10e>
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	e7fa      	b.n	800a5be <HAL_TIMEx_PWMN_Start_IT+0x10e>
 800a5c8:	40012c00 	.word	0x40012c00

0800a5cc <HAL_TIMEx_PWMN_Stop_IT>:
{
 800a5cc:	b538      	push	{r3, r4, r5, lr}
 800a5ce:	4605      	mov	r5, r0
 800a5d0:	460c      	mov	r4, r1
  switch (Channel)
 800a5d2:	2904      	cmp	r1, #4
 800a5d4:	d03c      	beq.n	800a650 <HAL_TIMEx_PWMN_Stop_IT+0x84>
 800a5d6:	2908      	cmp	r1, #8
 800a5d8:	d040      	beq.n	800a65c <HAL_TIMEx_PWMN_Stop_IT+0x90>
 800a5da:	b109      	cbz	r1, 800a5e0 <HAL_TIMEx_PWMN_Stop_IT+0x14>
 800a5dc:	2001      	movs	r0, #1
}
 800a5de:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800a5e0:	6802      	ldr	r2, [r0, #0]
 800a5e2:	68d3      	ldr	r3, [r2, #12]
 800a5e4:	f023 0302 	bic.w	r3, r3, #2
 800a5e8:	60d3      	str	r3, [r2, #12]
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	6828      	ldr	r0, [r5, #0]
 800a5f0:	f7ff f924 	bl	800983c <TIM_CCxNChannelCmd>
    tmpccer = htim->Instance->CCER;
 800a5f4:	682b      	ldr	r3, [r5, #0]
 800a5f6:	6a19      	ldr	r1, [r3, #32]
    if ((tmpccer & TIM_CCER_CCxNE_MASK) == (uint32_t)RESET)
 800a5f8:	f240 4244 	movw	r2, #1092	@ 0x444
 800a5fc:	4211      	tst	r1, r2
 800a5fe:	d103      	bne.n	800a608 <HAL_TIMEx_PWMN_Stop_IT+0x3c>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800a600:	68da      	ldr	r2, [r3, #12]
 800a602:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a606:	60da      	str	r2, [r3, #12]
    __HAL_TIM_MOE_DISABLE(htim);
 800a608:	682b      	ldr	r3, [r5, #0]
 800a60a:	6a19      	ldr	r1, [r3, #32]
 800a60c:	f241 1211 	movw	r2, #4369	@ 0x1111
 800a610:	4211      	tst	r1, r2
 800a612:	d108      	bne.n	800a626 <HAL_TIMEx_PWMN_Stop_IT+0x5a>
 800a614:	6a19      	ldr	r1, [r3, #32]
 800a616:	f240 4244 	movw	r2, #1092	@ 0x444
 800a61a:	4211      	tst	r1, r2
 800a61c:	d103      	bne.n	800a626 <HAL_TIMEx_PWMN_Stop_IT+0x5a>
 800a61e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a620:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a624:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_TIM_DISABLE(htim);
 800a626:	682b      	ldr	r3, [r5, #0]
 800a628:	6a19      	ldr	r1, [r3, #32]
 800a62a:	f241 1211 	movw	r2, #4369	@ 0x1111
 800a62e:	4211      	tst	r1, r2
 800a630:	d108      	bne.n	800a644 <HAL_TIMEx_PWMN_Stop_IT+0x78>
 800a632:	6a19      	ldr	r1, [r3, #32]
 800a634:	f240 4244 	movw	r2, #1092	@ 0x444
 800a638:	4211      	tst	r1, r2
 800a63a:	d103      	bne.n	800a644 <HAL_TIMEx_PWMN_Stop_IT+0x78>
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	f022 0201 	bic.w	r2, r2, #1
 800a642:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a644:	b984      	cbnz	r4, 800a668 <HAL_TIMEx_PWMN_Stop_IT+0x9c>
 800a646:	2301      	movs	r3, #1
 800a648:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
 800a64c:	2000      	movs	r0, #0
 800a64e:	e7c6      	b.n	800a5de <HAL_TIMEx_PWMN_Stop_IT+0x12>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a650:	6802      	ldr	r2, [r0, #0]
 800a652:	68d3      	ldr	r3, [r2, #12]
 800a654:	f023 0304 	bic.w	r3, r3, #4
 800a658:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800a65a:	e7c6      	b.n	800a5ea <HAL_TIMEx_PWMN_Stop_IT+0x1e>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a65c:	6802      	ldr	r2, [r0, #0]
 800a65e:	68d3      	ldr	r3, [r2, #12]
 800a660:	f023 0308 	bic.w	r3, r3, #8
 800a664:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800a666:	e7c0      	b.n	800a5ea <HAL_TIMEx_PWMN_Stop_IT+0x1e>
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a668:	2c04      	cmp	r4, #4
 800a66a:	d006      	beq.n	800a67a <HAL_TIMEx_PWMN_Stop_IT+0xae>
 800a66c:	2c08      	cmp	r4, #8
 800a66e:	d009      	beq.n	800a684 <HAL_TIMEx_PWMN_Stop_IT+0xb8>
 800a670:	2301      	movs	r3, #1
 800a672:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
 800a676:	2000      	movs	r0, #0
 800a678:	e7b1      	b.n	800a5de <HAL_TIMEx_PWMN_Stop_IT+0x12>
 800a67a:	2301      	movs	r3, #1
 800a67c:	f885 3043 	strb.w	r3, [r5, #67]	@ 0x43
 800a680:	2000      	movs	r0, #0
 800a682:	e7ac      	b.n	800a5de <HAL_TIMEx_PWMN_Stop_IT+0x12>
 800a684:	2301      	movs	r3, #1
 800a686:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
 800a68a:	2000      	movs	r0, #0
 800a68c:	e7a7      	b.n	800a5de <HAL_TIMEx_PWMN_Stop_IT+0x12>
	...

0800a690 <HAL_TIMEx_PWMN_Start_DMA>:
{
 800a690:	b570      	push	{r4, r5, r6, lr}
 800a692:	4604      	mov	r4, r0
 800a694:	4616      	mov	r6, r2
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800a696:	460d      	mov	r5, r1
 800a698:	2900      	cmp	r1, #0
 800a69a:	d164      	bne.n	800a766 <HAL_TIMEx_PWMN_Start_DMA+0xd6>
 800a69c:	f890 0042 	ldrb.w	r0, [r0, #66]	@ 0x42
 800a6a0:	b2c0      	uxtb	r0, r0
 800a6a2:	2802      	cmp	r0, #2
 800a6a4:	bf14      	ite	ne
 800a6a6:	2000      	movne	r0, #0
 800a6a8:	2001      	moveq	r0, #1
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	f040 80e1 	bne.w	800a872 <HAL_TIMEx_PWMN_Start_DMA+0x1e2>
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800a6b0:	2d00      	cmp	r5, #0
 800a6b2:	d174      	bne.n	800a79e <HAL_TIMEx_PWMN_Start_DMA+0x10e>
 800a6b4:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 800a6b8:	b2d2      	uxtb	r2, r2
 800a6ba:	2a01      	cmp	r2, #1
 800a6bc:	bf14      	ite	ne
 800a6be:	2200      	movne	r2, #0
 800a6c0:	2201      	moveq	r2, #1
 800a6c2:	2a00      	cmp	r2, #0
 800a6c4:	f000 80d7 	beq.w	800a876 <HAL_TIMEx_PWMN_Start_DMA+0x1e6>
    if ((pData == NULL) || (Length == 0U))
 800a6c8:	2e00      	cmp	r6, #0
 800a6ca:	f000 80d6 	beq.w	800a87a <HAL_TIMEx_PWMN_Start_DMA+0x1ea>
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	f000 80d5 	beq.w	800a87e <HAL_TIMEx_PWMN_Start_DMA+0x1ee>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6d4:	2d00      	cmp	r5, #0
 800a6d6:	d17e      	bne.n	800a7d6 <HAL_TIMEx_PWMN_Start_DMA+0x146>
 800a6d8:	2202      	movs	r2, #2
 800a6da:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800a6de:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a6e0:	496c      	ldr	r1, [pc, #432]	@ (800a894 <HAL_TIMEx_PWMN_Start_DMA+0x204>)
 800a6e2:	6291      	str	r1, [r2, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a6e4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a6e6:	496c      	ldr	r1, [pc, #432]	@ (800a898 <HAL_TIMEx_PWMN_Start_DMA+0x208>)
 800a6e8:	62d1      	str	r1, [r2, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800a6ea:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a6ec:	496b      	ldr	r1, [pc, #428]	@ (800a89c <HAL_TIMEx_PWMN_Start_DMA+0x20c>)
 800a6ee:	6311      	str	r1, [r2, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800a6f0:	6822      	ldr	r2, [r4, #0]
 800a6f2:	3234      	adds	r2, #52	@ 0x34
 800a6f4:	4631      	mov	r1, r6
 800a6f6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a6f8:	f7f9 f919 	bl	800392e <HAL_DMA_Start_IT>
 800a6fc:	2800      	cmp	r0, #0
 800a6fe:	f040 80c0 	bne.w	800a882 <HAL_TIMEx_PWMN_Start_DMA+0x1f2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800a702:	6822      	ldr	r2, [r4, #0]
 800a704:	68d3      	ldr	r3, [r2, #12]
 800a706:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a70a:	60d3      	str	r3, [r2, #12]
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a70c:	2204      	movs	r2, #4
 800a70e:	4629      	mov	r1, r5
 800a710:	6820      	ldr	r0, [r4, #0]
 800a712:	f7ff f893 	bl	800983c <TIM_CCxNChannelCmd>
    __HAL_TIM_MOE_ENABLE(htim);
 800a716:	6822      	ldr	r2, [r4, #0]
 800a718:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800a71a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a71e:	6453      	str	r3, [r2, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a720:	6823      	ldr	r3, [r4, #0]
 800a722:	4a5f      	ldr	r2, [pc, #380]	@ (800a8a0 <HAL_TIMEx_PWMN_Start_DMA+0x210>)
 800a724:	4293      	cmp	r3, r2
 800a726:	f000 8099 	beq.w	800a85c <HAL_TIMEx_PWMN_Start_DMA+0x1cc>
 800a72a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a72e:	4293      	cmp	r3, r2
 800a730:	f000 8094 	beq.w	800a85c <HAL_TIMEx_PWMN_Start_DMA+0x1cc>
 800a734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a738:	f000 8090 	beq.w	800a85c <HAL_TIMEx_PWMN_Start_DMA+0x1cc>
 800a73c:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800a740:	4293      	cmp	r3, r2
 800a742:	f000 808b 	beq.w	800a85c <HAL_TIMEx_PWMN_Start_DMA+0x1cc>
 800a746:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a74a:	4293      	cmp	r3, r2
 800a74c:	f000 8086 	beq.w	800a85c <HAL_TIMEx_PWMN_Start_DMA+0x1cc>
 800a750:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a754:	4293      	cmp	r3, r2
 800a756:	f000 8081 	beq.w	800a85c <HAL_TIMEx_PWMN_Start_DMA+0x1cc>
      __HAL_TIM_ENABLE(htim);
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	f042 0201 	orr.w	r2, r2, #1
 800a760:	601a      	str	r2, [r3, #0]
 800a762:	2000      	movs	r0, #0
 800a764:	e088      	b.n	800a878 <HAL_TIMEx_PWMN_Start_DMA+0x1e8>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800a766:	2904      	cmp	r1, #4
 800a768:	d009      	beq.n	800a77e <HAL_TIMEx_PWMN_Start_DMA+0xee>
 800a76a:	2908      	cmp	r1, #8
 800a76c:	d00f      	beq.n	800a78e <HAL_TIMEx_PWMN_Start_DMA+0xfe>
 800a76e:	f890 0045 	ldrb.w	r0, [r0, #69]	@ 0x45
 800a772:	b2c0      	uxtb	r0, r0
 800a774:	2802      	cmp	r0, #2
 800a776:	bf14      	ite	ne
 800a778:	2000      	movne	r0, #0
 800a77a:	2001      	moveq	r0, #1
 800a77c:	e795      	b.n	800a6aa <HAL_TIMEx_PWMN_Start_DMA+0x1a>
 800a77e:	f890 0043 	ldrb.w	r0, [r0, #67]	@ 0x43
 800a782:	b2c0      	uxtb	r0, r0
 800a784:	2802      	cmp	r0, #2
 800a786:	bf14      	ite	ne
 800a788:	2000      	movne	r0, #0
 800a78a:	2001      	moveq	r0, #1
 800a78c:	e78d      	b.n	800a6aa <HAL_TIMEx_PWMN_Start_DMA+0x1a>
 800a78e:	f890 0044 	ldrb.w	r0, [r0, #68]	@ 0x44
 800a792:	b2c0      	uxtb	r0, r0
 800a794:	2802      	cmp	r0, #2
 800a796:	bf14      	ite	ne
 800a798:	2000      	movne	r0, #0
 800a79a:	2001      	moveq	r0, #1
 800a79c:	e785      	b.n	800a6aa <HAL_TIMEx_PWMN_Start_DMA+0x1a>
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800a79e:	2d04      	cmp	r5, #4
 800a7a0:	d009      	beq.n	800a7b6 <HAL_TIMEx_PWMN_Start_DMA+0x126>
 800a7a2:	2d08      	cmp	r5, #8
 800a7a4:	d00f      	beq.n	800a7c6 <HAL_TIMEx_PWMN_Start_DMA+0x136>
 800a7a6:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 800a7aa:	b2d2      	uxtb	r2, r2
 800a7ac:	2a01      	cmp	r2, #1
 800a7ae:	bf14      	ite	ne
 800a7b0:	2200      	movne	r2, #0
 800a7b2:	2201      	moveq	r2, #1
 800a7b4:	e785      	b.n	800a6c2 <HAL_TIMEx_PWMN_Start_DMA+0x32>
 800a7b6:	f894 2043 	ldrb.w	r2, [r4, #67]	@ 0x43
 800a7ba:	b2d2      	uxtb	r2, r2
 800a7bc:	2a01      	cmp	r2, #1
 800a7be:	bf14      	ite	ne
 800a7c0:	2200      	movne	r2, #0
 800a7c2:	2201      	moveq	r2, #1
 800a7c4:	e77d      	b.n	800a6c2 <HAL_TIMEx_PWMN_Start_DMA+0x32>
 800a7c6:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 800a7ca:	b2d2      	uxtb	r2, r2
 800a7cc:	2a01      	cmp	r2, #1
 800a7ce:	bf14      	ite	ne
 800a7d0:	2200      	movne	r2, #0
 800a7d2:	2201      	moveq	r2, #1
 800a7d4:	e775      	b.n	800a6c2 <HAL_TIMEx_PWMN_Start_DMA+0x32>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7d6:	2d04      	cmp	r5, #4
 800a7d8:	d00d      	beq.n	800a7f6 <HAL_TIMEx_PWMN_Start_DMA+0x166>
 800a7da:	2d08      	cmp	r5, #8
 800a7dc:	d025      	beq.n	800a82a <HAL_TIMEx_PWMN_Start_DMA+0x19a>
 800a7de:	2202      	movs	r2, #2
 800a7e0:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
  switch (Channel)
 800a7e4:	2d04      	cmp	r5, #4
 800a7e6:	d009      	beq.n	800a7fc <HAL_TIMEx_PWMN_Start_DMA+0x16c>
 800a7e8:	2d08      	cmp	r5, #8
 800a7ea:	d021      	beq.n	800a830 <HAL_TIMEx_PWMN_Start_DMA+0x1a0>
 800a7ec:	2d00      	cmp	r5, #0
 800a7ee:	f43f af76 	beq.w	800a6de <HAL_TIMEx_PWMN_Start_DMA+0x4e>
 800a7f2:	2001      	movs	r0, #1
 800a7f4:	e040      	b.n	800a878 <HAL_TIMEx_PWMN_Start_DMA+0x1e8>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800a7fc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a7fe:	4925      	ldr	r1, [pc, #148]	@ (800a894 <HAL_TIMEx_PWMN_Start_DMA+0x204>)
 800a800:	6291      	str	r1, [r2, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a802:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a804:	4924      	ldr	r1, [pc, #144]	@ (800a898 <HAL_TIMEx_PWMN_Start_DMA+0x208>)
 800a806:	62d1      	str	r1, [r2, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800a808:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a80a:	4924      	ldr	r1, [pc, #144]	@ (800a89c <HAL_TIMEx_PWMN_Start_DMA+0x20c>)
 800a80c:	6311      	str	r1, [r2, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800a80e:	6822      	ldr	r2, [r4, #0]
 800a810:	3238      	adds	r2, #56	@ 0x38
 800a812:	4631      	mov	r1, r6
 800a814:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a816:	f7f9 f88a 	bl	800392e <HAL_DMA_Start_IT>
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d133      	bne.n	800a886 <HAL_TIMEx_PWMN_Start_DMA+0x1f6>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800a81e:	6822      	ldr	r2, [r4, #0]
 800a820:	68d3      	ldr	r3, [r2, #12]
 800a822:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a826:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800a828:	e770      	b.n	800a70c <HAL_TIMEx_PWMN_Start_DMA+0x7c>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a82a:	2202      	movs	r2, #2
 800a82c:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800a830:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a832:	4918      	ldr	r1, [pc, #96]	@ (800a894 <HAL_TIMEx_PWMN_Start_DMA+0x204>)
 800a834:	6291      	str	r1, [r2, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a836:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a838:	4917      	ldr	r1, [pc, #92]	@ (800a898 <HAL_TIMEx_PWMN_Start_DMA+0x208>)
 800a83a:	62d1      	str	r1, [r2, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800a83c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a83e:	4917      	ldr	r1, [pc, #92]	@ (800a89c <HAL_TIMEx_PWMN_Start_DMA+0x20c>)
 800a840:	6311      	str	r1, [r2, #48]	@ 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800a842:	6822      	ldr	r2, [r4, #0]
 800a844:	323c      	adds	r2, #60	@ 0x3c
 800a846:	4631      	mov	r1, r6
 800a848:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800a84a:	f7f9 f870 	bl	800392e <HAL_DMA_Start_IT>
 800a84e:	b9e0      	cbnz	r0, 800a88a <HAL_TIMEx_PWMN_Start_DMA+0x1fa>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800a850:	6822      	ldr	r2, [r4, #0]
 800a852:	68d3      	ldr	r3, [r2, #12]
 800a854:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a858:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800a85a:	e757      	b.n	800a70c <HAL_TIMEx_PWMN_Start_DMA+0x7c>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a85c:	689a      	ldr	r2, [r3, #8]
 800a85e:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a862:	2a06      	cmp	r2, #6
 800a864:	d013      	beq.n	800a88e <HAL_TIMEx_PWMN_Start_DMA+0x1fe>
        __HAL_TIM_ENABLE(htim);
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	f042 0201 	orr.w	r2, r2, #1
 800a86c:	601a      	str	r2, [r3, #0]
 800a86e:	2000      	movs	r0, #0
 800a870:	e002      	b.n	800a878 <HAL_TIMEx_PWMN_Start_DMA+0x1e8>
    return HAL_BUSY;
 800a872:	2002      	movs	r0, #2
 800a874:	e000      	b.n	800a878 <HAL_TIMEx_PWMN_Start_DMA+0x1e8>
    return HAL_ERROR;
 800a876:	2001      	movs	r0, #1
}
 800a878:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800a87a:	2001      	movs	r0, #1
 800a87c:	e7fc      	b.n	800a878 <HAL_TIMEx_PWMN_Start_DMA+0x1e8>
 800a87e:	2001      	movs	r0, #1
 800a880:	e7fa      	b.n	800a878 <HAL_TIMEx_PWMN_Start_DMA+0x1e8>
        return HAL_ERROR;
 800a882:	2001      	movs	r0, #1
 800a884:	e7f8      	b.n	800a878 <HAL_TIMEx_PWMN_Start_DMA+0x1e8>
        return HAL_ERROR;
 800a886:	2001      	movs	r0, #1
 800a888:	e7f6      	b.n	800a878 <HAL_TIMEx_PWMN_Start_DMA+0x1e8>
        return HAL_ERROR;
 800a88a:	2001      	movs	r0, #1
 800a88c:	e7f4      	b.n	800a878 <HAL_TIMEx_PWMN_Start_DMA+0x1e8>
 800a88e:	2000      	movs	r0, #0
 800a890:	e7f2      	b.n	800a878 <HAL_TIMEx_PWMN_Start_DMA+0x1e8>
 800a892:	bf00      	nop
 800a894:	0800989f 	.word	0x0800989f
 800a898:	08006d9b 	.word	0x08006d9b
 800a89c:	0800985b 	.word	0x0800985b
 800a8a0:	40012c00 	.word	0x40012c00

0800a8a4 <HAL_TIMEx_PWMN_Stop_DMA>:
{
 800a8a4:	b538      	push	{r3, r4, r5, lr}
 800a8a6:	4605      	mov	r5, r0
 800a8a8:	460c      	mov	r4, r1
  switch (Channel)
 800a8aa:	2904      	cmp	r1, #4
 800a8ac:	d035      	beq.n	800a91a <HAL_TIMEx_PWMN_Stop_DMA+0x76>
 800a8ae:	2908      	cmp	r1, #8
 800a8b0:	d03c      	beq.n	800a92c <HAL_TIMEx_PWMN_Stop_DMA+0x88>
 800a8b2:	b109      	cbz	r1, 800a8b8 <HAL_TIMEx_PWMN_Stop_DMA+0x14>
 800a8b4:	2001      	movs	r0, #1
}
 800a8b6:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800a8b8:	6802      	ldr	r2, [r0, #0]
 800a8ba:	68d3      	ldr	r3, [r2, #12]
 800a8bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a8c0:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800a8c2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800a8c4:	f7f9 f892 	bl	80039ec <HAL_DMA_Abort_IT>
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	4621      	mov	r1, r4
 800a8cc:	6828      	ldr	r0, [r5, #0]
 800a8ce:	f7fe ffb5 	bl	800983c <TIM_CCxNChannelCmd>
    __HAL_TIM_MOE_DISABLE(htim);
 800a8d2:	682b      	ldr	r3, [r5, #0]
 800a8d4:	6a19      	ldr	r1, [r3, #32]
 800a8d6:	f241 1211 	movw	r2, #4369	@ 0x1111
 800a8da:	4211      	tst	r1, r2
 800a8dc:	d108      	bne.n	800a8f0 <HAL_TIMEx_PWMN_Stop_DMA+0x4c>
 800a8de:	6a19      	ldr	r1, [r3, #32]
 800a8e0:	f240 4244 	movw	r2, #1092	@ 0x444
 800a8e4:	4211      	tst	r1, r2
 800a8e6:	d103      	bne.n	800a8f0 <HAL_TIMEx_PWMN_Stop_DMA+0x4c>
 800a8e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a8ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a8ee:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_TIM_DISABLE(htim);
 800a8f0:	682b      	ldr	r3, [r5, #0]
 800a8f2:	6a19      	ldr	r1, [r3, #32]
 800a8f4:	f241 1211 	movw	r2, #4369	@ 0x1111
 800a8f8:	4211      	tst	r1, r2
 800a8fa:	d108      	bne.n	800a90e <HAL_TIMEx_PWMN_Stop_DMA+0x6a>
 800a8fc:	6a19      	ldr	r1, [r3, #32]
 800a8fe:	f240 4244 	movw	r2, #1092	@ 0x444
 800a902:	4211      	tst	r1, r2
 800a904:	d103      	bne.n	800a90e <HAL_TIMEx_PWMN_Stop_DMA+0x6a>
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	f022 0201 	bic.w	r2, r2, #1
 800a90c:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a90e:	b9b4      	cbnz	r4, 800a93e <HAL_TIMEx_PWMN_Stop_DMA+0x9a>
 800a910:	2301      	movs	r3, #1
 800a912:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
 800a916:	2000      	movs	r0, #0
 800a918:	e7cd      	b.n	800a8b6 <HAL_TIMEx_PWMN_Stop_DMA+0x12>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800a91a:	6802      	ldr	r2, [r0, #0]
 800a91c:	68d3      	ldr	r3, [r2, #12]
 800a91e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a922:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800a924:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800a926:	f7f9 f861 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800a92a:	e7cd      	b.n	800a8c8 <HAL_TIMEx_PWMN_Stop_DMA+0x24>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800a92c:	6802      	ldr	r2, [r0, #0]
 800a92e:	68d3      	ldr	r3, [r2, #12]
 800a930:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a934:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800a936:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800a938:	f7f9 f858 	bl	80039ec <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800a93c:	e7c4      	b.n	800a8c8 <HAL_TIMEx_PWMN_Stop_DMA+0x24>
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a93e:	2c04      	cmp	r4, #4
 800a940:	d006      	beq.n	800a950 <HAL_TIMEx_PWMN_Stop_DMA+0xac>
 800a942:	2c08      	cmp	r4, #8
 800a944:	d009      	beq.n	800a95a <HAL_TIMEx_PWMN_Stop_DMA+0xb6>
 800a946:	2301      	movs	r3, #1
 800a948:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
 800a94c:	2000      	movs	r0, #0
 800a94e:	e7b2      	b.n	800a8b6 <HAL_TIMEx_PWMN_Stop_DMA+0x12>
 800a950:	2301      	movs	r3, #1
 800a952:	f885 3043 	strb.w	r3, [r5, #67]	@ 0x43
 800a956:	2000      	movs	r0, #0
 800a958:	e7ad      	b.n	800a8b6 <HAL_TIMEx_PWMN_Stop_DMA+0x12>
 800a95a:	2301      	movs	r3, #1
 800a95c:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
 800a960:	2000      	movs	r0, #0
 800a962:	e7a8      	b.n	800a8b6 <HAL_TIMEx_PWMN_Stop_DMA+0x12>

0800a964 <HAL_TIMEx_OnePulseN_Start>:
{
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	4604      	mov	r4, r0
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 800a968:	468e      	mov	lr, r1
 800a96a:	b9c1      	cbnz	r1, 800a99e <HAL_TIMEx_OnePulseN_Start+0x3a>
 800a96c:	2504      	movs	r5, #4
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a96e:	f894 003e 	ldrb.w	r0, [r4, #62]	@ 0x3e
 800a972:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a974:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 800a978:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a97a:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 800a97e:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a980:	f894 c043 	ldrb.w	ip, [r4, #67]	@ 0x43
 800a984:	fa5f fc8c 	uxtb.w	ip, ip
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a988:	2801      	cmp	r0, #1
 800a98a:	d124      	bne.n	800a9d6 <HAL_TIMEx_OnePulseN_Start+0x72>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d123      	bne.n	800a9d8 <HAL_TIMEx_OnePulseN_Start+0x74>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a990:	2a01      	cmp	r2, #1
 800a992:	d122      	bne.n	800a9da <HAL_TIMEx_OnePulseN_Start+0x76>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a994:	f1bc 0f01 	cmp.w	ip, #1
 800a998:	d003      	beq.n	800a9a2 <HAL_TIMEx_OnePulseN_Start+0x3e>
    return HAL_ERROR;
 800a99a:	4610      	mov	r0, r2
 800a99c:	e01c      	b.n	800a9d8 <HAL_TIMEx_OnePulseN_Start+0x74>
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 800a99e:	2500      	movs	r5, #0
 800a9a0:	e7e5      	b.n	800a96e <HAL_TIMEx_OnePulseN_Start+0xa>
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9a2:	2302      	movs	r3, #2
 800a9a4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9a8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 800a9b4:	2204      	movs	r2, #4
 800a9b6:	4671      	mov	r1, lr
 800a9b8:	6820      	ldr	r0, [r4, #0]
 800a9ba:	f7fe ff3f 	bl	800983c <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_ENABLE);
 800a9be:	2201      	movs	r2, #1
 800a9c0:	4629      	mov	r1, r5
 800a9c2:	6820      	ldr	r0, [r4, #0]
 800a9c4:	f7fd f853 	bl	8007a6e <TIM_CCxChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800a9c8:	6822      	ldr	r2, [r4, #0]
 800a9ca:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800a9cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9d0:	6453      	str	r3, [r2, #68]	@ 0x44
  return HAL_OK;
 800a9d2:	2000      	movs	r0, #0
 800a9d4:	e000      	b.n	800a9d8 <HAL_TIMEx_OnePulseN_Start+0x74>
    return HAL_ERROR;
 800a9d6:	2001      	movs	r0, #1
}
 800a9d8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a9da:	4618      	mov	r0, r3
 800a9dc:	e7fc      	b.n	800a9d8 <HAL_TIMEx_OnePulseN_Start+0x74>

0800a9de <HAL_TIMEx_OnePulseN_Stop>:
{
 800a9de:	b538      	push	{r3, r4, r5, lr}
 800a9e0:	4604      	mov	r4, r0
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 800a9e2:	2900      	cmp	r1, #0
 800a9e4:	d132      	bne.n	800aa4c <HAL_TIMEx_OnePulseN_Stop+0x6e>
 800a9e6:	2504      	movs	r5, #4
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	6820      	ldr	r0, [r4, #0]
 800a9ec:	f7fe ff26 	bl	800983c <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_DISABLE);
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	4629      	mov	r1, r5
 800a9f4:	6820      	ldr	r0, [r4, #0]
 800a9f6:	f7fd f83a 	bl	8007a6e <TIM_CCxChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	6a19      	ldr	r1, [r3, #32]
 800a9fe:	f241 1211 	movw	r2, #4369	@ 0x1111
 800aa02:	4211      	tst	r1, r2
 800aa04:	d108      	bne.n	800aa18 <HAL_TIMEx_OnePulseN_Stop+0x3a>
 800aa06:	6a19      	ldr	r1, [r3, #32]
 800aa08:	f240 4244 	movw	r2, #1092	@ 0x444
 800aa0c:	4211      	tst	r1, r2
 800aa0e:	d103      	bne.n	800aa18 <HAL_TIMEx_OnePulseN_Stop+0x3a>
 800aa10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800aa16:	645a      	str	r2, [r3, #68]	@ 0x44
  __HAL_TIM_DISABLE(htim);
 800aa18:	6823      	ldr	r3, [r4, #0]
 800aa1a:	6a19      	ldr	r1, [r3, #32]
 800aa1c:	f241 1211 	movw	r2, #4369	@ 0x1111
 800aa20:	4211      	tst	r1, r2
 800aa22:	d108      	bne.n	800aa36 <HAL_TIMEx_OnePulseN_Stop+0x58>
 800aa24:	6a19      	ldr	r1, [r3, #32]
 800aa26:	f240 4244 	movw	r2, #1092	@ 0x444
 800aa2a:	4211      	tst	r1, r2
 800aa2c:	d103      	bne.n	800aa36 <HAL_TIMEx_OnePulseN_Stop+0x58>
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	f022 0201 	bic.w	r2, r2, #1
 800aa34:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800aa36:	2301      	movs	r3, #1
 800aa38:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800aa3c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800aa40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800aa44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
}
 800aa48:	2000      	movs	r0, #0
 800aa4a:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 800aa4c:	2500      	movs	r5, #0
 800aa4e:	e7cb      	b.n	800a9e8 <HAL_TIMEx_OnePulseN_Stop+0xa>

0800aa50 <HAL_TIMEx_OnePulseN_Start_IT>:
{
 800aa50:	b538      	push	{r3, r4, r5, lr}
 800aa52:	4604      	mov	r4, r0
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 800aa54:	468e      	mov	lr, r1
 800aa56:	b9c1      	cbnz	r1, 800aa8a <HAL_TIMEx_OnePulseN_Start_IT+0x3a>
 800aa58:	2504      	movs	r5, #4
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800aa5a:	f894 003e 	ldrb.w	r0, [r4, #62]	@ 0x3e
 800aa5e:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800aa60:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 800aa64:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800aa66:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 800aa6a:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800aa6c:	f894 c043 	ldrb.w	ip, [r4, #67]	@ 0x43
 800aa70:	fa5f fc8c 	uxtb.w	ip, ip
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa74:	2801      	cmp	r0, #1
 800aa76:	d12e      	bne.n	800aad6 <HAL_TIMEx_OnePulseN_Start_IT+0x86>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d12d      	bne.n	800aad8 <HAL_TIMEx_OnePulseN_Start_IT+0x88>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa7c:	2a01      	cmp	r2, #1
 800aa7e:	d12c      	bne.n	800aada <HAL_TIMEx_OnePulseN_Start_IT+0x8a>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800aa80:	f1bc 0f01 	cmp.w	ip, #1
 800aa84:	d003      	beq.n	800aa8e <HAL_TIMEx_OnePulseN_Start_IT+0x3e>
    return HAL_ERROR;
 800aa86:	4610      	mov	r0, r2
 800aa88:	e026      	b.n	800aad8 <HAL_TIMEx_OnePulseN_Start_IT+0x88>
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 800aa8a:	2500      	movs	r5, #0
 800aa8c:	e7e5      	b.n	800aa5a <HAL_TIMEx_OnePulseN_Start_IT+0xa>
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa8e:	2302      	movs	r3, #2
 800aa90:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa94:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800aaa0:	6822      	ldr	r2, [r4, #0]
 800aaa2:	68d3      	ldr	r3, [r2, #12]
 800aaa4:	f043 0302 	orr.w	r3, r3, #2
 800aaa8:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800aaaa:	6822      	ldr	r2, [r4, #0]
 800aaac:	68d3      	ldr	r3, [r2, #12]
 800aaae:	f043 0304 	orr.w	r3, r3, #4
 800aab2:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 800aab4:	2204      	movs	r2, #4
 800aab6:	4671      	mov	r1, lr
 800aab8:	6820      	ldr	r0, [r4, #0]
 800aaba:	f7fe febf 	bl	800983c <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_ENABLE);
 800aabe:	2201      	movs	r2, #1
 800aac0:	4629      	mov	r1, r5
 800aac2:	6820      	ldr	r0, [r4, #0]
 800aac4:	f7fc ffd3 	bl	8007a6e <TIM_CCxChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800aac8:	6822      	ldr	r2, [r4, #0]
 800aaca:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800aacc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aad0:	6453      	str	r3, [r2, #68]	@ 0x44
  return HAL_OK;
 800aad2:	2000      	movs	r0, #0
 800aad4:	e000      	b.n	800aad8 <HAL_TIMEx_OnePulseN_Start_IT+0x88>
    return HAL_ERROR;
 800aad6:	2001      	movs	r0, #1
}
 800aad8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800aada:	4618      	mov	r0, r3
 800aadc:	e7fc      	b.n	800aad8 <HAL_TIMEx_OnePulseN_Start_IT+0x88>

0800aade <HAL_TIMEx_OnePulseN_Stop_IT>:
{
 800aade:	b538      	push	{r3, r4, r5, lr}
 800aae0:	4604      	mov	r4, r0
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 800aae2:	2900      	cmp	r1, #0
 800aae4:	d13c      	bne.n	800ab60 <HAL_TIMEx_OnePulseN_Stop_IT+0x82>
 800aae6:	2504      	movs	r5, #4
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800aae8:	6822      	ldr	r2, [r4, #0]
 800aaea:	68d3      	ldr	r3, [r2, #12]
 800aaec:	f023 0302 	bic.w	r3, r3, #2
 800aaf0:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800aaf2:	6822      	ldr	r2, [r4, #0]
 800aaf4:	68d3      	ldr	r3, [r2, #12]
 800aaf6:	f023 0304 	bic.w	r3, r3, #4
 800aafa:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800aafc:	2200      	movs	r2, #0
 800aafe:	6820      	ldr	r0, [r4, #0]
 800ab00:	f7fe fe9c 	bl	800983c <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_DISABLE);
 800ab04:	2200      	movs	r2, #0
 800ab06:	4629      	mov	r1, r5
 800ab08:	6820      	ldr	r0, [r4, #0]
 800ab0a:	f7fc ffb0 	bl	8007a6e <TIM_CCxChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 800ab0e:	6823      	ldr	r3, [r4, #0]
 800ab10:	6a19      	ldr	r1, [r3, #32]
 800ab12:	f241 1211 	movw	r2, #4369	@ 0x1111
 800ab16:	4211      	tst	r1, r2
 800ab18:	d108      	bne.n	800ab2c <HAL_TIMEx_OnePulseN_Stop_IT+0x4e>
 800ab1a:	6a19      	ldr	r1, [r3, #32]
 800ab1c:	f240 4244 	movw	r2, #1092	@ 0x444
 800ab20:	4211      	tst	r1, r2
 800ab22:	d103      	bne.n	800ab2c <HAL_TIMEx_OnePulseN_Stop_IT+0x4e>
 800ab24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ab2a:	645a      	str	r2, [r3, #68]	@ 0x44
  __HAL_TIM_DISABLE(htim);
 800ab2c:	6823      	ldr	r3, [r4, #0]
 800ab2e:	6a19      	ldr	r1, [r3, #32]
 800ab30:	f241 1211 	movw	r2, #4369	@ 0x1111
 800ab34:	4211      	tst	r1, r2
 800ab36:	d108      	bne.n	800ab4a <HAL_TIMEx_OnePulseN_Stop_IT+0x6c>
 800ab38:	6a19      	ldr	r1, [r3, #32]
 800ab3a:	f240 4244 	movw	r2, #1092	@ 0x444
 800ab3e:	4211      	tst	r1, r2
 800ab40:	d103      	bne.n	800ab4a <HAL_TIMEx_OnePulseN_Stop_IT+0x6c>
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	f022 0201 	bic.w	r2, r2, #1
 800ab48:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ab50:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ab54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ab58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
}
 800ab5c:	2000      	movs	r0, #0
 800ab5e:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 800ab60:	2500      	movs	r5, #0
 800ab62:	e7c1      	b.n	800aae8 <HAL_TIMEx_OnePulseN_Stop_IT+0xa>

0800ab64 <HAL_TIMEx_ConfigCommutEvent>:
{
 800ab64:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800ab66:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800ab6a:	2801      	cmp	r0, #1
 800ab6c:	d030      	beq.n	800abd0 <HAL_TIMEx_ConfigCommutEvent+0x6c>
{
 800ab6e:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800ab70:	2001      	movs	r0, #1
 800ab72:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800ab76:	b129      	cbz	r1, 800ab84 <HAL_TIMEx_ConfigCommutEvent+0x20>
 800ab78:	2910      	cmp	r1, #16
 800ab7a:	d003      	beq.n	800ab84 <HAL_TIMEx_ConfigCommutEvent+0x20>
 800ab7c:	2920      	cmp	r1, #32
 800ab7e:	d001      	beq.n	800ab84 <HAL_TIMEx_ConfigCommutEvent+0x20>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800ab80:	2930      	cmp	r1, #48	@ 0x30
 800ab82:	d108      	bne.n	800ab96 <HAL_TIMEx_ConfigCommutEvent+0x32>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800ab84:	681c      	ldr	r4, [r3, #0]
 800ab86:	68a0      	ldr	r0, [r4, #8]
 800ab88:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
 800ab8c:	60a0      	str	r0, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 800ab8e:	681c      	ldr	r4, [r3, #0]
 800ab90:	68a0      	ldr	r0, [r4, #8]
 800ab92:	4301      	orrs	r1, r0
 800ab94:	60a1      	str	r1, [r4, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800ab96:	6818      	ldr	r0, [r3, #0]
 800ab98:	6841      	ldr	r1, [r0, #4]
 800ab9a:	f041 0101 	orr.w	r1, r1, #1
 800ab9e:	6041      	str	r1, [r0, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800aba0:	6818      	ldr	r0, [r3, #0]
 800aba2:	6841      	ldr	r1, [r0, #4]
 800aba4:	f021 0104 	bic.w	r1, r1, #4
 800aba8:	6041      	str	r1, [r0, #4]
  htim->Instance->CR2 |= CommutationSource;
 800abaa:	6818      	ldr	r0, [r3, #0]
 800abac:	6841      	ldr	r1, [r0, #4]
 800abae:	430a      	orrs	r2, r1
 800abb0:	6042      	str	r2, [r0, #4]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 800abb2:	6819      	ldr	r1, [r3, #0]
 800abb4:	68ca      	ldr	r2, [r1, #12]
 800abb6:	f022 0220 	bic.w	r2, r2, #32
 800abba:	60ca      	str	r2, [r1, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800abbc:	6819      	ldr	r1, [r3, #0]
 800abbe:	68ca      	ldr	r2, [r1, #12]
 800abc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800abc4:	60ca      	str	r2, [r1, #12]
  __HAL_UNLOCK(htim);
 800abc6:	2000      	movs	r0, #0
 800abc8:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 800abcc:	bc10      	pop	{r4}
 800abce:	4770      	bx	lr
  __HAL_LOCK(htim);
 800abd0:	2002      	movs	r0, #2
}
 800abd2:	4770      	bx	lr

0800abd4 <HAL_TIMEx_ConfigCommutEvent_IT>:
{
 800abd4:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800abd6:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800abda:	2801      	cmp	r0, #1
 800abdc:	d030      	beq.n	800ac40 <HAL_TIMEx_ConfigCommutEvent_IT+0x6c>
{
 800abde:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800abe0:	2001      	movs	r0, #1
 800abe2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800abe6:	b129      	cbz	r1, 800abf4 <HAL_TIMEx_ConfigCommutEvent_IT+0x20>
 800abe8:	2910      	cmp	r1, #16
 800abea:	d003      	beq.n	800abf4 <HAL_TIMEx_ConfigCommutEvent_IT+0x20>
 800abec:	2920      	cmp	r1, #32
 800abee:	d001      	beq.n	800abf4 <HAL_TIMEx_ConfigCommutEvent_IT+0x20>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800abf0:	2930      	cmp	r1, #48	@ 0x30
 800abf2:	d108      	bne.n	800ac06 <HAL_TIMEx_ConfigCommutEvent_IT+0x32>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800abf4:	681c      	ldr	r4, [r3, #0]
 800abf6:	68a0      	ldr	r0, [r4, #8]
 800abf8:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
 800abfc:	60a0      	str	r0, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 800abfe:	681c      	ldr	r4, [r3, #0]
 800ac00:	68a0      	ldr	r0, [r4, #8]
 800ac02:	4301      	orrs	r1, r0
 800ac04:	60a1      	str	r1, [r4, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800ac06:	6818      	ldr	r0, [r3, #0]
 800ac08:	6841      	ldr	r1, [r0, #4]
 800ac0a:	f041 0101 	orr.w	r1, r1, #1
 800ac0e:	6041      	str	r1, [r0, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800ac10:	6818      	ldr	r0, [r3, #0]
 800ac12:	6841      	ldr	r1, [r0, #4]
 800ac14:	f021 0104 	bic.w	r1, r1, #4
 800ac18:	6041      	str	r1, [r0, #4]
  htim->Instance->CR2 |= CommutationSource;
 800ac1a:	6818      	ldr	r0, [r3, #0]
 800ac1c:	6841      	ldr	r1, [r0, #4]
 800ac1e:	430a      	orrs	r2, r1
 800ac20:	6042      	str	r2, [r0, #4]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800ac22:	6819      	ldr	r1, [r3, #0]
 800ac24:	68ca      	ldr	r2, [r1, #12]
 800ac26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ac2a:	60ca      	str	r2, [r1, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 800ac2c:	6819      	ldr	r1, [r3, #0]
 800ac2e:	68ca      	ldr	r2, [r1, #12]
 800ac30:	f042 0220 	orr.w	r2, r2, #32
 800ac34:	60ca      	str	r2, [r1, #12]
  __HAL_UNLOCK(htim);
 800ac36:	2000      	movs	r0, #0
 800ac38:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 800ac3c:	bc10      	pop	{r4}
 800ac3e:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ac40:	2002      	movs	r0, #2
}
 800ac42:	4770      	bx	lr

0800ac44 <HAL_TIMEx_ConfigCommutEvent_DMA>:
{
 800ac44:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800ac46:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800ac4a:	2801      	cmp	r0, #1
 800ac4c:	d039      	beq.n	800acc2 <HAL_TIMEx_ConfigCommutEvent_DMA+0x7e>
{
 800ac4e:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800ac50:	2001      	movs	r0, #1
 800ac52:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800ac56:	b129      	cbz	r1, 800ac64 <HAL_TIMEx_ConfigCommutEvent_DMA+0x20>
 800ac58:	2910      	cmp	r1, #16
 800ac5a:	d003      	beq.n	800ac64 <HAL_TIMEx_ConfigCommutEvent_DMA+0x20>
 800ac5c:	2920      	cmp	r1, #32
 800ac5e:	d001      	beq.n	800ac64 <HAL_TIMEx_ConfigCommutEvent_DMA+0x20>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800ac60:	2930      	cmp	r1, #48	@ 0x30
 800ac62:	d108      	bne.n	800ac76 <HAL_TIMEx_ConfigCommutEvent_DMA+0x32>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800ac64:	681c      	ldr	r4, [r3, #0]
 800ac66:	68a0      	ldr	r0, [r4, #8]
 800ac68:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
 800ac6c:	60a0      	str	r0, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 800ac6e:	681c      	ldr	r4, [r3, #0]
 800ac70:	68a0      	ldr	r0, [r4, #8]
 800ac72:	4301      	orrs	r1, r0
 800ac74:	60a1      	str	r1, [r4, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800ac76:	6818      	ldr	r0, [r3, #0]
 800ac78:	6841      	ldr	r1, [r0, #4]
 800ac7a:	f041 0101 	orr.w	r1, r1, #1
 800ac7e:	6041      	str	r1, [r0, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800ac80:	6818      	ldr	r0, [r3, #0]
 800ac82:	6841      	ldr	r1, [r0, #4]
 800ac84:	f021 0104 	bic.w	r1, r1, #4
 800ac88:	6041      	str	r1, [r0, #4]
  htim->Instance->CR2 |= CommutationSource;
 800ac8a:	6818      	ldr	r0, [r3, #0]
 800ac8c:	6841      	ldr	r1, [r0, #4]
 800ac8e:	430a      	orrs	r2, r1
 800ac90:	6042      	str	r2, [r0, #4]
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 800ac92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac94:	490c      	ldr	r1, [pc, #48]	@ (800acc8 <HAL_TIMEx_ConfigCommutEvent_DMA+0x84>)
 800ac96:	6291      	str	r1, [r2, #40]	@ 0x28
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback = TIMEx_DMACommutationHalfCplt;
 800ac98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac9a:	490c      	ldr	r1, [pc, #48]	@ (800accc <HAL_TIMEx_ConfigCommutEvent_DMA+0x88>)
 800ac9c:	62d1      	str	r1, [r2, #44]	@ 0x2c
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 800ac9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aca0:	490b      	ldr	r1, [pc, #44]	@ (800acd0 <HAL_TIMEx_ConfigCommutEvent_DMA+0x8c>)
 800aca2:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 800aca4:	6819      	ldr	r1, [r3, #0]
 800aca6:	68ca      	ldr	r2, [r1, #12]
 800aca8:	f022 0220 	bic.w	r2, r2, #32
 800acac:	60ca      	str	r2, [r1, #12]
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 800acae:	6819      	ldr	r1, [r3, #0]
 800acb0:	68ca      	ldr	r2, [r1, #12]
 800acb2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800acb6:	60ca      	str	r2, [r1, #12]
  __HAL_UNLOCK(htim);
 800acb8:	2000      	movs	r0, #0
 800acba:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 800acbe:	bc10      	pop	{r4}
 800acc0:	4770      	bx	lr
  __HAL_LOCK(htim);
 800acc2:	2002      	movs	r0, #2
}
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	0800ada9 	.word	0x0800ada9
 800accc:	0800adbb 	.word	0x0800adbb
 800acd0:	08006f5d 	.word	0x08006f5d

0800acd4 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 800acd4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800acd8:	2a01      	cmp	r2, #1
 800acda:	d034      	beq.n	800ad46 <HAL_TIMEx_MasterConfigSynchronization+0x72>
{
 800acdc:	b410      	push	{r4}
 800acde:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800ace0:	2201      	movs	r2, #1
 800ace2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800ace6:	2202      	movs	r2, #2
 800ace8:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 800acec:	6802      	ldr	r2, [r0, #0]
 800acee:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800acf0:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800acf2:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800acf6:	6808      	ldr	r0, [r1, #0]
 800acf8:	ea40 000c 	orr.w	r0, r0, ip
  htim->Instance->CR2 = tmpcr2;
 800acfc:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	4812      	ldr	r0, [pc, #72]	@ (800ad4c <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 800ad02:	4282      	cmp	r2, r0
 800ad04:	d012      	beq.n	800ad2c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800ad06:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 800ad0a:	4282      	cmp	r2, r0
 800ad0c:	d00e      	beq.n	800ad2c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800ad0e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800ad12:	d00b      	beq.n	800ad2c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800ad14:	f5a0 3098 	sub.w	r0, r0, #77824	@ 0x13000
 800ad18:	4282      	cmp	r2, r0
 800ad1a:	d007      	beq.n	800ad2c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800ad1c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800ad20:	4282      	cmp	r2, r0
 800ad22:	d003      	beq.n	800ad2c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800ad24:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800ad28:	4282      	cmp	r2, r0
 800ad2a:	d104      	bne.n	800ad36 <HAL_TIMEx_MasterConfigSynchronization+0x62>
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad2c:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad30:	6849      	ldr	r1, [r1, #4]
 800ad32:	4321      	orrs	r1, r4
    htim->Instance->SMCR = tmpsmcr;
 800ad34:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 800ad42:	bc10      	pop	{r4}
 800ad44:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ad46:	2002      	movs	r0, #2
}
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	40012c00 	.word	0x40012c00

0800ad50 <HAL_TIMEx_ConfigBreakDeadTime>:
{
 800ad50:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 800ad52:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d021      	beq.n	800ad9e <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ad60:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ad62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad66:	6888      	ldr	r0, [r1, #8]
 800ad68:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ad6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ad6e:	6848      	ldr	r0, [r1, #4]
 800ad70:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ad72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ad76:	6808      	ldr	r0, [r1, #0]
 800ad78:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ad7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad7e:	6908      	ldr	r0, [r1, #16]
 800ad80:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ad82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ad86:	6948      	ldr	r0, [r1, #20]
 800ad88:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad8e:	69c9      	ldr	r1, [r1, #28]
 800ad90:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 800ad92:	6811      	ldr	r1, [r2, #0]
 800ad94:	644b      	str	r3, [r1, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 800ad96:	2000      	movs	r0, #0
 800ad98:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  return HAL_OK;
 800ad9c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ad9e:	2002      	movs	r0, #2
}
 800ada0:	4770      	bx	lr

0800ada2 <HAL_TIMEx_RemapConfig>:
}
 800ada2:	2000      	movs	r0, #0
 800ada4:	4770      	bx	lr

0800ada6 <HAL_TIMEx_CommutCallback>:
}
 800ada6:	4770      	bx	lr

0800ada8 <TIMEx_DMACommutationCplt>:
{
 800ada8:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adaa:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  htim->State = HAL_TIM_STATE_READY;
 800adac:	2301      	movs	r3, #1
 800adae:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  HAL_TIMEx_CommutCallback(htim);
 800adb2:	f7ff fff8 	bl	800ada6 <HAL_TIMEx_CommutCallback>
}
 800adb6:	bd08      	pop	{r3, pc}

0800adb8 <HAL_TIMEx_CommutHalfCpltCallback>:
}
 800adb8:	4770      	bx	lr

0800adba <TIMEx_DMACommutationHalfCplt>:
{
 800adba:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adbc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  htim->State = HAL_TIM_STATE_READY;
 800adbe:	2301      	movs	r3, #1
 800adc0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  HAL_TIMEx_CommutHalfCpltCallback(htim);
 800adc4:	f7ff fff8 	bl	800adb8 <HAL_TIMEx_CommutHalfCpltCallback>
}
 800adc8:	bd08      	pop	{r3, pc}

0800adca <HAL_TIMEx_BreakCallback>:
}
 800adca:	4770      	bx	lr

0800adcc <HAL_TIMEx_HallSensor_GetState>:
  return htim->State;
 800adcc:	f890 003d 	ldrb.w	r0, [r0, #61]	@ 0x3d
}
 800add0:	4770      	bx	lr

0800add2 <HAL_TIMEx_GetChannelNState>:
  channel_state = TIM_CHANNEL_N_STATE_GET(htim, ChannelN);
 800add2:	b919      	cbnz	r1, 800addc <HAL_TIMEx_GetChannelNState+0xa>
 800add4:	f890 0042 	ldrb.w	r0, [r0, #66]	@ 0x42
 800add8:	b2c0      	uxtb	r0, r0
 800adda:	4770      	bx	lr
 800addc:	2904      	cmp	r1, #4
 800adde:	d005      	beq.n	800adec <HAL_TIMEx_GetChannelNState+0x1a>
 800ade0:	2908      	cmp	r1, #8
 800ade2:	d007      	beq.n	800adf4 <HAL_TIMEx_GetChannelNState+0x22>
 800ade4:	f890 0045 	ldrb.w	r0, [r0, #69]	@ 0x45
 800ade8:	b2c0      	uxtb	r0, r0
}
 800adea:	4770      	bx	lr
  channel_state = TIM_CHANNEL_N_STATE_GET(htim, ChannelN);
 800adec:	f890 0043 	ldrb.w	r0, [r0, #67]	@ 0x43
 800adf0:	b2c0      	uxtb	r0, r0
 800adf2:	4770      	bx	lr
 800adf4:	f890 0044 	ldrb.w	r0, [r0, #68]	@ 0x44
 800adf8:	b2c0      	uxtb	r0, r0
 800adfa:	4770      	bx	lr

0800adfc <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800adfc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfe:	f102 030c 	add.w	r3, r2, #12
 800ae02:	e853 3f00 	ldrex	r3, [r3]
 800ae06:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0a:	320c      	adds	r2, #12
 800ae0c:	e842 3100 	strex	r1, r3, [r2]
 800ae10:	2900      	cmp	r1, #0
 800ae12:	d1f3      	bne.n	800adfc <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae14:	2320      	movs	r3, #32
 800ae16:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 800ae1a:	4770      	bx	lr

0800ae1c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae1c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1e:	f102 030c 	add.w	r3, r2, #12
 800ae22:	e853 3f00 	ldrex	r3, [r3]
 800ae26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2a:	320c      	adds	r2, #12
 800ae2c:	e842 3100 	strex	r1, r3, [r2]
 800ae30:	2900      	cmp	r1, #0
 800ae32:	d1f3      	bne.n	800ae1c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae34:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae36:	f102 0314 	add.w	r3, r2, #20
 800ae3a:	e853 3f00 	ldrex	r3, [r3]
 800ae3e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae42:	3214      	adds	r2, #20
 800ae44:	e842 3100 	strex	r1, r3, [r2]
 800ae48:	2900      	cmp	r1, #0
 800ae4a:	d1f3      	bne.n	800ae34 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae4c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d005      	beq.n	800ae5e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae52:	2320      	movs	r3, #32
 800ae54:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800ae5c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae5e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae60:	f102 030c 	add.w	r3, r2, #12
 800ae64:	e853 3f00 	ldrex	r3, [r3]
 800ae68:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6c:	320c      	adds	r2, #12
 800ae6e:	e842 3100 	strex	r1, r3, [r2]
 800ae72:	2900      	cmp	r1, #0
 800ae74:	d1f3      	bne.n	800ae5e <UART_EndRxTransfer+0x42>
 800ae76:	e7ec      	b.n	800ae52 <UART_EndRxTransfer+0x36>

0800ae78 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae78:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	2b21      	cmp	r3, #33	@ 0x21
 800ae80:	d001      	beq.n	800ae86 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800ae82:	2002      	movs	r0, #2
  }
}
 800ae84:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae86:	6883      	ldr	r3, [r0, #8]
 800ae88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae8c:	d017      	beq.n	800aebe <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ae8e:	6a03      	ldr	r3, [r0, #32]
 800ae90:	1c5a      	adds	r2, r3, #1
 800ae92:	6202      	str	r2, [r0, #32]
 800ae94:	781a      	ldrb	r2, [r3, #0]
 800ae96:	6803      	ldr	r3, [r0, #0]
 800ae98:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800ae9a:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800aea4:	b94b      	cbnz	r3, 800aeba <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aea6:	6802      	ldr	r2, [r0, #0]
 800aea8:	68d3      	ldr	r3, [r2, #12]
 800aeaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aeae:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aeb0:	6802      	ldr	r2, [r0, #0]
 800aeb2:	68d3      	ldr	r3, [r2, #12]
 800aeb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aeb8:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800aeba:	2000      	movs	r0, #0
 800aebc:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aebe:	6903      	ldr	r3, [r0, #16]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d1e4      	bne.n	800ae8e <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aec4:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800aec6:	881b      	ldrh	r3, [r3, #0]
 800aec8:	6802      	ldr	r2, [r0, #0]
 800aeca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aece:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 800aed0:	6a03      	ldr	r3, [r0, #32]
 800aed2:	3302      	adds	r3, #2
 800aed4:	6203      	str	r3, [r0, #32]
 800aed6:	e7e0      	b.n	800ae9a <UART_Transmit_IT+0x22>

0800aed8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aed8:	b510      	push	{r4, lr}
 800aeda:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aedc:	6802      	ldr	r2, [r0, #0]
 800aede:	6913      	ldr	r3, [r2, #16]
 800aee0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800aee4:	68c1      	ldr	r1, [r0, #12]
 800aee6:	430b      	orrs	r3, r1
 800aee8:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800aeea:	6883      	ldr	r3, [r0, #8]
 800aeec:	6902      	ldr	r2, [r0, #16]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	6942      	ldr	r2, [r0, #20]
 800aef2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800aef4:	6801      	ldr	r1, [r0, #0]
 800aef6:	68cb      	ldr	r3, [r1, #12]
 800aef8:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800aefc:	f023 030c 	bic.w	r3, r3, #12
 800af00:	4313      	orrs	r3, r2
 800af02:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af04:	6802      	ldr	r2, [r0, #0]
 800af06:	6953      	ldr	r3, [r2, #20]
 800af08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af0c:	6981      	ldr	r1, [r0, #24]
 800af0e:	430b      	orrs	r3, r1
 800af10:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 800af12:	6802      	ldr	r2, [r0, #0]
 800af14:	4b13      	ldr	r3, [pc, #76]	@ (800af64 <UART_SetConfig+0x8c>)
 800af16:	429a      	cmp	r2, r3
 800af18:	d020      	beq.n	800af5c <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800af1a:	f7fa fefd 	bl	8005d18 <HAL_RCC_GetPCLK1Freq>
 800af1e:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800af20:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800af24:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800af28:	6863      	ldr	r3, [r4, #4]
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	fbb2 f2f3 	udiv	r2, r2, r3
 800af30:	480d      	ldr	r0, [pc, #52]	@ (800af68 <UART_SetConfig+0x90>)
 800af32:	fba0 3102 	umull	r3, r1, r0, r2
 800af36:	0949      	lsrs	r1, r1, #5
 800af38:	2364      	movs	r3, #100	@ 0x64
 800af3a:	fb03 2311 	mls	r3, r3, r1, r2
 800af3e:	011b      	lsls	r3, r3, #4
 800af40:	3332      	adds	r3, #50	@ 0x32
 800af42:	fba0 0303 	umull	r0, r3, r0, r3
 800af46:	095b      	lsrs	r3, r3, #5
 800af48:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800af4c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800af50:	f003 030f 	and.w	r3, r3, #15
 800af54:	6821      	ldr	r1, [r4, #0]
 800af56:	4413      	add	r3, r2
 800af58:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 800af5a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800af5c:	f7fa feec 	bl	8005d38 <HAL_RCC_GetPCLK2Freq>
 800af60:	4602      	mov	r2, r0
 800af62:	e7dd      	b.n	800af20 <UART_SetConfig+0x48>
 800af64:	40013800 	.word	0x40013800
 800af68:	51eb851f 	.word	0x51eb851f

0800af6c <UART_WaitOnFlagUntilTimeout>:
{
 800af6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af70:	b083      	sub	sp, #12
 800af72:	4605      	mov	r5, r0
 800af74:	460e      	mov	r6, r1
 800af76:	4617      	mov	r7, r2
 800af78:	4699      	mov	r9, r3
 800af7a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af7e:	682b      	ldr	r3, [r5, #0]
 800af80:	681c      	ldr	r4, [r3, #0]
 800af82:	ea36 0404 	bics.w	r4, r6, r4
 800af86:	bf0c      	ite	eq
 800af88:	2401      	moveq	r4, #1
 800af8a:	2400      	movne	r4, #0
 800af8c:	42bc      	cmp	r4, r7
 800af8e:	d128      	bne.n	800afe2 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 800af90:	f1b8 3fff 	cmp.w	r8, #4294967295
 800af94:	d0f3      	beq.n	800af7e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af96:	f7f8 fa1b 	bl	80033d0 <HAL_GetTick>
 800af9a:	eba0 0009 	sub.w	r0, r0, r9
 800af9e:	4540      	cmp	r0, r8
 800afa0:	d823      	bhi.n	800afea <UART_WaitOnFlagUntilTimeout+0x7e>
 800afa2:	f1b8 0f00 	cmp.w	r8, #0
 800afa6:	d022      	beq.n	800afee <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800afa8:	682b      	ldr	r3, [r5, #0]
 800afaa:	68da      	ldr	r2, [r3, #12]
 800afac:	f012 0f04 	tst.w	r2, #4
 800afb0:	d0e5      	beq.n	800af7e <UART_WaitOnFlagUntilTimeout+0x12>
 800afb2:	2e80      	cmp	r6, #128	@ 0x80
 800afb4:	d0e3      	beq.n	800af7e <UART_WaitOnFlagUntilTimeout+0x12>
 800afb6:	2e40      	cmp	r6, #64	@ 0x40
 800afb8:	d0e1      	beq.n	800af7e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	f012 0f08 	tst.w	r2, #8
 800afc0:	d0dd      	beq.n	800af7e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800afc2:	2400      	movs	r4, #0
 800afc4:	9401      	str	r4, [sp, #4]
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	9201      	str	r2, [sp, #4]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	9301      	str	r3, [sp, #4]
 800afce:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800afd0:	4628      	mov	r0, r5
 800afd2:	f7ff ff23 	bl	800ae1c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800afd6:	2308      	movs	r3, #8
 800afd8:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 800afda:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800afde:	2001      	movs	r0, #1
 800afe0:	e000      	b.n	800afe4 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 800afe2:	2000      	movs	r0, #0
}
 800afe4:	b003      	add	sp, #12
 800afe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 800afea:	2003      	movs	r0, #3
 800afec:	e7fa      	b.n	800afe4 <UART_WaitOnFlagUntilTimeout+0x78>
 800afee:	2003      	movs	r0, #3
 800aff0:	e7f8      	b.n	800afe4 <UART_WaitOnFlagUntilTimeout+0x78>
}
 800aff2:	4770      	bx	lr

0800aff4 <HAL_UART_Init>:
  if (huart == NULL)
 800aff4:	b360      	cbz	r0, 800b050 <HAL_UART_Init+0x5c>
{
 800aff6:	b510      	push	{r4, lr}
 800aff8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800affa:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800affe:	b313      	cbz	r3, 800b046 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800b000:	2324      	movs	r3, #36	@ 0x24
 800b002:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800b006:	6822      	ldr	r2, [r4, #0]
 800b008:	68d3      	ldr	r3, [r2, #12]
 800b00a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b00e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800b010:	4620      	mov	r0, r4
 800b012:	f7ff ff61 	bl	800aed8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b016:	6822      	ldr	r2, [r4, #0]
 800b018:	6913      	ldr	r3, [r2, #16]
 800b01a:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800b01e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b020:	6822      	ldr	r2, [r4, #0]
 800b022:	6953      	ldr	r3, [r2, #20]
 800b024:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800b028:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800b02a:	6822      	ldr	r2, [r4, #0]
 800b02c:	68d3      	ldr	r3, [r2, #12]
 800b02e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b032:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b034:	2000      	movs	r0, #0
 800b036:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b038:	2320      	movs	r3, #32
 800b03a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b03e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b042:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800b044:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800b046:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800b04a:	f7f8 f8a7 	bl	800319c <HAL_UART_MspInit>
 800b04e:	e7d7      	b.n	800b000 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800b050:	2001      	movs	r0, #1
}
 800b052:	4770      	bx	lr

0800b054 <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 800b054:	2800      	cmp	r0, #0
 800b056:	d031      	beq.n	800b0bc <HAL_HalfDuplex_Init+0x68>
{
 800b058:	b510      	push	{r4, lr}
 800b05a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800b05c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b060:	b33b      	cbz	r3, 800b0b2 <HAL_HalfDuplex_Init+0x5e>
  huart->gState = HAL_UART_STATE_BUSY;
 800b062:	2324      	movs	r3, #36	@ 0x24
 800b064:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800b068:	6822      	ldr	r2, [r4, #0]
 800b06a:	68d3      	ldr	r3, [r2, #12]
 800b06c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b070:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800b072:	4620      	mov	r0, r4
 800b074:	f7ff ff30 	bl	800aed8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b078:	6822      	ldr	r2, [r4, #0]
 800b07a:	6913      	ldr	r3, [r2, #16]
 800b07c:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800b080:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800b082:	6822      	ldr	r2, [r4, #0]
 800b084:	6953      	ldr	r3, [r2, #20]
 800b086:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b08a:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800b08c:	6822      	ldr	r2, [r4, #0]
 800b08e:	6953      	ldr	r3, [r2, #20]
 800b090:	f043 0308 	orr.w	r3, r3, #8
 800b094:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800b096:	6822      	ldr	r2, [r4, #0]
 800b098:	68d3      	ldr	r3, [r2, #12]
 800b09a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b09e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0a0:	2000      	movs	r0, #0
 800b0a2:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b0a4:	2320      	movs	r3, #32
 800b0a6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b0aa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0ae:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800b0b0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800b0b2:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800b0b6:	f7f8 f871 	bl	800319c <HAL_UART_MspInit>
 800b0ba:	e7d2      	b.n	800b062 <HAL_HalfDuplex_Init+0xe>
    return HAL_ERROR;
 800b0bc:	2001      	movs	r0, #1
}
 800b0be:	4770      	bx	lr

0800b0c0 <HAL_LIN_Init>:
  if (huart == NULL)
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d03c      	beq.n	800b13e <HAL_LIN_Init+0x7e>
{
 800b0c4:	b538      	push	{r3, r4, r5, lr}
 800b0c6:	460d      	mov	r5, r1
 800b0c8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800b0ca:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d030      	beq.n	800b134 <HAL_LIN_Init+0x74>
  huart->gState = HAL_UART_STATE_BUSY;
 800b0d2:	2324      	movs	r3, #36	@ 0x24
 800b0d4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800b0d8:	6822      	ldr	r2, [r4, #0]
 800b0da:	68d3      	ldr	r3, [r2, #12]
 800b0dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b0e0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f7ff fef8 	bl	800aed8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 800b0e8:	6822      	ldr	r2, [r4, #0]
 800b0ea:	6913      	ldr	r3, [r2, #16]
 800b0ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b0f0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 800b0f2:	6822      	ldr	r2, [r4, #0]
 800b0f4:	6953      	ldr	r3, [r2, #20]
 800b0f6:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800b0fa:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 800b0fc:	6822      	ldr	r2, [r4, #0]
 800b0fe:	6913      	ldr	r3, [r2, #16]
 800b100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b104:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 800b106:	6822      	ldr	r2, [r4, #0]
 800b108:	6913      	ldr	r3, [r2, #16]
 800b10a:	f023 0320 	bic.w	r3, r3, #32
 800b10e:	6113      	str	r3, [r2, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 800b110:	6822      	ldr	r2, [r4, #0]
 800b112:	6913      	ldr	r3, [r2, #16]
 800b114:	432b      	orrs	r3, r5
 800b116:	6113      	str	r3, [r2, #16]
  __HAL_UART_ENABLE(huart);
 800b118:	6822      	ldr	r2, [r4, #0]
 800b11a:	68d3      	ldr	r3, [r2, #12]
 800b11c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b120:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b122:	2000      	movs	r0, #0
 800b124:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b126:	2320      	movs	r3, #32
 800b128:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b12c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b130:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800b132:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 800b134:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800b138:	f7f8 f830 	bl	800319c <HAL_UART_MspInit>
 800b13c:	e7c9      	b.n	800b0d2 <HAL_LIN_Init+0x12>
    return HAL_ERROR;
 800b13e:	2001      	movs	r0, #1
}
 800b140:	4770      	bx	lr

0800b142 <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 800b142:	2800      	cmp	r0, #0
 800b144:	d041      	beq.n	800b1ca <HAL_MultiProcessor_Init+0x88>
{
 800b146:	b570      	push	{r4, r5, r6, lr}
 800b148:	460d      	mov	r5, r1
 800b14a:	4616      	mov	r6, r2
 800b14c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800b14e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b152:	2b00      	cmp	r3, #0
 800b154:	d034      	beq.n	800b1c0 <HAL_MultiProcessor_Init+0x7e>
  huart->gState = HAL_UART_STATE_BUSY;
 800b156:	2324      	movs	r3, #36	@ 0x24
 800b158:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800b15c:	6822      	ldr	r2, [r4, #0]
 800b15e:	68d3      	ldr	r3, [r2, #12]
 800b160:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b164:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800b166:	4620      	mov	r0, r4
 800b168:	f7ff feb6 	bl	800aed8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b16c:	6822      	ldr	r2, [r4, #0]
 800b16e:	6913      	ldr	r3, [r2, #16]
 800b170:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800b174:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b176:	6822      	ldr	r2, [r4, #0]
 800b178:	6953      	ldr	r3, [r2, #20]
 800b17a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800b17e:	6153      	str	r3, [r2, #20]
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 800b180:	6822      	ldr	r2, [r4, #0]
 800b182:	6913      	ldr	r3, [r2, #16]
 800b184:	f023 030f 	bic.w	r3, r3, #15
 800b188:	6113      	str	r3, [r2, #16]
  SET_BIT(huart->Instance->CR2, Address);
 800b18a:	6823      	ldr	r3, [r4, #0]
 800b18c:	691a      	ldr	r2, [r3, #16]
 800b18e:	4315      	orrs	r5, r2
 800b190:	611d      	str	r5, [r3, #16]
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 800b192:	6822      	ldr	r2, [r4, #0]
 800b194:	68d3      	ldr	r3, [r2, #12]
 800b196:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b19a:	60d3      	str	r3, [r2, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 800b19c:	6822      	ldr	r2, [r4, #0]
 800b19e:	68d3      	ldr	r3, [r2, #12]
 800b1a0:	4333      	orrs	r3, r6
 800b1a2:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE(huart);
 800b1a4:	6822      	ldr	r2, [r4, #0]
 800b1a6:	68d3      	ldr	r3, [r2, #12]
 800b1a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b1ac:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1ae:	2000      	movs	r0, #0
 800b1b0:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b1b2:	2320      	movs	r3, #32
 800b1b4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b1b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1bc:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800b1be:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800b1c0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800b1c4:	f7f7 ffea 	bl	800319c <HAL_UART_MspInit>
 800b1c8:	e7c5      	b.n	800b156 <HAL_MultiProcessor_Init+0x14>
    return HAL_ERROR;
 800b1ca:	2001      	movs	r0, #1
}
 800b1cc:	4770      	bx	lr
}
 800b1ce:	4770      	bx	lr

0800b1d0 <HAL_UART_DeInit>:
  if (huart == NULL)
 800b1d0:	b1b0      	cbz	r0, 800b200 <HAL_UART_DeInit+0x30>
{
 800b1d2:	b510      	push	{r4, lr}
 800b1d4:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800b1d6:	2324      	movs	r3, #36	@ 0x24
 800b1d8:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800b1dc:	6802      	ldr	r2, [r0, #0]
 800b1de:	68d3      	ldr	r3, [r2, #12]
 800b1e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b1e4:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 800b1e6:	f7f8 f855 	bl	8003294 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1ea:	2000      	movs	r0, #0
 800b1ec:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800b1ee:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800b1f2:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1f6:	6320      	str	r0, [r4, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1f8:	6360      	str	r0, [r4, #52]	@ 0x34
  __HAL_UNLOCK(huart);
 800b1fa:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 800b1fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b200:	2001      	movs	r0, #1
}
 800b202:	4770      	bx	lr

0800b204 <HAL_UART_Transmit>:
{
 800b204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b208:	b082      	sub	sp, #8
 800b20a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800b20c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b210:	b2db      	uxtb	r3, r3
 800b212:	2b20      	cmp	r3, #32
 800b214:	d156      	bne.n	800b2c4 <HAL_UART_Transmit+0xc0>
 800b216:	4604      	mov	r4, r0
 800b218:	460d      	mov	r5, r1
 800b21a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800b21c:	2900      	cmp	r1, #0
 800b21e:	d055      	beq.n	800b2cc <HAL_UART_Transmit+0xc8>
 800b220:	b90a      	cbnz	r2, 800b226 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 800b222:	2001      	movs	r0, #1
 800b224:	e04f      	b.n	800b2c6 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b226:	2300      	movs	r3, #0
 800b228:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b22a:	2321      	movs	r3, #33	@ 0x21
 800b22c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800b230:	f7f8 f8ce 	bl	80033d0 <HAL_GetTick>
 800b234:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800b236:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b23a:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b23e:	68a3      	ldr	r3, [r4, #8]
 800b240:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b244:	d002      	beq.n	800b24c <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 800b246:	f04f 0800 	mov.w	r8, #0
 800b24a:	e014      	b.n	800b276 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b24c:	6923      	ldr	r3, [r4, #16]
 800b24e:	b32b      	cbz	r3, 800b29c <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800b250:	f04f 0800 	mov.w	r8, #0
 800b254:	e00f      	b.n	800b276 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 800b256:	2320      	movs	r3, #32
 800b258:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 800b25c:	2003      	movs	r0, #3
 800b25e:	e032      	b.n	800b2c6 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b260:	f838 3b02 	ldrh.w	r3, [r8], #2
 800b264:	6822      	ldr	r2, [r4, #0]
 800b266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b26a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800b26c:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800b26e:	b292      	uxth	r2, r2
 800b270:	3a01      	subs	r2, #1
 800b272:	b292      	uxth	r2, r2
 800b274:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b276:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800b278:	b29b      	uxth	r3, r3
 800b27a:	b193      	cbz	r3, 800b2a2 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b27c:	9600      	str	r6, [sp, #0]
 800b27e:	463b      	mov	r3, r7
 800b280:	2200      	movs	r2, #0
 800b282:	2180      	movs	r1, #128	@ 0x80
 800b284:	4620      	mov	r0, r4
 800b286:	f7ff fe71 	bl	800af6c <UART_WaitOnFlagUntilTimeout>
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d1e3      	bne.n	800b256 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 800b28e:	2d00      	cmp	r5, #0
 800b290:	d0e6      	beq.n	800b260 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b292:	f815 2b01 	ldrb.w	r2, [r5], #1
 800b296:	6823      	ldr	r3, [r4, #0]
 800b298:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b29a:	e7e7      	b.n	800b26c <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 800b29c:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800b29e:	2500      	movs	r5, #0
 800b2a0:	e7e9      	b.n	800b276 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b2a2:	9600      	str	r6, [sp, #0]
 800b2a4:	463b      	mov	r3, r7
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	2140      	movs	r1, #64	@ 0x40
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	f7ff fe5e 	bl	800af6c <UART_WaitOnFlagUntilTimeout>
 800b2b0:	b918      	cbnz	r0, 800b2ba <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 800b2b2:	2320      	movs	r3, #32
 800b2b4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800b2b8:	e005      	b.n	800b2c6 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 800b2ba:	2320      	movs	r3, #32
 800b2bc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 800b2c0:	2003      	movs	r0, #3
 800b2c2:	e000      	b.n	800b2c6 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 800b2c4:	2002      	movs	r0, #2
}
 800b2c6:	b002      	add	sp, #8
 800b2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800b2cc:	2001      	movs	r0, #1
 800b2ce:	e7fa      	b.n	800b2c6 <HAL_UART_Transmit+0xc2>

0800b2d0 <HAL_UART_Receive>:
{
 800b2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d4:	b082      	sub	sp, #8
 800b2d6:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800b2d8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	2b20      	cmp	r3, #32
 800b2e0:	d159      	bne.n	800b396 <HAL_UART_Receive+0xc6>
 800b2e2:	4604      	mov	r4, r0
 800b2e4:	460d      	mov	r5, r1
 800b2e6:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800b2e8:	2900      	cmp	r1, #0
 800b2ea:	d058      	beq.n	800b39e <HAL_UART_Receive+0xce>
 800b2ec:	b90a      	cbnz	r2, 800b2f2 <HAL_UART_Receive+0x22>
      return  HAL_ERROR;
 800b2ee:	2001      	movs	r0, #1
 800b2f0:	e052      	b.n	800b398 <HAL_UART_Receive+0xc8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b2f6:	2222      	movs	r2, #34	@ 0x22
 800b2f8:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2fc:	6303      	str	r3, [r0, #48]	@ 0x30
    tickstart = HAL_GetTick();
 800b2fe:	f7f8 f867 	bl	80033d0 <HAL_GetTick>
 800b302:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 800b304:	f8a4 802c 	strh.w	r8, [r4, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800b308:	f8a4 802e 	strh.w	r8, [r4, #46]	@ 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b30c:	68a3      	ldr	r3, [r4, #8]
 800b30e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b312:	d002      	beq.n	800b31a <HAL_UART_Receive+0x4a>
      pdata16bits = NULL;
 800b314:	f04f 0800 	mov.w	r8, #0
 800b318:	e01c      	b.n	800b354 <HAL_UART_Receive+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b31a:	6923      	ldr	r3, [r4, #16]
 800b31c:	b113      	cbz	r3, 800b324 <HAL_UART_Receive+0x54>
      pdata16bits = NULL;
 800b31e:	f04f 0800 	mov.w	r8, #0
 800b322:	e017      	b.n	800b354 <HAL_UART_Receive+0x84>
      pdata16bits = (uint16_t *) pData;
 800b324:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800b326:	2500      	movs	r5, #0
 800b328:	e014      	b.n	800b354 <HAL_UART_Receive+0x84>
        huart->RxState = HAL_UART_STATE_READY;
 800b32a:	2320      	movs	r3, #32
 800b32c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        return HAL_TIMEOUT;
 800b330:	2003      	movs	r0, #3
 800b332:	e031      	b.n	800b398 <HAL_UART_Receive+0xc8>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800b334:	6823      	ldr	r3, [r4, #0]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b33c:	f828 3b02 	strh.w	r3, [r8], #2
        pdata16bits++;
 800b340:	e003      	b.n	800b34a <HAL_UART_Receive+0x7a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b342:	6823      	ldr	r3, [r4, #0]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 800b348:	3501      	adds	r5, #1
      huart->RxXferCount--;
 800b34a:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
 800b34c:	b292      	uxth	r2, r2
 800b34e:	3a01      	subs	r2, #1
 800b350:	b292      	uxth	r2, r2
 800b352:	85e2      	strh	r2, [r4, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800b354:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800b356:	b29b      	uxth	r3, r3
 800b358:	b1c3      	cbz	r3, 800b38c <HAL_UART_Receive+0xbc>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b35a:	9600      	str	r6, [sp, #0]
 800b35c:	463b      	mov	r3, r7
 800b35e:	2200      	movs	r2, #0
 800b360:	2120      	movs	r1, #32
 800b362:	4620      	mov	r0, r4
 800b364:	f7ff fe02 	bl	800af6c <UART_WaitOnFlagUntilTimeout>
 800b368:	2800      	cmp	r0, #0
 800b36a:	d1de      	bne.n	800b32a <HAL_UART_Receive+0x5a>
      if (pdata8bits == NULL)
 800b36c:	2d00      	cmp	r5, #0
 800b36e:	d0e1      	beq.n	800b334 <HAL_UART_Receive+0x64>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b370:	68a3      	ldr	r3, [r4, #8]
 800b372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b376:	d0e4      	beq.n	800b342 <HAL_UART_Receive+0x72>
 800b378:	b913      	cbnz	r3, 800b380 <HAL_UART_Receive+0xb0>
 800b37a:	6923      	ldr	r3, [r4, #16]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d0e0      	beq.n	800b342 <HAL_UART_Receive+0x72>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b380:	6823      	ldr	r3, [r4, #0]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b388:	702b      	strb	r3, [r5, #0]
 800b38a:	e7dd      	b.n	800b348 <HAL_UART_Receive+0x78>
    huart->RxState = HAL_UART_STATE_READY;
 800b38c:	2320      	movs	r3, #32
 800b38e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    return HAL_OK;
 800b392:	2000      	movs	r0, #0
 800b394:	e000      	b.n	800b398 <HAL_UART_Receive+0xc8>
    return HAL_BUSY;
 800b396:	2002      	movs	r0, #2
}
 800b398:	b002      	add	sp, #8
 800b39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800b39e:	2001      	movs	r0, #1
 800b3a0:	e7fa      	b.n	800b398 <HAL_UART_Receive+0xc8>

0800b3a2 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800b3a2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	2b20      	cmp	r3, #32
 800b3aa:	d110      	bne.n	800b3ce <HAL_UART_Transmit_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
 800b3ac:	b189      	cbz	r1, 800b3d2 <HAL_UART_Transmit_IT+0x30>
 800b3ae:	b192      	cbz	r2, 800b3d6 <HAL_UART_Transmit_IT+0x34>
    huart->pTxBuffPtr = pData;
 800b3b0:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800b3b2:	8482      	strh	r2, [r0, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b3b4:	84c2      	strh	r2, [r0, #38]	@ 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b3ba:	2221      	movs	r2, #33	@ 0x21
 800b3bc:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b3c0:	6801      	ldr	r1, [r0, #0]
 800b3c2:	68ca      	ldr	r2, [r1, #12]
 800b3c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b3c8:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	4770      	bx	lr
    return HAL_BUSY;
 800b3ce:	2002      	movs	r0, #2
 800b3d0:	4770      	bx	lr
      return HAL_ERROR;
 800b3d2:	2001      	movs	r0, #1
 800b3d4:	4770      	bx	lr
 800b3d6:	2001      	movs	r0, #1
}
 800b3d8:	4770      	bx	lr
	...

0800b3dc <HAL_UART_Transmit_DMA>:
{
 800b3dc:	b538      	push	{r3, r4, r5, lr}
 800b3de:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800b3e0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800b3e4:	b2d2      	uxtb	r2, r2
 800b3e6:	2a20      	cmp	r2, #32
 800b3e8:	d12f      	bne.n	800b44a <HAL_UART_Transmit_DMA+0x6e>
 800b3ea:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800b3ec:	2900      	cmp	r1, #0
 800b3ee:	d02e      	beq.n	800b44e <HAL_UART_Transmit_DMA+0x72>
 800b3f0:	b90b      	cbnz	r3, 800b3f6 <HAL_UART_Transmit_DMA+0x1a>
      return HAL_ERROR;
 800b3f2:	2001      	movs	r0, #1
}
 800b3f4:	bd38      	pop	{r3, r4, r5, pc}
    huart->pTxBuffPtr = pData;
 800b3f6:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800b3f8:	8483      	strh	r3, [r0, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b3fa:	84c3      	strh	r3, [r0, #38]	@ 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	6442      	str	r2, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b400:	2021      	movs	r0, #33	@ 0x21
 800b402:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b406:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800b408:	4d12      	ldr	r5, [pc, #72]	@ (800b454 <HAL_UART_Transmit_DMA+0x78>)
 800b40a:	6285      	str	r5, [r0, #40]	@ 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b40c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800b40e:	4d12      	ldr	r5, [pc, #72]	@ (800b458 <HAL_UART_Transmit_DMA+0x7c>)
 800b410:	62c5      	str	r5, [r0, #44]	@ 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b412:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800b414:	4d11      	ldr	r5, [pc, #68]	@ (800b45c <HAL_UART_Transmit_DMA+0x80>)
 800b416:	6305      	str	r5, [r0, #48]	@ 0x30
    huart->hdmatx->XferAbortCallback = NULL;
 800b418:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800b41a:	6342      	str	r2, [r0, #52]	@ 0x34
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b41c:	6822      	ldr	r2, [r4, #0]
 800b41e:	3204      	adds	r2, #4
 800b420:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800b422:	f7f8 fa84 	bl	800392e <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b42c:	601a      	str	r2, [r3, #0]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b42e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b430:	f102 0314 	add.w	r3, r2, #20
 800b434:	e853 3f00 	ldrex	r3, [r3]
 800b438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b43c:	3214      	adds	r2, #20
 800b43e:	e842 3100 	strex	r1, r3, [r2]
 800b442:	2900      	cmp	r1, #0
 800b444:	d1f3      	bne.n	800b42e <HAL_UART_Transmit_DMA+0x52>
    return HAL_OK;
 800b446:	2000      	movs	r0, #0
 800b448:	e7d4      	b.n	800b3f4 <HAL_UART_Transmit_DMA+0x18>
    return HAL_BUSY;
 800b44a:	2002      	movs	r0, #2
 800b44c:	e7d2      	b.n	800b3f4 <HAL_UART_Transmit_DMA+0x18>
      return HAL_ERROR;
 800b44e:	2001      	movs	r0, #1
 800b450:	e7d0      	b.n	800b3f4 <HAL_UART_Transmit_DMA+0x18>
 800b452:	bf00      	nop
 800b454:	0800b939 	.word	0x0800b939
 800b458:	0800b9a1 	.word	0x0800b9a1
 800b45c:	0800b9b1 	.word	0x0800b9b1

0800b460 <HAL_UART_DMAPause>:
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b460:	6803      	ldr	r3, [r0, #0]
 800b462:	695a      	ldr	r2, [r3, #20]
 800b464:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b468:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	2b21      	cmp	r3, #33	@ 0x21
 800b470:	d00a      	beq.n	800b488 <HAL_UART_DMAPause+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b472:	6803      	ldr	r3, [r0, #0]
 800b474:	695a      	ldr	r2, [r3, #20]
 800b476:	f002 0240 	and.w	r2, r2, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b47a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	2b22      	cmp	r3, #34	@ 0x22
 800b482:	d010      	beq.n	800b4a6 <HAL_UART_DMAPause+0x46>
}
 800b484:	2000      	movs	r0, #0
 800b486:	4770      	bx	lr
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b488:	2a00      	cmp	r2, #0
 800b48a:	d0f2      	beq.n	800b472 <HAL_UART_DMAPause+0x12>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b48c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b48e:	f102 0314 	add.w	r3, r2, #20
 800b492:	e853 3f00 	ldrex	r3, [r3]
 800b496:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b49a:	3214      	adds	r2, #20
 800b49c:	e842 3100 	strex	r1, r3, [r2]
 800b4a0:	2900      	cmp	r1, #0
 800b4a2:	d1f3      	bne.n	800b48c <HAL_UART_DMAPause+0x2c>
 800b4a4:	e7e5      	b.n	800b472 <HAL_UART_DMAPause+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b4a6:	2a00      	cmp	r2, #0
 800b4a8:	d0ec      	beq.n	800b484 <HAL_UART_DMAPause+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4aa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ac:	f102 030c 	add.w	r3, r2, #12
 800b4b0:	e853 3f00 	ldrex	r3, [r3]
 800b4b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b8:	320c      	adds	r2, #12
 800b4ba:	e842 3100 	strex	r1, r3, [r2]
 800b4be:	2900      	cmp	r1, #0
 800b4c0:	d1f3      	bne.n	800b4aa <HAL_UART_DMAPause+0x4a>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4c2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c4:	f102 0314 	add.w	r3, r2, #20
 800b4c8:	e853 3f00 	ldrex	r3, [r3]
 800b4cc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d0:	3214      	adds	r2, #20
 800b4d2:	e842 3100 	strex	r1, r3, [r2]
 800b4d6:	2900      	cmp	r1, #0
 800b4d8:	d1f3      	bne.n	800b4c2 <HAL_UART_DMAPause+0x62>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4da:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4dc:	f102 0314 	add.w	r3, r2, #20
 800b4e0:	e853 3f00 	ldrex	r3, [r3]
 800b4e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e8:	3214      	adds	r2, #20
 800b4ea:	e842 3100 	strex	r1, r3, [r2]
 800b4ee:	2900      	cmp	r1, #0
 800b4f0:	d1f3      	bne.n	800b4da <HAL_UART_DMAPause+0x7a>
 800b4f2:	e7c7      	b.n	800b484 <HAL_UART_DMAPause+0x24>

0800b4f4 <HAL_UART_DMAResume>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b4f4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	2b21      	cmp	r3, #33	@ 0x21
 800b4fc:	d006      	beq.n	800b50c <HAL_UART_DMAResume+0x18>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4fe:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800b502:	b2db      	uxtb	r3, r3
 800b504:	2b22      	cmp	r3, #34	@ 0x22
 800b506:	d00e      	beq.n	800b526 <HAL_UART_DMAResume+0x32>
}
 800b508:	2000      	movs	r0, #0
 800b50a:	4770      	bx	lr
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b50c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50e:	f102 0314 	add.w	r3, r2, #20
 800b512:	e853 3f00 	ldrex	r3, [r3]
 800b516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51a:	3214      	adds	r2, #20
 800b51c:	e842 3100 	strex	r1, r3, [r2]
 800b520:	2900      	cmp	r1, #0
 800b522:	d1f3      	bne.n	800b50c <HAL_UART_DMAResume+0x18>
 800b524:	e7eb      	b.n	800b4fe <HAL_UART_DMAResume+0xa>
{
 800b526:	b082      	sub	sp, #8
    __HAL_UART_CLEAR_OREFLAG(huart);
 800b528:	2300      	movs	r3, #0
 800b52a:	9301      	str	r3, [sp, #4]
 800b52c:	6803      	ldr	r3, [r0, #0]
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	9201      	str	r2, [sp, #4]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	9301      	str	r3, [sp, #4]
 800b536:	9b01      	ldr	r3, [sp, #4]
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b538:	6903      	ldr	r3, [r0, #16]
 800b53a:	b15b      	cbz	r3, 800b554 <HAL_UART_DMAResume+0x60>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b53c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53e:	f102 030c 	add.w	r3, r2, #12
 800b542:	e853 3f00 	ldrex	r3, [r3]
 800b546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54a:	320c      	adds	r2, #12
 800b54c:	e842 3100 	strex	r1, r3, [r2]
 800b550:	2900      	cmp	r1, #0
 800b552:	d1f3      	bne.n	800b53c <HAL_UART_DMAResume+0x48>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b554:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b556:	f102 0314 	add.w	r3, r2, #20
 800b55a:	e853 3f00 	ldrex	r3, [r3]
 800b55e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b562:	3214      	adds	r2, #20
 800b564:	e842 3100 	strex	r1, r3, [r2]
 800b568:	2900      	cmp	r1, #0
 800b56a:	d1f3      	bne.n	800b554 <HAL_UART_DMAResume+0x60>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b56c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56e:	f102 0314 	add.w	r3, r2, #20
 800b572:	e853 3f00 	ldrex	r3, [r3]
 800b576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b57a:	3214      	adds	r2, #20
 800b57c:	e842 3100 	strex	r1, r3, [r2]
 800b580:	2900      	cmp	r1, #0
 800b582:	d1f3      	bne.n	800b56c <HAL_UART_DMAResume+0x78>
}
 800b584:	2000      	movs	r0, #0
 800b586:	b002      	add	sp, #8
 800b588:	4770      	bx	lr

0800b58a <HAL_UART_DMAStop>:
{
 800b58a:	b510      	push	{r4, lr}
 800b58c:	4604      	mov	r4, r0
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b58e:	6803      	ldr	r3, [r0, #0]
 800b590:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b592:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b596:	b2db      	uxtb	r3, r3
 800b598:	2b21      	cmp	r3, #33	@ 0x21
 800b59a:	d00a      	beq.n	800b5b2 <HAL_UART_DMAStop+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b59c:	6823      	ldr	r3, [r4, #0]
 800b59e:	695a      	ldr	r2, [r3, #20]
 800b5a0:	f002 0240 	and.w	r2, r2, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b5a4:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	2b22      	cmp	r3, #34	@ 0x22
 800b5ac:	d019      	beq.n	800b5e2 <HAL_UART_DMAStop+0x58>
}
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	bd10      	pop	{r4, pc}
 800b5b2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b5b6:	2a00      	cmp	r2, #0
 800b5b8:	d0f0      	beq.n	800b59c <HAL_UART_DMAStop+0x12>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b5ba:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5bc:	f102 0314 	add.w	r3, r2, #20
 800b5c0:	e853 3f00 	ldrex	r3, [r3]
 800b5c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c8:	3214      	adds	r2, #20
 800b5ca:	e842 3100 	strex	r1, r3, [r2]
 800b5ce:	2900      	cmp	r1, #0
 800b5d0:	d1f3      	bne.n	800b5ba <HAL_UART_DMAStop+0x30>
    if (huart->hdmatx != NULL)
 800b5d2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800b5d4:	b108      	cbz	r0, 800b5da <HAL_UART_DMAStop+0x50>
      HAL_DMA_Abort(huart->hdmatx);
 800b5d6:	f7f8 f9e5 	bl	80039a4 <HAL_DMA_Abort>
    UART_EndTxTransfer(huart);
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f7ff fc0e 	bl	800adfc <UART_EndTxTransfer>
 800b5e0:	e7dc      	b.n	800b59c <HAL_UART_DMAStop+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b5e2:	2a00      	cmp	r2, #0
 800b5e4:	d0e3      	beq.n	800b5ae <HAL_UART_DMAStop+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5e6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e8:	f102 0314 	add.w	r3, r2, #20
 800b5ec:	e853 3f00 	ldrex	r3, [r3]
 800b5f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f4:	3214      	adds	r2, #20
 800b5f6:	e842 3100 	strex	r1, r3, [r2]
 800b5fa:	2900      	cmp	r1, #0
 800b5fc:	d1f3      	bne.n	800b5e6 <HAL_UART_DMAStop+0x5c>
    if (huart->hdmarx != NULL)
 800b5fe:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800b600:	b108      	cbz	r0, 800b606 <HAL_UART_DMAStop+0x7c>
      HAL_DMA_Abort(huart->hdmarx);
 800b602:	f7f8 f9cf 	bl	80039a4 <HAL_DMA_Abort>
    UART_EndRxTransfer(huart);
 800b606:	4620      	mov	r0, r4
 800b608:	f7ff fc08 	bl	800ae1c <UART_EndRxTransfer>
 800b60c:	e7cf      	b.n	800b5ae <HAL_UART_DMAStop+0x24>

0800b60e <HAL_UARTEx_ReceiveToIdle>:
{
 800b60e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b612:	b083      	sub	sp, #12
 800b614:	461e      	mov	r6, r3
 800b616:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  if (huart->RxState == HAL_UART_STATE_READY)
 800b618:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	2b20      	cmp	r3, #32
 800b620:	d17f      	bne.n	800b722 <HAL_UARTEx_ReceiveToIdle+0x114>
 800b622:	4604      	mov	r4, r0
 800b624:	460d      	mov	r5, r1
 800b626:	4691      	mov	r9, r2
    if ((pData == NULL) || (Size == 0U))
 800b628:	2900      	cmp	r1, #0
 800b62a:	d07e      	beq.n	800b72a <HAL_UARTEx_ReceiveToIdle+0x11c>
 800b62c:	b90a      	cbnz	r2, 800b632 <HAL_UARTEx_ReceiveToIdle+0x24>
      return  HAL_ERROR;
 800b62e:	2001      	movs	r0, #1
 800b630:	e078      	b.n	800b724 <HAL_UARTEx_ReceiveToIdle+0x116>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b632:	2300      	movs	r3, #0
 800b634:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b636:	2222      	movs	r2, #34	@ 0x22
 800b638:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b63c:	2201      	movs	r2, #1
 800b63e:	6302      	str	r2, [r0, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b640:	6343      	str	r3, [r0, #52]	@ 0x34
    tickstart = HAL_GetTick();
 800b642:	f7f7 fec5 	bl	80033d0 <HAL_GetTick>
 800b646:	4680      	mov	r8, r0
    huart->RxXferSize  = Size;
 800b648:	f8a4 902c 	strh.w	r9, [r4, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800b64c:	f8a4 902e 	strh.w	r9, [r4, #46]	@ 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b650:	68a3      	ldr	r3, [r4, #8]
 800b652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b656:	d004      	beq.n	800b662 <HAL_UARTEx_ReceiveToIdle+0x54>
      pdata16bits = NULL;
 800b658:	f04f 0900 	mov.w	r9, #0
    *RxLen = 0U;
 800b65c:	2300      	movs	r3, #0
 800b65e:	8033      	strh	r3, [r6, #0]
    while (huart->RxXferCount > 0U)
 800b660:	e022      	b.n	800b6a8 <HAL_UARTEx_ReceiveToIdle+0x9a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b662:	6923      	ldr	r3, [r4, #16]
 800b664:	b113      	cbz	r3, 800b66c <HAL_UARTEx_ReceiveToIdle+0x5e>
      pdata16bits = NULL;
 800b666:	f04f 0900 	mov.w	r9, #0
 800b66a:	e7f7      	b.n	800b65c <HAL_UARTEx_ReceiveToIdle+0x4e>
      pdata16bits = (uint16_t *) pData;
 800b66c:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 800b66e:	2500      	movs	r5, #0
 800b670:	e7f4      	b.n	800b65c <HAL_UARTEx_ReceiveToIdle+0x4e>
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b672:	2302      	movs	r3, #2
 800b674:	6363      	str	r3, [r4, #52]	@ 0x34
          huart->RxState = HAL_UART_STATE_READY;
 800b676:	2320      	movs	r3, #32
 800b678:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          return HAL_OK;
 800b67c:	2000      	movs	r0, #0
 800b67e:	e051      	b.n	800b724 <HAL_UARTEx_ReceiveToIdle+0x116>
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b680:	6853      	ldr	r3, [r2, #4]
 800b682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b686:	f829 3b02 	strh.w	r3, [r9], #2
          pdata16bits++;
 800b68a:	e002      	b.n	800b692 <HAL_UARTEx_ReceiveToIdle+0x84>
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b68c:	6853      	ldr	r3, [r2, #4]
 800b68e:	702b      	strb	r3, [r5, #0]
          pdata8bits++;
 800b690:	3501      	adds	r5, #1
        *RxLen += 1U;
 800b692:	8833      	ldrh	r3, [r6, #0]
 800b694:	3301      	adds	r3, #1
 800b696:	8033      	strh	r3, [r6, #0]
        huart->RxXferCount--;
 800b698:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	3b01      	subs	r3, #1
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	85e3      	strh	r3, [r4, #46]	@ 0x2e
      if (Timeout != HAL_MAX_DELAY)
 800b6a2:	f1b7 3fff 	cmp.w	r7, #4294967295
 800b6a6:	d125      	bne.n	800b6f4 <HAL_UARTEx_ReceiveToIdle+0xe6>
    while (huart->RxXferCount > 0U)
 800b6a8:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
 800b6aa:	b292      	uxth	r2, r2
 800b6ac:	2a00      	cmp	r2, #0
 800b6ae:	d02e      	beq.n	800b70e <HAL_UARTEx_ReceiveToIdle+0x100>
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b6b0:	6822      	ldr	r2, [r4, #0]
 800b6b2:	6813      	ldr	r3, [r2, #0]
 800b6b4:	f013 0f10 	tst.w	r3, #16
 800b6b8:	d009      	beq.n	800b6ce <HAL_UARTEx_ReceiveToIdle+0xc0>
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	9301      	str	r3, [sp, #4]
 800b6be:	6813      	ldr	r3, [r2, #0]
 800b6c0:	9301      	str	r3, [sp, #4]
 800b6c2:	6853      	ldr	r3, [r2, #4]
 800b6c4:	9301      	str	r3, [sp, #4]
 800b6c6:	9b01      	ldr	r3, [sp, #4]
        if (*RxLen > 0U)
 800b6c8:	8833      	ldrh	r3, [r6, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d1d1      	bne.n	800b672 <HAL_UARTEx_ReceiveToIdle+0x64>
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 800b6ce:	6813      	ldr	r3, [r2, #0]
 800b6d0:	f013 0f20 	tst.w	r3, #32
 800b6d4:	d0e5      	beq.n	800b6a2 <HAL_UARTEx_ReceiveToIdle+0x94>
        if (pdata8bits == NULL)
 800b6d6:	2d00      	cmp	r5, #0
 800b6d8:	d0d2      	beq.n	800b680 <HAL_UARTEx_ReceiveToIdle+0x72>
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b6da:	68a3      	ldr	r3, [r4, #8]
 800b6dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6e0:	d0d4      	beq.n	800b68c <HAL_UARTEx_ReceiveToIdle+0x7e>
 800b6e2:	b913      	cbnz	r3, 800b6ea <HAL_UARTEx_ReceiveToIdle+0xdc>
 800b6e4:	6923      	ldr	r3, [r4, #16]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d0d0      	beq.n	800b68c <HAL_UARTEx_ReceiveToIdle+0x7e>
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b6ea:	6853      	ldr	r3, [r2, #4]
 800b6ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6f0:	702b      	strb	r3, [r5, #0]
 800b6f2:	e7cd      	b.n	800b690 <HAL_UARTEx_ReceiveToIdle+0x82>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b6f4:	f7f7 fe6c 	bl	80033d0 <HAL_GetTick>
 800b6f8:	eba0 0008 	sub.w	r0, r0, r8
 800b6fc:	42b8      	cmp	r0, r7
 800b6fe:	d801      	bhi.n	800b704 <HAL_UARTEx_ReceiveToIdle+0xf6>
 800b700:	2f00      	cmp	r7, #0
 800b702:	d1d1      	bne.n	800b6a8 <HAL_UARTEx_ReceiveToIdle+0x9a>
          huart->RxState = HAL_UART_STATE_READY;
 800b704:	2320      	movs	r3, #32
 800b706:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          return HAL_TIMEOUT;
 800b70a:	2003      	movs	r0, #3
 800b70c:	e00a      	b.n	800b724 <HAL_UARTEx_ReceiveToIdle+0x116>
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800b70e:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 800b710:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
 800b712:	b292      	uxth	r2, r2
 800b714:	1a9b      	subs	r3, r3, r2
 800b716:	8033      	strh	r3, [r6, #0]
    huart->RxState = HAL_UART_STATE_READY;
 800b718:	2320      	movs	r3, #32
 800b71a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    return HAL_OK;
 800b71e:	2000      	movs	r0, #0
 800b720:	e000      	b.n	800b724 <HAL_UARTEx_ReceiveToIdle+0x116>
    return HAL_BUSY;
 800b722:	2002      	movs	r0, #2
}
 800b724:	b003      	add	sp, #12
 800b726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800b72a:	2001      	movs	r0, #1
 800b72c:	e7fa      	b.n	800b724 <HAL_UARTEx_ReceiveToIdle+0x116>

0800b72e <HAL_UARTEx_GetRxEventType>:
  return(huart->RxEventType);
 800b72e:	6b40      	ldr	r0, [r0, #52]	@ 0x34
}
 800b730:	4770      	bx	lr

0800b732 <HAL_UART_Abort>:
{
 800b732:	b510      	push	{r4, lr}
 800b734:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800b736:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b738:	f102 030c 	add.w	r3, r2, #12
 800b73c:	e853 3f00 	ldrex	r3, [r3]
 800b740:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b744:	320c      	adds	r2, #12
 800b746:	e842 3100 	strex	r1, r3, [r2]
 800b74a:	2900      	cmp	r1, #0
 800b74c:	d1f3      	bne.n	800b736 <HAL_UART_Abort+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b74e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b750:	f102 0314 	add.w	r3, r2, #20
 800b754:	e853 3f00 	ldrex	r3, [r3]
 800b758:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b75c:	3214      	adds	r2, #20
 800b75e:	e842 3100 	strex	r1, r3, [r2]
 800b762:	2900      	cmp	r1, #0
 800b764:	d1f3      	bne.n	800b74e <HAL_UART_Abort+0x1c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b766:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d03c      	beq.n	800b7e6 <HAL_UART_Abort+0xb4>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b76c:	6823      	ldr	r3, [r4, #0]
 800b76e:	695b      	ldr	r3, [r3, #20]
 800b770:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b774:	d013      	beq.n	800b79e <HAL_UART_Abort+0x6c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b776:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b778:	f102 0314 	add.w	r3, r2, #20
 800b77c:	e853 3f00 	ldrex	r3, [r3]
 800b780:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b784:	3214      	adds	r2, #20
 800b786:	e842 3100 	strex	r1, r3, [r2]
 800b78a:	2900      	cmp	r1, #0
 800b78c:	d1f3      	bne.n	800b776 <HAL_UART_Abort+0x44>
    if (huart->hdmatx != NULL)
 800b78e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b790:	b12b      	cbz	r3, 800b79e <HAL_UART_Abort+0x6c>
      huart->hdmatx->XferAbortCallback = NULL;
 800b792:	2200      	movs	r2, #0
 800b794:	635a      	str	r2, [r3, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b796:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800b798:	f7f8 f904 	bl	80039a4 <HAL_DMA_Abort>
 800b79c:	bb80      	cbnz	r0, 800b800 <HAL_UART_Abort+0xce>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b79e:	6823      	ldr	r3, [r4, #0]
 800b7a0:	695b      	ldr	r3, [r3, #20]
 800b7a2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800b7a6:	d013      	beq.n	800b7d0 <HAL_UART_Abort+0x9e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7a8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7aa:	f102 0314 	add.w	r3, r2, #20
 800b7ae:	e853 3f00 	ldrex	r3, [r3]
 800b7b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b6:	3214      	adds	r2, #20
 800b7b8:	e842 3100 	strex	r1, r3, [r2]
 800b7bc:	2900      	cmp	r1, #0
 800b7be:	d1f3      	bne.n	800b7a8 <HAL_UART_Abort+0x76>
    if (huart->hdmarx != NULL)
 800b7c0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b7c2:	b12b      	cbz	r3, 800b7d0 <HAL_UART_Abort+0x9e>
      huart->hdmarx->XferAbortCallback = NULL;
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	635a      	str	r2, [r3, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b7c8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800b7ca:	f7f8 f8eb 	bl	80039a4 <HAL_DMA_Abort>
 800b7ce:	bb00      	cbnz	r0, 800b812 <HAL_UART_Abort+0xe0>
  huart->TxXferCount = 0x00U;
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	84e0      	strh	r0, [r4, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 800b7d4:	85e0      	strh	r0, [r4, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7d6:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_READY;
 800b7d8:	2320      	movs	r3, #32
 800b7da:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->gState = HAL_UART_STATE_READY;
 800b7de:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7e2:	6320      	str	r0, [r4, #48]	@ 0x30
}
 800b7e4:	bd10      	pop	{r4, pc}
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b7e6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e8:	f102 030c 	add.w	r3, r2, #12
 800b7ec:	e853 3f00 	ldrex	r3, [r3]
 800b7f0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f4:	320c      	adds	r2, #12
 800b7f6:	e842 3100 	strex	r1, r3, [r2]
 800b7fa:	2900      	cmp	r1, #0
 800b7fc:	d1f3      	bne.n	800b7e6 <HAL_UART_Abort+0xb4>
 800b7fe:	e7b5      	b.n	800b76c <HAL_UART_Abort+0x3a>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b800:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800b802:	f7f8 fe1c 	bl	800443e <HAL_DMA_GetError>
 800b806:	2820      	cmp	r0, #32
 800b808:	d1c9      	bne.n	800b79e <HAL_UART_Abort+0x6c>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b80a:	2310      	movs	r3, #16
 800b80c:	6463      	str	r3, [r4, #68]	@ 0x44
          return HAL_TIMEOUT;
 800b80e:	2003      	movs	r0, #3
 800b810:	e7e8      	b.n	800b7e4 <HAL_UART_Abort+0xb2>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b812:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800b814:	f7f8 fe13 	bl	800443e <HAL_DMA_GetError>
 800b818:	2820      	cmp	r0, #32
 800b81a:	d1d9      	bne.n	800b7d0 <HAL_UART_Abort+0x9e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b81c:	2310      	movs	r3, #16
 800b81e:	6463      	str	r3, [r4, #68]	@ 0x44
          return HAL_TIMEOUT;
 800b820:	2003      	movs	r0, #3
 800b822:	e7df      	b.n	800b7e4 <HAL_UART_Abort+0xb2>

0800b824 <HAL_UART_AbortTransmit>:
{
 800b824:	b510      	push	{r4, lr}
 800b826:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b828:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82a:	f102 030c 	add.w	r3, r2, #12
 800b82e:	e853 3f00 	ldrex	r3, [r3]
 800b832:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b836:	320c      	adds	r2, #12
 800b838:	e842 3100 	strex	r1, r3, [r2]
 800b83c:	2900      	cmp	r1, #0
 800b83e:	d1f3      	bne.n	800b828 <HAL_UART_AbortTransmit+0x4>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b840:	6823      	ldr	r3, [r4, #0]
 800b842:	695b      	ldr	r3, [r3, #20]
 800b844:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b848:	d013      	beq.n	800b872 <HAL_UART_AbortTransmit+0x4e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b84a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84c:	f102 0314 	add.w	r3, r2, #20
 800b850:	e853 3f00 	ldrex	r3, [r3]
 800b854:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b858:	3214      	adds	r2, #20
 800b85a:	e842 3100 	strex	r1, r3, [r2]
 800b85e:	2900      	cmp	r1, #0
 800b860:	d1f3      	bne.n	800b84a <HAL_UART_AbortTransmit+0x26>
    if (huart->hdmatx != NULL)
 800b862:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b864:	b12b      	cbz	r3, 800b872 <HAL_UART_AbortTransmit+0x4e>
      huart->hdmatx->XferAbortCallback = NULL;
 800b866:	2200      	movs	r2, #0
 800b868:	635a      	str	r2, [r3, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b86a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800b86c:	f7f8 f89a 	bl	80039a4 <HAL_DMA_Abort>
 800b870:	b928      	cbnz	r0, 800b87e <HAL_UART_AbortTransmit+0x5a>
  huart->TxXferCount = 0x00U;
 800b872:	2000      	movs	r0, #0
 800b874:	84e0      	strh	r0, [r4, #38]	@ 0x26
  huart->gState = HAL_UART_STATE_READY;
 800b876:	2320      	movs	r3, #32
 800b878:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800b87c:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b87e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800b880:	f7f8 fddd 	bl	800443e <HAL_DMA_GetError>
 800b884:	2820      	cmp	r0, #32
 800b886:	d1f4      	bne.n	800b872 <HAL_UART_AbortTransmit+0x4e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b888:	2310      	movs	r3, #16
 800b88a:	6463      	str	r3, [r4, #68]	@ 0x44
          return HAL_TIMEOUT;
 800b88c:	2003      	movs	r0, #3
 800b88e:	e7f5      	b.n	800b87c <HAL_UART_AbortTransmit+0x58>

0800b890 <HAL_UART_AbortReceive>:
{
 800b890:	b510      	push	{r4, lr}
 800b892:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b894:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b896:	f102 030c 	add.w	r3, r2, #12
 800b89a:	e853 3f00 	ldrex	r3, [r3]
 800b89e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a2:	320c      	adds	r2, #12
 800b8a4:	e842 3100 	strex	r1, r3, [r2]
 800b8a8:	2900      	cmp	r1, #0
 800b8aa:	d1f3      	bne.n	800b894 <HAL_UART_AbortReceive+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8ac:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ae:	f102 0314 	add.w	r3, r2, #20
 800b8b2:	e853 3f00 	ldrex	r3, [r3]
 800b8b6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ba:	3214      	adds	r2, #20
 800b8bc:	e842 3100 	strex	r1, r3, [r2]
 800b8c0:	2900      	cmp	r1, #0
 800b8c2:	d1f3      	bne.n	800b8ac <HAL_UART_AbortReceive+0x1c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	d01f      	beq.n	800b90a <HAL_UART_AbortReceive+0x7a>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8ca:	6823      	ldr	r3, [r4, #0]
 800b8cc:	695b      	ldr	r3, [r3, #20]
 800b8ce:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800b8d2:	d013      	beq.n	800b8fc <HAL_UART_AbortReceive+0x6c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8d4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d6:	f102 0314 	add.w	r3, r2, #20
 800b8da:	e853 3f00 	ldrex	r3, [r3]
 800b8de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e2:	3214      	adds	r2, #20
 800b8e4:	e842 3100 	strex	r1, r3, [r2]
 800b8e8:	2900      	cmp	r1, #0
 800b8ea:	d1f3      	bne.n	800b8d4 <HAL_UART_AbortReceive+0x44>
    if (huart->hdmarx != NULL)
 800b8ec:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b8ee:	b12b      	cbz	r3, 800b8fc <HAL_UART_AbortReceive+0x6c>
      huart->hdmarx->XferAbortCallback = NULL;
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	635a      	str	r2, [r3, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b8f4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800b8f6:	f7f8 f855 	bl	80039a4 <HAL_DMA_Abort>
 800b8fa:	b998      	cbnz	r0, 800b924 <HAL_UART_AbortReceive+0x94>
  huart->RxXferCount = 0x00U;
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	85e0      	strh	r0, [r4, #46]	@ 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 800b900:	2320      	movs	r3, #32
 800b902:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b906:	6320      	str	r0, [r4, #48]	@ 0x30
}
 800b908:	bd10      	pop	{r4, pc}
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b90a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b90c:	f102 030c 	add.w	r3, r2, #12
 800b910:	e853 3f00 	ldrex	r3, [r3]
 800b914:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b918:	320c      	adds	r2, #12
 800b91a:	e842 3100 	strex	r1, r3, [r2]
 800b91e:	2900      	cmp	r1, #0
 800b920:	d1f3      	bne.n	800b90a <HAL_UART_AbortReceive+0x7a>
 800b922:	e7d2      	b.n	800b8ca <HAL_UART_AbortReceive+0x3a>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b924:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800b926:	f7f8 fd8a 	bl	800443e <HAL_DMA_GetError>
 800b92a:	2820      	cmp	r0, #32
 800b92c:	d1e6      	bne.n	800b8fc <HAL_UART_AbortReceive+0x6c>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b92e:	2310      	movs	r3, #16
 800b930:	6463      	str	r3, [r4, #68]	@ 0x44
          return HAL_TIMEOUT;
 800b932:	2003      	movs	r0, #3
 800b934:	e7e8      	b.n	800b908 <HAL_UART_AbortReceive+0x78>

0800b936 <HAL_UART_TxCpltCallback>:
}
 800b936:	4770      	bx	lr

0800b938 <UART_DMATransmitCplt>:
{
 800b938:	b508      	push	{r3, lr}
 800b93a:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b93c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f013 0f20 	tst.w	r3, #32
 800b946:	d11a      	bne.n	800b97e <UART_DMATransmitCplt+0x46>
    huart->TxXferCount = 0x00U;
 800b948:	2300      	movs	r3, #0
 800b94a:	84c3      	strh	r3, [r0, #38]	@ 0x26
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b94c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b94e:	f102 0314 	add.w	r3, r2, #20
 800b952:	e853 3f00 	ldrex	r3, [r3]
 800b956:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b95a:	3214      	adds	r2, #20
 800b95c:	e842 3100 	strex	r1, r3, [r2]
 800b960:	2900      	cmp	r1, #0
 800b962:	d1f3      	bne.n	800b94c <UART_DMATransmitCplt+0x14>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b964:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b966:	f102 030c 	add.w	r3, r2, #12
 800b96a:	e853 3f00 	ldrex	r3, [r3]
 800b96e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b972:	320c      	adds	r2, #12
 800b974:	e842 3100 	strex	r1, r3, [r2]
 800b978:	2900      	cmp	r1, #0
 800b97a:	d1f3      	bne.n	800b964 <UART_DMATransmitCplt+0x2c>
}
 800b97c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800b97e:	f7ff ffda 	bl	800b936 <HAL_UART_TxCpltCallback>
}
 800b982:	e7fb      	b.n	800b97c <UART_DMATransmitCplt+0x44>

0800b984 <UART_EndTransmit_IT>:
{
 800b984:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b986:	6801      	ldr	r1, [r0, #0]
 800b988:	68ca      	ldr	r2, [r1, #12]
 800b98a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b98e:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800b990:	2220      	movs	r2, #32
 800b992:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 800b996:	f7ff ffce 	bl	800b936 <HAL_UART_TxCpltCallback>
}
 800b99a:	2000      	movs	r0, #0
 800b99c:	bd08      	pop	{r3, pc}

0800b99e <HAL_UART_TxHalfCpltCallback>:
}
 800b99e:	4770      	bx	lr

0800b9a0 <UART_DMATxHalfCplt>:
{
 800b9a0:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800b9a2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800b9a4:	f7ff fffb 	bl	800b99e <HAL_UART_TxHalfCpltCallback>
}
 800b9a8:	bd08      	pop	{r3, pc}
}
 800b9aa:	4770      	bx	lr

0800b9ac <HAL_UART_RxHalfCpltCallback>:
}
 800b9ac:	4770      	bx	lr

0800b9ae <HAL_UART_ErrorCallback>:
}
 800b9ae:	4770      	bx	lr

0800b9b0 <UART_DMAError>:
{
 800b9b0:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9b2:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b9b4:	6823      	ldr	r3, [r4, #0]
 800b9b6:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b9b8:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	2b21      	cmp	r3, #33	@ 0x21
 800b9c0:	d010      	beq.n	800b9e4 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b9c2:	6823      	ldr	r3, [r4, #0]
 800b9c4:	695a      	ldr	r2, [r3, #20]
 800b9c6:	f002 0240 	and.w	r2, r2, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b9ca:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	2b22      	cmp	r3, #34	@ 0x22
 800b9d2:	d011      	beq.n	800b9f8 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b9d4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b9d6:	f043 0310 	orr.w	r3, r3, #16
 800b9da:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 800b9dc:	4620      	mov	r0, r4
 800b9de:	f7ff ffe6 	bl	800b9ae <HAL_UART_ErrorCallback>
}
 800b9e2:	bd10      	pop	{r4, pc}
 800b9e4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b9e8:	2a00      	cmp	r2, #0
 800b9ea:	d0ea      	beq.n	800b9c2 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	84e3      	strh	r3, [r4, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f7ff fa03 	bl	800adfc <UART_EndTxTransfer>
 800b9f6:	e7e4      	b.n	800b9c2 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b9f8:	2a00      	cmp	r2, #0
 800b9fa:	d0eb      	beq.n	800b9d4 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800ba00:	4620      	mov	r0, r4
 800ba02:	f7ff fa0b 	bl	800ae1c <UART_EndRxTransfer>
 800ba06:	e7e5      	b.n	800b9d4 <UART_DMAError+0x24>

0800ba08 <UART_DMAAbortOnError>:
{
 800ba08:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba0a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800ba10:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 800ba12:	f7ff ffcc 	bl	800b9ae <HAL_UART_ErrorCallback>
}
 800ba16:	bd08      	pop	{r3, pc}

0800ba18 <HAL_UART_AbortCpltCallback>:
}
 800ba18:	4770      	bx	lr
	...

0800ba1c <HAL_UART_Abort_IT>:
{
 800ba1c:	b538      	push	{r3, r4, r5, lr}
 800ba1e:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800ba20:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba22:	f102 030c 	add.w	r3, r2, #12
 800ba26:	e853 3f00 	ldrex	r3, [r3]
 800ba2a:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2e:	320c      	adds	r2, #12
 800ba30:	e842 3100 	strex	r1, r3, [r2]
 800ba34:	2900      	cmp	r1, #0
 800ba36:	d1f3      	bne.n	800ba20 <HAL_UART_Abort_IT+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba38:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba3a:	f102 0314 	add.w	r3, r2, #20
 800ba3e:	e853 3f00 	ldrex	r3, [r3]
 800ba42:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba46:	3214      	adds	r2, #20
 800ba48:	e842 3100 	strex	r1, r3, [r2]
 800ba4c:	2900      	cmp	r1, #0
 800ba4e:	d1f3      	bne.n	800ba38 <HAL_UART_Abort_IT+0x1c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba50:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d02e      	beq.n	800bab4 <HAL_UART_Abort_IT+0x98>
  if (huart->hdmatx != NULL)
 800ba56:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ba58:	b133      	cbz	r3, 800ba68 <HAL_UART_Abort_IT+0x4c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ba5a:	6822      	ldr	r2, [r4, #0]
 800ba5c:	6952      	ldr	r2, [r2, #20]
 800ba5e:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800ba62:	d034      	beq.n	800bace <HAL_UART_Abort_IT+0xb2>
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800ba64:	4a34      	ldr	r2, [pc, #208]	@ (800bb38 <HAL_UART_Abort_IT+0x11c>)
 800ba66:	635a      	str	r2, [r3, #52]	@ 0x34
  if (huart->hdmarx != NULL)
 800ba68:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ba6a:	b133      	cbz	r3, 800ba7a <HAL_UART_Abort_IT+0x5e>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba6c:	6822      	ldr	r2, [r4, #0]
 800ba6e:	6952      	ldr	r2, [r2, #20]
 800ba70:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800ba74:	d02e      	beq.n	800bad4 <HAL_UART_Abort_IT+0xb8>
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800ba76:	4a31      	ldr	r2, [pc, #196]	@ (800bb3c <HAL_UART_Abort_IT+0x120>)
 800ba78:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ba7a:	6823      	ldr	r3, [r4, #0]
 800ba7c:	695b      	ldr	r3, [r3, #20]
 800ba7e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ba82:	d02a      	beq.n	800bada <HAL_UART_Abort_IT+0xbe>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba84:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba86:	f101 0314 	add.w	r3, r1, #20
 800ba8a:	e853 3f00 	ldrex	r3, [r3]
 800ba8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba92:	3114      	adds	r1, #20
 800ba94:	e841 3200 	strex	r2, r3, [r1]
 800ba98:	4615      	mov	r5, r2
 800ba9a:	2a00      	cmp	r2, #0
 800ba9c:	d1f2      	bne.n	800ba84 <HAL_UART_Abort_IT+0x68>
    if (huart->hdmatx != NULL)
 800ba9e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d042      	beq.n	800bb2a <HAL_UART_Abort_IT+0x10e>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800baa4:	f7f7 ffa2 	bl	80039ec <HAL_DMA_Abort_IT>
 800baa8:	b1c0      	cbz	r0, 800badc <HAL_UART_Abort_IT+0xc0>
        huart->hdmatx->XferAbortCallback = NULL;
 800baaa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800baac:	2200      	movs	r2, #0
 800baae:	635a      	str	r2, [r3, #52]	@ 0x34
  uint32_t AbortCplt = 0x01U;
 800bab0:	2501      	movs	r5, #1
 800bab2:	e013      	b.n	800badc <HAL_UART_Abort_IT+0xc0>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800bab4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab6:	f102 030c 	add.w	r3, r2, #12
 800baba:	e853 3f00 	ldrex	r3, [r3]
 800babe:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac2:	320c      	adds	r2, #12
 800bac4:	e842 3100 	strex	r1, r3, [r2]
 800bac8:	2900      	cmp	r1, #0
 800baca:	d1f3      	bne.n	800bab4 <HAL_UART_Abort_IT+0x98>
 800bacc:	e7c3      	b.n	800ba56 <HAL_UART_Abort_IT+0x3a>
      huart->hdmatx->XferAbortCallback = NULL;
 800bace:	2200      	movs	r2, #0
 800bad0:	635a      	str	r2, [r3, #52]	@ 0x34
 800bad2:	e7c9      	b.n	800ba68 <HAL_UART_Abort_IT+0x4c>
      huart->hdmarx->XferAbortCallback = NULL;
 800bad4:	2200      	movs	r2, #0
 800bad6:	635a      	str	r2, [r3, #52]	@ 0x34
 800bad8:	e7cf      	b.n	800ba7a <HAL_UART_Abort_IT+0x5e>
  uint32_t AbortCplt = 0x01U;
 800bada:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800badc:	6823      	ldr	r3, [r4, #0]
 800bade:	695b      	ldr	r3, [r3, #20]
 800bae0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800bae4:	d023      	beq.n	800bb2e <HAL_UART_Abort_IT+0x112>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bae6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae8:	f102 0314 	add.w	r3, r2, #20
 800baec:	e853 3f00 	ldrex	r3, [r3]
 800baf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf4:	3214      	adds	r2, #20
 800baf6:	e842 3100 	strex	r1, r3, [r2]
 800bafa:	2900      	cmp	r1, #0
 800bafc:	d1f3      	bne.n	800bae6 <HAL_UART_Abort_IT+0xca>
    if (huart->hdmarx != NULL)
 800bafe:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800bb00:	b1a8      	cbz	r0, 800bb2e <HAL_UART_Abort_IT+0x112>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb02:	f7f7 ff73 	bl	80039ec <HAL_DMA_Abort_IT>
 800bb06:	b1a0      	cbz	r0, 800bb32 <HAL_UART_Abort_IT+0x116>
        huart->hdmarx->XferAbortCallback = NULL;
 800bb08:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	635a      	str	r2, [r3, #52]	@ 0x34
    huart->TxXferCount = 0x00U;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	84e3      	strh	r3, [r4, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 800bb12:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb14:	6463      	str	r3, [r4, #68]	@ 0x44
    huart->gState  = HAL_UART_STATE_READY;
 800bb16:	2220      	movs	r2, #32
 800bb18:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    huart->RxState = HAL_UART_STATE_READY;
 800bb1c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb20:	6323      	str	r3, [r4, #48]	@ 0x30
    HAL_UART_AbortCpltCallback(huart);
 800bb22:	4620      	mov	r0, r4
 800bb24:	f7ff ff78 	bl	800ba18 <HAL_UART_AbortCpltCallback>
 800bb28:	e003      	b.n	800bb32 <HAL_UART_Abort_IT+0x116>
  uint32_t AbortCplt = 0x01U;
 800bb2a:	2501      	movs	r5, #1
 800bb2c:	e7d6      	b.n	800badc <HAL_UART_Abort_IT+0xc0>
  if (AbortCplt == 0x01U)
 800bb2e:	2d01      	cmp	r5, #1
 800bb30:	d0ed      	beq.n	800bb0e <HAL_UART_Abort_IT+0xf2>
}
 800bb32:	2000      	movs	r0, #0
 800bb34:	bd38      	pop	{r3, r4, r5, pc}
 800bb36:	bf00      	nop
 800bb38:	0800bb6d 	.word	0x0800bb6d
 800bb3c:	0800bb41 	.word	0x0800bb41

0800bb40 <UART_DMARxAbortCallback>:
{
 800bb40:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb42:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->hdmarx->XferAbortCallback = NULL;
 800bb44:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800bb46:	2200      	movs	r2, #0
 800bb48:	635a      	str	r2, [r3, #52]	@ 0x34
  if (huart->hdmatx != NULL)
 800bb4a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bb4c:	b10b      	cbz	r3, 800bb52 <UART_DMARxAbortCallback+0x12>
    if (huart->hdmatx->XferAbortCallback != NULL)
 800bb4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb50:	b95b      	cbnz	r3, 800bb6a <UART_DMARxAbortCallback+0x2a>
  huart->TxXferCount = 0x00U;
 800bb52:	2300      	movs	r3, #0
 800bb54:	84c3      	strh	r3, [r0, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 800bb56:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb58:	6443      	str	r3, [r0, #68]	@ 0x44
  huart->gState  = HAL_UART_STATE_READY;
 800bb5a:	2220      	movs	r2, #32
 800bb5c:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bb60:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb64:	6303      	str	r3, [r0, #48]	@ 0x30
  HAL_UART_AbortCpltCallback(huart);
 800bb66:	f7ff ff57 	bl	800ba18 <HAL_UART_AbortCpltCallback>
}
 800bb6a:	bd08      	pop	{r3, pc}

0800bb6c <UART_DMATxAbortCallback>:
{
 800bb6c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb6e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->hdmatx->XferAbortCallback = NULL;
 800bb70:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bb72:	2200      	movs	r2, #0
 800bb74:	635a      	str	r2, [r3, #52]	@ 0x34
  if (huart->hdmarx != NULL)
 800bb76:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800bb78:	b10b      	cbz	r3, 800bb7e <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 800bb7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb7c:	b95b      	cbnz	r3, 800bb96 <UART_DMATxAbortCallback+0x2a>
  huart->TxXferCount = 0x00U;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	84c3      	strh	r3, [r0, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 800bb82:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb84:	6443      	str	r3, [r0, #68]	@ 0x44
  huart->gState  = HAL_UART_STATE_READY;
 800bb86:	2220      	movs	r2, #32
 800bb88:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bb8c:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb90:	6303      	str	r3, [r0, #48]	@ 0x30
  HAL_UART_AbortCpltCallback(huart);
 800bb92:	f7ff ff41 	bl	800ba18 <HAL_UART_AbortCpltCallback>
}
 800bb96:	bd08      	pop	{r3, pc}

0800bb98 <HAL_UART_AbortTransmitCpltCallback>:
}
 800bb98:	4770      	bx	lr
	...

0800bb9c <HAL_UART_AbortTransmit_IT>:
{
 800bb9c:	b510      	push	{r4, lr}
 800bb9e:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bba0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba2:	f102 030c 	add.w	r3, r2, #12
 800bba6:	e853 3f00 	ldrex	r3, [r3]
 800bbaa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbae:	320c      	adds	r2, #12
 800bbb0:	e842 3100 	strex	r1, r3, [r2]
 800bbb4:	2900      	cmp	r1, #0
 800bbb6:	d1f3      	bne.n	800bba0 <HAL_UART_AbortTransmit_IT+0x4>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800bbb8:	6823      	ldr	r3, [r4, #0]
 800bbba:	695b      	ldr	r3, [r3, #20]
 800bbbc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bbc0:	d020      	beq.n	800bc04 <HAL_UART_AbortTransmit_IT+0x68>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bbc2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc4:	f102 0314 	add.w	r3, r2, #20
 800bbc8:	e853 3f00 	ldrex	r3, [r3]
 800bbcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd0:	3214      	adds	r2, #20
 800bbd2:	e842 3100 	strex	r1, r3, [r2]
 800bbd6:	2900      	cmp	r1, #0
 800bbd8:	d1f3      	bne.n	800bbc2 <HAL_UART_AbortTransmit_IT+0x26>
    if (huart->hdmatx != NULL)
 800bbda:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800bbdc:	b14b      	cbz	r3, 800bbf2 <HAL_UART_AbortTransmit_IT+0x56>
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800bbde:	4a0e      	ldr	r2, [pc, #56]	@ (800bc18 <HAL_UART_AbortTransmit_IT+0x7c>)
 800bbe0:	635a      	str	r2, [r3, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800bbe2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800bbe4:	f7f7 ff02 	bl	80039ec <HAL_DMA_Abort_IT>
 800bbe8:	b1a0      	cbz	r0, 800bc14 <HAL_UART_AbortTransmit_IT+0x78>
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800bbea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800bbec:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bbee:	4798      	blx	r3
 800bbf0:	e010      	b.n	800bc14 <HAL_UART_AbortTransmit_IT+0x78>
      huart->TxXferCount = 0x00U;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	84e3      	strh	r3, [r4, #38]	@ 0x26
      huart->gState = HAL_UART_STATE_READY;
 800bbf6:	2320      	movs	r3, #32
 800bbf8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      HAL_UART_AbortTransmitCpltCallback(huart);
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	f7ff ffcb 	bl	800bb98 <HAL_UART_AbortTransmitCpltCallback>
 800bc02:	e007      	b.n	800bc14 <HAL_UART_AbortTransmit_IT+0x78>
    huart->TxXferCount = 0x00U;
 800bc04:	2300      	movs	r3, #0
 800bc06:	84e3      	strh	r3, [r4, #38]	@ 0x26
    huart->gState = HAL_UART_STATE_READY;
 800bc08:	2320      	movs	r3, #32
 800bc0a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    HAL_UART_AbortTransmitCpltCallback(huart);
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f7ff ffc2 	bl	800bb98 <HAL_UART_AbortTransmitCpltCallback>
}
 800bc14:	2000      	movs	r0, #0
 800bc16:	bd10      	pop	{r4, pc}
 800bc18:	0800bc1d 	.word	0x0800bc1d

0800bc1c <UART_DMATxOnlyAbortCallback>:
{
 800bc1c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc1e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->TxXferCount = 0x00U;
 800bc20:	2300      	movs	r3, #0
 800bc22:	84c3      	strh	r3, [r0, #38]	@ 0x26
  huart->gState = HAL_UART_STATE_READY;
 800bc24:	2320      	movs	r3, #32
 800bc26:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  HAL_UART_AbortTransmitCpltCallback(huart);
 800bc2a:	f7ff ffb5 	bl	800bb98 <HAL_UART_AbortTransmitCpltCallback>
}
 800bc2e:	bd08      	pop	{r3, pc}

0800bc30 <HAL_UART_AbortReceiveCpltCallback>:
}
 800bc30:	4770      	bx	lr
	...

0800bc34 <HAL_UART_AbortReceive_IT>:
{
 800bc34:	b510      	push	{r4, lr}
 800bc36:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc38:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc3a:	f102 030c 	add.w	r3, r2, #12
 800bc3e:	e853 3f00 	ldrex	r3, [r3]
 800bc42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc46:	320c      	adds	r2, #12
 800bc48:	e842 3100 	strex	r1, r3, [r2]
 800bc4c:	2900      	cmp	r1, #0
 800bc4e:	d1f3      	bne.n	800bc38 <HAL_UART_AbortReceive_IT+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc50:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc52:	f102 0314 	add.w	r3, r2, #20
 800bc56:	e853 3f00 	ldrex	r3, [r3]
 800bc5a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5e:	3214      	adds	r2, #20
 800bc60:	e842 3100 	strex	r1, r3, [r2]
 800bc64:	2900      	cmp	r1, #0
 800bc66:	d1f3      	bne.n	800bc50 <HAL_UART_AbortReceive_IT+0x1c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc68:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d01c      	beq.n	800bca8 <HAL_UART_AbortReceive_IT+0x74>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc6e:	6823      	ldr	r3, [r4, #0]
 800bc70:	695b      	ldr	r3, [r3, #20]
 800bc72:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800bc76:	d02e      	beq.n	800bcd6 <HAL_UART_AbortReceive_IT+0xa2>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc78:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7a:	f102 0314 	add.w	r3, r2, #20
 800bc7e:	e853 3f00 	ldrex	r3, [r3]
 800bc82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc86:	3214      	adds	r2, #20
 800bc88:	e842 3100 	strex	r1, r3, [r2]
 800bc8c:	2900      	cmp	r1, #0
 800bc8e:	d1f3      	bne.n	800bc78 <HAL_UART_AbortReceive_IT+0x44>
    if (huart->hdmarx != NULL)
 800bc90:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bc92:	b1b3      	cbz	r3, 800bcc2 <HAL_UART_AbortReceive_IT+0x8e>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800bc94:	4a15      	ldr	r2, [pc, #84]	@ (800bcec <HAL_UART_AbortReceive_IT+0xb8>)
 800bc96:	635a      	str	r2, [r3, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc98:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800bc9a:	f7f7 fea7 	bl	80039ec <HAL_DMA_Abort_IT>
 800bc9e:	b318      	cbz	r0, 800bce8 <HAL_UART_AbortReceive_IT+0xb4>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bca0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800bca2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bca4:	4798      	blx	r3
 800bca6:	e01f      	b.n	800bce8 <HAL_UART_AbortReceive_IT+0xb4>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800bca8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcaa:	f102 030c 	add.w	r3, r2, #12
 800bcae:	e853 3f00 	ldrex	r3, [r3]
 800bcb2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb6:	320c      	adds	r2, #12
 800bcb8:	e842 3100 	strex	r1, r3, [r2]
 800bcbc:	2900      	cmp	r1, #0
 800bcbe:	d1f3      	bne.n	800bca8 <HAL_UART_AbortReceive_IT+0x74>
 800bcc0:	e7d5      	b.n	800bc6e <HAL_UART_AbortReceive_IT+0x3a>
      huart->RxXferCount = 0x00U;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	85e3      	strh	r3, [r4, #46]	@ 0x2e
      huart->RxState = HAL_UART_STATE_READY;
 800bcc6:	2220      	movs	r2, #32
 800bcc8:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bccc:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_UART_AbortReceiveCpltCallback(huart);
 800bcce:	4620      	mov	r0, r4
 800bcd0:	f7ff ffae 	bl	800bc30 <HAL_UART_AbortReceiveCpltCallback>
 800bcd4:	e008      	b.n	800bce8 <HAL_UART_AbortReceive_IT+0xb4>
    huart->RxXferCount = 0x00U;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 800bcda:	2220      	movs	r2, #32
 800bcdc:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bce0:	6323      	str	r3, [r4, #48]	@ 0x30
    HAL_UART_AbortReceiveCpltCallback(huart);
 800bce2:	4620      	mov	r0, r4
 800bce4:	f7ff ffa4 	bl	800bc30 <HAL_UART_AbortReceiveCpltCallback>
}
 800bce8:	2000      	movs	r0, #0
 800bcea:	bd10      	pop	{r4, pc}
 800bcec:	0800bcf1 	.word	0x0800bcf1

0800bcf0 <UART_DMARxOnlyAbortCallback>:
{
 800bcf0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bcf2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 800bcf8:	2220      	movs	r2, #32
 800bcfa:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcfe:	6303      	str	r3, [r0, #48]	@ 0x30
  HAL_UART_AbortReceiveCpltCallback(huart);
 800bd00:	f7ff ff96 	bl	800bc30 <HAL_UART_AbortReceiveCpltCallback>
}
 800bd04:	bd08      	pop	{r3, pc}

0800bd06 <HAL_UARTEx_RxEventCallback>:
}
 800bd06:	4770      	bx	lr

0800bd08 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd08:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	2b22      	cmp	r3, #34	@ 0x22
 800bd10:	d169      	bne.n	800bde6 <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd12:	6883      	ldr	r3, [r0, #8]
 800bd14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd18:	d04f      	beq.n	800bdba <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bd1a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bd1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd20:	d004      	beq.n	800bd2c <UART_Receive_IT+0x24>
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d156      	bne.n	800bdd4 <UART_Receive_IT+0xcc>
 800bd26:	6903      	ldr	r3, [r0, #16]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d153      	bne.n	800bdd4 <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bd2c:	6803      	ldr	r3, [r0, #0]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800bd32:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800bd34:	3301      	adds	r3, #1
 800bd36:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 800bd38:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	3b01      	subs	r3, #1
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d151      	bne.n	800bdea <UART_Receive_IT+0xe2>
{
 800bd46:	b500      	push	{lr}
 800bd48:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bd4a:	6802      	ldr	r2, [r0, #0]
 800bd4c:	68d3      	ldr	r3, [r2, #12]
 800bd4e:	f023 0320 	bic.w	r3, r3, #32
 800bd52:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bd54:	6802      	ldr	r2, [r0, #0]
 800bd56:	68d3      	ldr	r3, [r2, #12]
 800bd58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd5c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bd5e:	6802      	ldr	r2, [r0, #0]
 800bd60:	6953      	ldr	r3, [r2, #20]
 800bd62:	f023 0301 	bic.w	r3, r3, #1
 800bd66:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800bd68:	2320      	movs	r3, #32
 800bd6a:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd72:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d133      	bne.n	800bde0 <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd7c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7e:	f102 030c 	add.w	r3, r2, #12
 800bd82:	e853 3f00 	ldrex	r3, [r3]
 800bd86:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd8a:	320c      	adds	r2, #12
 800bd8c:	e842 3100 	strex	r1, r3, [r2]
 800bd90:	2900      	cmp	r1, #0
 800bd92:	d1f3      	bne.n	800bd7c <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bd94:	6803      	ldr	r3, [r0, #0]
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	f012 0f10 	tst.w	r2, #16
 800bd9c:	d006      	beq.n	800bdac <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bd9e:	2200      	movs	r2, #0
 800bda0:	9201      	str	r2, [sp, #4]
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	9201      	str	r2, [sp, #4]
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	9301      	str	r3, [sp, #4]
 800bdaa:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bdac:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800bdae:	f7ff ffaa 	bl	800bd06 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 800bdb2:	2000      	movs	r0, #0
}
 800bdb4:	b003      	add	sp, #12
 800bdb6:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdba:	6902      	ldr	r2, [r0, #16]
 800bdbc:	2a00      	cmp	r2, #0
 800bdbe:	d1ac      	bne.n	800bd1a <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bdc0:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bdc2:	6803      	ldr	r3, [r0, #0]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdca:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800bdcc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800bdce:	3302      	adds	r3, #2
 800bdd0:	6283      	str	r3, [r0, #40]	@ 0x28
 800bdd2:	e7b1      	b.n	800bd38 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bdd4:	6803      	ldr	r3, [r0, #0]
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bddc:	7013      	strb	r3, [r2, #0]
 800bdde:	e7a8      	b.n	800bd32 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 800bde0:	f7f6 fc00 	bl	80025e4 <HAL_UART_RxCpltCallback>
 800bde4:	e7e5      	b.n	800bdb2 <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 800bde6:	2002      	movs	r0, #2
 800bde8:	4770      	bx	lr
    return HAL_OK;
 800bdea:	2000      	movs	r0, #0
}
 800bdec:	4770      	bx	lr
	...

0800bdf0 <HAL_UART_IRQHandler>:
{
 800bdf0:	b510      	push	{r4, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bdf6:	6802      	ldr	r2, [r0, #0]
 800bdf8:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bdfa:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bdfc:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 800bdfe:	f013 0f0f 	tst.w	r3, #15
 800be02:	d109      	bne.n	800be18 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be04:	f013 0f20 	tst.w	r3, #32
 800be08:	d00c      	beq.n	800be24 <HAL_UART_IRQHandler+0x34>
 800be0a:	f010 0f20 	tst.w	r0, #32
 800be0e:	d009      	beq.n	800be24 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 800be10:	4620      	mov	r0, r4
 800be12:	f7ff ff79 	bl	800bd08 <UART_Receive_IT>
      return;
 800be16:	e016      	b.n	800be46 <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800be18:	f011 0101 	ands.w	r1, r1, #1
 800be1c:	d115      	bne.n	800be4a <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800be1e:	f410 7f90 	tst.w	r0, #288	@ 0x120
 800be22:	d112      	bne.n	800be4a <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be24:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800be26:	2901      	cmp	r1, #1
 800be28:	d079      	beq.n	800bf1e <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800be2a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be2e:	d003      	beq.n	800be38 <HAL_UART_IRQHandler+0x48>
 800be30:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800be34:	f040 8113 	bne.w	800c05e <HAL_UART_IRQHandler+0x26e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800be38:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800be3c:	d003      	beq.n	800be46 <HAL_UART_IRQHandler+0x56>
 800be3e:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800be42:	f040 8110 	bne.w	800c066 <HAL_UART_IRQHandler+0x276>
}
 800be46:	b002      	add	sp, #8
 800be48:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800be4a:	f013 0f01 	tst.w	r3, #1
 800be4e:	d006      	beq.n	800be5e <HAL_UART_IRQHandler+0x6e>
 800be50:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800be54:	d003      	beq.n	800be5e <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be56:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800be58:	f042 0201 	orr.w	r2, r2, #1
 800be5c:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800be5e:	f013 0f04 	tst.w	r3, #4
 800be62:	d004      	beq.n	800be6e <HAL_UART_IRQHandler+0x7e>
 800be64:	b119      	cbz	r1, 800be6e <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be66:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800be68:	f042 0202 	orr.w	r2, r2, #2
 800be6c:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800be6e:	f013 0f02 	tst.w	r3, #2
 800be72:	d004      	beq.n	800be7e <HAL_UART_IRQHandler+0x8e>
 800be74:	b119      	cbz	r1, 800be7e <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be76:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800be78:	f042 0204 	orr.w	r2, r2, #4
 800be7c:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800be7e:	f013 0f08 	tst.w	r3, #8
 800be82:	d007      	beq.n	800be94 <HAL_UART_IRQHandler+0xa4>
 800be84:	f010 0f20 	tst.w	r0, #32
 800be88:	d100      	bne.n	800be8c <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800be8a:	b119      	cbz	r1, 800be94 <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800be8c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800be8e:	f042 0208 	orr.w	r2, r2, #8
 800be92:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800be94:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800be96:	2a00      	cmp	r2, #0
 800be98:	d0d5      	beq.n	800be46 <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be9a:	f013 0f20 	tst.w	r3, #32
 800be9e:	d002      	beq.n	800bea6 <HAL_UART_IRQHandler+0xb6>
 800bea0:	f010 0f20 	tst.w	r0, #32
 800bea4:	d129      	bne.n	800befa <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bea6:	6823      	ldr	r3, [r4, #0]
 800bea8:	695b      	ldr	r3, [r3, #20]
 800beaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800beae:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800beb0:	f012 0f08 	tst.w	r2, #8
 800beb4:	d100      	bne.n	800beb8 <HAL_UART_IRQHandler+0xc8>
 800beb6:	b363      	cbz	r3, 800bf12 <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 800beb8:	4620      	mov	r0, r4
 800beba:	f7fe ffaf 	bl	800ae1c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bebe:	6823      	ldr	r3, [r4, #0]
 800bec0:	695b      	ldr	r3, [r3, #20]
 800bec2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800bec6:	d020      	beq.n	800bf0a <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bec8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beca:	f102 0314 	add.w	r3, r2, #20
 800bece:	e853 3f00 	ldrex	r3, [r3]
 800bed2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed6:	3214      	adds	r2, #20
 800bed8:	e842 3100 	strex	r1, r3, [r2]
 800bedc:	2900      	cmp	r1, #0
 800bede:	d1f3      	bne.n	800bec8 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 800bee0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bee2:	b173      	cbz	r3, 800bf02 <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bee4:	4a62      	ldr	r2, [pc, #392]	@ (800c070 <HAL_UART_IRQHandler+0x280>)
 800bee6:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bee8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800beea:	f7f7 fd7f 	bl	80039ec <HAL_DMA_Abort_IT>
 800beee:	2800      	cmp	r0, #0
 800bef0:	d0a9      	beq.n	800be46 <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bef2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800bef4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bef6:	4798      	blx	r3
 800bef8:	e7a5      	b.n	800be46 <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 800befa:	4620      	mov	r0, r4
 800befc:	f7ff ff04 	bl	800bd08 <UART_Receive_IT>
 800bf00:	e7d1      	b.n	800bea6 <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 800bf02:	4620      	mov	r0, r4
 800bf04:	f7ff fd53 	bl	800b9ae <HAL_UART_ErrorCallback>
 800bf08:	e79d      	b.n	800be46 <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	f7ff fd4f 	bl	800b9ae <HAL_UART_ErrorCallback>
 800bf10:	e799      	b.n	800be46 <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 800bf12:	4620      	mov	r0, r4
 800bf14:	f7ff fd4b 	bl	800b9ae <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 800bf1c:	e793      	b.n	800be46 <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bf1e:	f013 0f10 	tst.w	r3, #16
 800bf22:	d082      	beq.n	800be2a <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bf24:	f010 0f10 	tst.w	r0, #16
 800bf28:	f43f af7f 	beq.w	800be2a <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	9301      	str	r3, [sp, #4]
 800bf30:	6813      	ldr	r3, [r2, #0]
 800bf32:	9301      	str	r3, [sp, #4]
 800bf34:	6853      	ldr	r3, [r2, #4]
 800bf36:	9301      	str	r3, [sp, #4]
 800bf38:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf3a:	6953      	ldr	r3, [r2, #20]
 800bf3c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800bf40:	d051      	beq.n	800bfe6 <HAL_UART_IRQHandler+0x1f6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bf42:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800bf44:	6813      	ldr	r3, [r2, #0]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f43f af7b 	beq.w	800be46 <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf50:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800bf52:	4299      	cmp	r1, r3
 800bf54:	f67f af77 	bls.w	800be46 <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 800bf58:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf5a:	6993      	ldr	r3, [r2, #24]
 800bf5c:	2b20      	cmp	r3, #32
 800bf5e:	d037      	beq.n	800bfd0 <HAL_UART_IRQHandler+0x1e0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf60:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf62:	f102 030c 	add.w	r3, r2, #12
 800bf66:	e853 3f00 	ldrex	r3, [r3]
 800bf6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6e:	320c      	adds	r2, #12
 800bf70:	e842 3100 	strex	r1, r3, [r2]
 800bf74:	2900      	cmp	r1, #0
 800bf76:	d1f3      	bne.n	800bf60 <HAL_UART_IRQHandler+0x170>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf78:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7a:	f102 0314 	add.w	r3, r2, #20
 800bf7e:	e853 3f00 	ldrex	r3, [r3]
 800bf82:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf86:	3214      	adds	r2, #20
 800bf88:	e842 3100 	strex	r1, r3, [r2]
 800bf8c:	2900      	cmp	r1, #0
 800bf8e:	d1f3      	bne.n	800bf78 <HAL_UART_IRQHandler+0x188>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf90:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf92:	f102 0314 	add.w	r3, r2, #20
 800bf96:	e853 3f00 	ldrex	r3, [r3]
 800bf9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf9e:	3214      	adds	r2, #20
 800bfa0:	e842 3100 	strex	r1, r3, [r2]
 800bfa4:	2900      	cmp	r1, #0
 800bfa6:	d1f3      	bne.n	800bf90 <HAL_UART_IRQHandler+0x1a0>
          huart->RxState = HAL_UART_STATE_READY;
 800bfa8:	2320      	movs	r3, #32
 800bfaa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfb2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb4:	f102 030c 	add.w	r3, r2, #12
 800bfb8:	e853 3f00 	ldrex	r3, [r3]
 800bfbc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc0:	320c      	adds	r2, #12
 800bfc2:	e842 3100 	strex	r1, r3, [r2]
 800bfc6:	2900      	cmp	r1, #0
 800bfc8:	d1f3      	bne.n	800bfb2 <HAL_UART_IRQHandler+0x1c2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bfca:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800bfcc:	f7f7 fcea 	bl	80039a4 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bfd0:	2302      	movs	r3, #2
 800bfd2:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bfd4:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800bfd6:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	1ac9      	subs	r1, r1, r3
 800bfdc:	b289      	uxth	r1, r1
 800bfde:	4620      	mov	r0, r4
 800bfe0:	f7ff fe91 	bl	800bd06 <HAL_UARTEx_RxEventCallback>
      return;
 800bfe4:	e72f      	b.n	800be46 <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bfe6:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800bfe8:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	1ac9      	subs	r1, r1, r3
 800bfee:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800bff0:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f43f af26 	beq.w	800be46 <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 800bffa:	2900      	cmp	r1, #0
 800bffc:	f43f af23 	beq.w	800be46 <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c000:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c002:	f102 030c 	add.w	r3, r2, #12
 800c006:	e853 3f00 	ldrex	r3, [r3]
 800c00a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00e:	320c      	adds	r2, #12
 800c010:	e842 3000 	strex	r0, r3, [r2]
 800c014:	2800      	cmp	r0, #0
 800c016:	d1f3      	bne.n	800c000 <HAL_UART_IRQHandler+0x210>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c018:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01a:	f102 0314 	add.w	r3, r2, #20
 800c01e:	e853 3f00 	ldrex	r3, [r3]
 800c022:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c026:	3214      	adds	r2, #20
 800c028:	e842 3000 	strex	r0, r3, [r2]
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d1f3      	bne.n	800c018 <HAL_UART_IRQHandler+0x228>
        huart->RxState = HAL_UART_STATE_READY;
 800c030:	2320      	movs	r3, #32
 800c032:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c036:	2300      	movs	r3, #0
 800c038:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c03a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c03c:	f102 030c 	add.w	r3, r2, #12
 800c040:	e853 3f00 	ldrex	r3, [r3]
 800c044:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c048:	320c      	adds	r2, #12
 800c04a:	e842 3000 	strex	r0, r3, [r2]
 800c04e:	2800      	cmp	r0, #0
 800c050:	d1f3      	bne.n	800c03a <HAL_UART_IRQHandler+0x24a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c052:	2302      	movs	r3, #2
 800c054:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c056:	4620      	mov	r0, r4
 800c058:	f7ff fe55 	bl	800bd06 <HAL_UARTEx_RxEventCallback>
      return;
 800c05c:	e6f3      	b.n	800be46 <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 800c05e:	4620      	mov	r0, r4
 800c060:	f7fe ff0a 	bl	800ae78 <UART_Transmit_IT>
    return;
 800c064:	e6ef      	b.n	800be46 <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 800c066:	4620      	mov	r0, r4
 800c068:	f7ff fc8c 	bl	800b984 <UART_EndTransmit_IT>
    return;
 800c06c:	e6eb      	b.n	800be46 <HAL_UART_IRQHandler+0x56>
 800c06e:	bf00      	nop
 800c070:	0800ba09 	.word	0x0800ba09

0800c074 <UART_DMARxHalfCplt>:
{
 800c074:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c076:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c078:	2301      	movs	r3, #1
 800c07a:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c07c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d002      	beq.n	800c088 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 800c082:	f7ff fc93 	bl	800b9ac <HAL_UART_RxHalfCpltCallback>
}
 800c086:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c088:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800c08a:	0849      	lsrs	r1, r1, #1
 800c08c:	f7ff fe3b 	bl	800bd06 <HAL_UARTEx_RxEventCallback>
 800c090:	e7f9      	b.n	800c086 <UART_DMARxHalfCplt+0x12>

0800c092 <UART_DMAReceiveCplt>:
{
 800c092:	b508      	push	{r3, lr}
 800c094:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c096:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f013 0f20 	tst.w	r3, #32
 800c0a0:	d12b      	bne.n	800c0fa <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0a6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a8:	f102 030c 	add.w	r3, r2, #12
 800c0ac:	e853 3f00 	ldrex	r3, [r3]
 800c0b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b4:	320c      	adds	r2, #12
 800c0b6:	e842 3100 	strex	r1, r3, [r2]
 800c0ba:	2900      	cmp	r1, #0
 800c0bc:	d1f3      	bne.n	800c0a6 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0be:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c0:	f102 0314 	add.w	r3, r2, #20
 800c0c4:	e853 3f00 	ldrex	r3, [r3]
 800c0c8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0cc:	3214      	adds	r2, #20
 800c0ce:	e842 3100 	strex	r1, r3, [r2]
 800c0d2:	2900      	cmp	r1, #0
 800c0d4:	d1f3      	bne.n	800c0be <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0d6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d8:	f102 0314 	add.w	r3, r2, #20
 800c0dc:	e853 3f00 	ldrex	r3, [r3]
 800c0e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e4:	3214      	adds	r2, #20
 800c0e6:	e842 3100 	strex	r1, r3, [r2]
 800c0ea:	2900      	cmp	r1, #0
 800c0ec:	d1f3      	bne.n	800c0d6 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 800c0ee:	2320      	movs	r3, #32
 800c0f0:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0f4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d007      	beq.n	800c10a <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0fe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c100:	2b01      	cmp	r3, #1
 800c102:	d00f      	beq.n	800c124 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 800c104:	f7f6 fa6e 	bl	80025e4 <HAL_UART_RxCpltCallback>
}
 800c108:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c10a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c10c:	f102 030c 	add.w	r3, r2, #12
 800c110:	e853 3f00 	ldrex	r3, [r3]
 800c114:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c118:	320c      	adds	r2, #12
 800c11a:	e842 3100 	strex	r1, r3, [r2]
 800c11e:	2900      	cmp	r1, #0
 800c120:	d1f3      	bne.n	800c10a <UART_DMAReceiveCplt+0x78>
 800c122:	e7ea      	b.n	800c0fa <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c124:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800c126:	f7ff fdee 	bl	800bd06 <HAL_UARTEx_RxEventCallback>
 800c12a:	e7ed      	b.n	800c108 <UART_DMAReceiveCplt+0x76>

0800c12c <HAL_LIN_SendBreak>:
  __HAL_LOCK(huart);
 800c12c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c130:	2b01      	cmp	r3, #1
 800c132:	d019      	beq.n	800c168 <HAL_LIN_SendBreak+0x3c>
 800c134:	2301      	movs	r3, #1
 800c136:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_BUSY;
 800c13a:	2324      	movs	r3, #36	@ 0x24
 800c13c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 800c140:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c142:	f102 030c 	add.w	r3, r2, #12
 800c146:	e853 3f00 	ldrex	r3, [r3]
 800c14a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c14e:	320c      	adds	r2, #12
 800c150:	e842 3100 	strex	r1, r3, [r2]
 800c154:	2900      	cmp	r1, #0
 800c156:	d1f3      	bne.n	800c140 <HAL_LIN_SendBreak+0x14>
  huart->gState = HAL_UART_STATE_READY;
 800c158:	2320      	movs	r3, #32
 800c15a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_UNLOCK(huart);
 800c15e:	2300      	movs	r3, #0
 800c160:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  return HAL_OK;
 800c164:	4618      	mov	r0, r3
 800c166:	4770      	bx	lr
  __HAL_LOCK(huart);
 800c168:	2002      	movs	r0, #2
}
 800c16a:	4770      	bx	lr

0800c16c <HAL_MultiProcessor_EnterMuteMode>:
  __HAL_LOCK(huart);
 800c16c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c170:	2b01      	cmp	r3, #1
 800c172:	d01a      	beq.n	800c1aa <HAL_MultiProcessor_EnterMuteMode+0x3e>
 800c174:	2301      	movs	r3, #1
 800c176:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_BUSY;
 800c17a:	2324      	movs	r3, #36	@ 0x24
 800c17c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 800c180:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c182:	f102 030c 	add.w	r3, r2, #12
 800c186:	e853 3f00 	ldrex	r3, [r3]
 800c18a:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c18e:	320c      	adds	r2, #12
 800c190:	e842 3100 	strex	r1, r3, [r2]
 800c194:	2900      	cmp	r1, #0
 800c196:	d1f3      	bne.n	800c180 <HAL_MultiProcessor_EnterMuteMode+0x14>
  huart->gState = HAL_UART_STATE_READY;
 800c198:	2320      	movs	r3, #32
 800c19a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	6343      	str	r3, [r0, #52]	@ 0x34
  __HAL_UNLOCK(huart);
 800c1a2:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  return HAL_OK;
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	4770      	bx	lr
  __HAL_LOCK(huart);
 800c1aa:	2002      	movs	r0, #2
}
 800c1ac:	4770      	bx	lr

0800c1ae <HAL_MultiProcessor_ExitMuteMode>:
  __HAL_LOCK(huart);
 800c1ae:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d01a      	beq.n	800c1ec <HAL_MultiProcessor_ExitMuteMode+0x3e>
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_BUSY;
 800c1bc:	2324      	movs	r3, #36	@ 0x24
 800c1be:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 800c1c2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c4:	f102 030c 	add.w	r3, r2, #12
 800c1c8:	e853 3f00 	ldrex	r3, [r3]
 800c1cc:	f023 0302 	bic.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d0:	320c      	adds	r2, #12
 800c1d2:	e842 3100 	strex	r1, r3, [r2]
 800c1d6:	2900      	cmp	r1, #0
 800c1d8:	d1f3      	bne.n	800c1c2 <HAL_MultiProcessor_ExitMuteMode+0x14>
  huart->gState = HAL_UART_STATE_READY;
 800c1da:	2320      	movs	r3, #32
 800c1dc:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	6343      	str	r3, [r0, #52]	@ 0x34
  __HAL_UNLOCK(huart);
 800c1e4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  return HAL_OK;
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	4770      	bx	lr
  __HAL_LOCK(huart);
 800c1ec:	2002      	movs	r0, #2
}
 800c1ee:	4770      	bx	lr

0800c1f0 <HAL_HalfDuplex_EnableTransmitter>:
  __HAL_LOCK(huart);
 800c1f0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d014      	beq.n	800c222 <HAL_HalfDuplex_EnableTransmitter+0x32>
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_BUSY;
 800c1fe:	2324      	movs	r3, #36	@ 0x24
 800c200:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  tmpreg = huart->Instance->CR1;
 800c204:	6802      	ldr	r2, [r0, #0]
 800c206:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800c208:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_TE;
 800c20c:	f043 0308 	orr.w	r3, r3, #8
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800c210:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 800c212:	2320      	movs	r3, #32
 800c214:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_UNLOCK(huart);
 800c218:	2300      	movs	r3, #0
 800c21a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  return HAL_OK;
 800c21e:	4618      	mov	r0, r3
 800c220:	4770      	bx	lr
  __HAL_LOCK(huart);
 800c222:	2002      	movs	r0, #2
}
 800c224:	4770      	bx	lr

0800c226 <HAL_HalfDuplex_EnableReceiver>:
  __HAL_LOCK(huart);
 800c226:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d014      	beq.n	800c258 <HAL_HalfDuplex_EnableReceiver+0x32>
 800c22e:	2301      	movs	r3, #1
 800c230:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_BUSY;
 800c234:	2324      	movs	r3, #36	@ 0x24
 800c236:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  tmpreg = huart->Instance->CR1;
 800c23a:	6802      	ldr	r2, [r0, #0]
 800c23c:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800c23e:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_RE;
 800c242:	f043 0304 	orr.w	r3, r3, #4
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800c246:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 800c248:	2320      	movs	r3, #32
 800c24a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_UNLOCK(huart);
 800c24e:	2300      	movs	r3, #0
 800c250:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  return HAL_OK;
 800c254:	4618      	mov	r0, r3
 800c256:	4770      	bx	lr
  __HAL_LOCK(huart);
 800c258:	2002      	movs	r0, #2
}
 800c25a:	4770      	bx	lr

0800c25c <HAL_UART_GetState>:
  temp1 = huart->gState;
 800c25c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
  temp2 = huart->RxState;
 800c260:	f890 0042 	ldrb.w	r0, [r0, #66]	@ 0x42
}
 800c264:	4318      	orrs	r0, r3
 800c266:	4770      	bx	lr

0800c268 <HAL_UART_GetError>:
  return huart->ErrorCode;
 800c268:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 800c26a:	4770      	bx	lr

0800c26c <UART_Start_Receive_IT>:
  huart->pRxBuffPtr = pData;
 800c26c:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c26e:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800c270:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c272:	2300      	movs	r3, #0
 800c274:	6443      	str	r3, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c276:	2322      	movs	r3, #34	@ 0x22
 800c278:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c27c:	6903      	ldr	r3, [r0, #16]
 800c27e:	b123      	cbz	r3, 800c28a <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c280:	6802      	ldr	r2, [r0, #0]
 800c282:	68d3      	ldr	r3, [r2, #12]
 800c284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c288:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c28a:	6802      	ldr	r2, [r0, #0]
 800c28c:	6953      	ldr	r3, [r2, #20]
 800c28e:	f043 0301 	orr.w	r3, r3, #1
 800c292:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c294:	6802      	ldr	r2, [r0, #0]
 800c296:	68d3      	ldr	r3, [r2, #12]
 800c298:	f043 0320 	orr.w	r3, r3, #32
 800c29c:	60d3      	str	r3, [r2, #12]
}
 800c29e:	2000      	movs	r0, #0
 800c2a0:	4770      	bx	lr

0800c2a2 <HAL_UART_Receive_IT>:
{
 800c2a2:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800c2a4:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	2b20      	cmp	r3, #32
 800c2ac:	d108      	bne.n	800c2c0 <HAL_UART_Receive_IT+0x1e>
    if ((pData == NULL) || (Size == 0U))
 800c2ae:	b149      	cbz	r1, 800c2c4 <HAL_UART_Receive_IT+0x22>
 800c2b0:	b90a      	cbnz	r2, 800c2b6 <HAL_UART_Receive_IT+0x14>
      return HAL_ERROR;
 800c2b2:	2001      	movs	r0, #1
}
 800c2b4:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 800c2ba:	f7ff ffd7 	bl	800c26c <UART_Start_Receive_IT>
 800c2be:	e7f9      	b.n	800c2b4 <HAL_UART_Receive_IT+0x12>
    return HAL_BUSY;
 800c2c0:	2002      	movs	r0, #2
 800c2c2:	e7f7      	b.n	800c2b4 <HAL_UART_Receive_IT+0x12>
      return HAL_ERROR;
 800c2c4:	2001      	movs	r0, #1
 800c2c6:	e7f5      	b.n	800c2b4 <HAL_UART_Receive_IT+0x12>

0800c2c8 <HAL_UARTEx_ReceiveToIdle_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800c2c8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	2b20      	cmp	r3, #32
 800c2d0:	d129      	bne.n	800c326 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
{
 800c2d2:	b510      	push	{r4, lr}
 800c2d4:	b082      	sub	sp, #8
 800c2d6:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800c2d8:	b339      	cbz	r1, 800c32a <HAL_UARTEx_ReceiveToIdle_IT+0x62>
 800c2da:	b912      	cbnz	r2, 800c2e2 <HAL_UARTEx_ReceiveToIdle_IT+0x1a>
      return HAL_ERROR;
 800c2dc:	2001      	movs	r0, #1
}
 800c2de:	b002      	add	sp, #8
 800c2e0:	bd10      	pop	{r4, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	6303      	str	r3, [r0, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	6343      	str	r3, [r0, #52]	@ 0x34
    status =  UART_Start_Receive_IT(huart, pData, Size);
 800c2ea:	f7ff ffbf 	bl	800c26c <UART_Start_Receive_IT>
    if (status == HAL_OK)
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	d1f5      	bne.n	800c2de <HAL_UARTEx_ReceiveToIdle_IT+0x16>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d001      	beq.n	800c2fc <HAL_UARTEx_ReceiveToIdle_IT+0x34>
        status = HAL_ERROR;
 800c2f8:	2001      	movs	r0, #1
    return status;
 800c2fa:	e7f0      	b.n	800c2de <HAL_UARTEx_ReceiveToIdle_IT+0x16>
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	9301      	str	r3, [sp, #4]
 800c300:	6823      	ldr	r3, [r4, #0]
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	9201      	str	r2, [sp, #4]
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	9301      	str	r3, [sp, #4]
 800c30a:	9b01      	ldr	r3, [sp, #4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c30c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30e:	f102 030c 	add.w	r3, r2, #12
 800c312:	e853 3f00 	ldrex	r3, [r3]
 800c316:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31a:	320c      	adds	r2, #12
 800c31c:	e842 3100 	strex	r1, r3, [r2]
 800c320:	2900      	cmp	r1, #0
 800c322:	d1f3      	bne.n	800c30c <HAL_UARTEx_ReceiveToIdle_IT+0x44>
 800c324:	e7db      	b.n	800c2de <HAL_UARTEx_ReceiveToIdle_IT+0x16>
    return HAL_BUSY;
 800c326:	2002      	movs	r0, #2
}
 800c328:	4770      	bx	lr
      return HAL_ERROR;
 800c32a:	2001      	movs	r0, #1
 800c32c:	e7d7      	b.n	800c2de <HAL_UARTEx_ReceiveToIdle_IT+0x16>
	...

0800c330 <UART_Start_Receive_DMA>:
{
 800c330:	b530      	push	{r4, r5, lr}
 800c332:	b083      	sub	sp, #12
 800c334:	4604      	mov	r4, r0
 800c336:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 800c338:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c33a:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c33c:	2500      	movs	r5, #0
 800c33e:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c340:	2222      	movs	r2, #34	@ 0x22
 800c342:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c346:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c348:	481f      	ldr	r0, [pc, #124]	@ (800c3c8 <UART_Start_Receive_DMA+0x98>)
 800c34a:	6290      	str	r0, [r2, #40]	@ 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c34c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800c34e:	481f      	ldr	r0, [pc, #124]	@ (800c3cc <UART_Start_Receive_DMA+0x9c>)
 800c350:	62d0      	str	r0, [r2, #44]	@ 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c352:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800c354:	481e      	ldr	r0, [pc, #120]	@ (800c3d0 <UART_Start_Receive_DMA+0xa0>)
 800c356:	6310      	str	r0, [r2, #48]	@ 0x30
  huart->hdmarx->XferAbortCallback = NULL;
 800c358:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800c35a:	6355      	str	r5, [r2, #52]	@ 0x34
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c35c:	6820      	ldr	r0, [r4, #0]
 800c35e:	460a      	mov	r2, r1
 800c360:	1d01      	adds	r1, r0, #4
 800c362:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800c364:	f7f7 fae3 	bl	800392e <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c368:	9501      	str	r5, [sp, #4]
 800c36a:	6823      	ldr	r3, [r4, #0]
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	9201      	str	r2, [sp, #4]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	9301      	str	r3, [sp, #4]
 800c374:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c376:	6923      	ldr	r3, [r4, #16]
 800c378:	b15b      	cbz	r3, 800c392 <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c37a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c37c:	f102 030c 	add.w	r3, r2, #12
 800c380:	e853 3f00 	ldrex	r3, [r3]
 800c384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c388:	320c      	adds	r2, #12
 800c38a:	e842 3100 	strex	r1, r3, [r2]
 800c38e:	2900      	cmp	r1, #0
 800c390:	d1f3      	bne.n	800c37a <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c392:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c394:	f102 0314 	add.w	r3, r2, #20
 800c398:	e853 3f00 	ldrex	r3, [r3]
 800c39c:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a0:	3214      	adds	r2, #20
 800c3a2:	e842 3100 	strex	r1, r3, [r2]
 800c3a6:	2900      	cmp	r1, #0
 800c3a8:	d1f3      	bne.n	800c392 <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3aa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ac:	f102 0314 	add.w	r3, r2, #20
 800c3b0:	e853 3f00 	ldrex	r3, [r3]
 800c3b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b8:	3214      	adds	r2, #20
 800c3ba:	e842 3100 	strex	r1, r3, [r2]
 800c3be:	2900      	cmp	r1, #0
 800c3c0:	d1f3      	bne.n	800c3aa <UART_Start_Receive_DMA+0x7a>
}
 800c3c2:	2000      	movs	r0, #0
 800c3c4:	b003      	add	sp, #12
 800c3c6:	bd30      	pop	{r4, r5, pc}
 800c3c8:	0800c093 	.word	0x0800c093
 800c3cc:	0800c075 	.word	0x0800c075
 800c3d0:	0800b9b1 	.word	0x0800b9b1

0800c3d4 <HAL_UART_Receive_DMA>:
{
 800c3d4:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3d6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	2b20      	cmp	r3, #32
 800c3de:	d108      	bne.n	800c3f2 <HAL_UART_Receive_DMA+0x1e>
    if ((pData == NULL) || (Size == 0U))
 800c3e0:	b149      	cbz	r1, 800c3f6 <HAL_UART_Receive_DMA+0x22>
 800c3e2:	b90a      	cbnz	r2, 800c3e8 <HAL_UART_Receive_DMA+0x14>
      return HAL_ERROR;
 800c3e4:	2001      	movs	r0, #1
}
 800c3e6:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c3ec:	f7ff ffa0 	bl	800c330 <UART_Start_Receive_DMA>
 800c3f0:	e7f9      	b.n	800c3e6 <HAL_UART_Receive_DMA+0x12>
    return HAL_BUSY;
 800c3f2:	2002      	movs	r0, #2
 800c3f4:	e7f7      	b.n	800c3e6 <HAL_UART_Receive_DMA+0x12>
      return HAL_ERROR;
 800c3f6:	2001      	movs	r0, #1
 800c3f8:	e7f5      	b.n	800c3e6 <HAL_UART_Receive_DMA+0x12>

0800c3fa <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3fa:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	2b20      	cmp	r3, #32
 800c402:	d127      	bne.n	800c454 <HAL_UARTEx_ReceiveToIdle_DMA+0x5a>
{
 800c404:	b510      	push	{r4, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800c40a:	b329      	cbz	r1, 800c458 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800c40c:	b912      	cbnz	r2, 800c414 <HAL_UARTEx_ReceiveToIdle_DMA+0x1a>
      return HAL_ERROR;
 800c40e:	2001      	movs	r0, #1
}
 800c410:	b002      	add	sp, #8
 800c412:	bd10      	pop	{r4, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c414:	2301      	movs	r3, #1
 800c416:	6303      	str	r3, [r0, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c418:	2300      	movs	r3, #0
 800c41a:	6343      	str	r3, [r0, #52]	@ 0x34
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c41c:	f7ff ff88 	bl	800c330 <UART_Start_Receive_DMA>
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c420:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c422:	2b01      	cmp	r3, #1
 800c424:	d001      	beq.n	800c42a <HAL_UARTEx_ReceiveToIdle_DMA+0x30>
      status = HAL_ERROR;
 800c426:	2001      	movs	r0, #1
    return status;
 800c428:	e7f2      	b.n	800c410 <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c42a:	2300      	movs	r3, #0
 800c42c:	9301      	str	r3, [sp, #4]
 800c42e:	6823      	ldr	r3, [r4, #0]
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	9201      	str	r2, [sp, #4]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	9301      	str	r3, [sp, #4]
 800c438:	9b01      	ldr	r3, [sp, #4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c43a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c43c:	f102 030c 	add.w	r3, r2, #12
 800c440:	e853 3f00 	ldrex	r3, [r3]
 800c444:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c448:	320c      	adds	r2, #12
 800c44a:	e842 3100 	strex	r1, r3, [r2]
 800c44e:	2900      	cmp	r1, #0
 800c450:	d1f3      	bne.n	800c43a <HAL_UARTEx_ReceiveToIdle_DMA+0x40>
 800c452:	e7dd      	b.n	800c410 <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
    return HAL_BUSY;
 800c454:	2002      	movs	r0, #2
}
 800c456:	4770      	bx	lr
      return HAL_ERROR;
 800c458:	2001      	movs	r0, #1
 800c45a:	e7d9      	b.n	800c410 <HAL_UARTEx_ReceiveToIdle_DMA+0x16>

0800c45c <atoi>:
 800c45c:	220a      	movs	r2, #10
 800c45e:	2100      	movs	r1, #0
 800c460:	f000 b89c 	b.w	800c59c <strtol>

0800c464 <_atoi_r>:
 800c464:	230a      	movs	r3, #10
 800c466:	2200      	movs	r2, #0
 800c468:	f000 b88c 	b.w	800c584 <_strtol_r>

0800c46c <exit>:
 800c46c:	b508      	push	{r3, lr}
 800c46e:	4b06      	ldr	r3, [pc, #24]	@ (800c488 <exit+0x1c>)
 800c470:	4604      	mov	r4, r0
 800c472:	b113      	cbz	r3, 800c47a <exit+0xe>
 800c474:	2100      	movs	r1, #0
 800c476:	f3af 8000 	nop.w
 800c47a:	4b04      	ldr	r3, [pc, #16]	@ (800c48c <exit+0x20>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	b103      	cbz	r3, 800c482 <exit+0x16>
 800c480:	4798      	blx	r3
 800c482:	4620      	mov	r0, r4
 800c484:	f7f6 fa13 	bl	80028ae <_exit>
 800c488:	00000000 	.word	0x00000000
 800c48c:	200007a0 	.word	0x200007a0

0800c490 <_strtol_l.constprop.0>:
 800c490:	2b24      	cmp	r3, #36	@ 0x24
 800c492:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c496:	4686      	mov	lr, r0
 800c498:	4690      	mov	r8, r2
 800c49a:	d801      	bhi.n	800c4a0 <_strtol_l.constprop.0+0x10>
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d106      	bne.n	800c4ae <_strtol_l.constprop.0+0x1e>
 800c4a0:	f001 f80e 	bl	800d4c0 <__errno>
 800c4a4:	2316      	movs	r3, #22
 800c4a6:	6003      	str	r3, [r0, #0]
 800c4a8:	2000      	movs	r0, #0
 800c4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ae:	460d      	mov	r5, r1
 800c4b0:	4833      	ldr	r0, [pc, #204]	@ (800c580 <_strtol_l.constprop.0+0xf0>)
 800c4b2:	462a      	mov	r2, r5
 800c4b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4b8:	5d06      	ldrb	r6, [r0, r4]
 800c4ba:	f016 0608 	ands.w	r6, r6, #8
 800c4be:	d1f8      	bne.n	800c4b2 <_strtol_l.constprop.0+0x22>
 800c4c0:	2c2d      	cmp	r4, #45	@ 0x2d
 800c4c2:	d12d      	bne.n	800c520 <_strtol_l.constprop.0+0x90>
 800c4c4:	2601      	movs	r6, #1
 800c4c6:	782c      	ldrb	r4, [r5, #0]
 800c4c8:	1c95      	adds	r5, r2, #2
 800c4ca:	f033 0210 	bics.w	r2, r3, #16
 800c4ce:	d109      	bne.n	800c4e4 <_strtol_l.constprop.0+0x54>
 800c4d0:	2c30      	cmp	r4, #48	@ 0x30
 800c4d2:	d12a      	bne.n	800c52a <_strtol_l.constprop.0+0x9a>
 800c4d4:	782a      	ldrb	r2, [r5, #0]
 800c4d6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c4da:	2a58      	cmp	r2, #88	@ 0x58
 800c4dc:	d125      	bne.n	800c52a <_strtol_l.constprop.0+0x9a>
 800c4de:	2310      	movs	r3, #16
 800c4e0:	786c      	ldrb	r4, [r5, #1]
 800c4e2:	3502      	adds	r5, #2
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c4ea:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c4ee:	fbbc f9f3 	udiv	r9, ip, r3
 800c4f2:	4610      	mov	r0, r2
 800c4f4:	fb03 ca19 	mls	sl, r3, r9, ip
 800c4f8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c4fc:	2f09      	cmp	r7, #9
 800c4fe:	d81b      	bhi.n	800c538 <_strtol_l.constprop.0+0xa8>
 800c500:	463c      	mov	r4, r7
 800c502:	42a3      	cmp	r3, r4
 800c504:	dd27      	ble.n	800c556 <_strtol_l.constprop.0+0xc6>
 800c506:	1c57      	adds	r7, r2, #1
 800c508:	d007      	beq.n	800c51a <_strtol_l.constprop.0+0x8a>
 800c50a:	4581      	cmp	r9, r0
 800c50c:	d320      	bcc.n	800c550 <_strtol_l.constprop.0+0xc0>
 800c50e:	d101      	bne.n	800c514 <_strtol_l.constprop.0+0x84>
 800c510:	45a2      	cmp	sl, r4
 800c512:	db1d      	blt.n	800c550 <_strtol_l.constprop.0+0xc0>
 800c514:	2201      	movs	r2, #1
 800c516:	fb00 4003 	mla	r0, r0, r3, r4
 800c51a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c51e:	e7eb      	b.n	800c4f8 <_strtol_l.constprop.0+0x68>
 800c520:	2c2b      	cmp	r4, #43	@ 0x2b
 800c522:	bf04      	itt	eq
 800c524:	782c      	ldrbeq	r4, [r5, #0]
 800c526:	1c95      	addeq	r5, r2, #2
 800c528:	e7cf      	b.n	800c4ca <_strtol_l.constprop.0+0x3a>
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1da      	bne.n	800c4e4 <_strtol_l.constprop.0+0x54>
 800c52e:	2c30      	cmp	r4, #48	@ 0x30
 800c530:	bf0c      	ite	eq
 800c532:	2308      	moveq	r3, #8
 800c534:	230a      	movne	r3, #10
 800c536:	e7d5      	b.n	800c4e4 <_strtol_l.constprop.0+0x54>
 800c538:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c53c:	2f19      	cmp	r7, #25
 800c53e:	d801      	bhi.n	800c544 <_strtol_l.constprop.0+0xb4>
 800c540:	3c37      	subs	r4, #55	@ 0x37
 800c542:	e7de      	b.n	800c502 <_strtol_l.constprop.0+0x72>
 800c544:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c548:	2f19      	cmp	r7, #25
 800c54a:	d804      	bhi.n	800c556 <_strtol_l.constprop.0+0xc6>
 800c54c:	3c57      	subs	r4, #87	@ 0x57
 800c54e:	e7d8      	b.n	800c502 <_strtol_l.constprop.0+0x72>
 800c550:	f04f 32ff 	mov.w	r2, #4294967295
 800c554:	e7e1      	b.n	800c51a <_strtol_l.constprop.0+0x8a>
 800c556:	1c53      	adds	r3, r2, #1
 800c558:	d108      	bne.n	800c56c <_strtol_l.constprop.0+0xdc>
 800c55a:	2322      	movs	r3, #34	@ 0x22
 800c55c:	4660      	mov	r0, ip
 800c55e:	f8ce 3000 	str.w	r3, [lr]
 800c562:	f1b8 0f00 	cmp.w	r8, #0
 800c566:	d0a0      	beq.n	800c4aa <_strtol_l.constprop.0+0x1a>
 800c568:	1e69      	subs	r1, r5, #1
 800c56a:	e006      	b.n	800c57a <_strtol_l.constprop.0+0xea>
 800c56c:	b106      	cbz	r6, 800c570 <_strtol_l.constprop.0+0xe0>
 800c56e:	4240      	negs	r0, r0
 800c570:	f1b8 0f00 	cmp.w	r8, #0
 800c574:	d099      	beq.n	800c4aa <_strtol_l.constprop.0+0x1a>
 800c576:	2a00      	cmp	r2, #0
 800c578:	d1f6      	bne.n	800c568 <_strtol_l.constprop.0+0xd8>
 800c57a:	f8c8 1000 	str.w	r1, [r8]
 800c57e:	e794      	b.n	800c4aa <_strtol_l.constprop.0+0x1a>
 800c580:	08010b95 	.word	0x08010b95

0800c584 <_strtol_r>:
 800c584:	f7ff bf84 	b.w	800c490 <_strtol_l.constprop.0>

0800c588 <strtol_l>:
 800c588:	4613      	mov	r3, r2
 800c58a:	460a      	mov	r2, r1
 800c58c:	4601      	mov	r1, r0
 800c58e:	4802      	ldr	r0, [pc, #8]	@ (800c598 <strtol_l+0x10>)
 800c590:	6800      	ldr	r0, [r0, #0]
 800c592:	f7ff bf7d 	b.w	800c490 <_strtol_l.constprop.0>
 800c596:	bf00      	nop
 800c598:	20000020 	.word	0x20000020

0800c59c <strtol>:
 800c59c:	4613      	mov	r3, r2
 800c59e:	460a      	mov	r2, r1
 800c5a0:	4601      	mov	r1, r0
 800c5a2:	4802      	ldr	r0, [pc, #8]	@ (800c5ac <strtol+0x10>)
 800c5a4:	6800      	ldr	r0, [r0, #0]
 800c5a6:	f7ff bf73 	b.w	800c490 <_strtol_l.constprop.0>
 800c5aa:	bf00      	nop
 800c5ac:	20000020 	.word	0x20000020

0800c5b0 <__cvt>:
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b6:	461d      	mov	r5, r3
 800c5b8:	bfbb      	ittet	lt
 800c5ba:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800c5be:	461d      	movlt	r5, r3
 800c5c0:	2300      	movge	r3, #0
 800c5c2:	232d      	movlt	r3, #45	@ 0x2d
 800c5c4:	b088      	sub	sp, #32
 800c5c6:	4614      	mov	r4, r2
 800c5c8:	bfb8      	it	lt
 800c5ca:	4614      	movlt	r4, r2
 800c5cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c5ce:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800c5d0:	7013      	strb	r3, [r2, #0]
 800c5d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c5d4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800c5d8:	f023 0820 	bic.w	r8, r3, #32
 800c5dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c5e0:	d005      	beq.n	800c5ee <__cvt+0x3e>
 800c5e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c5e6:	d100      	bne.n	800c5ea <__cvt+0x3a>
 800c5e8:	3601      	adds	r6, #1
 800c5ea:	2302      	movs	r3, #2
 800c5ec:	e000      	b.n	800c5f0 <__cvt+0x40>
 800c5ee:	2303      	movs	r3, #3
 800c5f0:	aa07      	add	r2, sp, #28
 800c5f2:	9204      	str	r2, [sp, #16]
 800c5f4:	aa06      	add	r2, sp, #24
 800c5f6:	e9cd a202 	strd	sl, r2, [sp, #8]
 800c5fa:	e9cd 3600 	strd	r3, r6, [sp]
 800c5fe:	4622      	mov	r2, r4
 800c600:	462b      	mov	r3, r5
 800c602:	f001 f829 	bl	800d658 <_dtoa_r>
 800c606:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c60a:	4607      	mov	r7, r0
 800c60c:	d119      	bne.n	800c642 <__cvt+0x92>
 800c60e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c610:	07db      	lsls	r3, r3, #31
 800c612:	d50e      	bpl.n	800c632 <__cvt+0x82>
 800c614:	eb00 0906 	add.w	r9, r0, r6
 800c618:	2200      	movs	r2, #0
 800c61a:	2300      	movs	r3, #0
 800c61c:	4620      	mov	r0, r4
 800c61e:	4629      	mov	r1, r5
 800c620:	f7f4 fc5e 	bl	8000ee0 <__aeabi_dcmpeq>
 800c624:	b108      	cbz	r0, 800c62a <__cvt+0x7a>
 800c626:	f8cd 901c 	str.w	r9, [sp, #28]
 800c62a:	2230      	movs	r2, #48	@ 0x30
 800c62c:	9b07      	ldr	r3, [sp, #28]
 800c62e:	454b      	cmp	r3, r9
 800c630:	d31e      	bcc.n	800c670 <__cvt+0xc0>
 800c632:	4638      	mov	r0, r7
 800c634:	9b07      	ldr	r3, [sp, #28]
 800c636:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c638:	1bdb      	subs	r3, r3, r7
 800c63a:	6013      	str	r3, [r2, #0]
 800c63c:	b008      	add	sp, #32
 800c63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c642:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c646:	eb00 0906 	add.w	r9, r0, r6
 800c64a:	d1e5      	bne.n	800c618 <__cvt+0x68>
 800c64c:	7803      	ldrb	r3, [r0, #0]
 800c64e:	2b30      	cmp	r3, #48	@ 0x30
 800c650:	d10a      	bne.n	800c668 <__cvt+0xb8>
 800c652:	2200      	movs	r2, #0
 800c654:	2300      	movs	r3, #0
 800c656:	4620      	mov	r0, r4
 800c658:	4629      	mov	r1, r5
 800c65a:	f7f4 fc41 	bl	8000ee0 <__aeabi_dcmpeq>
 800c65e:	b918      	cbnz	r0, 800c668 <__cvt+0xb8>
 800c660:	f1c6 0601 	rsb	r6, r6, #1
 800c664:	f8ca 6000 	str.w	r6, [sl]
 800c668:	f8da 3000 	ldr.w	r3, [sl]
 800c66c:	4499      	add	r9, r3
 800c66e:	e7d3      	b.n	800c618 <__cvt+0x68>
 800c670:	1c59      	adds	r1, r3, #1
 800c672:	9107      	str	r1, [sp, #28]
 800c674:	701a      	strb	r2, [r3, #0]
 800c676:	e7d9      	b.n	800c62c <__cvt+0x7c>

0800c678 <__exponent>:
 800c678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c67a:	2900      	cmp	r1, #0
 800c67c:	bfb6      	itet	lt
 800c67e:	232d      	movlt	r3, #45	@ 0x2d
 800c680:	232b      	movge	r3, #43	@ 0x2b
 800c682:	4249      	neglt	r1, r1
 800c684:	2909      	cmp	r1, #9
 800c686:	7002      	strb	r2, [r0, #0]
 800c688:	7043      	strb	r3, [r0, #1]
 800c68a:	dd29      	ble.n	800c6e0 <__exponent+0x68>
 800c68c:	f10d 0307 	add.w	r3, sp, #7
 800c690:	461d      	mov	r5, r3
 800c692:	270a      	movs	r7, #10
 800c694:	fbb1 f6f7 	udiv	r6, r1, r7
 800c698:	461a      	mov	r2, r3
 800c69a:	fb07 1416 	mls	r4, r7, r6, r1
 800c69e:	3430      	adds	r4, #48	@ 0x30
 800c6a0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c6a4:	460c      	mov	r4, r1
 800c6a6:	2c63      	cmp	r4, #99	@ 0x63
 800c6a8:	4631      	mov	r1, r6
 800c6aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800c6ae:	dcf1      	bgt.n	800c694 <__exponent+0x1c>
 800c6b0:	3130      	adds	r1, #48	@ 0x30
 800c6b2:	1e94      	subs	r4, r2, #2
 800c6b4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c6b8:	4623      	mov	r3, r4
 800c6ba:	1c41      	adds	r1, r0, #1
 800c6bc:	42ab      	cmp	r3, r5
 800c6be:	d30a      	bcc.n	800c6d6 <__exponent+0x5e>
 800c6c0:	f10d 0309 	add.w	r3, sp, #9
 800c6c4:	1a9b      	subs	r3, r3, r2
 800c6c6:	42ac      	cmp	r4, r5
 800c6c8:	bf88      	it	hi
 800c6ca:	2300      	movhi	r3, #0
 800c6cc:	3302      	adds	r3, #2
 800c6ce:	4403      	add	r3, r0
 800c6d0:	1a18      	subs	r0, r3, r0
 800c6d2:	b003      	add	sp, #12
 800c6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6d6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c6da:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c6de:	e7ed      	b.n	800c6bc <__exponent+0x44>
 800c6e0:	2330      	movs	r3, #48	@ 0x30
 800c6e2:	3130      	adds	r1, #48	@ 0x30
 800c6e4:	7083      	strb	r3, [r0, #2]
 800c6e6:	70c1      	strb	r1, [r0, #3]
 800c6e8:	1d03      	adds	r3, r0, #4
 800c6ea:	e7f1      	b.n	800c6d0 <__exponent+0x58>

0800c6ec <_printf_float>:
 800c6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f0:	b091      	sub	sp, #68	@ 0x44
 800c6f2:	460c      	mov	r4, r1
 800c6f4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800c6f8:	4616      	mov	r6, r2
 800c6fa:	461f      	mov	r7, r3
 800c6fc:	4605      	mov	r5, r0
 800c6fe:	f000 fe3b 	bl	800d378 <_localeconv_r>
 800c702:	6803      	ldr	r3, [r0, #0]
 800c704:	4618      	mov	r0, r3
 800c706:	9308      	str	r3, [sp, #32]
 800c708:	f7f3 fde0 	bl	80002cc <strlen>
 800c70c:	2300      	movs	r3, #0
 800c70e:	930e      	str	r3, [sp, #56]	@ 0x38
 800c710:	f8d8 3000 	ldr.w	r3, [r8]
 800c714:	9009      	str	r0, [sp, #36]	@ 0x24
 800c716:	3307      	adds	r3, #7
 800c718:	f023 0307 	bic.w	r3, r3, #7
 800c71c:	f103 0208 	add.w	r2, r3, #8
 800c720:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c724:	f8d4 b000 	ldr.w	fp, [r4]
 800c728:	f8c8 2000 	str.w	r2, [r8]
 800c72c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c730:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c734:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c736:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c73a:	f04f 32ff 	mov.w	r2, #4294967295
 800c73e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c742:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c746:	4b9c      	ldr	r3, [pc, #624]	@ (800c9b8 <_printf_float+0x2cc>)
 800c748:	f7f4 fbfc 	bl	8000f44 <__aeabi_dcmpun>
 800c74c:	bb70      	cbnz	r0, 800c7ac <_printf_float+0xc0>
 800c74e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c752:	f04f 32ff 	mov.w	r2, #4294967295
 800c756:	4b98      	ldr	r3, [pc, #608]	@ (800c9b8 <_printf_float+0x2cc>)
 800c758:	f7f4 fbd6 	bl	8000f08 <__aeabi_dcmple>
 800c75c:	bb30      	cbnz	r0, 800c7ac <_printf_float+0xc0>
 800c75e:	2200      	movs	r2, #0
 800c760:	2300      	movs	r3, #0
 800c762:	4640      	mov	r0, r8
 800c764:	4649      	mov	r1, r9
 800c766:	f7f4 fbc5 	bl	8000ef4 <__aeabi_dcmplt>
 800c76a:	b110      	cbz	r0, 800c772 <_printf_float+0x86>
 800c76c:	232d      	movs	r3, #45	@ 0x2d
 800c76e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c772:	4a92      	ldr	r2, [pc, #584]	@ (800c9bc <_printf_float+0x2d0>)
 800c774:	4b92      	ldr	r3, [pc, #584]	@ (800c9c0 <_printf_float+0x2d4>)
 800c776:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c77a:	bf94      	ite	ls
 800c77c:	4690      	movls	r8, r2
 800c77e:	4698      	movhi	r8, r3
 800c780:	2303      	movs	r3, #3
 800c782:	f04f 0900 	mov.w	r9, #0
 800c786:	6123      	str	r3, [r4, #16]
 800c788:	f02b 0304 	bic.w	r3, fp, #4
 800c78c:	6023      	str	r3, [r4, #0]
 800c78e:	4633      	mov	r3, r6
 800c790:	4621      	mov	r1, r4
 800c792:	4628      	mov	r0, r5
 800c794:	9700      	str	r7, [sp, #0]
 800c796:	aa0f      	add	r2, sp, #60	@ 0x3c
 800c798:	f000 f9d4 	bl	800cb44 <_printf_common>
 800c79c:	3001      	adds	r0, #1
 800c79e:	f040 8090 	bne.w	800c8c2 <_printf_float+0x1d6>
 800c7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c7a6:	b011      	add	sp, #68	@ 0x44
 800c7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ac:	4642      	mov	r2, r8
 800c7ae:	464b      	mov	r3, r9
 800c7b0:	4640      	mov	r0, r8
 800c7b2:	4649      	mov	r1, r9
 800c7b4:	f7f4 fbc6 	bl	8000f44 <__aeabi_dcmpun>
 800c7b8:	b148      	cbz	r0, 800c7ce <_printf_float+0xe2>
 800c7ba:	464b      	mov	r3, r9
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	bfb8      	it	lt
 800c7c0:	232d      	movlt	r3, #45	@ 0x2d
 800c7c2:	4a80      	ldr	r2, [pc, #512]	@ (800c9c4 <_printf_float+0x2d8>)
 800c7c4:	bfb8      	it	lt
 800c7c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c7ca:	4b7f      	ldr	r3, [pc, #508]	@ (800c9c8 <_printf_float+0x2dc>)
 800c7cc:	e7d3      	b.n	800c776 <_printf_float+0x8a>
 800c7ce:	6863      	ldr	r3, [r4, #4]
 800c7d0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800c7d4:	1c5a      	adds	r2, r3, #1
 800c7d6:	d13f      	bne.n	800c858 <_printf_float+0x16c>
 800c7d8:	2306      	movs	r3, #6
 800c7da:	6063      	str	r3, [r4, #4]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800c7e2:	6023      	str	r3, [r4, #0]
 800c7e4:	9206      	str	r2, [sp, #24]
 800c7e6:	aa0e      	add	r2, sp, #56	@ 0x38
 800c7e8:	e9cd a204 	strd	sl, r2, [sp, #16]
 800c7ec:	aa0d      	add	r2, sp, #52	@ 0x34
 800c7ee:	9203      	str	r2, [sp, #12]
 800c7f0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800c7f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c7f8:	6863      	ldr	r3, [r4, #4]
 800c7fa:	4642      	mov	r2, r8
 800c7fc:	9300      	str	r3, [sp, #0]
 800c7fe:	4628      	mov	r0, r5
 800c800:	464b      	mov	r3, r9
 800c802:	910a      	str	r1, [sp, #40]	@ 0x28
 800c804:	f7ff fed4 	bl	800c5b0 <__cvt>
 800c808:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c80a:	4680      	mov	r8, r0
 800c80c:	2947      	cmp	r1, #71	@ 0x47
 800c80e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800c810:	d128      	bne.n	800c864 <_printf_float+0x178>
 800c812:	1cc8      	adds	r0, r1, #3
 800c814:	db02      	blt.n	800c81c <_printf_float+0x130>
 800c816:	6863      	ldr	r3, [r4, #4]
 800c818:	4299      	cmp	r1, r3
 800c81a:	dd40      	ble.n	800c89e <_printf_float+0x1b2>
 800c81c:	f1aa 0a02 	sub.w	sl, sl, #2
 800c820:	fa5f fa8a 	uxtb.w	sl, sl
 800c824:	4652      	mov	r2, sl
 800c826:	3901      	subs	r1, #1
 800c828:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c82c:	910d      	str	r1, [sp, #52]	@ 0x34
 800c82e:	f7ff ff23 	bl	800c678 <__exponent>
 800c832:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c834:	4681      	mov	r9, r0
 800c836:	1813      	adds	r3, r2, r0
 800c838:	2a01      	cmp	r2, #1
 800c83a:	6123      	str	r3, [r4, #16]
 800c83c:	dc02      	bgt.n	800c844 <_printf_float+0x158>
 800c83e:	6822      	ldr	r2, [r4, #0]
 800c840:	07d2      	lsls	r2, r2, #31
 800c842:	d501      	bpl.n	800c848 <_printf_float+0x15c>
 800c844:	3301      	adds	r3, #1
 800c846:	6123      	str	r3, [r4, #16]
 800c848:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d09e      	beq.n	800c78e <_printf_float+0xa2>
 800c850:	232d      	movs	r3, #45	@ 0x2d
 800c852:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c856:	e79a      	b.n	800c78e <_printf_float+0xa2>
 800c858:	2947      	cmp	r1, #71	@ 0x47
 800c85a:	d1bf      	bne.n	800c7dc <_printf_float+0xf0>
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d1bd      	bne.n	800c7dc <_printf_float+0xf0>
 800c860:	2301      	movs	r3, #1
 800c862:	e7ba      	b.n	800c7da <_printf_float+0xee>
 800c864:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c868:	d9dc      	bls.n	800c824 <_printf_float+0x138>
 800c86a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c86e:	d118      	bne.n	800c8a2 <_printf_float+0x1b6>
 800c870:	2900      	cmp	r1, #0
 800c872:	6863      	ldr	r3, [r4, #4]
 800c874:	dd0b      	ble.n	800c88e <_printf_float+0x1a2>
 800c876:	6121      	str	r1, [r4, #16]
 800c878:	b913      	cbnz	r3, 800c880 <_printf_float+0x194>
 800c87a:	6822      	ldr	r2, [r4, #0]
 800c87c:	07d0      	lsls	r0, r2, #31
 800c87e:	d502      	bpl.n	800c886 <_printf_float+0x19a>
 800c880:	3301      	adds	r3, #1
 800c882:	440b      	add	r3, r1
 800c884:	6123      	str	r3, [r4, #16]
 800c886:	f04f 0900 	mov.w	r9, #0
 800c88a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c88c:	e7dc      	b.n	800c848 <_printf_float+0x15c>
 800c88e:	b913      	cbnz	r3, 800c896 <_printf_float+0x1aa>
 800c890:	6822      	ldr	r2, [r4, #0]
 800c892:	07d2      	lsls	r2, r2, #31
 800c894:	d501      	bpl.n	800c89a <_printf_float+0x1ae>
 800c896:	3302      	adds	r3, #2
 800c898:	e7f4      	b.n	800c884 <_printf_float+0x198>
 800c89a:	2301      	movs	r3, #1
 800c89c:	e7f2      	b.n	800c884 <_printf_float+0x198>
 800c89e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c8a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8a4:	4299      	cmp	r1, r3
 800c8a6:	db05      	blt.n	800c8b4 <_printf_float+0x1c8>
 800c8a8:	6823      	ldr	r3, [r4, #0]
 800c8aa:	6121      	str	r1, [r4, #16]
 800c8ac:	07d8      	lsls	r0, r3, #31
 800c8ae:	d5ea      	bpl.n	800c886 <_printf_float+0x19a>
 800c8b0:	1c4b      	adds	r3, r1, #1
 800c8b2:	e7e7      	b.n	800c884 <_printf_float+0x198>
 800c8b4:	2900      	cmp	r1, #0
 800c8b6:	bfcc      	ite	gt
 800c8b8:	2201      	movgt	r2, #1
 800c8ba:	f1c1 0202 	rsble	r2, r1, #2
 800c8be:	4413      	add	r3, r2
 800c8c0:	e7e0      	b.n	800c884 <_printf_float+0x198>
 800c8c2:	6823      	ldr	r3, [r4, #0]
 800c8c4:	055a      	lsls	r2, r3, #21
 800c8c6:	d407      	bmi.n	800c8d8 <_printf_float+0x1ec>
 800c8c8:	6923      	ldr	r3, [r4, #16]
 800c8ca:	4642      	mov	r2, r8
 800c8cc:	4631      	mov	r1, r6
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	47b8      	blx	r7
 800c8d2:	3001      	adds	r0, #1
 800c8d4:	d12b      	bne.n	800c92e <_printf_float+0x242>
 800c8d6:	e764      	b.n	800c7a2 <_printf_float+0xb6>
 800c8d8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c8dc:	f240 80dc 	bls.w	800ca98 <_printf_float+0x3ac>
 800c8e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	f7f4 fafa 	bl	8000ee0 <__aeabi_dcmpeq>
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	d033      	beq.n	800c958 <_printf_float+0x26c>
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	4631      	mov	r1, r6
 800c8f4:	4628      	mov	r0, r5
 800c8f6:	4a35      	ldr	r2, [pc, #212]	@ (800c9cc <_printf_float+0x2e0>)
 800c8f8:	47b8      	blx	r7
 800c8fa:	3001      	adds	r0, #1
 800c8fc:	f43f af51 	beq.w	800c7a2 <_printf_float+0xb6>
 800c900:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800c904:	4543      	cmp	r3, r8
 800c906:	db02      	blt.n	800c90e <_printf_float+0x222>
 800c908:	6823      	ldr	r3, [r4, #0]
 800c90a:	07d8      	lsls	r0, r3, #31
 800c90c:	d50f      	bpl.n	800c92e <_printf_float+0x242>
 800c90e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c912:	4631      	mov	r1, r6
 800c914:	4628      	mov	r0, r5
 800c916:	47b8      	blx	r7
 800c918:	3001      	adds	r0, #1
 800c91a:	f43f af42 	beq.w	800c7a2 <_printf_float+0xb6>
 800c91e:	f04f 0900 	mov.w	r9, #0
 800c922:	f108 38ff 	add.w	r8, r8, #4294967295
 800c926:	f104 0a1a 	add.w	sl, r4, #26
 800c92a:	45c8      	cmp	r8, r9
 800c92c:	dc09      	bgt.n	800c942 <_printf_float+0x256>
 800c92e:	6823      	ldr	r3, [r4, #0]
 800c930:	079b      	lsls	r3, r3, #30
 800c932:	f100 8102 	bmi.w	800cb3a <_printf_float+0x44e>
 800c936:	68e0      	ldr	r0, [r4, #12]
 800c938:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c93a:	4298      	cmp	r0, r3
 800c93c:	bfb8      	it	lt
 800c93e:	4618      	movlt	r0, r3
 800c940:	e731      	b.n	800c7a6 <_printf_float+0xba>
 800c942:	2301      	movs	r3, #1
 800c944:	4652      	mov	r2, sl
 800c946:	4631      	mov	r1, r6
 800c948:	4628      	mov	r0, r5
 800c94a:	47b8      	blx	r7
 800c94c:	3001      	adds	r0, #1
 800c94e:	f43f af28 	beq.w	800c7a2 <_printf_float+0xb6>
 800c952:	f109 0901 	add.w	r9, r9, #1
 800c956:	e7e8      	b.n	800c92a <_printf_float+0x23e>
 800c958:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	dc38      	bgt.n	800c9d0 <_printf_float+0x2e4>
 800c95e:	2301      	movs	r3, #1
 800c960:	4631      	mov	r1, r6
 800c962:	4628      	mov	r0, r5
 800c964:	4a19      	ldr	r2, [pc, #100]	@ (800c9cc <_printf_float+0x2e0>)
 800c966:	47b8      	blx	r7
 800c968:	3001      	adds	r0, #1
 800c96a:	f43f af1a 	beq.w	800c7a2 <_printf_float+0xb6>
 800c96e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800c972:	ea59 0303 	orrs.w	r3, r9, r3
 800c976:	d102      	bne.n	800c97e <_printf_float+0x292>
 800c978:	6823      	ldr	r3, [r4, #0]
 800c97a:	07d9      	lsls	r1, r3, #31
 800c97c:	d5d7      	bpl.n	800c92e <_printf_float+0x242>
 800c97e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c982:	4631      	mov	r1, r6
 800c984:	4628      	mov	r0, r5
 800c986:	47b8      	blx	r7
 800c988:	3001      	adds	r0, #1
 800c98a:	f43f af0a 	beq.w	800c7a2 <_printf_float+0xb6>
 800c98e:	f04f 0a00 	mov.w	sl, #0
 800c992:	f104 0b1a 	add.w	fp, r4, #26
 800c996:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c998:	425b      	negs	r3, r3
 800c99a:	4553      	cmp	r3, sl
 800c99c:	dc01      	bgt.n	800c9a2 <_printf_float+0x2b6>
 800c99e:	464b      	mov	r3, r9
 800c9a0:	e793      	b.n	800c8ca <_printf_float+0x1de>
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	465a      	mov	r2, fp
 800c9a6:	4631      	mov	r1, r6
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	47b8      	blx	r7
 800c9ac:	3001      	adds	r0, #1
 800c9ae:	f43f aef8 	beq.w	800c7a2 <_printf_float+0xb6>
 800c9b2:	f10a 0a01 	add.w	sl, sl, #1
 800c9b6:	e7ee      	b.n	800c996 <_printf_float+0x2aa>
 800c9b8:	7fefffff 	.word	0x7fefffff
 800c9bc:	08010c95 	.word	0x08010c95
 800c9c0:	08010c99 	.word	0x08010c99
 800c9c4:	08010c9d 	.word	0x08010c9d
 800c9c8:	08010ca1 	.word	0x08010ca1
 800c9cc:	08010eff 	.word	0x08010eff
 800c9d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c9d2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800c9d6:	4553      	cmp	r3, sl
 800c9d8:	bfa8      	it	ge
 800c9da:	4653      	movge	r3, sl
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	4699      	mov	r9, r3
 800c9e0:	dc36      	bgt.n	800ca50 <_printf_float+0x364>
 800c9e2:	f04f 0b00 	mov.w	fp, #0
 800c9e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c9ea:	f104 021a 	add.w	r2, r4, #26
 800c9ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c9f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9f2:	eba3 0309 	sub.w	r3, r3, r9
 800c9f6:	455b      	cmp	r3, fp
 800c9f8:	dc31      	bgt.n	800ca5e <_printf_float+0x372>
 800c9fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c9fc:	459a      	cmp	sl, r3
 800c9fe:	dc3a      	bgt.n	800ca76 <_printf_float+0x38a>
 800ca00:	6823      	ldr	r3, [r4, #0]
 800ca02:	07da      	lsls	r2, r3, #31
 800ca04:	d437      	bmi.n	800ca76 <_printf_float+0x38a>
 800ca06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca08:	ebaa 0903 	sub.w	r9, sl, r3
 800ca0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca0e:	ebaa 0303 	sub.w	r3, sl, r3
 800ca12:	4599      	cmp	r9, r3
 800ca14:	bfa8      	it	ge
 800ca16:	4699      	movge	r9, r3
 800ca18:	f1b9 0f00 	cmp.w	r9, #0
 800ca1c:	dc33      	bgt.n	800ca86 <_printf_float+0x39a>
 800ca1e:	f04f 0800 	mov.w	r8, #0
 800ca22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca26:	f104 0b1a 	add.w	fp, r4, #26
 800ca2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca2c:	ebaa 0303 	sub.w	r3, sl, r3
 800ca30:	eba3 0309 	sub.w	r3, r3, r9
 800ca34:	4543      	cmp	r3, r8
 800ca36:	f77f af7a 	ble.w	800c92e <_printf_float+0x242>
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	465a      	mov	r2, fp
 800ca3e:	4631      	mov	r1, r6
 800ca40:	4628      	mov	r0, r5
 800ca42:	47b8      	blx	r7
 800ca44:	3001      	adds	r0, #1
 800ca46:	f43f aeac 	beq.w	800c7a2 <_printf_float+0xb6>
 800ca4a:	f108 0801 	add.w	r8, r8, #1
 800ca4e:	e7ec      	b.n	800ca2a <_printf_float+0x33e>
 800ca50:	4642      	mov	r2, r8
 800ca52:	4631      	mov	r1, r6
 800ca54:	4628      	mov	r0, r5
 800ca56:	47b8      	blx	r7
 800ca58:	3001      	adds	r0, #1
 800ca5a:	d1c2      	bne.n	800c9e2 <_printf_float+0x2f6>
 800ca5c:	e6a1      	b.n	800c7a2 <_printf_float+0xb6>
 800ca5e:	2301      	movs	r3, #1
 800ca60:	4631      	mov	r1, r6
 800ca62:	4628      	mov	r0, r5
 800ca64:	920a      	str	r2, [sp, #40]	@ 0x28
 800ca66:	47b8      	blx	r7
 800ca68:	3001      	adds	r0, #1
 800ca6a:	f43f ae9a 	beq.w	800c7a2 <_printf_float+0xb6>
 800ca6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca70:	f10b 0b01 	add.w	fp, fp, #1
 800ca74:	e7bb      	b.n	800c9ee <_printf_float+0x302>
 800ca76:	4631      	mov	r1, r6
 800ca78:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ca7c:	4628      	mov	r0, r5
 800ca7e:	47b8      	blx	r7
 800ca80:	3001      	adds	r0, #1
 800ca82:	d1c0      	bne.n	800ca06 <_printf_float+0x31a>
 800ca84:	e68d      	b.n	800c7a2 <_printf_float+0xb6>
 800ca86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca88:	464b      	mov	r3, r9
 800ca8a:	4631      	mov	r1, r6
 800ca8c:	4628      	mov	r0, r5
 800ca8e:	4442      	add	r2, r8
 800ca90:	47b8      	blx	r7
 800ca92:	3001      	adds	r0, #1
 800ca94:	d1c3      	bne.n	800ca1e <_printf_float+0x332>
 800ca96:	e684      	b.n	800c7a2 <_printf_float+0xb6>
 800ca98:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ca9c:	f1ba 0f01 	cmp.w	sl, #1
 800caa0:	dc01      	bgt.n	800caa6 <_printf_float+0x3ba>
 800caa2:	07db      	lsls	r3, r3, #31
 800caa4:	d536      	bpl.n	800cb14 <_printf_float+0x428>
 800caa6:	2301      	movs	r3, #1
 800caa8:	4642      	mov	r2, r8
 800caaa:	4631      	mov	r1, r6
 800caac:	4628      	mov	r0, r5
 800caae:	47b8      	blx	r7
 800cab0:	3001      	adds	r0, #1
 800cab2:	f43f ae76 	beq.w	800c7a2 <_printf_float+0xb6>
 800cab6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800caba:	4631      	mov	r1, r6
 800cabc:	4628      	mov	r0, r5
 800cabe:	47b8      	blx	r7
 800cac0:	3001      	adds	r0, #1
 800cac2:	f43f ae6e 	beq.w	800c7a2 <_printf_float+0xb6>
 800cac6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800caca:	2200      	movs	r2, #0
 800cacc:	2300      	movs	r3, #0
 800cace:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cad2:	f7f4 fa05 	bl	8000ee0 <__aeabi_dcmpeq>
 800cad6:	b9c0      	cbnz	r0, 800cb0a <_printf_float+0x41e>
 800cad8:	4653      	mov	r3, sl
 800cada:	f108 0201 	add.w	r2, r8, #1
 800cade:	4631      	mov	r1, r6
 800cae0:	4628      	mov	r0, r5
 800cae2:	47b8      	blx	r7
 800cae4:	3001      	adds	r0, #1
 800cae6:	d10c      	bne.n	800cb02 <_printf_float+0x416>
 800cae8:	e65b      	b.n	800c7a2 <_printf_float+0xb6>
 800caea:	2301      	movs	r3, #1
 800caec:	465a      	mov	r2, fp
 800caee:	4631      	mov	r1, r6
 800caf0:	4628      	mov	r0, r5
 800caf2:	47b8      	blx	r7
 800caf4:	3001      	adds	r0, #1
 800caf6:	f43f ae54 	beq.w	800c7a2 <_printf_float+0xb6>
 800cafa:	f108 0801 	add.w	r8, r8, #1
 800cafe:	45d0      	cmp	r8, sl
 800cb00:	dbf3      	blt.n	800caea <_printf_float+0x3fe>
 800cb02:	464b      	mov	r3, r9
 800cb04:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cb08:	e6e0      	b.n	800c8cc <_printf_float+0x1e0>
 800cb0a:	f04f 0800 	mov.w	r8, #0
 800cb0e:	f104 0b1a 	add.w	fp, r4, #26
 800cb12:	e7f4      	b.n	800cafe <_printf_float+0x412>
 800cb14:	2301      	movs	r3, #1
 800cb16:	4642      	mov	r2, r8
 800cb18:	e7e1      	b.n	800cade <_printf_float+0x3f2>
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	464a      	mov	r2, r9
 800cb1e:	4631      	mov	r1, r6
 800cb20:	4628      	mov	r0, r5
 800cb22:	47b8      	blx	r7
 800cb24:	3001      	adds	r0, #1
 800cb26:	f43f ae3c 	beq.w	800c7a2 <_printf_float+0xb6>
 800cb2a:	f108 0801 	add.w	r8, r8, #1
 800cb2e:	68e3      	ldr	r3, [r4, #12]
 800cb30:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cb32:	1a5b      	subs	r3, r3, r1
 800cb34:	4543      	cmp	r3, r8
 800cb36:	dcf0      	bgt.n	800cb1a <_printf_float+0x42e>
 800cb38:	e6fd      	b.n	800c936 <_printf_float+0x24a>
 800cb3a:	f04f 0800 	mov.w	r8, #0
 800cb3e:	f104 0919 	add.w	r9, r4, #25
 800cb42:	e7f4      	b.n	800cb2e <_printf_float+0x442>

0800cb44 <_printf_common>:
 800cb44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb48:	4616      	mov	r6, r2
 800cb4a:	4698      	mov	r8, r3
 800cb4c:	688a      	ldr	r2, [r1, #8]
 800cb4e:	690b      	ldr	r3, [r1, #16]
 800cb50:	4607      	mov	r7, r0
 800cb52:	4293      	cmp	r3, r2
 800cb54:	bfb8      	it	lt
 800cb56:	4613      	movlt	r3, r2
 800cb58:	6033      	str	r3, [r6, #0]
 800cb5a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cb5e:	460c      	mov	r4, r1
 800cb60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cb64:	b10a      	cbz	r2, 800cb6a <_printf_common+0x26>
 800cb66:	3301      	adds	r3, #1
 800cb68:	6033      	str	r3, [r6, #0]
 800cb6a:	6823      	ldr	r3, [r4, #0]
 800cb6c:	0699      	lsls	r1, r3, #26
 800cb6e:	bf42      	ittt	mi
 800cb70:	6833      	ldrmi	r3, [r6, #0]
 800cb72:	3302      	addmi	r3, #2
 800cb74:	6033      	strmi	r3, [r6, #0]
 800cb76:	6825      	ldr	r5, [r4, #0]
 800cb78:	f015 0506 	ands.w	r5, r5, #6
 800cb7c:	d106      	bne.n	800cb8c <_printf_common+0x48>
 800cb7e:	f104 0a19 	add.w	sl, r4, #25
 800cb82:	68e3      	ldr	r3, [r4, #12]
 800cb84:	6832      	ldr	r2, [r6, #0]
 800cb86:	1a9b      	subs	r3, r3, r2
 800cb88:	42ab      	cmp	r3, r5
 800cb8a:	dc2b      	bgt.n	800cbe4 <_printf_common+0xa0>
 800cb8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cb90:	6822      	ldr	r2, [r4, #0]
 800cb92:	3b00      	subs	r3, #0
 800cb94:	bf18      	it	ne
 800cb96:	2301      	movne	r3, #1
 800cb98:	0692      	lsls	r2, r2, #26
 800cb9a:	d430      	bmi.n	800cbfe <_printf_common+0xba>
 800cb9c:	4641      	mov	r1, r8
 800cb9e:	4638      	mov	r0, r7
 800cba0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cba4:	47c8      	blx	r9
 800cba6:	3001      	adds	r0, #1
 800cba8:	d023      	beq.n	800cbf2 <_printf_common+0xae>
 800cbaa:	6823      	ldr	r3, [r4, #0]
 800cbac:	6922      	ldr	r2, [r4, #16]
 800cbae:	f003 0306 	and.w	r3, r3, #6
 800cbb2:	2b04      	cmp	r3, #4
 800cbb4:	bf14      	ite	ne
 800cbb6:	2500      	movne	r5, #0
 800cbb8:	6833      	ldreq	r3, [r6, #0]
 800cbba:	f04f 0600 	mov.w	r6, #0
 800cbbe:	bf08      	it	eq
 800cbc0:	68e5      	ldreq	r5, [r4, #12]
 800cbc2:	f104 041a 	add.w	r4, r4, #26
 800cbc6:	bf08      	it	eq
 800cbc8:	1aed      	subeq	r5, r5, r3
 800cbca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cbce:	bf08      	it	eq
 800cbd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	bfc4      	itt	gt
 800cbd8:	1a9b      	subgt	r3, r3, r2
 800cbda:	18ed      	addgt	r5, r5, r3
 800cbdc:	42b5      	cmp	r5, r6
 800cbde:	d11a      	bne.n	800cc16 <_printf_common+0xd2>
 800cbe0:	2000      	movs	r0, #0
 800cbe2:	e008      	b.n	800cbf6 <_printf_common+0xb2>
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	4652      	mov	r2, sl
 800cbe8:	4641      	mov	r1, r8
 800cbea:	4638      	mov	r0, r7
 800cbec:	47c8      	blx	r9
 800cbee:	3001      	adds	r0, #1
 800cbf0:	d103      	bne.n	800cbfa <_printf_common+0xb6>
 800cbf2:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbfa:	3501      	adds	r5, #1
 800cbfc:	e7c1      	b.n	800cb82 <_printf_common+0x3e>
 800cbfe:	2030      	movs	r0, #48	@ 0x30
 800cc00:	18e1      	adds	r1, r4, r3
 800cc02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cc06:	1c5a      	adds	r2, r3, #1
 800cc08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cc0c:	4422      	add	r2, r4
 800cc0e:	3302      	adds	r3, #2
 800cc10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cc14:	e7c2      	b.n	800cb9c <_printf_common+0x58>
 800cc16:	2301      	movs	r3, #1
 800cc18:	4622      	mov	r2, r4
 800cc1a:	4641      	mov	r1, r8
 800cc1c:	4638      	mov	r0, r7
 800cc1e:	47c8      	blx	r9
 800cc20:	3001      	adds	r0, #1
 800cc22:	d0e6      	beq.n	800cbf2 <_printf_common+0xae>
 800cc24:	3601      	adds	r6, #1
 800cc26:	e7d9      	b.n	800cbdc <_printf_common+0x98>

0800cc28 <_printf_i>:
 800cc28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc2c:	7e0f      	ldrb	r7, [r1, #24]
 800cc2e:	4691      	mov	r9, r2
 800cc30:	2f78      	cmp	r7, #120	@ 0x78
 800cc32:	4680      	mov	r8, r0
 800cc34:	460c      	mov	r4, r1
 800cc36:	469a      	mov	sl, r3
 800cc38:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cc3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cc3e:	d807      	bhi.n	800cc50 <_printf_i+0x28>
 800cc40:	2f62      	cmp	r7, #98	@ 0x62
 800cc42:	d80a      	bhi.n	800cc5a <_printf_i+0x32>
 800cc44:	2f00      	cmp	r7, #0
 800cc46:	f000 80d3 	beq.w	800cdf0 <_printf_i+0x1c8>
 800cc4a:	2f58      	cmp	r7, #88	@ 0x58
 800cc4c:	f000 80ba 	beq.w	800cdc4 <_printf_i+0x19c>
 800cc50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cc58:	e03a      	b.n	800ccd0 <_printf_i+0xa8>
 800cc5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cc5e:	2b15      	cmp	r3, #21
 800cc60:	d8f6      	bhi.n	800cc50 <_printf_i+0x28>
 800cc62:	a101      	add	r1, pc, #4	@ (adr r1, 800cc68 <_printf_i+0x40>)
 800cc64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc68:	0800ccc1 	.word	0x0800ccc1
 800cc6c:	0800ccd5 	.word	0x0800ccd5
 800cc70:	0800cc51 	.word	0x0800cc51
 800cc74:	0800cc51 	.word	0x0800cc51
 800cc78:	0800cc51 	.word	0x0800cc51
 800cc7c:	0800cc51 	.word	0x0800cc51
 800cc80:	0800ccd5 	.word	0x0800ccd5
 800cc84:	0800cc51 	.word	0x0800cc51
 800cc88:	0800cc51 	.word	0x0800cc51
 800cc8c:	0800cc51 	.word	0x0800cc51
 800cc90:	0800cc51 	.word	0x0800cc51
 800cc94:	0800cdd7 	.word	0x0800cdd7
 800cc98:	0800ccff 	.word	0x0800ccff
 800cc9c:	0800cd91 	.word	0x0800cd91
 800cca0:	0800cc51 	.word	0x0800cc51
 800cca4:	0800cc51 	.word	0x0800cc51
 800cca8:	0800cdf9 	.word	0x0800cdf9
 800ccac:	0800cc51 	.word	0x0800cc51
 800ccb0:	0800ccff 	.word	0x0800ccff
 800ccb4:	0800cc51 	.word	0x0800cc51
 800ccb8:	0800cc51 	.word	0x0800cc51
 800ccbc:	0800cd99 	.word	0x0800cd99
 800ccc0:	6833      	ldr	r3, [r6, #0]
 800ccc2:	1d1a      	adds	r2, r3, #4
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	6032      	str	r2, [r6, #0]
 800ccc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cccc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	e09e      	b.n	800ce12 <_printf_i+0x1ea>
 800ccd4:	6833      	ldr	r3, [r6, #0]
 800ccd6:	6820      	ldr	r0, [r4, #0]
 800ccd8:	1d19      	adds	r1, r3, #4
 800ccda:	6031      	str	r1, [r6, #0]
 800ccdc:	0606      	lsls	r6, r0, #24
 800ccde:	d501      	bpl.n	800cce4 <_printf_i+0xbc>
 800cce0:	681d      	ldr	r5, [r3, #0]
 800cce2:	e003      	b.n	800ccec <_printf_i+0xc4>
 800cce4:	0645      	lsls	r5, r0, #25
 800cce6:	d5fb      	bpl.n	800cce0 <_printf_i+0xb8>
 800cce8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ccec:	2d00      	cmp	r5, #0
 800ccee:	da03      	bge.n	800ccf8 <_printf_i+0xd0>
 800ccf0:	232d      	movs	r3, #45	@ 0x2d
 800ccf2:	426d      	negs	r5, r5
 800ccf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccf8:	230a      	movs	r3, #10
 800ccfa:	4859      	ldr	r0, [pc, #356]	@ (800ce60 <_printf_i+0x238>)
 800ccfc:	e011      	b.n	800cd22 <_printf_i+0xfa>
 800ccfe:	6821      	ldr	r1, [r4, #0]
 800cd00:	6833      	ldr	r3, [r6, #0]
 800cd02:	0608      	lsls	r0, r1, #24
 800cd04:	f853 5b04 	ldr.w	r5, [r3], #4
 800cd08:	d402      	bmi.n	800cd10 <_printf_i+0xe8>
 800cd0a:	0649      	lsls	r1, r1, #25
 800cd0c:	bf48      	it	mi
 800cd0e:	b2ad      	uxthmi	r5, r5
 800cd10:	2f6f      	cmp	r7, #111	@ 0x6f
 800cd12:	6033      	str	r3, [r6, #0]
 800cd14:	bf14      	ite	ne
 800cd16:	230a      	movne	r3, #10
 800cd18:	2308      	moveq	r3, #8
 800cd1a:	4851      	ldr	r0, [pc, #324]	@ (800ce60 <_printf_i+0x238>)
 800cd1c:	2100      	movs	r1, #0
 800cd1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cd22:	6866      	ldr	r6, [r4, #4]
 800cd24:	2e00      	cmp	r6, #0
 800cd26:	bfa8      	it	ge
 800cd28:	6821      	ldrge	r1, [r4, #0]
 800cd2a:	60a6      	str	r6, [r4, #8]
 800cd2c:	bfa4      	itt	ge
 800cd2e:	f021 0104 	bicge.w	r1, r1, #4
 800cd32:	6021      	strge	r1, [r4, #0]
 800cd34:	b90d      	cbnz	r5, 800cd3a <_printf_i+0x112>
 800cd36:	2e00      	cmp	r6, #0
 800cd38:	d04b      	beq.n	800cdd2 <_printf_i+0x1aa>
 800cd3a:	4616      	mov	r6, r2
 800cd3c:	fbb5 f1f3 	udiv	r1, r5, r3
 800cd40:	fb03 5711 	mls	r7, r3, r1, r5
 800cd44:	5dc7      	ldrb	r7, [r0, r7]
 800cd46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cd4a:	462f      	mov	r7, r5
 800cd4c:	42bb      	cmp	r3, r7
 800cd4e:	460d      	mov	r5, r1
 800cd50:	d9f4      	bls.n	800cd3c <_printf_i+0x114>
 800cd52:	2b08      	cmp	r3, #8
 800cd54:	d10b      	bne.n	800cd6e <_printf_i+0x146>
 800cd56:	6823      	ldr	r3, [r4, #0]
 800cd58:	07df      	lsls	r7, r3, #31
 800cd5a:	d508      	bpl.n	800cd6e <_printf_i+0x146>
 800cd5c:	6923      	ldr	r3, [r4, #16]
 800cd5e:	6861      	ldr	r1, [r4, #4]
 800cd60:	4299      	cmp	r1, r3
 800cd62:	bfde      	ittt	le
 800cd64:	2330      	movle	r3, #48	@ 0x30
 800cd66:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd6e:	1b92      	subs	r2, r2, r6
 800cd70:	6122      	str	r2, [r4, #16]
 800cd72:	464b      	mov	r3, r9
 800cd74:	4621      	mov	r1, r4
 800cd76:	4640      	mov	r0, r8
 800cd78:	f8cd a000 	str.w	sl, [sp]
 800cd7c:	aa03      	add	r2, sp, #12
 800cd7e:	f7ff fee1 	bl	800cb44 <_printf_common>
 800cd82:	3001      	adds	r0, #1
 800cd84:	d14a      	bne.n	800ce1c <_printf_i+0x1f4>
 800cd86:	f04f 30ff 	mov.w	r0, #4294967295
 800cd8a:	b004      	add	sp, #16
 800cd8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd90:	6823      	ldr	r3, [r4, #0]
 800cd92:	f043 0320 	orr.w	r3, r3, #32
 800cd96:	6023      	str	r3, [r4, #0]
 800cd98:	2778      	movs	r7, #120	@ 0x78
 800cd9a:	4832      	ldr	r0, [pc, #200]	@ (800ce64 <_printf_i+0x23c>)
 800cd9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cda0:	6823      	ldr	r3, [r4, #0]
 800cda2:	6831      	ldr	r1, [r6, #0]
 800cda4:	061f      	lsls	r7, r3, #24
 800cda6:	f851 5b04 	ldr.w	r5, [r1], #4
 800cdaa:	d402      	bmi.n	800cdb2 <_printf_i+0x18a>
 800cdac:	065f      	lsls	r7, r3, #25
 800cdae:	bf48      	it	mi
 800cdb0:	b2ad      	uxthmi	r5, r5
 800cdb2:	6031      	str	r1, [r6, #0]
 800cdb4:	07d9      	lsls	r1, r3, #31
 800cdb6:	bf44      	itt	mi
 800cdb8:	f043 0320 	orrmi.w	r3, r3, #32
 800cdbc:	6023      	strmi	r3, [r4, #0]
 800cdbe:	b11d      	cbz	r5, 800cdc8 <_printf_i+0x1a0>
 800cdc0:	2310      	movs	r3, #16
 800cdc2:	e7ab      	b.n	800cd1c <_printf_i+0xf4>
 800cdc4:	4826      	ldr	r0, [pc, #152]	@ (800ce60 <_printf_i+0x238>)
 800cdc6:	e7e9      	b.n	800cd9c <_printf_i+0x174>
 800cdc8:	6823      	ldr	r3, [r4, #0]
 800cdca:	f023 0320 	bic.w	r3, r3, #32
 800cdce:	6023      	str	r3, [r4, #0]
 800cdd0:	e7f6      	b.n	800cdc0 <_printf_i+0x198>
 800cdd2:	4616      	mov	r6, r2
 800cdd4:	e7bd      	b.n	800cd52 <_printf_i+0x12a>
 800cdd6:	6833      	ldr	r3, [r6, #0]
 800cdd8:	6825      	ldr	r5, [r4, #0]
 800cdda:	1d18      	adds	r0, r3, #4
 800cddc:	6961      	ldr	r1, [r4, #20]
 800cdde:	6030      	str	r0, [r6, #0]
 800cde0:	062e      	lsls	r6, r5, #24
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	d501      	bpl.n	800cdea <_printf_i+0x1c2>
 800cde6:	6019      	str	r1, [r3, #0]
 800cde8:	e002      	b.n	800cdf0 <_printf_i+0x1c8>
 800cdea:	0668      	lsls	r0, r5, #25
 800cdec:	d5fb      	bpl.n	800cde6 <_printf_i+0x1be>
 800cdee:	8019      	strh	r1, [r3, #0]
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	4616      	mov	r6, r2
 800cdf4:	6123      	str	r3, [r4, #16]
 800cdf6:	e7bc      	b.n	800cd72 <_printf_i+0x14a>
 800cdf8:	6833      	ldr	r3, [r6, #0]
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	1d1a      	adds	r2, r3, #4
 800cdfe:	6032      	str	r2, [r6, #0]
 800ce00:	681e      	ldr	r6, [r3, #0]
 800ce02:	6862      	ldr	r2, [r4, #4]
 800ce04:	4630      	mov	r0, r6
 800ce06:	f000 fb91 	bl	800d52c <memchr>
 800ce0a:	b108      	cbz	r0, 800ce10 <_printf_i+0x1e8>
 800ce0c:	1b80      	subs	r0, r0, r6
 800ce0e:	6060      	str	r0, [r4, #4]
 800ce10:	6863      	ldr	r3, [r4, #4]
 800ce12:	6123      	str	r3, [r4, #16]
 800ce14:	2300      	movs	r3, #0
 800ce16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce1a:	e7aa      	b.n	800cd72 <_printf_i+0x14a>
 800ce1c:	4632      	mov	r2, r6
 800ce1e:	4649      	mov	r1, r9
 800ce20:	4640      	mov	r0, r8
 800ce22:	6923      	ldr	r3, [r4, #16]
 800ce24:	47d0      	blx	sl
 800ce26:	3001      	adds	r0, #1
 800ce28:	d0ad      	beq.n	800cd86 <_printf_i+0x15e>
 800ce2a:	6823      	ldr	r3, [r4, #0]
 800ce2c:	079b      	lsls	r3, r3, #30
 800ce2e:	d413      	bmi.n	800ce58 <_printf_i+0x230>
 800ce30:	68e0      	ldr	r0, [r4, #12]
 800ce32:	9b03      	ldr	r3, [sp, #12]
 800ce34:	4298      	cmp	r0, r3
 800ce36:	bfb8      	it	lt
 800ce38:	4618      	movlt	r0, r3
 800ce3a:	e7a6      	b.n	800cd8a <_printf_i+0x162>
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	4632      	mov	r2, r6
 800ce40:	4649      	mov	r1, r9
 800ce42:	4640      	mov	r0, r8
 800ce44:	47d0      	blx	sl
 800ce46:	3001      	adds	r0, #1
 800ce48:	d09d      	beq.n	800cd86 <_printf_i+0x15e>
 800ce4a:	3501      	adds	r5, #1
 800ce4c:	68e3      	ldr	r3, [r4, #12]
 800ce4e:	9903      	ldr	r1, [sp, #12]
 800ce50:	1a5b      	subs	r3, r3, r1
 800ce52:	42ab      	cmp	r3, r5
 800ce54:	dcf2      	bgt.n	800ce3c <_printf_i+0x214>
 800ce56:	e7eb      	b.n	800ce30 <_printf_i+0x208>
 800ce58:	2500      	movs	r5, #0
 800ce5a:	f104 0619 	add.w	r6, r4, #25
 800ce5e:	e7f5      	b.n	800ce4c <_printf_i+0x224>
 800ce60:	08010ca5 	.word	0x08010ca5
 800ce64:	08010cb6 	.word	0x08010cb6

0800ce68 <std>:
 800ce68:	2300      	movs	r3, #0
 800ce6a:	b510      	push	{r4, lr}
 800ce6c:	4604      	mov	r4, r0
 800ce6e:	e9c0 3300 	strd	r3, r3, [r0]
 800ce72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce76:	6083      	str	r3, [r0, #8]
 800ce78:	8181      	strh	r1, [r0, #12]
 800ce7a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce7c:	81c2      	strh	r2, [r0, #14]
 800ce7e:	6183      	str	r3, [r0, #24]
 800ce80:	4619      	mov	r1, r3
 800ce82:	2208      	movs	r2, #8
 800ce84:	305c      	adds	r0, #92	@ 0x5c
 800ce86:	f000 fa6d 	bl	800d364 <memset>
 800ce8a:	4b0d      	ldr	r3, [pc, #52]	@ (800cec0 <std+0x58>)
 800ce8c:	6224      	str	r4, [r4, #32]
 800ce8e:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce90:	4b0c      	ldr	r3, [pc, #48]	@ (800cec4 <std+0x5c>)
 800ce92:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce94:	4b0c      	ldr	r3, [pc, #48]	@ (800cec8 <std+0x60>)
 800ce96:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce98:	4b0c      	ldr	r3, [pc, #48]	@ (800cecc <std+0x64>)
 800ce9a:	6323      	str	r3, [r4, #48]	@ 0x30
 800ce9c:	4b0c      	ldr	r3, [pc, #48]	@ (800ced0 <std+0x68>)
 800ce9e:	429c      	cmp	r4, r3
 800cea0:	d006      	beq.n	800ceb0 <std+0x48>
 800cea2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cea6:	4294      	cmp	r4, r2
 800cea8:	d002      	beq.n	800ceb0 <std+0x48>
 800ceaa:	33d0      	adds	r3, #208	@ 0xd0
 800ceac:	429c      	cmp	r4, r3
 800ceae:	d105      	bne.n	800cebc <std+0x54>
 800ceb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ceb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceb8:	f000 bb2d 	b.w	800d516 <__retarget_lock_init_recursive>
 800cebc:	bd10      	pop	{r4, pc}
 800cebe:	bf00      	nop
 800cec0:	0800d269 	.word	0x0800d269
 800cec4:	0800d28f 	.word	0x0800d28f
 800cec8:	0800d2c7 	.word	0x0800d2c7
 800cecc:	0800d2eb 	.word	0x0800d2eb
 800ced0:	20000668 	.word	0x20000668

0800ced4 <stdio_exit_handler>:
 800ced4:	4a02      	ldr	r2, [pc, #8]	@ (800cee0 <stdio_exit_handler+0xc>)
 800ced6:	4903      	ldr	r1, [pc, #12]	@ (800cee4 <stdio_exit_handler+0x10>)
 800ced8:	4803      	ldr	r0, [pc, #12]	@ (800cee8 <stdio_exit_handler+0x14>)
 800ceda:	f000 b8ef 	b.w	800d0bc <_fwalk_sglue>
 800cede:	bf00      	nop
 800cee0:	20000014 	.word	0x20000014
 800cee4:	0800f84d 	.word	0x0800f84d
 800cee8:	20000024 	.word	0x20000024

0800ceec <cleanup_stdio>:
 800ceec:	6841      	ldr	r1, [r0, #4]
 800ceee:	4b0c      	ldr	r3, [pc, #48]	@ (800cf20 <cleanup_stdio+0x34>)
 800cef0:	b510      	push	{r4, lr}
 800cef2:	4299      	cmp	r1, r3
 800cef4:	4604      	mov	r4, r0
 800cef6:	d001      	beq.n	800cefc <cleanup_stdio+0x10>
 800cef8:	f002 fca8 	bl	800f84c <_fflush_r>
 800cefc:	68a1      	ldr	r1, [r4, #8]
 800cefe:	4b09      	ldr	r3, [pc, #36]	@ (800cf24 <cleanup_stdio+0x38>)
 800cf00:	4299      	cmp	r1, r3
 800cf02:	d002      	beq.n	800cf0a <cleanup_stdio+0x1e>
 800cf04:	4620      	mov	r0, r4
 800cf06:	f002 fca1 	bl	800f84c <_fflush_r>
 800cf0a:	68e1      	ldr	r1, [r4, #12]
 800cf0c:	4b06      	ldr	r3, [pc, #24]	@ (800cf28 <cleanup_stdio+0x3c>)
 800cf0e:	4299      	cmp	r1, r3
 800cf10:	d004      	beq.n	800cf1c <cleanup_stdio+0x30>
 800cf12:	4620      	mov	r0, r4
 800cf14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf18:	f002 bc98 	b.w	800f84c <_fflush_r>
 800cf1c:	bd10      	pop	{r4, pc}
 800cf1e:	bf00      	nop
 800cf20:	20000668 	.word	0x20000668
 800cf24:	200006d0 	.word	0x200006d0
 800cf28:	20000738 	.word	0x20000738

0800cf2c <__fp_lock>:
 800cf2c:	b508      	push	{r3, lr}
 800cf2e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800cf30:	07da      	lsls	r2, r3, #31
 800cf32:	d405      	bmi.n	800cf40 <__fp_lock+0x14>
 800cf34:	898b      	ldrh	r3, [r1, #12]
 800cf36:	059b      	lsls	r3, r3, #22
 800cf38:	d402      	bmi.n	800cf40 <__fp_lock+0x14>
 800cf3a:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 800cf3c:	f000 faef 	bl	800d51e <__retarget_lock_acquire_recursive>
 800cf40:	2000      	movs	r0, #0
 800cf42:	bd08      	pop	{r3, pc}

0800cf44 <__fp_unlock>:
 800cf44:	b508      	push	{r3, lr}
 800cf46:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800cf48:	07da      	lsls	r2, r3, #31
 800cf4a:	d405      	bmi.n	800cf58 <__fp_unlock+0x14>
 800cf4c:	898b      	ldrh	r3, [r1, #12]
 800cf4e:	059b      	lsls	r3, r3, #22
 800cf50:	d402      	bmi.n	800cf58 <__fp_unlock+0x14>
 800cf52:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 800cf54:	f000 fae9 	bl	800d52a <__retarget_lock_release_recursive>
 800cf58:	2000      	movs	r0, #0
 800cf5a:	bd08      	pop	{r3, pc}

0800cf5c <global_stdio_init.part.0>:
 800cf5c:	b510      	push	{r4, lr}
 800cf5e:	4b0b      	ldr	r3, [pc, #44]	@ (800cf8c <global_stdio_init.part.0+0x30>)
 800cf60:	4c0b      	ldr	r4, [pc, #44]	@ (800cf90 <global_stdio_init.part.0+0x34>)
 800cf62:	4a0c      	ldr	r2, [pc, #48]	@ (800cf94 <global_stdio_init.part.0+0x38>)
 800cf64:	4620      	mov	r0, r4
 800cf66:	601a      	str	r2, [r3, #0]
 800cf68:	2104      	movs	r1, #4
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f7ff ff7c 	bl	800ce68 <std>
 800cf70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf74:	2201      	movs	r2, #1
 800cf76:	2109      	movs	r1, #9
 800cf78:	f7ff ff76 	bl	800ce68 <std>
 800cf7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf80:	2202      	movs	r2, #2
 800cf82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf86:	2112      	movs	r1, #18
 800cf88:	f7ff bf6e 	b.w	800ce68 <std>
 800cf8c:	200007a0 	.word	0x200007a0
 800cf90:	20000668 	.word	0x20000668
 800cf94:	0800ced5 	.word	0x0800ced5

0800cf98 <__sfp_lock_acquire>:
 800cf98:	4801      	ldr	r0, [pc, #4]	@ (800cfa0 <__sfp_lock_acquire+0x8>)
 800cf9a:	f000 bac0 	b.w	800d51e <__retarget_lock_acquire_recursive>
 800cf9e:	bf00      	nop
 800cfa0:	200007af 	.word	0x200007af

0800cfa4 <__sfp_lock_release>:
 800cfa4:	4801      	ldr	r0, [pc, #4]	@ (800cfac <__sfp_lock_release+0x8>)
 800cfa6:	f000 bac0 	b.w	800d52a <__retarget_lock_release_recursive>
 800cfaa:	bf00      	nop
 800cfac:	200007af 	.word	0x200007af

0800cfb0 <__sfp>:
 800cfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfb2:	4607      	mov	r7, r0
 800cfb4:	f7ff fff0 	bl	800cf98 <__sfp_lock_acquire>
 800cfb8:	4b23      	ldr	r3, [pc, #140]	@ (800d048 <__sfp+0x98>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	b90b      	cbnz	r3, 800cfc2 <__sfp+0x12>
 800cfbe:	f7ff ffcd 	bl	800cf5c <global_stdio_init.part.0>
 800cfc2:	4e22      	ldr	r6, [pc, #136]	@ (800d04c <__sfp+0x9c>)
 800cfc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cfc8:	3b01      	subs	r3, #1
 800cfca:	d50f      	bpl.n	800cfec <__sfp+0x3c>
 800cfcc:	6835      	ldr	r5, [r6, #0]
 800cfce:	2d00      	cmp	r5, #0
 800cfd0:	d137      	bne.n	800d042 <__sfp+0x92>
 800cfd2:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800cfd6:	4638      	mov	r0, r7
 800cfd8:	f001 f980 	bl	800e2dc <_malloc_r>
 800cfdc:	4604      	mov	r4, r0
 800cfde:	bb28      	cbnz	r0, 800d02c <__sfp+0x7c>
 800cfe0:	6030      	str	r0, [r6, #0]
 800cfe2:	f7ff ffdf 	bl	800cfa4 <__sfp_lock_release>
 800cfe6:	230c      	movs	r3, #12
 800cfe8:	603b      	str	r3, [r7, #0]
 800cfea:	e01b      	b.n	800d024 <__sfp+0x74>
 800cfec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cff0:	b9d5      	cbnz	r5, 800d028 <__sfp+0x78>
 800cff2:	4b17      	ldr	r3, [pc, #92]	@ (800d050 <__sfp+0xa0>)
 800cff4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cff8:	60e3      	str	r3, [r4, #12]
 800cffa:	6665      	str	r5, [r4, #100]	@ 0x64
 800cffc:	f000 fa8b 	bl	800d516 <__retarget_lock_init_recursive>
 800d000:	f7ff ffd0 	bl	800cfa4 <__sfp_lock_release>
 800d004:	2208      	movs	r2, #8
 800d006:	4629      	mov	r1, r5
 800d008:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d00c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d010:	6025      	str	r5, [r4, #0]
 800d012:	61a5      	str	r5, [r4, #24]
 800d014:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800d018:	f000 f9a4 	bl	800d364 <memset>
 800d01c:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800d020:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 800d024:	4620      	mov	r0, r4
 800d026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d028:	3468      	adds	r4, #104	@ 0x68
 800d02a:	e7cd      	b.n	800cfc8 <__sfp+0x18>
 800d02c:	2304      	movs	r3, #4
 800d02e:	6005      	str	r5, [r0, #0]
 800d030:	6043      	str	r3, [r0, #4]
 800d032:	300c      	adds	r0, #12
 800d034:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 800d038:	4629      	mov	r1, r5
 800d03a:	60a0      	str	r0, [r4, #8]
 800d03c:	f000 f992 	bl	800d364 <memset>
 800d040:	6034      	str	r4, [r6, #0]
 800d042:	6836      	ldr	r6, [r6, #0]
 800d044:	e7be      	b.n	800cfc4 <__sfp+0x14>
 800d046:	bf00      	nop
 800d048:	200007a0 	.word	0x200007a0
 800d04c:	20000014 	.word	0x20000014
 800d050:	ffff0001 	.word	0xffff0001

0800d054 <__sinit>:
 800d054:	b510      	push	{r4, lr}
 800d056:	4604      	mov	r4, r0
 800d058:	f7ff ff9e 	bl	800cf98 <__sfp_lock_acquire>
 800d05c:	6a23      	ldr	r3, [r4, #32]
 800d05e:	b11b      	cbz	r3, 800d068 <__sinit+0x14>
 800d060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d064:	f7ff bf9e 	b.w	800cfa4 <__sfp_lock_release>
 800d068:	4b04      	ldr	r3, [pc, #16]	@ (800d07c <__sinit+0x28>)
 800d06a:	6223      	str	r3, [r4, #32]
 800d06c:	4b04      	ldr	r3, [pc, #16]	@ (800d080 <__sinit+0x2c>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d1f5      	bne.n	800d060 <__sinit+0xc>
 800d074:	f7ff ff72 	bl	800cf5c <global_stdio_init.part.0>
 800d078:	e7f2      	b.n	800d060 <__sinit+0xc>
 800d07a:	bf00      	nop
 800d07c:	0800ceed 	.word	0x0800ceed
 800d080:	200007a0 	.word	0x200007a0

0800d084 <__fp_lock_all>:
 800d084:	b508      	push	{r3, lr}
 800d086:	f7ff ff87 	bl	800cf98 <__sfp_lock_acquire>
 800d08a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d08e:	2000      	movs	r0, #0
 800d090:	4a01      	ldr	r2, [pc, #4]	@ (800d098 <__fp_lock_all+0x14>)
 800d092:	4902      	ldr	r1, [pc, #8]	@ (800d09c <__fp_lock_all+0x18>)
 800d094:	f000 b812 	b.w	800d0bc <_fwalk_sglue>
 800d098:	20000014 	.word	0x20000014
 800d09c:	0800cf2d 	.word	0x0800cf2d

0800d0a0 <__fp_unlock_all>:
 800d0a0:	b508      	push	{r3, lr}
 800d0a2:	2000      	movs	r0, #0
 800d0a4:	4a03      	ldr	r2, [pc, #12]	@ (800d0b4 <__fp_unlock_all+0x14>)
 800d0a6:	4904      	ldr	r1, [pc, #16]	@ (800d0b8 <__fp_unlock_all+0x18>)
 800d0a8:	f000 f808 	bl	800d0bc <_fwalk_sglue>
 800d0ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d0b0:	f7ff bf78 	b.w	800cfa4 <__sfp_lock_release>
 800d0b4:	20000014 	.word	0x20000014
 800d0b8:	0800cf45 	.word	0x0800cf45

0800d0bc <_fwalk_sglue>:
 800d0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0c0:	4607      	mov	r7, r0
 800d0c2:	4688      	mov	r8, r1
 800d0c4:	4614      	mov	r4, r2
 800d0c6:	2600      	movs	r6, #0
 800d0c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0cc:	f1b9 0901 	subs.w	r9, r9, #1
 800d0d0:	d505      	bpl.n	800d0de <_fwalk_sglue+0x22>
 800d0d2:	6824      	ldr	r4, [r4, #0]
 800d0d4:	2c00      	cmp	r4, #0
 800d0d6:	d1f7      	bne.n	800d0c8 <_fwalk_sglue+0xc>
 800d0d8:	4630      	mov	r0, r6
 800d0da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0de:	89ab      	ldrh	r3, [r5, #12]
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d907      	bls.n	800d0f4 <_fwalk_sglue+0x38>
 800d0e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0e8:	3301      	adds	r3, #1
 800d0ea:	d003      	beq.n	800d0f4 <_fwalk_sglue+0x38>
 800d0ec:	4629      	mov	r1, r5
 800d0ee:	4638      	mov	r0, r7
 800d0f0:	47c0      	blx	r8
 800d0f2:	4306      	orrs	r6, r0
 800d0f4:	3568      	adds	r5, #104	@ 0x68
 800d0f6:	e7e9      	b.n	800d0cc <_fwalk_sglue+0x10>

0800d0f8 <_sniprintf_r>:
 800d0f8:	b408      	push	{r3}
 800d0fa:	b530      	push	{r4, r5, lr}
 800d0fc:	1e14      	subs	r4, r2, #0
 800d0fe:	4605      	mov	r5, r0
 800d100:	b09c      	sub	sp, #112	@ 0x70
 800d102:	da08      	bge.n	800d116 <_sniprintf_r+0x1e>
 800d104:	238b      	movs	r3, #139	@ 0x8b
 800d106:	6003      	str	r3, [r0, #0]
 800d108:	f04f 30ff 	mov.w	r0, #4294967295
 800d10c:	b01c      	add	sp, #112	@ 0x70
 800d10e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d112:	b001      	add	sp, #4
 800d114:	4770      	bx	lr
 800d116:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d11a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d11e:	bf0c      	ite	eq
 800d120:	4623      	moveq	r3, r4
 800d122:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d126:	9304      	str	r3, [sp, #16]
 800d128:	9307      	str	r3, [sp, #28]
 800d12a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d12e:	9102      	str	r1, [sp, #8]
 800d130:	9106      	str	r1, [sp, #24]
 800d132:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d136:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800d138:	ab20      	add	r3, sp, #128	@ 0x80
 800d13a:	a902      	add	r1, sp, #8
 800d13c:	9301      	str	r3, [sp, #4]
 800d13e:	f001 fef3 	bl	800ef28 <_svfiprintf_r>
 800d142:	1c43      	adds	r3, r0, #1
 800d144:	bfbc      	itt	lt
 800d146:	238b      	movlt	r3, #139	@ 0x8b
 800d148:	602b      	strlt	r3, [r5, #0]
 800d14a:	2c00      	cmp	r4, #0
 800d14c:	d0de      	beq.n	800d10c <_sniprintf_r+0x14>
 800d14e:	2200      	movs	r2, #0
 800d150:	9b02      	ldr	r3, [sp, #8]
 800d152:	701a      	strb	r2, [r3, #0]
 800d154:	e7da      	b.n	800d10c <_sniprintf_r+0x14>
	...

0800d158 <sniprintf>:
 800d158:	b40c      	push	{r2, r3}
 800d15a:	b530      	push	{r4, r5, lr}
 800d15c:	4b17      	ldr	r3, [pc, #92]	@ (800d1bc <sniprintf+0x64>)
 800d15e:	1e0c      	subs	r4, r1, #0
 800d160:	681d      	ldr	r5, [r3, #0]
 800d162:	b09d      	sub	sp, #116	@ 0x74
 800d164:	da08      	bge.n	800d178 <sniprintf+0x20>
 800d166:	238b      	movs	r3, #139	@ 0x8b
 800d168:	f04f 30ff 	mov.w	r0, #4294967295
 800d16c:	602b      	str	r3, [r5, #0]
 800d16e:	b01d      	add	sp, #116	@ 0x74
 800d170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d174:	b002      	add	sp, #8
 800d176:	4770      	bx	lr
 800d178:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d17c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d180:	bf0c      	ite	eq
 800d182:	4623      	moveq	r3, r4
 800d184:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d188:	9304      	str	r3, [sp, #16]
 800d18a:	9307      	str	r3, [sp, #28]
 800d18c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d190:	9002      	str	r0, [sp, #8]
 800d192:	9006      	str	r0, [sp, #24]
 800d194:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d198:	4628      	mov	r0, r5
 800d19a:	ab21      	add	r3, sp, #132	@ 0x84
 800d19c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d19e:	a902      	add	r1, sp, #8
 800d1a0:	9301      	str	r3, [sp, #4]
 800d1a2:	f001 fec1 	bl	800ef28 <_svfiprintf_r>
 800d1a6:	1c43      	adds	r3, r0, #1
 800d1a8:	bfbc      	itt	lt
 800d1aa:	238b      	movlt	r3, #139	@ 0x8b
 800d1ac:	602b      	strlt	r3, [r5, #0]
 800d1ae:	2c00      	cmp	r4, #0
 800d1b0:	d0dd      	beq.n	800d16e <sniprintf+0x16>
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	9b02      	ldr	r3, [sp, #8]
 800d1b6:	701a      	strb	r2, [r3, #0]
 800d1b8:	e7d9      	b.n	800d16e <sniprintf+0x16>
 800d1ba:	bf00      	nop
 800d1bc:	20000020 	.word	0x20000020

0800d1c0 <siscanf>:
 800d1c0:	b40e      	push	{r1, r2, r3}
 800d1c2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800d1c6:	b530      	push	{r4, r5, lr}
 800d1c8:	b09c      	sub	sp, #112	@ 0x70
 800d1ca:	ac1f      	add	r4, sp, #124	@ 0x7c
 800d1cc:	f854 5b04 	ldr.w	r5, [r4], #4
 800d1d0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d1d4:	9002      	str	r0, [sp, #8]
 800d1d6:	9006      	str	r0, [sp, #24]
 800d1d8:	f7f3 f878 	bl	80002cc <strlen>
 800d1dc:	4b0b      	ldr	r3, [pc, #44]	@ (800d20c <siscanf+0x4c>)
 800d1de:	9003      	str	r0, [sp, #12]
 800d1e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d1e6:	9314      	str	r3, [sp, #80]	@ 0x50
 800d1e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d1ec:	9007      	str	r0, [sp, #28]
 800d1ee:	4808      	ldr	r0, [pc, #32]	@ (800d210 <siscanf+0x50>)
 800d1f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d1f4:	462a      	mov	r2, r5
 800d1f6:	4623      	mov	r3, r4
 800d1f8:	a902      	add	r1, sp, #8
 800d1fa:	6800      	ldr	r0, [r0, #0]
 800d1fc:	9401      	str	r4, [sp, #4]
 800d1fe:	f001 ffe7 	bl	800f1d0 <__ssvfiscanf_r>
 800d202:	b01c      	add	sp, #112	@ 0x70
 800d204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d208:	b003      	add	sp, #12
 800d20a:	4770      	bx	lr
 800d20c:	0800d28b 	.word	0x0800d28b
 800d210:	20000020 	.word	0x20000020

0800d214 <_siscanf_r>:
 800d214:	b40c      	push	{r2, r3}
 800d216:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800d21a:	b570      	push	{r4, r5, r6, lr}
 800d21c:	b09c      	sub	sp, #112	@ 0x70
 800d21e:	ac20      	add	r4, sp, #128	@ 0x80
 800d220:	4605      	mov	r5, r0
 800d222:	4608      	mov	r0, r1
 800d224:	f854 6b04 	ldr.w	r6, [r4], #4
 800d228:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d22c:	9102      	str	r1, [sp, #8]
 800d22e:	9106      	str	r1, [sp, #24]
 800d230:	f7f3 f84c 	bl	80002cc <strlen>
 800d234:	4b0b      	ldr	r3, [pc, #44]	@ (800d264 <_siscanf_r+0x50>)
 800d236:	9003      	str	r0, [sp, #12]
 800d238:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d23a:	2300      	movs	r3, #0
 800d23c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d23e:	9314      	str	r3, [sp, #80]	@ 0x50
 800d240:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d244:	9007      	str	r0, [sp, #28]
 800d246:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d24a:	4632      	mov	r2, r6
 800d24c:	4623      	mov	r3, r4
 800d24e:	4628      	mov	r0, r5
 800d250:	a902      	add	r1, sp, #8
 800d252:	9401      	str	r4, [sp, #4]
 800d254:	f001 ffbc 	bl	800f1d0 <__ssvfiscanf_r>
 800d258:	b01c      	add	sp, #112	@ 0x70
 800d25a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d25e:	b002      	add	sp, #8
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop
 800d264:	0800d28b 	.word	0x0800d28b

0800d268 <__sread>:
 800d268:	b510      	push	{r4, lr}
 800d26a:	460c      	mov	r4, r1
 800d26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d270:	f000 f902 	bl	800d478 <_read_r>
 800d274:	2800      	cmp	r0, #0
 800d276:	bfab      	itete	ge
 800d278:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d27a:	89a3      	ldrhlt	r3, [r4, #12]
 800d27c:	181b      	addge	r3, r3, r0
 800d27e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d282:	bfac      	ite	ge
 800d284:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d286:	81a3      	strhlt	r3, [r4, #12]
 800d288:	bd10      	pop	{r4, pc}

0800d28a <__seofread>:
 800d28a:	2000      	movs	r0, #0
 800d28c:	4770      	bx	lr

0800d28e <__swrite>:
 800d28e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d292:	461f      	mov	r7, r3
 800d294:	898b      	ldrh	r3, [r1, #12]
 800d296:	4605      	mov	r5, r0
 800d298:	05db      	lsls	r3, r3, #23
 800d29a:	460c      	mov	r4, r1
 800d29c:	4616      	mov	r6, r2
 800d29e:	d505      	bpl.n	800d2ac <__swrite+0x1e>
 800d2a0:	2302      	movs	r3, #2
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2a8:	f000 f8d4 	bl	800d454 <_lseek_r>
 800d2ac:	89a3      	ldrh	r3, [r4, #12]
 800d2ae:	4632      	mov	r2, r6
 800d2b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d2b4:	81a3      	strh	r3, [r4, #12]
 800d2b6:	4628      	mov	r0, r5
 800d2b8:	463b      	mov	r3, r7
 800d2ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2c2:	f000 b8eb 	b.w	800d49c <_write_r>

0800d2c6 <__sseek>:
 800d2c6:	b510      	push	{r4, lr}
 800d2c8:	460c      	mov	r4, r1
 800d2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2ce:	f000 f8c1 	bl	800d454 <_lseek_r>
 800d2d2:	1c43      	adds	r3, r0, #1
 800d2d4:	89a3      	ldrh	r3, [r4, #12]
 800d2d6:	bf15      	itete	ne
 800d2d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d2da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d2de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d2e2:	81a3      	strheq	r3, [r4, #12]
 800d2e4:	bf18      	it	ne
 800d2e6:	81a3      	strhne	r3, [r4, #12]
 800d2e8:	bd10      	pop	{r4, pc}

0800d2ea <__sclose>:
 800d2ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2ee:	f000 b84b 	b.w	800d388 <_close_r>

0800d2f2 <_vsniprintf_r>:
 800d2f2:	b530      	push	{r4, r5, lr}
 800d2f4:	4614      	mov	r4, r2
 800d2f6:	2c00      	cmp	r4, #0
 800d2f8:	4605      	mov	r5, r0
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	b09b      	sub	sp, #108	@ 0x6c
 800d2fe:	da05      	bge.n	800d30c <_vsniprintf_r+0x1a>
 800d300:	238b      	movs	r3, #139	@ 0x8b
 800d302:	6003      	str	r3, [r0, #0]
 800d304:	f04f 30ff 	mov.w	r0, #4294967295
 800d308:	b01b      	add	sp, #108	@ 0x6c
 800d30a:	bd30      	pop	{r4, r5, pc}
 800d30c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d310:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d314:	bf0c      	ite	eq
 800d316:	4623      	moveq	r3, r4
 800d318:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d31c:	9302      	str	r3, [sp, #8]
 800d31e:	9305      	str	r3, [sp, #20]
 800d320:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d324:	9100      	str	r1, [sp, #0]
 800d326:	9104      	str	r1, [sp, #16]
 800d328:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d32c:	4669      	mov	r1, sp
 800d32e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d330:	f001 fdfa 	bl	800ef28 <_svfiprintf_r>
 800d334:	1c43      	adds	r3, r0, #1
 800d336:	bfbc      	itt	lt
 800d338:	238b      	movlt	r3, #139	@ 0x8b
 800d33a:	602b      	strlt	r3, [r5, #0]
 800d33c:	2c00      	cmp	r4, #0
 800d33e:	d0e3      	beq.n	800d308 <_vsniprintf_r+0x16>
 800d340:	2200      	movs	r2, #0
 800d342:	9b00      	ldr	r3, [sp, #0]
 800d344:	701a      	strb	r2, [r3, #0]
 800d346:	e7df      	b.n	800d308 <_vsniprintf_r+0x16>

0800d348 <vsniprintf>:
 800d348:	b507      	push	{r0, r1, r2, lr}
 800d34a:	9300      	str	r3, [sp, #0]
 800d34c:	4613      	mov	r3, r2
 800d34e:	460a      	mov	r2, r1
 800d350:	4601      	mov	r1, r0
 800d352:	4803      	ldr	r0, [pc, #12]	@ (800d360 <vsniprintf+0x18>)
 800d354:	6800      	ldr	r0, [r0, #0]
 800d356:	f7ff ffcc 	bl	800d2f2 <_vsniprintf_r>
 800d35a:	b003      	add	sp, #12
 800d35c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d360:	20000020 	.word	0x20000020

0800d364 <memset>:
 800d364:	4603      	mov	r3, r0
 800d366:	4402      	add	r2, r0
 800d368:	4293      	cmp	r3, r2
 800d36a:	d100      	bne.n	800d36e <memset+0xa>
 800d36c:	4770      	bx	lr
 800d36e:	f803 1b01 	strb.w	r1, [r3], #1
 800d372:	e7f9      	b.n	800d368 <memset+0x4>

0800d374 <__localeconv_l>:
 800d374:	30f0      	adds	r0, #240	@ 0xf0
 800d376:	4770      	bx	lr

0800d378 <_localeconv_r>:
 800d378:	4800      	ldr	r0, [pc, #0]	@ (800d37c <_localeconv_r+0x4>)
 800d37a:	4770      	bx	lr
 800d37c:	20000160 	.word	0x20000160

0800d380 <localeconv>:
 800d380:	4800      	ldr	r0, [pc, #0]	@ (800d384 <localeconv+0x4>)
 800d382:	4770      	bx	lr
 800d384:	20000160 	.word	0x20000160

0800d388 <_close_r>:
 800d388:	b538      	push	{r3, r4, r5, lr}
 800d38a:	2300      	movs	r3, #0
 800d38c:	4d05      	ldr	r5, [pc, #20]	@ (800d3a4 <_close_r+0x1c>)
 800d38e:	4604      	mov	r4, r0
 800d390:	4608      	mov	r0, r1
 800d392:	602b      	str	r3, [r5, #0]
 800d394:	f7f5 faaf 	bl	80028f6 <_close>
 800d398:	1c43      	adds	r3, r0, #1
 800d39a:	d102      	bne.n	800d3a2 <_close_r+0x1a>
 800d39c:	682b      	ldr	r3, [r5, #0]
 800d39e:	b103      	cbz	r3, 800d3a2 <_close_r+0x1a>
 800d3a0:	6023      	str	r3, [r4, #0]
 800d3a2:	bd38      	pop	{r3, r4, r5, pc}
 800d3a4:	200007a4 	.word	0x200007a4

0800d3a8 <_reclaim_reent>:
 800d3a8:	4b29      	ldr	r3, [pc, #164]	@ (800d450 <_reclaim_reent+0xa8>)
 800d3aa:	b570      	push	{r4, r5, r6, lr}
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	4283      	cmp	r3, r0
 800d3b2:	d04b      	beq.n	800d44c <_reclaim_reent+0xa4>
 800d3b4:	69c3      	ldr	r3, [r0, #28]
 800d3b6:	b1ab      	cbz	r3, 800d3e4 <_reclaim_reent+0x3c>
 800d3b8:	68db      	ldr	r3, [r3, #12]
 800d3ba:	b16b      	cbz	r3, 800d3d8 <_reclaim_reent+0x30>
 800d3bc:	2500      	movs	r5, #0
 800d3be:	69e3      	ldr	r3, [r4, #28]
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	5959      	ldr	r1, [r3, r5]
 800d3c4:	2900      	cmp	r1, #0
 800d3c6:	d13b      	bne.n	800d440 <_reclaim_reent+0x98>
 800d3c8:	3504      	adds	r5, #4
 800d3ca:	2d80      	cmp	r5, #128	@ 0x80
 800d3cc:	d1f7      	bne.n	800d3be <_reclaim_reent+0x16>
 800d3ce:	69e3      	ldr	r3, [r4, #28]
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	68d9      	ldr	r1, [r3, #12]
 800d3d4:	f000 ff08 	bl	800e1e8 <_free_r>
 800d3d8:	69e3      	ldr	r3, [r4, #28]
 800d3da:	6819      	ldr	r1, [r3, #0]
 800d3dc:	b111      	cbz	r1, 800d3e4 <_reclaim_reent+0x3c>
 800d3de:	4620      	mov	r0, r4
 800d3e0:	f000 ff02 	bl	800e1e8 <_free_r>
 800d3e4:	6961      	ldr	r1, [r4, #20]
 800d3e6:	b111      	cbz	r1, 800d3ee <_reclaim_reent+0x46>
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f000 fefd 	bl	800e1e8 <_free_r>
 800d3ee:	69e1      	ldr	r1, [r4, #28]
 800d3f0:	b111      	cbz	r1, 800d3f8 <_reclaim_reent+0x50>
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	f000 fef8 	bl	800e1e8 <_free_r>
 800d3f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d3fa:	b111      	cbz	r1, 800d402 <_reclaim_reent+0x5a>
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f000 fef3 	bl	800e1e8 <_free_r>
 800d402:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d404:	b111      	cbz	r1, 800d40c <_reclaim_reent+0x64>
 800d406:	4620      	mov	r0, r4
 800d408:	f000 feee 	bl	800e1e8 <_free_r>
 800d40c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d40e:	b111      	cbz	r1, 800d416 <_reclaim_reent+0x6e>
 800d410:	4620      	mov	r0, r4
 800d412:	f000 fee9 	bl	800e1e8 <_free_r>
 800d416:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d418:	b111      	cbz	r1, 800d420 <_reclaim_reent+0x78>
 800d41a:	4620      	mov	r0, r4
 800d41c:	f000 fee4 	bl	800e1e8 <_free_r>
 800d420:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d422:	b111      	cbz	r1, 800d42a <_reclaim_reent+0x82>
 800d424:	4620      	mov	r0, r4
 800d426:	f000 fedf 	bl	800e1e8 <_free_r>
 800d42a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d42c:	b111      	cbz	r1, 800d434 <_reclaim_reent+0x8c>
 800d42e:	4620      	mov	r0, r4
 800d430:	f000 feda 	bl	800e1e8 <_free_r>
 800d434:	6a23      	ldr	r3, [r4, #32]
 800d436:	b14b      	cbz	r3, 800d44c <_reclaim_reent+0xa4>
 800d438:	4620      	mov	r0, r4
 800d43a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d43e:	4718      	bx	r3
 800d440:	680e      	ldr	r6, [r1, #0]
 800d442:	4620      	mov	r0, r4
 800d444:	f000 fed0 	bl	800e1e8 <_free_r>
 800d448:	4631      	mov	r1, r6
 800d44a:	e7bb      	b.n	800d3c4 <_reclaim_reent+0x1c>
 800d44c:	bd70      	pop	{r4, r5, r6, pc}
 800d44e:	bf00      	nop
 800d450:	20000020 	.word	0x20000020

0800d454 <_lseek_r>:
 800d454:	b538      	push	{r3, r4, r5, lr}
 800d456:	4604      	mov	r4, r0
 800d458:	4608      	mov	r0, r1
 800d45a:	4611      	mov	r1, r2
 800d45c:	2200      	movs	r2, #0
 800d45e:	4d05      	ldr	r5, [pc, #20]	@ (800d474 <_lseek_r+0x20>)
 800d460:	602a      	str	r2, [r5, #0]
 800d462:	461a      	mov	r2, r3
 800d464:	f7f5 fa51 	bl	800290a <_lseek>
 800d468:	1c43      	adds	r3, r0, #1
 800d46a:	d102      	bne.n	800d472 <_lseek_r+0x1e>
 800d46c:	682b      	ldr	r3, [r5, #0]
 800d46e:	b103      	cbz	r3, 800d472 <_lseek_r+0x1e>
 800d470:	6023      	str	r3, [r4, #0]
 800d472:	bd38      	pop	{r3, r4, r5, pc}
 800d474:	200007a4 	.word	0x200007a4

0800d478 <_read_r>:
 800d478:	b538      	push	{r3, r4, r5, lr}
 800d47a:	4604      	mov	r4, r0
 800d47c:	4608      	mov	r0, r1
 800d47e:	4611      	mov	r1, r2
 800d480:	2200      	movs	r2, #0
 800d482:	4d05      	ldr	r5, [pc, #20]	@ (800d498 <_read_r+0x20>)
 800d484:	602a      	str	r2, [r5, #0]
 800d486:	461a      	mov	r2, r3
 800d488:	f7f5 fa17 	bl	80028ba <_read>
 800d48c:	1c43      	adds	r3, r0, #1
 800d48e:	d102      	bne.n	800d496 <_read_r+0x1e>
 800d490:	682b      	ldr	r3, [r5, #0]
 800d492:	b103      	cbz	r3, 800d496 <_read_r+0x1e>
 800d494:	6023      	str	r3, [r4, #0]
 800d496:	bd38      	pop	{r3, r4, r5, pc}
 800d498:	200007a4 	.word	0x200007a4

0800d49c <_write_r>:
 800d49c:	b538      	push	{r3, r4, r5, lr}
 800d49e:	4604      	mov	r4, r0
 800d4a0:	4608      	mov	r0, r1
 800d4a2:	4611      	mov	r1, r2
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	4d05      	ldr	r5, [pc, #20]	@ (800d4bc <_write_r+0x20>)
 800d4a8:	602a      	str	r2, [r5, #0]
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	f7f5 fa15 	bl	80028da <_write>
 800d4b0:	1c43      	adds	r3, r0, #1
 800d4b2:	d102      	bne.n	800d4ba <_write_r+0x1e>
 800d4b4:	682b      	ldr	r3, [r5, #0]
 800d4b6:	b103      	cbz	r3, 800d4ba <_write_r+0x1e>
 800d4b8:	6023      	str	r3, [r4, #0]
 800d4ba:	bd38      	pop	{r3, r4, r5, pc}
 800d4bc:	200007a4 	.word	0x200007a4

0800d4c0 <__errno>:
 800d4c0:	4b01      	ldr	r3, [pc, #4]	@ (800d4c8 <__errno+0x8>)
 800d4c2:	6818      	ldr	r0, [r3, #0]
 800d4c4:	4770      	bx	lr
 800d4c6:	bf00      	nop
 800d4c8:	20000020 	.word	0x20000020

0800d4cc <__libc_init_array>:
 800d4cc:	b570      	push	{r4, r5, r6, lr}
 800d4ce:	2600      	movs	r6, #0
 800d4d0:	4d0c      	ldr	r5, [pc, #48]	@ (800d504 <__libc_init_array+0x38>)
 800d4d2:	4c0d      	ldr	r4, [pc, #52]	@ (800d508 <__libc_init_array+0x3c>)
 800d4d4:	1b64      	subs	r4, r4, r5
 800d4d6:	10a4      	asrs	r4, r4, #2
 800d4d8:	42a6      	cmp	r6, r4
 800d4da:	d109      	bne.n	800d4f0 <__libc_init_array+0x24>
 800d4dc:	f003 f91c 	bl	8010718 <_init>
 800d4e0:	2600      	movs	r6, #0
 800d4e2:	4d0a      	ldr	r5, [pc, #40]	@ (800d50c <__libc_init_array+0x40>)
 800d4e4:	4c0a      	ldr	r4, [pc, #40]	@ (800d510 <__libc_init_array+0x44>)
 800d4e6:	1b64      	subs	r4, r4, r5
 800d4e8:	10a4      	asrs	r4, r4, #2
 800d4ea:	42a6      	cmp	r6, r4
 800d4ec:	d105      	bne.n	800d4fa <__libc_init_array+0x2e>
 800d4ee:	bd70      	pop	{r4, r5, r6, pc}
 800d4f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4f4:	4798      	blx	r3
 800d4f6:	3601      	adds	r6, #1
 800d4f8:	e7ee      	b.n	800d4d8 <__libc_init_array+0xc>
 800d4fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4fe:	4798      	blx	r3
 800d500:	3601      	adds	r6, #1
 800d502:	e7f2      	b.n	800d4ea <__libc_init_array+0x1e>
 800d504:	08010f54 	.word	0x08010f54
 800d508:	08010f54 	.word	0x08010f54
 800d50c:	08010f54 	.word	0x08010f54
 800d510:	08010f58 	.word	0x08010f58

0800d514 <__retarget_lock_init>:
 800d514:	4770      	bx	lr

0800d516 <__retarget_lock_init_recursive>:
 800d516:	4770      	bx	lr

0800d518 <__retarget_lock_close>:
 800d518:	4770      	bx	lr

0800d51a <__retarget_lock_close_recursive>:
 800d51a:	4770      	bx	lr

0800d51c <__retarget_lock_acquire>:
 800d51c:	4770      	bx	lr

0800d51e <__retarget_lock_acquire_recursive>:
 800d51e:	4770      	bx	lr

0800d520 <__retarget_lock_try_acquire>:
 800d520:	2001      	movs	r0, #1
 800d522:	4770      	bx	lr

0800d524 <__retarget_lock_try_acquire_recursive>:
 800d524:	2001      	movs	r0, #1
 800d526:	4770      	bx	lr

0800d528 <__retarget_lock_release>:
 800d528:	4770      	bx	lr

0800d52a <__retarget_lock_release_recursive>:
 800d52a:	4770      	bx	lr

0800d52c <memchr>:
 800d52c:	4603      	mov	r3, r0
 800d52e:	b510      	push	{r4, lr}
 800d530:	b2c9      	uxtb	r1, r1
 800d532:	4402      	add	r2, r0
 800d534:	4293      	cmp	r3, r2
 800d536:	4618      	mov	r0, r3
 800d538:	d101      	bne.n	800d53e <memchr+0x12>
 800d53a:	2000      	movs	r0, #0
 800d53c:	e003      	b.n	800d546 <memchr+0x1a>
 800d53e:	7804      	ldrb	r4, [r0, #0]
 800d540:	3301      	adds	r3, #1
 800d542:	428c      	cmp	r4, r1
 800d544:	d1f6      	bne.n	800d534 <memchr+0x8>
 800d546:	bd10      	pop	{r4, pc}

0800d548 <quorem>:
 800d548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54c:	6903      	ldr	r3, [r0, #16]
 800d54e:	690c      	ldr	r4, [r1, #16]
 800d550:	4607      	mov	r7, r0
 800d552:	42a3      	cmp	r3, r4
 800d554:	db7e      	blt.n	800d654 <quorem+0x10c>
 800d556:	3c01      	subs	r4, #1
 800d558:	00a3      	lsls	r3, r4, #2
 800d55a:	f100 0514 	add.w	r5, r0, #20
 800d55e:	f101 0814 	add.w	r8, r1, #20
 800d562:	9300      	str	r3, [sp, #0]
 800d564:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d568:	9301      	str	r3, [sp, #4]
 800d56a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d56e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d572:	3301      	adds	r3, #1
 800d574:	429a      	cmp	r2, r3
 800d576:	fbb2 f6f3 	udiv	r6, r2, r3
 800d57a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d57e:	d32e      	bcc.n	800d5de <quorem+0x96>
 800d580:	f04f 0a00 	mov.w	sl, #0
 800d584:	46c4      	mov	ip, r8
 800d586:	46ae      	mov	lr, r5
 800d588:	46d3      	mov	fp, sl
 800d58a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d58e:	b298      	uxth	r0, r3
 800d590:	fb06 a000 	mla	r0, r6, r0, sl
 800d594:	0c1b      	lsrs	r3, r3, #16
 800d596:	0c02      	lsrs	r2, r0, #16
 800d598:	fb06 2303 	mla	r3, r6, r3, r2
 800d59c:	f8de 2000 	ldr.w	r2, [lr]
 800d5a0:	b280      	uxth	r0, r0
 800d5a2:	b292      	uxth	r2, r2
 800d5a4:	1a12      	subs	r2, r2, r0
 800d5a6:	445a      	add	r2, fp
 800d5a8:	f8de 0000 	ldr.w	r0, [lr]
 800d5ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d5b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d5ba:	b292      	uxth	r2, r2
 800d5bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d5c0:	45e1      	cmp	r9, ip
 800d5c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d5c6:	f84e 2b04 	str.w	r2, [lr], #4
 800d5ca:	d2de      	bcs.n	800d58a <quorem+0x42>
 800d5cc:	9b00      	ldr	r3, [sp, #0]
 800d5ce:	58eb      	ldr	r3, [r5, r3]
 800d5d0:	b92b      	cbnz	r3, 800d5de <quorem+0x96>
 800d5d2:	9b01      	ldr	r3, [sp, #4]
 800d5d4:	3b04      	subs	r3, #4
 800d5d6:	429d      	cmp	r5, r3
 800d5d8:	461a      	mov	r2, r3
 800d5da:	d32f      	bcc.n	800d63c <quorem+0xf4>
 800d5dc:	613c      	str	r4, [r7, #16]
 800d5de:	4638      	mov	r0, r7
 800d5e0:	f001 f9ca 	bl	800e978 <__mcmp>
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	db25      	blt.n	800d634 <quorem+0xec>
 800d5e8:	4629      	mov	r1, r5
 800d5ea:	2000      	movs	r0, #0
 800d5ec:	f858 2b04 	ldr.w	r2, [r8], #4
 800d5f0:	f8d1 c000 	ldr.w	ip, [r1]
 800d5f4:	fa1f fe82 	uxth.w	lr, r2
 800d5f8:	fa1f f38c 	uxth.w	r3, ip
 800d5fc:	eba3 030e 	sub.w	r3, r3, lr
 800d600:	4403      	add	r3, r0
 800d602:	0c12      	lsrs	r2, r2, #16
 800d604:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d608:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d612:	45c1      	cmp	r9, r8
 800d614:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d618:	f841 3b04 	str.w	r3, [r1], #4
 800d61c:	d2e6      	bcs.n	800d5ec <quorem+0xa4>
 800d61e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d622:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d626:	b922      	cbnz	r2, 800d632 <quorem+0xea>
 800d628:	3b04      	subs	r3, #4
 800d62a:	429d      	cmp	r5, r3
 800d62c:	461a      	mov	r2, r3
 800d62e:	d30b      	bcc.n	800d648 <quorem+0x100>
 800d630:	613c      	str	r4, [r7, #16]
 800d632:	3601      	adds	r6, #1
 800d634:	4630      	mov	r0, r6
 800d636:	b003      	add	sp, #12
 800d638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d63c:	6812      	ldr	r2, [r2, #0]
 800d63e:	3b04      	subs	r3, #4
 800d640:	2a00      	cmp	r2, #0
 800d642:	d1cb      	bne.n	800d5dc <quorem+0x94>
 800d644:	3c01      	subs	r4, #1
 800d646:	e7c6      	b.n	800d5d6 <quorem+0x8e>
 800d648:	6812      	ldr	r2, [r2, #0]
 800d64a:	3b04      	subs	r3, #4
 800d64c:	2a00      	cmp	r2, #0
 800d64e:	d1ef      	bne.n	800d630 <quorem+0xe8>
 800d650:	3c01      	subs	r4, #1
 800d652:	e7ea      	b.n	800d62a <quorem+0xe2>
 800d654:	2000      	movs	r0, #0
 800d656:	e7ee      	b.n	800d636 <quorem+0xee>

0800d658 <_dtoa_r>:
 800d658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d65c:	4614      	mov	r4, r2
 800d65e:	461d      	mov	r5, r3
 800d660:	69c7      	ldr	r7, [r0, #28]
 800d662:	b097      	sub	sp, #92	@ 0x5c
 800d664:	4683      	mov	fp, r0
 800d666:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d66a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800d66c:	b97f      	cbnz	r7, 800d68e <_dtoa_r+0x36>
 800d66e:	2010      	movs	r0, #16
 800d670:	f000 fe02 	bl	800e278 <malloc>
 800d674:	4602      	mov	r2, r0
 800d676:	f8cb 001c 	str.w	r0, [fp, #28]
 800d67a:	b920      	cbnz	r0, 800d686 <_dtoa_r+0x2e>
 800d67c:	21ef      	movs	r1, #239	@ 0xef
 800d67e:	4ba8      	ldr	r3, [pc, #672]	@ (800d920 <_dtoa_r+0x2c8>)
 800d680:	48a8      	ldr	r0, [pc, #672]	@ (800d924 <_dtoa_r+0x2cc>)
 800d682:	f002 fa7b 	bl	800fb7c <__assert_func>
 800d686:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d68a:	6007      	str	r7, [r0, #0]
 800d68c:	60c7      	str	r7, [r0, #12]
 800d68e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d692:	6819      	ldr	r1, [r3, #0]
 800d694:	b159      	cbz	r1, 800d6ae <_dtoa_r+0x56>
 800d696:	685a      	ldr	r2, [r3, #4]
 800d698:	2301      	movs	r3, #1
 800d69a:	4093      	lsls	r3, r2
 800d69c:	604a      	str	r2, [r1, #4]
 800d69e:	608b      	str	r3, [r1, #8]
 800d6a0:	4658      	mov	r0, fp
 800d6a2:	f000 fee7 	bl	800e474 <_Bfree>
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d6ac:	601a      	str	r2, [r3, #0]
 800d6ae:	1e2b      	subs	r3, r5, #0
 800d6b0:	bfaf      	iteee	ge
 800d6b2:	2300      	movge	r3, #0
 800d6b4:	2201      	movlt	r2, #1
 800d6b6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d6ba:	9303      	strlt	r3, [sp, #12]
 800d6bc:	bfa8      	it	ge
 800d6be:	6033      	strge	r3, [r6, #0]
 800d6c0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d6c4:	4b98      	ldr	r3, [pc, #608]	@ (800d928 <_dtoa_r+0x2d0>)
 800d6c6:	bfb8      	it	lt
 800d6c8:	6032      	strlt	r2, [r6, #0]
 800d6ca:	ea33 0308 	bics.w	r3, r3, r8
 800d6ce:	d112      	bne.n	800d6f6 <_dtoa_r+0x9e>
 800d6d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d6d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d6d6:	6013      	str	r3, [r2, #0]
 800d6d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d6dc:	4323      	orrs	r3, r4
 800d6de:	f000 8550 	beq.w	800e182 <_dtoa_r+0xb2a>
 800d6e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d6e4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800d92c <_dtoa_r+0x2d4>
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f000 8552 	beq.w	800e192 <_dtoa_r+0xb3a>
 800d6ee:	f10a 0303 	add.w	r3, sl, #3
 800d6f2:	f000 bd4c 	b.w	800e18e <_dtoa_r+0xb36>
 800d6f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d6fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d702:	2200      	movs	r2, #0
 800d704:	2300      	movs	r3, #0
 800d706:	f7f3 fbeb 	bl	8000ee0 <__aeabi_dcmpeq>
 800d70a:	4607      	mov	r7, r0
 800d70c:	b158      	cbz	r0, 800d726 <_dtoa_r+0xce>
 800d70e:	2301      	movs	r3, #1
 800d710:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d712:	6013      	str	r3, [r2, #0]
 800d714:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d716:	b113      	cbz	r3, 800d71e <_dtoa_r+0xc6>
 800d718:	4b85      	ldr	r3, [pc, #532]	@ (800d930 <_dtoa_r+0x2d8>)
 800d71a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d71c:	6013      	str	r3, [r2, #0]
 800d71e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800d934 <_dtoa_r+0x2dc>
 800d722:	f000 bd36 	b.w	800e192 <_dtoa_r+0xb3a>
 800d726:	ab14      	add	r3, sp, #80	@ 0x50
 800d728:	9301      	str	r3, [sp, #4]
 800d72a:	ab15      	add	r3, sp, #84	@ 0x54
 800d72c:	9300      	str	r3, [sp, #0]
 800d72e:	4658      	mov	r0, fp
 800d730:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d734:	f001 fa38 	bl	800eba8 <__d2b>
 800d738:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800d73c:	4681      	mov	r9, r0
 800d73e:	2e00      	cmp	r6, #0
 800d740:	d077      	beq.n	800d832 <_dtoa_r+0x1da>
 800d742:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d746:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d748:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d74c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d750:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d754:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d758:	9712      	str	r7, [sp, #72]	@ 0x48
 800d75a:	4619      	mov	r1, r3
 800d75c:	2200      	movs	r2, #0
 800d75e:	4b76      	ldr	r3, [pc, #472]	@ (800d938 <_dtoa_r+0x2e0>)
 800d760:	f7f2 ff9e 	bl	80006a0 <__aeabi_dsub>
 800d764:	a368      	add	r3, pc, #416	@ (adr r3, 800d908 <_dtoa_r+0x2b0>)
 800d766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76a:	f7f3 f951 	bl	8000a10 <__aeabi_dmul>
 800d76e:	a368      	add	r3, pc, #416	@ (adr r3, 800d910 <_dtoa_r+0x2b8>)
 800d770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d774:	f7f2 ff96 	bl	80006a4 <__adddf3>
 800d778:	4604      	mov	r4, r0
 800d77a:	4630      	mov	r0, r6
 800d77c:	460d      	mov	r5, r1
 800d77e:	f7f3 f8dd 	bl	800093c <__aeabi_i2d>
 800d782:	a365      	add	r3, pc, #404	@ (adr r3, 800d918 <_dtoa_r+0x2c0>)
 800d784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d788:	f7f3 f942 	bl	8000a10 <__aeabi_dmul>
 800d78c:	4602      	mov	r2, r0
 800d78e:	460b      	mov	r3, r1
 800d790:	4620      	mov	r0, r4
 800d792:	4629      	mov	r1, r5
 800d794:	f7f2 ff86 	bl	80006a4 <__adddf3>
 800d798:	4604      	mov	r4, r0
 800d79a:	460d      	mov	r5, r1
 800d79c:	f7f3 fbe8 	bl	8000f70 <__aeabi_d2iz>
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	4607      	mov	r7, r0
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	4620      	mov	r0, r4
 800d7a8:	4629      	mov	r1, r5
 800d7aa:	f7f3 fba3 	bl	8000ef4 <__aeabi_dcmplt>
 800d7ae:	b140      	cbz	r0, 800d7c2 <_dtoa_r+0x16a>
 800d7b0:	4638      	mov	r0, r7
 800d7b2:	f7f3 f8c3 	bl	800093c <__aeabi_i2d>
 800d7b6:	4622      	mov	r2, r4
 800d7b8:	462b      	mov	r3, r5
 800d7ba:	f7f3 fb91 	bl	8000ee0 <__aeabi_dcmpeq>
 800d7be:	b900      	cbnz	r0, 800d7c2 <_dtoa_r+0x16a>
 800d7c0:	3f01      	subs	r7, #1
 800d7c2:	2f16      	cmp	r7, #22
 800d7c4:	d853      	bhi.n	800d86e <_dtoa_r+0x216>
 800d7c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d7ca:	4b5c      	ldr	r3, [pc, #368]	@ (800d93c <_dtoa_r+0x2e4>)
 800d7cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d4:	f7f3 fb8e 	bl	8000ef4 <__aeabi_dcmplt>
 800d7d8:	2800      	cmp	r0, #0
 800d7da:	d04a      	beq.n	800d872 <_dtoa_r+0x21a>
 800d7dc:	2300      	movs	r3, #0
 800d7de:	3f01      	subs	r7, #1
 800d7e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d7e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d7e4:	1b9b      	subs	r3, r3, r6
 800d7e6:	1e5a      	subs	r2, r3, #1
 800d7e8:	bf46      	itte	mi
 800d7ea:	f1c3 0801 	rsbmi	r8, r3, #1
 800d7ee:	2300      	movmi	r3, #0
 800d7f0:	f04f 0800 	movpl.w	r8, #0
 800d7f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d7f6:	bf48      	it	mi
 800d7f8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800d7fa:	2f00      	cmp	r7, #0
 800d7fc:	db3b      	blt.n	800d876 <_dtoa_r+0x21e>
 800d7fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d800:	970e      	str	r7, [sp, #56]	@ 0x38
 800d802:	443b      	add	r3, r7
 800d804:	9309      	str	r3, [sp, #36]	@ 0x24
 800d806:	2300      	movs	r3, #0
 800d808:	930a      	str	r3, [sp, #40]	@ 0x28
 800d80a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d80c:	2b09      	cmp	r3, #9
 800d80e:	d866      	bhi.n	800d8de <_dtoa_r+0x286>
 800d810:	2b05      	cmp	r3, #5
 800d812:	bfc4      	itt	gt
 800d814:	3b04      	subgt	r3, #4
 800d816:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800d818:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d81a:	bfc8      	it	gt
 800d81c:	2400      	movgt	r4, #0
 800d81e:	f1a3 0302 	sub.w	r3, r3, #2
 800d822:	bfd8      	it	le
 800d824:	2401      	movle	r4, #1
 800d826:	2b03      	cmp	r3, #3
 800d828:	d864      	bhi.n	800d8f4 <_dtoa_r+0x29c>
 800d82a:	e8df f003 	tbb	[pc, r3]
 800d82e:	382b      	.short	0x382b
 800d830:	5636      	.short	0x5636
 800d832:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d836:	441e      	add	r6, r3
 800d838:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d83c:	2b20      	cmp	r3, #32
 800d83e:	bfc1      	itttt	gt
 800d840:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d844:	fa08 f803 	lslgt.w	r8, r8, r3
 800d848:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d84c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d850:	bfd6      	itet	le
 800d852:	f1c3 0320 	rsble	r3, r3, #32
 800d856:	ea48 0003 	orrgt.w	r0, r8, r3
 800d85a:	fa04 f003 	lslle.w	r0, r4, r3
 800d85e:	f7f3 f85d 	bl	800091c <__aeabi_ui2d>
 800d862:	2201      	movs	r2, #1
 800d864:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d868:	3e01      	subs	r6, #1
 800d86a:	9212      	str	r2, [sp, #72]	@ 0x48
 800d86c:	e775      	b.n	800d75a <_dtoa_r+0x102>
 800d86e:	2301      	movs	r3, #1
 800d870:	e7b6      	b.n	800d7e0 <_dtoa_r+0x188>
 800d872:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d874:	e7b5      	b.n	800d7e2 <_dtoa_r+0x18a>
 800d876:	427b      	negs	r3, r7
 800d878:	930a      	str	r3, [sp, #40]	@ 0x28
 800d87a:	2300      	movs	r3, #0
 800d87c:	eba8 0807 	sub.w	r8, r8, r7
 800d880:	930e      	str	r3, [sp, #56]	@ 0x38
 800d882:	e7c2      	b.n	800d80a <_dtoa_r+0x1b2>
 800d884:	2300      	movs	r3, #0
 800d886:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d888:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	dc35      	bgt.n	800d8fa <_dtoa_r+0x2a2>
 800d88e:	2301      	movs	r3, #1
 800d890:	461a      	mov	r2, r3
 800d892:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800d896:	9221      	str	r2, [sp, #132]	@ 0x84
 800d898:	e00b      	b.n	800d8b2 <_dtoa_r+0x25a>
 800d89a:	2301      	movs	r3, #1
 800d89c:	e7f3      	b.n	800d886 <_dtoa_r+0x22e>
 800d89e:	2300      	movs	r3, #0
 800d8a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d8a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d8a4:	18fb      	adds	r3, r7, r3
 800d8a6:	9308      	str	r3, [sp, #32]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	9307      	str	r3, [sp, #28]
 800d8ae:	bfb8      	it	lt
 800d8b0:	2301      	movlt	r3, #1
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	2204      	movs	r2, #4
 800d8b6:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d8ba:	f102 0514 	add.w	r5, r2, #20
 800d8be:	429d      	cmp	r5, r3
 800d8c0:	d91f      	bls.n	800d902 <_dtoa_r+0x2aa>
 800d8c2:	6041      	str	r1, [r0, #4]
 800d8c4:	4658      	mov	r0, fp
 800d8c6:	f000 fd95 	bl	800e3f4 <_Balloc>
 800d8ca:	4682      	mov	sl, r0
 800d8cc:	2800      	cmp	r0, #0
 800d8ce:	d139      	bne.n	800d944 <_dtoa_r+0x2ec>
 800d8d0:	4602      	mov	r2, r0
 800d8d2:	f240 11af 	movw	r1, #431	@ 0x1af
 800d8d6:	4b1a      	ldr	r3, [pc, #104]	@ (800d940 <_dtoa_r+0x2e8>)
 800d8d8:	e6d2      	b.n	800d680 <_dtoa_r+0x28>
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e7e0      	b.n	800d8a0 <_dtoa_r+0x248>
 800d8de:	2401      	movs	r4, #1
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d8e4:	9320      	str	r3, [sp, #128]	@ 0x80
 800d8e6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800d8f0:	2312      	movs	r3, #18
 800d8f2:	e7d0      	b.n	800d896 <_dtoa_r+0x23e>
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d8f8:	e7f5      	b.n	800d8e6 <_dtoa_r+0x28e>
 800d8fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d8fc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800d900:	e7d7      	b.n	800d8b2 <_dtoa_r+0x25a>
 800d902:	3101      	adds	r1, #1
 800d904:	0052      	lsls	r2, r2, #1
 800d906:	e7d8      	b.n	800d8ba <_dtoa_r+0x262>
 800d908:	636f4361 	.word	0x636f4361
 800d90c:	3fd287a7 	.word	0x3fd287a7
 800d910:	8b60c8b3 	.word	0x8b60c8b3
 800d914:	3fc68a28 	.word	0x3fc68a28
 800d918:	509f79fb 	.word	0x509f79fb
 800d91c:	3fd34413 	.word	0x3fd34413
 800d920:	08010cd4 	.word	0x08010cd4
 800d924:	08010ceb 	.word	0x08010ceb
 800d928:	7ff00000 	.word	0x7ff00000
 800d92c:	08010cd0 	.word	0x08010cd0
 800d930:	08010f00 	.word	0x08010f00
 800d934:	08010eff 	.word	0x08010eff
 800d938:	3ff80000 	.word	0x3ff80000
 800d93c:	08010e10 	.word	0x08010e10
 800d940:	08010d43 	.word	0x08010d43
 800d944:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d948:	6018      	str	r0, [r3, #0]
 800d94a:	9b07      	ldr	r3, [sp, #28]
 800d94c:	2b0e      	cmp	r3, #14
 800d94e:	f200 80a4 	bhi.w	800da9a <_dtoa_r+0x442>
 800d952:	2c00      	cmp	r4, #0
 800d954:	f000 80a1 	beq.w	800da9a <_dtoa_r+0x442>
 800d958:	2f00      	cmp	r7, #0
 800d95a:	dd33      	ble.n	800d9c4 <_dtoa_r+0x36c>
 800d95c:	4b86      	ldr	r3, [pc, #536]	@ (800db78 <_dtoa_r+0x520>)
 800d95e:	f007 020f 	and.w	r2, r7, #15
 800d962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d966:	05f8      	lsls	r0, r7, #23
 800d968:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d96c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d970:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d974:	d516      	bpl.n	800d9a4 <_dtoa_r+0x34c>
 800d976:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d97a:	4b80      	ldr	r3, [pc, #512]	@ (800db7c <_dtoa_r+0x524>)
 800d97c:	2603      	movs	r6, #3
 800d97e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d982:	f7f3 f96f 	bl	8000c64 <__aeabi_ddiv>
 800d986:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d98a:	f004 040f 	and.w	r4, r4, #15
 800d98e:	4d7b      	ldr	r5, [pc, #492]	@ (800db7c <_dtoa_r+0x524>)
 800d990:	b954      	cbnz	r4, 800d9a8 <_dtoa_r+0x350>
 800d992:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d99a:	f7f3 f963 	bl	8000c64 <__aeabi_ddiv>
 800d99e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9a2:	e028      	b.n	800d9f6 <_dtoa_r+0x39e>
 800d9a4:	2602      	movs	r6, #2
 800d9a6:	e7f2      	b.n	800d98e <_dtoa_r+0x336>
 800d9a8:	07e1      	lsls	r1, r4, #31
 800d9aa:	d508      	bpl.n	800d9be <_dtoa_r+0x366>
 800d9ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d9b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d9b4:	f7f3 f82c 	bl	8000a10 <__aeabi_dmul>
 800d9b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d9bc:	3601      	adds	r6, #1
 800d9be:	1064      	asrs	r4, r4, #1
 800d9c0:	3508      	adds	r5, #8
 800d9c2:	e7e5      	b.n	800d990 <_dtoa_r+0x338>
 800d9c4:	f000 80d2 	beq.w	800db6c <_dtoa_r+0x514>
 800d9c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d9cc:	427c      	negs	r4, r7
 800d9ce:	4b6a      	ldr	r3, [pc, #424]	@ (800db78 <_dtoa_r+0x520>)
 800d9d0:	f004 020f 	and.w	r2, r4, #15
 800d9d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9dc:	f7f3 f818 	bl	8000a10 <__aeabi_dmul>
 800d9e0:	2602      	movs	r6, #2
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9e8:	4d64      	ldr	r5, [pc, #400]	@ (800db7c <_dtoa_r+0x524>)
 800d9ea:	1124      	asrs	r4, r4, #4
 800d9ec:	2c00      	cmp	r4, #0
 800d9ee:	f040 80b2 	bne.w	800db56 <_dtoa_r+0x4fe>
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d1d3      	bne.n	800d99e <_dtoa_r+0x346>
 800d9f6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d9fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	f000 80b7 	beq.w	800db70 <_dtoa_r+0x518>
 800da02:	2200      	movs	r2, #0
 800da04:	4620      	mov	r0, r4
 800da06:	4629      	mov	r1, r5
 800da08:	4b5d      	ldr	r3, [pc, #372]	@ (800db80 <_dtoa_r+0x528>)
 800da0a:	f7f3 fa73 	bl	8000ef4 <__aeabi_dcmplt>
 800da0e:	2800      	cmp	r0, #0
 800da10:	f000 80ae 	beq.w	800db70 <_dtoa_r+0x518>
 800da14:	9b07      	ldr	r3, [sp, #28]
 800da16:	2b00      	cmp	r3, #0
 800da18:	f000 80aa 	beq.w	800db70 <_dtoa_r+0x518>
 800da1c:	9b08      	ldr	r3, [sp, #32]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	dd37      	ble.n	800da92 <_dtoa_r+0x43a>
 800da22:	1e7b      	subs	r3, r7, #1
 800da24:	4620      	mov	r0, r4
 800da26:	9304      	str	r3, [sp, #16]
 800da28:	2200      	movs	r2, #0
 800da2a:	4629      	mov	r1, r5
 800da2c:	4b55      	ldr	r3, [pc, #340]	@ (800db84 <_dtoa_r+0x52c>)
 800da2e:	f7f2 ffef 	bl	8000a10 <__aeabi_dmul>
 800da32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da36:	9c08      	ldr	r4, [sp, #32]
 800da38:	3601      	adds	r6, #1
 800da3a:	4630      	mov	r0, r6
 800da3c:	f7f2 ff7e 	bl	800093c <__aeabi_i2d>
 800da40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da44:	f7f2 ffe4 	bl	8000a10 <__aeabi_dmul>
 800da48:	2200      	movs	r2, #0
 800da4a:	4b4f      	ldr	r3, [pc, #316]	@ (800db88 <_dtoa_r+0x530>)
 800da4c:	f7f2 fe2a 	bl	80006a4 <__adddf3>
 800da50:	4605      	mov	r5, r0
 800da52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800da56:	2c00      	cmp	r4, #0
 800da58:	f040 809a 	bne.w	800db90 <_dtoa_r+0x538>
 800da5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da60:	2200      	movs	r2, #0
 800da62:	4b4a      	ldr	r3, [pc, #296]	@ (800db8c <_dtoa_r+0x534>)
 800da64:	f7f2 fe1c 	bl	80006a0 <__aeabi_dsub>
 800da68:	4602      	mov	r2, r0
 800da6a:	460b      	mov	r3, r1
 800da6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da70:	462a      	mov	r2, r5
 800da72:	4633      	mov	r3, r6
 800da74:	f7f3 fa5c 	bl	8000f30 <__aeabi_dcmpgt>
 800da78:	2800      	cmp	r0, #0
 800da7a:	f040 828e 	bne.w	800df9a <_dtoa_r+0x942>
 800da7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da82:	462a      	mov	r2, r5
 800da84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800da88:	f7f3 fa34 	bl	8000ef4 <__aeabi_dcmplt>
 800da8c:	2800      	cmp	r0, #0
 800da8e:	f040 8127 	bne.w	800dce0 <_dtoa_r+0x688>
 800da92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800da96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800da9a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	f2c0 8163 	blt.w	800dd68 <_dtoa_r+0x710>
 800daa2:	2f0e      	cmp	r7, #14
 800daa4:	f300 8160 	bgt.w	800dd68 <_dtoa_r+0x710>
 800daa8:	4b33      	ldr	r3, [pc, #204]	@ (800db78 <_dtoa_r+0x520>)
 800daaa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800daae:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dab2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800dab6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dab8:	2b00      	cmp	r3, #0
 800daba:	da03      	bge.n	800dac4 <_dtoa_r+0x46c>
 800dabc:	9b07      	ldr	r3, [sp, #28]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	f340 8100 	ble.w	800dcc4 <_dtoa_r+0x66c>
 800dac4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dac8:	4656      	mov	r6, sl
 800daca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dace:	4620      	mov	r0, r4
 800dad0:	4629      	mov	r1, r5
 800dad2:	f7f3 f8c7 	bl	8000c64 <__aeabi_ddiv>
 800dad6:	f7f3 fa4b 	bl	8000f70 <__aeabi_d2iz>
 800dada:	4680      	mov	r8, r0
 800dadc:	f7f2 ff2e 	bl	800093c <__aeabi_i2d>
 800dae0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dae4:	f7f2 ff94 	bl	8000a10 <__aeabi_dmul>
 800dae8:	4602      	mov	r2, r0
 800daea:	460b      	mov	r3, r1
 800daec:	4620      	mov	r0, r4
 800daee:	4629      	mov	r1, r5
 800daf0:	f7f2 fdd6 	bl	80006a0 <__aeabi_dsub>
 800daf4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800daf8:	9d07      	ldr	r5, [sp, #28]
 800dafa:	f806 4b01 	strb.w	r4, [r6], #1
 800dafe:	eba6 040a 	sub.w	r4, r6, sl
 800db02:	42a5      	cmp	r5, r4
 800db04:	4602      	mov	r2, r0
 800db06:	460b      	mov	r3, r1
 800db08:	f040 8116 	bne.w	800dd38 <_dtoa_r+0x6e0>
 800db0c:	f7f2 fdca 	bl	80006a4 <__adddf3>
 800db10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db14:	4604      	mov	r4, r0
 800db16:	460d      	mov	r5, r1
 800db18:	f7f3 fa0a 	bl	8000f30 <__aeabi_dcmpgt>
 800db1c:	2800      	cmp	r0, #0
 800db1e:	f040 80f8 	bne.w	800dd12 <_dtoa_r+0x6ba>
 800db22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db26:	4620      	mov	r0, r4
 800db28:	4629      	mov	r1, r5
 800db2a:	f7f3 f9d9 	bl	8000ee0 <__aeabi_dcmpeq>
 800db2e:	b118      	cbz	r0, 800db38 <_dtoa_r+0x4e0>
 800db30:	f018 0f01 	tst.w	r8, #1
 800db34:	f040 80ed 	bne.w	800dd12 <_dtoa_r+0x6ba>
 800db38:	4649      	mov	r1, r9
 800db3a:	4658      	mov	r0, fp
 800db3c:	f000 fc9a 	bl	800e474 <_Bfree>
 800db40:	2300      	movs	r3, #0
 800db42:	7033      	strb	r3, [r6, #0]
 800db44:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800db46:	3701      	adds	r7, #1
 800db48:	601f      	str	r7, [r3, #0]
 800db4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	f000 8320 	beq.w	800e192 <_dtoa_r+0xb3a>
 800db52:	601e      	str	r6, [r3, #0]
 800db54:	e31d      	b.n	800e192 <_dtoa_r+0xb3a>
 800db56:	07e2      	lsls	r2, r4, #31
 800db58:	d505      	bpl.n	800db66 <_dtoa_r+0x50e>
 800db5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800db5e:	f7f2 ff57 	bl	8000a10 <__aeabi_dmul>
 800db62:	2301      	movs	r3, #1
 800db64:	3601      	adds	r6, #1
 800db66:	1064      	asrs	r4, r4, #1
 800db68:	3508      	adds	r5, #8
 800db6a:	e73f      	b.n	800d9ec <_dtoa_r+0x394>
 800db6c:	2602      	movs	r6, #2
 800db6e:	e742      	b.n	800d9f6 <_dtoa_r+0x39e>
 800db70:	9c07      	ldr	r4, [sp, #28]
 800db72:	9704      	str	r7, [sp, #16]
 800db74:	e761      	b.n	800da3a <_dtoa_r+0x3e2>
 800db76:	bf00      	nop
 800db78:	08010e10 	.word	0x08010e10
 800db7c:	08010de8 	.word	0x08010de8
 800db80:	3ff00000 	.word	0x3ff00000
 800db84:	40240000 	.word	0x40240000
 800db88:	401c0000 	.word	0x401c0000
 800db8c:	40140000 	.word	0x40140000
 800db90:	4b70      	ldr	r3, [pc, #448]	@ (800dd54 <_dtoa_r+0x6fc>)
 800db92:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800db94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800db98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800db9c:	4454      	add	r4, sl
 800db9e:	2900      	cmp	r1, #0
 800dba0:	d045      	beq.n	800dc2e <_dtoa_r+0x5d6>
 800dba2:	2000      	movs	r0, #0
 800dba4:	496c      	ldr	r1, [pc, #432]	@ (800dd58 <_dtoa_r+0x700>)
 800dba6:	f7f3 f85d 	bl	8000c64 <__aeabi_ddiv>
 800dbaa:	4633      	mov	r3, r6
 800dbac:	462a      	mov	r2, r5
 800dbae:	f7f2 fd77 	bl	80006a0 <__aeabi_dsub>
 800dbb2:	4656      	mov	r6, sl
 800dbb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dbb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbbc:	f7f3 f9d8 	bl	8000f70 <__aeabi_d2iz>
 800dbc0:	4605      	mov	r5, r0
 800dbc2:	f7f2 febb 	bl	800093c <__aeabi_i2d>
 800dbc6:	4602      	mov	r2, r0
 800dbc8:	460b      	mov	r3, r1
 800dbca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbce:	f7f2 fd67 	bl	80006a0 <__aeabi_dsub>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	3530      	adds	r5, #48	@ 0x30
 800dbd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dbdc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dbe0:	f806 5b01 	strb.w	r5, [r6], #1
 800dbe4:	f7f3 f986 	bl	8000ef4 <__aeabi_dcmplt>
 800dbe8:	2800      	cmp	r0, #0
 800dbea:	d163      	bne.n	800dcb4 <_dtoa_r+0x65c>
 800dbec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dbf0:	2000      	movs	r0, #0
 800dbf2:	495a      	ldr	r1, [pc, #360]	@ (800dd5c <_dtoa_r+0x704>)
 800dbf4:	f7f2 fd54 	bl	80006a0 <__aeabi_dsub>
 800dbf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dbfc:	f7f3 f97a 	bl	8000ef4 <__aeabi_dcmplt>
 800dc00:	2800      	cmp	r0, #0
 800dc02:	f040 8087 	bne.w	800dd14 <_dtoa_r+0x6bc>
 800dc06:	42a6      	cmp	r6, r4
 800dc08:	f43f af43 	beq.w	800da92 <_dtoa_r+0x43a>
 800dc0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800dc10:	2200      	movs	r2, #0
 800dc12:	4b53      	ldr	r3, [pc, #332]	@ (800dd60 <_dtoa_r+0x708>)
 800dc14:	f7f2 fefc 	bl	8000a10 <__aeabi_dmul>
 800dc18:	2200      	movs	r2, #0
 800dc1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dc1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc22:	4b4f      	ldr	r3, [pc, #316]	@ (800dd60 <_dtoa_r+0x708>)
 800dc24:	f7f2 fef4 	bl	8000a10 <__aeabi_dmul>
 800dc28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc2c:	e7c4      	b.n	800dbb8 <_dtoa_r+0x560>
 800dc2e:	4631      	mov	r1, r6
 800dc30:	4628      	mov	r0, r5
 800dc32:	f7f2 feed 	bl	8000a10 <__aeabi_dmul>
 800dc36:	4656      	mov	r6, sl
 800dc38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dc3c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800dc3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc42:	f7f3 f995 	bl	8000f70 <__aeabi_d2iz>
 800dc46:	4605      	mov	r5, r0
 800dc48:	f7f2 fe78 	bl	800093c <__aeabi_i2d>
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	460b      	mov	r3, r1
 800dc50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc54:	f7f2 fd24 	bl	80006a0 <__aeabi_dsub>
 800dc58:	4602      	mov	r2, r0
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	3530      	adds	r5, #48	@ 0x30
 800dc5e:	f806 5b01 	strb.w	r5, [r6], #1
 800dc62:	42a6      	cmp	r6, r4
 800dc64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dc68:	f04f 0200 	mov.w	r2, #0
 800dc6c:	d124      	bne.n	800dcb8 <_dtoa_r+0x660>
 800dc6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800dc72:	4b39      	ldr	r3, [pc, #228]	@ (800dd58 <_dtoa_r+0x700>)
 800dc74:	f7f2 fd16 	bl	80006a4 <__adddf3>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc80:	f7f3 f956 	bl	8000f30 <__aeabi_dcmpgt>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	d145      	bne.n	800dd14 <_dtoa_r+0x6bc>
 800dc88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dc8c:	2000      	movs	r0, #0
 800dc8e:	4932      	ldr	r1, [pc, #200]	@ (800dd58 <_dtoa_r+0x700>)
 800dc90:	f7f2 fd06 	bl	80006a0 <__aeabi_dsub>
 800dc94:	4602      	mov	r2, r0
 800dc96:	460b      	mov	r3, r1
 800dc98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc9c:	f7f3 f92a 	bl	8000ef4 <__aeabi_dcmplt>
 800dca0:	2800      	cmp	r0, #0
 800dca2:	f43f aef6 	beq.w	800da92 <_dtoa_r+0x43a>
 800dca6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800dca8:	1e73      	subs	r3, r6, #1
 800dcaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dcac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dcb0:	2b30      	cmp	r3, #48	@ 0x30
 800dcb2:	d0f8      	beq.n	800dca6 <_dtoa_r+0x64e>
 800dcb4:	9f04      	ldr	r7, [sp, #16]
 800dcb6:	e73f      	b.n	800db38 <_dtoa_r+0x4e0>
 800dcb8:	4b29      	ldr	r3, [pc, #164]	@ (800dd60 <_dtoa_r+0x708>)
 800dcba:	f7f2 fea9 	bl	8000a10 <__aeabi_dmul>
 800dcbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcc2:	e7bc      	b.n	800dc3e <_dtoa_r+0x5e6>
 800dcc4:	d10c      	bne.n	800dce0 <_dtoa_r+0x688>
 800dcc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dcca:	2200      	movs	r2, #0
 800dccc:	4b25      	ldr	r3, [pc, #148]	@ (800dd64 <_dtoa_r+0x70c>)
 800dcce:	f7f2 fe9f 	bl	8000a10 <__aeabi_dmul>
 800dcd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dcd6:	f7f3 f921 	bl	8000f1c <__aeabi_dcmpge>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	f000 815b 	beq.w	800df96 <_dtoa_r+0x93e>
 800dce0:	2400      	movs	r4, #0
 800dce2:	4625      	mov	r5, r4
 800dce4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dce6:	4656      	mov	r6, sl
 800dce8:	43db      	mvns	r3, r3
 800dcea:	9304      	str	r3, [sp, #16]
 800dcec:	2700      	movs	r7, #0
 800dcee:	4621      	mov	r1, r4
 800dcf0:	4658      	mov	r0, fp
 800dcf2:	f000 fbbf 	bl	800e474 <_Bfree>
 800dcf6:	2d00      	cmp	r5, #0
 800dcf8:	d0dc      	beq.n	800dcb4 <_dtoa_r+0x65c>
 800dcfa:	b12f      	cbz	r7, 800dd08 <_dtoa_r+0x6b0>
 800dcfc:	42af      	cmp	r7, r5
 800dcfe:	d003      	beq.n	800dd08 <_dtoa_r+0x6b0>
 800dd00:	4639      	mov	r1, r7
 800dd02:	4658      	mov	r0, fp
 800dd04:	f000 fbb6 	bl	800e474 <_Bfree>
 800dd08:	4629      	mov	r1, r5
 800dd0a:	4658      	mov	r0, fp
 800dd0c:	f000 fbb2 	bl	800e474 <_Bfree>
 800dd10:	e7d0      	b.n	800dcb4 <_dtoa_r+0x65c>
 800dd12:	9704      	str	r7, [sp, #16]
 800dd14:	4633      	mov	r3, r6
 800dd16:	461e      	mov	r6, r3
 800dd18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd1c:	2a39      	cmp	r2, #57	@ 0x39
 800dd1e:	d107      	bne.n	800dd30 <_dtoa_r+0x6d8>
 800dd20:	459a      	cmp	sl, r3
 800dd22:	d1f8      	bne.n	800dd16 <_dtoa_r+0x6be>
 800dd24:	9a04      	ldr	r2, [sp, #16]
 800dd26:	3201      	adds	r2, #1
 800dd28:	9204      	str	r2, [sp, #16]
 800dd2a:	2230      	movs	r2, #48	@ 0x30
 800dd2c:	f88a 2000 	strb.w	r2, [sl]
 800dd30:	781a      	ldrb	r2, [r3, #0]
 800dd32:	3201      	adds	r2, #1
 800dd34:	701a      	strb	r2, [r3, #0]
 800dd36:	e7bd      	b.n	800dcb4 <_dtoa_r+0x65c>
 800dd38:	2200      	movs	r2, #0
 800dd3a:	4b09      	ldr	r3, [pc, #36]	@ (800dd60 <_dtoa_r+0x708>)
 800dd3c:	f7f2 fe68 	bl	8000a10 <__aeabi_dmul>
 800dd40:	2200      	movs	r2, #0
 800dd42:	2300      	movs	r3, #0
 800dd44:	4604      	mov	r4, r0
 800dd46:	460d      	mov	r5, r1
 800dd48:	f7f3 f8ca 	bl	8000ee0 <__aeabi_dcmpeq>
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	f43f aebc 	beq.w	800daca <_dtoa_r+0x472>
 800dd52:	e6f1      	b.n	800db38 <_dtoa_r+0x4e0>
 800dd54:	08010e10 	.word	0x08010e10
 800dd58:	3fe00000 	.word	0x3fe00000
 800dd5c:	3ff00000 	.word	0x3ff00000
 800dd60:	40240000 	.word	0x40240000
 800dd64:	40140000 	.word	0x40140000
 800dd68:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dd6a:	2a00      	cmp	r2, #0
 800dd6c:	f000 80db 	beq.w	800df26 <_dtoa_r+0x8ce>
 800dd70:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dd72:	2a01      	cmp	r2, #1
 800dd74:	f300 80bf 	bgt.w	800def6 <_dtoa_r+0x89e>
 800dd78:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dd7a:	2a00      	cmp	r2, #0
 800dd7c:	f000 80b7 	beq.w	800deee <_dtoa_r+0x896>
 800dd80:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dd84:	4646      	mov	r6, r8
 800dd86:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dd88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd8a:	2101      	movs	r1, #1
 800dd8c:	441a      	add	r2, r3
 800dd8e:	4658      	mov	r0, fp
 800dd90:	4498      	add	r8, r3
 800dd92:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd94:	f000 fc6c 	bl	800e670 <__i2b>
 800dd98:	4605      	mov	r5, r0
 800dd9a:	b15e      	cbz	r6, 800ddb4 <_dtoa_r+0x75c>
 800dd9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	dd08      	ble.n	800ddb4 <_dtoa_r+0x75c>
 800dda2:	42b3      	cmp	r3, r6
 800dda4:	bfa8      	it	ge
 800dda6:	4633      	movge	r3, r6
 800dda8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ddaa:	eba8 0803 	sub.w	r8, r8, r3
 800ddae:	1af6      	subs	r6, r6, r3
 800ddb0:	1ad3      	subs	r3, r2, r3
 800ddb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddb6:	b1f3      	cbz	r3, 800ddf6 <_dtoa_r+0x79e>
 800ddb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	f000 80b7 	beq.w	800df2e <_dtoa_r+0x8d6>
 800ddc0:	b18c      	cbz	r4, 800dde6 <_dtoa_r+0x78e>
 800ddc2:	4629      	mov	r1, r5
 800ddc4:	4622      	mov	r2, r4
 800ddc6:	4658      	mov	r0, fp
 800ddc8:	f000 fd10 	bl	800e7ec <__pow5mult>
 800ddcc:	464a      	mov	r2, r9
 800ddce:	4601      	mov	r1, r0
 800ddd0:	4605      	mov	r5, r0
 800ddd2:	4658      	mov	r0, fp
 800ddd4:	f000 fc62 	bl	800e69c <__multiply>
 800ddd8:	4649      	mov	r1, r9
 800ddda:	9004      	str	r0, [sp, #16]
 800dddc:	4658      	mov	r0, fp
 800ddde:	f000 fb49 	bl	800e474 <_Bfree>
 800dde2:	9b04      	ldr	r3, [sp, #16]
 800dde4:	4699      	mov	r9, r3
 800dde6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dde8:	1b1a      	subs	r2, r3, r4
 800ddea:	d004      	beq.n	800ddf6 <_dtoa_r+0x79e>
 800ddec:	4649      	mov	r1, r9
 800ddee:	4658      	mov	r0, fp
 800ddf0:	f000 fcfc 	bl	800e7ec <__pow5mult>
 800ddf4:	4681      	mov	r9, r0
 800ddf6:	2101      	movs	r1, #1
 800ddf8:	4658      	mov	r0, fp
 800ddfa:	f000 fc39 	bl	800e670 <__i2b>
 800ddfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de00:	4604      	mov	r4, r0
 800de02:	2b00      	cmp	r3, #0
 800de04:	f000 81c9 	beq.w	800e19a <_dtoa_r+0xb42>
 800de08:	461a      	mov	r2, r3
 800de0a:	4601      	mov	r1, r0
 800de0c:	4658      	mov	r0, fp
 800de0e:	f000 fced 	bl	800e7ec <__pow5mult>
 800de12:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800de14:	4604      	mov	r4, r0
 800de16:	2b01      	cmp	r3, #1
 800de18:	f300 808f 	bgt.w	800df3a <_dtoa_r+0x8e2>
 800de1c:	9b02      	ldr	r3, [sp, #8]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	f040 8087 	bne.w	800df32 <_dtoa_r+0x8da>
 800de24:	9b03      	ldr	r3, [sp, #12]
 800de26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	f040 8083 	bne.w	800df36 <_dtoa_r+0x8de>
 800de30:	9b03      	ldr	r3, [sp, #12]
 800de32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800de36:	0d1b      	lsrs	r3, r3, #20
 800de38:	051b      	lsls	r3, r3, #20
 800de3a:	b12b      	cbz	r3, 800de48 <_dtoa_r+0x7f0>
 800de3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de3e:	f108 0801 	add.w	r8, r8, #1
 800de42:	3301      	adds	r3, #1
 800de44:	9309      	str	r3, [sp, #36]	@ 0x24
 800de46:	2301      	movs	r3, #1
 800de48:	930a      	str	r3, [sp, #40]	@ 0x28
 800de4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	f000 81aa 	beq.w	800e1a6 <_dtoa_r+0xb4e>
 800de52:	6923      	ldr	r3, [r4, #16]
 800de54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800de58:	6918      	ldr	r0, [r3, #16]
 800de5a:	f000 fbbd 	bl	800e5d8 <__hi0bits>
 800de5e:	f1c0 0020 	rsb	r0, r0, #32
 800de62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de64:	4418      	add	r0, r3
 800de66:	f010 001f 	ands.w	r0, r0, #31
 800de6a:	d071      	beq.n	800df50 <_dtoa_r+0x8f8>
 800de6c:	f1c0 0320 	rsb	r3, r0, #32
 800de70:	2b04      	cmp	r3, #4
 800de72:	dd65      	ble.n	800df40 <_dtoa_r+0x8e8>
 800de74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de76:	f1c0 001c 	rsb	r0, r0, #28
 800de7a:	4403      	add	r3, r0
 800de7c:	4480      	add	r8, r0
 800de7e:	4406      	add	r6, r0
 800de80:	9309      	str	r3, [sp, #36]	@ 0x24
 800de82:	f1b8 0f00 	cmp.w	r8, #0
 800de86:	dd05      	ble.n	800de94 <_dtoa_r+0x83c>
 800de88:	4649      	mov	r1, r9
 800de8a:	4642      	mov	r2, r8
 800de8c:	4658      	mov	r0, fp
 800de8e:	f000 fd07 	bl	800e8a0 <__lshift>
 800de92:	4681      	mov	r9, r0
 800de94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de96:	2b00      	cmp	r3, #0
 800de98:	dd05      	ble.n	800dea6 <_dtoa_r+0x84e>
 800de9a:	4621      	mov	r1, r4
 800de9c:	461a      	mov	r2, r3
 800de9e:	4658      	mov	r0, fp
 800dea0:	f000 fcfe 	bl	800e8a0 <__lshift>
 800dea4:	4604      	mov	r4, r0
 800dea6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d053      	beq.n	800df54 <_dtoa_r+0x8fc>
 800deac:	4621      	mov	r1, r4
 800deae:	4648      	mov	r0, r9
 800deb0:	f000 fd62 	bl	800e978 <__mcmp>
 800deb4:	2800      	cmp	r0, #0
 800deb6:	da4d      	bge.n	800df54 <_dtoa_r+0x8fc>
 800deb8:	1e7b      	subs	r3, r7, #1
 800deba:	4649      	mov	r1, r9
 800debc:	9304      	str	r3, [sp, #16]
 800debe:	220a      	movs	r2, #10
 800dec0:	2300      	movs	r3, #0
 800dec2:	4658      	mov	r0, fp
 800dec4:	f000 faf8 	bl	800e4b8 <__multadd>
 800dec8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800deca:	4681      	mov	r9, r0
 800decc:	2b00      	cmp	r3, #0
 800dece:	f000 816c 	beq.w	800e1aa <_dtoa_r+0xb52>
 800ded2:	2300      	movs	r3, #0
 800ded4:	4629      	mov	r1, r5
 800ded6:	220a      	movs	r2, #10
 800ded8:	4658      	mov	r0, fp
 800deda:	f000 faed 	bl	800e4b8 <__multadd>
 800dede:	9b08      	ldr	r3, [sp, #32]
 800dee0:	4605      	mov	r5, r0
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	dc61      	bgt.n	800dfaa <_dtoa_r+0x952>
 800dee6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800dee8:	2b02      	cmp	r3, #2
 800deea:	dc3b      	bgt.n	800df64 <_dtoa_r+0x90c>
 800deec:	e05d      	b.n	800dfaa <_dtoa_r+0x952>
 800deee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800def0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800def4:	e746      	b.n	800dd84 <_dtoa_r+0x72c>
 800def6:	9b07      	ldr	r3, [sp, #28]
 800def8:	1e5c      	subs	r4, r3, #1
 800defa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800defc:	42a3      	cmp	r3, r4
 800defe:	bfbf      	itttt	lt
 800df00:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800df02:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800df04:	1ae3      	sublt	r3, r4, r3
 800df06:	18d2      	addlt	r2, r2, r3
 800df08:	bfa8      	it	ge
 800df0a:	1b1c      	subge	r4, r3, r4
 800df0c:	9b07      	ldr	r3, [sp, #28]
 800df0e:	bfbe      	ittt	lt
 800df10:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800df12:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800df14:	2400      	movlt	r4, #0
 800df16:	2b00      	cmp	r3, #0
 800df18:	bfb5      	itete	lt
 800df1a:	eba8 0603 	sublt.w	r6, r8, r3
 800df1e:	4646      	movge	r6, r8
 800df20:	2300      	movlt	r3, #0
 800df22:	9b07      	ldrge	r3, [sp, #28]
 800df24:	e730      	b.n	800dd88 <_dtoa_r+0x730>
 800df26:	4646      	mov	r6, r8
 800df28:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800df2a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800df2c:	e735      	b.n	800dd9a <_dtoa_r+0x742>
 800df2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800df30:	e75c      	b.n	800ddec <_dtoa_r+0x794>
 800df32:	2300      	movs	r3, #0
 800df34:	e788      	b.n	800de48 <_dtoa_r+0x7f0>
 800df36:	9b02      	ldr	r3, [sp, #8]
 800df38:	e786      	b.n	800de48 <_dtoa_r+0x7f0>
 800df3a:	2300      	movs	r3, #0
 800df3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800df3e:	e788      	b.n	800de52 <_dtoa_r+0x7fa>
 800df40:	d09f      	beq.n	800de82 <_dtoa_r+0x82a>
 800df42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df44:	331c      	adds	r3, #28
 800df46:	441a      	add	r2, r3
 800df48:	4498      	add	r8, r3
 800df4a:	441e      	add	r6, r3
 800df4c:	9209      	str	r2, [sp, #36]	@ 0x24
 800df4e:	e798      	b.n	800de82 <_dtoa_r+0x82a>
 800df50:	4603      	mov	r3, r0
 800df52:	e7f6      	b.n	800df42 <_dtoa_r+0x8ea>
 800df54:	9b07      	ldr	r3, [sp, #28]
 800df56:	9704      	str	r7, [sp, #16]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	dc20      	bgt.n	800df9e <_dtoa_r+0x946>
 800df5c:	9308      	str	r3, [sp, #32]
 800df5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800df60:	2b02      	cmp	r3, #2
 800df62:	dd1e      	ble.n	800dfa2 <_dtoa_r+0x94a>
 800df64:	9b08      	ldr	r3, [sp, #32]
 800df66:	2b00      	cmp	r3, #0
 800df68:	f47f aebc 	bne.w	800dce4 <_dtoa_r+0x68c>
 800df6c:	4621      	mov	r1, r4
 800df6e:	2205      	movs	r2, #5
 800df70:	4658      	mov	r0, fp
 800df72:	f000 faa1 	bl	800e4b8 <__multadd>
 800df76:	4601      	mov	r1, r0
 800df78:	4604      	mov	r4, r0
 800df7a:	4648      	mov	r0, r9
 800df7c:	f000 fcfc 	bl	800e978 <__mcmp>
 800df80:	2800      	cmp	r0, #0
 800df82:	f77f aeaf 	ble.w	800dce4 <_dtoa_r+0x68c>
 800df86:	2331      	movs	r3, #49	@ 0x31
 800df88:	4656      	mov	r6, sl
 800df8a:	f806 3b01 	strb.w	r3, [r6], #1
 800df8e:	9b04      	ldr	r3, [sp, #16]
 800df90:	3301      	adds	r3, #1
 800df92:	9304      	str	r3, [sp, #16]
 800df94:	e6aa      	b.n	800dcec <_dtoa_r+0x694>
 800df96:	9c07      	ldr	r4, [sp, #28]
 800df98:	9704      	str	r7, [sp, #16]
 800df9a:	4625      	mov	r5, r4
 800df9c:	e7f3      	b.n	800df86 <_dtoa_r+0x92e>
 800df9e:	9b07      	ldr	r3, [sp, #28]
 800dfa0:	9308      	str	r3, [sp, #32]
 800dfa2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	f000 8104 	beq.w	800e1b2 <_dtoa_r+0xb5a>
 800dfaa:	2e00      	cmp	r6, #0
 800dfac:	dd05      	ble.n	800dfba <_dtoa_r+0x962>
 800dfae:	4629      	mov	r1, r5
 800dfb0:	4632      	mov	r2, r6
 800dfb2:	4658      	mov	r0, fp
 800dfb4:	f000 fc74 	bl	800e8a0 <__lshift>
 800dfb8:	4605      	mov	r5, r0
 800dfba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d05a      	beq.n	800e076 <_dtoa_r+0xa1e>
 800dfc0:	4658      	mov	r0, fp
 800dfc2:	6869      	ldr	r1, [r5, #4]
 800dfc4:	f000 fa16 	bl	800e3f4 <_Balloc>
 800dfc8:	4606      	mov	r6, r0
 800dfca:	b928      	cbnz	r0, 800dfd8 <_dtoa_r+0x980>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dfd2:	4b83      	ldr	r3, [pc, #524]	@ (800e1e0 <_dtoa_r+0xb88>)
 800dfd4:	f7ff bb54 	b.w	800d680 <_dtoa_r+0x28>
 800dfd8:	692a      	ldr	r2, [r5, #16]
 800dfda:	f105 010c 	add.w	r1, r5, #12
 800dfde:	3202      	adds	r2, #2
 800dfe0:	0092      	lsls	r2, r2, #2
 800dfe2:	300c      	adds	r0, #12
 800dfe4:	f001 fdbc 	bl	800fb60 <memcpy>
 800dfe8:	2201      	movs	r2, #1
 800dfea:	4631      	mov	r1, r6
 800dfec:	4658      	mov	r0, fp
 800dfee:	f000 fc57 	bl	800e8a0 <__lshift>
 800dff2:	462f      	mov	r7, r5
 800dff4:	4605      	mov	r5, r0
 800dff6:	f10a 0301 	add.w	r3, sl, #1
 800dffa:	9307      	str	r3, [sp, #28]
 800dffc:	9b08      	ldr	r3, [sp, #32]
 800dffe:	4453      	add	r3, sl
 800e000:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e002:	9b02      	ldr	r3, [sp, #8]
 800e004:	f003 0301 	and.w	r3, r3, #1
 800e008:	930a      	str	r3, [sp, #40]	@ 0x28
 800e00a:	9b07      	ldr	r3, [sp, #28]
 800e00c:	4621      	mov	r1, r4
 800e00e:	3b01      	subs	r3, #1
 800e010:	4648      	mov	r0, r9
 800e012:	9302      	str	r3, [sp, #8]
 800e014:	f7ff fa98 	bl	800d548 <quorem>
 800e018:	4639      	mov	r1, r7
 800e01a:	9008      	str	r0, [sp, #32]
 800e01c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e020:	4648      	mov	r0, r9
 800e022:	f000 fca9 	bl	800e978 <__mcmp>
 800e026:	462a      	mov	r2, r5
 800e028:	9009      	str	r0, [sp, #36]	@ 0x24
 800e02a:	4621      	mov	r1, r4
 800e02c:	4658      	mov	r0, fp
 800e02e:	f000 fcbf 	bl	800e9b0 <__mdiff>
 800e032:	68c2      	ldr	r2, [r0, #12]
 800e034:	4606      	mov	r6, r0
 800e036:	bb02      	cbnz	r2, 800e07a <_dtoa_r+0xa22>
 800e038:	4601      	mov	r1, r0
 800e03a:	4648      	mov	r0, r9
 800e03c:	f000 fc9c 	bl	800e978 <__mcmp>
 800e040:	4602      	mov	r2, r0
 800e042:	4631      	mov	r1, r6
 800e044:	4658      	mov	r0, fp
 800e046:	920c      	str	r2, [sp, #48]	@ 0x30
 800e048:	f000 fa14 	bl	800e474 <_Bfree>
 800e04c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e04e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e050:	9e07      	ldr	r6, [sp, #28]
 800e052:	ea43 0102 	orr.w	r1, r3, r2
 800e056:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e058:	4319      	orrs	r1, r3
 800e05a:	d110      	bne.n	800e07e <_dtoa_r+0xa26>
 800e05c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e060:	d029      	beq.n	800e0b6 <_dtoa_r+0xa5e>
 800e062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e064:	2b00      	cmp	r3, #0
 800e066:	dd02      	ble.n	800e06e <_dtoa_r+0xa16>
 800e068:	9b08      	ldr	r3, [sp, #32]
 800e06a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e06e:	9b02      	ldr	r3, [sp, #8]
 800e070:	f883 8000 	strb.w	r8, [r3]
 800e074:	e63b      	b.n	800dcee <_dtoa_r+0x696>
 800e076:	4628      	mov	r0, r5
 800e078:	e7bb      	b.n	800dff2 <_dtoa_r+0x99a>
 800e07a:	2201      	movs	r2, #1
 800e07c:	e7e1      	b.n	800e042 <_dtoa_r+0x9ea>
 800e07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e080:	2b00      	cmp	r3, #0
 800e082:	db04      	blt.n	800e08e <_dtoa_r+0xa36>
 800e084:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800e086:	430b      	orrs	r3, r1
 800e088:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e08a:	430b      	orrs	r3, r1
 800e08c:	d120      	bne.n	800e0d0 <_dtoa_r+0xa78>
 800e08e:	2a00      	cmp	r2, #0
 800e090:	dded      	ble.n	800e06e <_dtoa_r+0xa16>
 800e092:	4649      	mov	r1, r9
 800e094:	2201      	movs	r2, #1
 800e096:	4658      	mov	r0, fp
 800e098:	f000 fc02 	bl	800e8a0 <__lshift>
 800e09c:	4621      	mov	r1, r4
 800e09e:	4681      	mov	r9, r0
 800e0a0:	f000 fc6a 	bl	800e978 <__mcmp>
 800e0a4:	2800      	cmp	r0, #0
 800e0a6:	dc03      	bgt.n	800e0b0 <_dtoa_r+0xa58>
 800e0a8:	d1e1      	bne.n	800e06e <_dtoa_r+0xa16>
 800e0aa:	f018 0f01 	tst.w	r8, #1
 800e0ae:	d0de      	beq.n	800e06e <_dtoa_r+0xa16>
 800e0b0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e0b4:	d1d8      	bne.n	800e068 <_dtoa_r+0xa10>
 800e0b6:	2339      	movs	r3, #57	@ 0x39
 800e0b8:	9a02      	ldr	r2, [sp, #8]
 800e0ba:	7013      	strb	r3, [r2, #0]
 800e0bc:	4633      	mov	r3, r6
 800e0be:	461e      	mov	r6, r3
 800e0c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	2a39      	cmp	r2, #57	@ 0x39
 800e0c8:	d052      	beq.n	800e170 <_dtoa_r+0xb18>
 800e0ca:	3201      	adds	r2, #1
 800e0cc:	701a      	strb	r2, [r3, #0]
 800e0ce:	e60e      	b.n	800dcee <_dtoa_r+0x696>
 800e0d0:	2a00      	cmp	r2, #0
 800e0d2:	dd07      	ble.n	800e0e4 <_dtoa_r+0xa8c>
 800e0d4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e0d8:	d0ed      	beq.n	800e0b6 <_dtoa_r+0xa5e>
 800e0da:	9a02      	ldr	r2, [sp, #8]
 800e0dc:	f108 0301 	add.w	r3, r8, #1
 800e0e0:	7013      	strb	r3, [r2, #0]
 800e0e2:	e604      	b.n	800dcee <_dtoa_r+0x696>
 800e0e4:	9b07      	ldr	r3, [sp, #28]
 800e0e6:	9a07      	ldr	r2, [sp, #28]
 800e0e8:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e0ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	d028      	beq.n	800e144 <_dtoa_r+0xaec>
 800e0f2:	4649      	mov	r1, r9
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	220a      	movs	r2, #10
 800e0f8:	4658      	mov	r0, fp
 800e0fa:	f000 f9dd 	bl	800e4b8 <__multadd>
 800e0fe:	42af      	cmp	r7, r5
 800e100:	4681      	mov	r9, r0
 800e102:	f04f 0300 	mov.w	r3, #0
 800e106:	f04f 020a 	mov.w	r2, #10
 800e10a:	4639      	mov	r1, r7
 800e10c:	4658      	mov	r0, fp
 800e10e:	d107      	bne.n	800e120 <_dtoa_r+0xac8>
 800e110:	f000 f9d2 	bl	800e4b8 <__multadd>
 800e114:	4607      	mov	r7, r0
 800e116:	4605      	mov	r5, r0
 800e118:	9b07      	ldr	r3, [sp, #28]
 800e11a:	3301      	adds	r3, #1
 800e11c:	9307      	str	r3, [sp, #28]
 800e11e:	e774      	b.n	800e00a <_dtoa_r+0x9b2>
 800e120:	f000 f9ca 	bl	800e4b8 <__multadd>
 800e124:	4629      	mov	r1, r5
 800e126:	4607      	mov	r7, r0
 800e128:	2300      	movs	r3, #0
 800e12a:	220a      	movs	r2, #10
 800e12c:	4658      	mov	r0, fp
 800e12e:	f000 f9c3 	bl	800e4b8 <__multadd>
 800e132:	4605      	mov	r5, r0
 800e134:	e7f0      	b.n	800e118 <_dtoa_r+0xac0>
 800e136:	9b08      	ldr	r3, [sp, #32]
 800e138:	2700      	movs	r7, #0
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	bfcc      	ite	gt
 800e13e:	461e      	movgt	r6, r3
 800e140:	2601      	movle	r6, #1
 800e142:	4456      	add	r6, sl
 800e144:	4649      	mov	r1, r9
 800e146:	2201      	movs	r2, #1
 800e148:	4658      	mov	r0, fp
 800e14a:	f000 fba9 	bl	800e8a0 <__lshift>
 800e14e:	4621      	mov	r1, r4
 800e150:	4681      	mov	r9, r0
 800e152:	f000 fc11 	bl	800e978 <__mcmp>
 800e156:	2800      	cmp	r0, #0
 800e158:	dcb0      	bgt.n	800e0bc <_dtoa_r+0xa64>
 800e15a:	d102      	bne.n	800e162 <_dtoa_r+0xb0a>
 800e15c:	f018 0f01 	tst.w	r8, #1
 800e160:	d1ac      	bne.n	800e0bc <_dtoa_r+0xa64>
 800e162:	4633      	mov	r3, r6
 800e164:	461e      	mov	r6, r3
 800e166:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e16a:	2a30      	cmp	r2, #48	@ 0x30
 800e16c:	d0fa      	beq.n	800e164 <_dtoa_r+0xb0c>
 800e16e:	e5be      	b.n	800dcee <_dtoa_r+0x696>
 800e170:	459a      	cmp	sl, r3
 800e172:	d1a4      	bne.n	800e0be <_dtoa_r+0xa66>
 800e174:	9b04      	ldr	r3, [sp, #16]
 800e176:	3301      	adds	r3, #1
 800e178:	9304      	str	r3, [sp, #16]
 800e17a:	2331      	movs	r3, #49	@ 0x31
 800e17c:	f88a 3000 	strb.w	r3, [sl]
 800e180:	e5b5      	b.n	800dcee <_dtoa_r+0x696>
 800e182:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e184:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e1e4 <_dtoa_r+0xb8c>
 800e188:	b11b      	cbz	r3, 800e192 <_dtoa_r+0xb3a>
 800e18a:	f10a 0308 	add.w	r3, sl, #8
 800e18e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e190:	6013      	str	r3, [r2, #0]
 800e192:	4650      	mov	r0, sl
 800e194:	b017      	add	sp, #92	@ 0x5c
 800e196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e19a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	f77f ae3d 	ble.w	800de1c <_dtoa_r+0x7c4>
 800e1a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1a4:	930a      	str	r3, [sp, #40]	@ 0x28
 800e1a6:	2001      	movs	r0, #1
 800e1a8:	e65b      	b.n	800de62 <_dtoa_r+0x80a>
 800e1aa:	9b08      	ldr	r3, [sp, #32]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	f77f aed6 	ble.w	800df5e <_dtoa_r+0x906>
 800e1b2:	4656      	mov	r6, sl
 800e1b4:	4621      	mov	r1, r4
 800e1b6:	4648      	mov	r0, r9
 800e1b8:	f7ff f9c6 	bl	800d548 <quorem>
 800e1bc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e1c0:	9b08      	ldr	r3, [sp, #32]
 800e1c2:	f806 8b01 	strb.w	r8, [r6], #1
 800e1c6:	eba6 020a 	sub.w	r2, r6, sl
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	ddb3      	ble.n	800e136 <_dtoa_r+0xade>
 800e1ce:	4649      	mov	r1, r9
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	220a      	movs	r2, #10
 800e1d4:	4658      	mov	r0, fp
 800e1d6:	f000 f96f 	bl	800e4b8 <__multadd>
 800e1da:	4681      	mov	r9, r0
 800e1dc:	e7ea      	b.n	800e1b4 <_dtoa_r+0xb5c>
 800e1de:	bf00      	nop
 800e1e0:	08010d43 	.word	0x08010d43
 800e1e4:	08010cc7 	.word	0x08010cc7

0800e1e8 <_free_r>:
 800e1e8:	b538      	push	{r3, r4, r5, lr}
 800e1ea:	4605      	mov	r5, r0
 800e1ec:	2900      	cmp	r1, #0
 800e1ee:	d040      	beq.n	800e272 <_free_r+0x8a>
 800e1f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1f4:	1f0c      	subs	r4, r1, #4
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	bfb8      	it	lt
 800e1fa:	18e4      	addlt	r4, r4, r3
 800e1fc:	f000 f8ee 	bl	800e3dc <__malloc_lock>
 800e200:	4a1c      	ldr	r2, [pc, #112]	@ (800e274 <_free_r+0x8c>)
 800e202:	6813      	ldr	r3, [r2, #0]
 800e204:	b933      	cbnz	r3, 800e214 <_free_r+0x2c>
 800e206:	6063      	str	r3, [r4, #4]
 800e208:	6014      	str	r4, [r2, #0]
 800e20a:	4628      	mov	r0, r5
 800e20c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e210:	f000 b8ea 	b.w	800e3e8 <__malloc_unlock>
 800e214:	42a3      	cmp	r3, r4
 800e216:	d908      	bls.n	800e22a <_free_r+0x42>
 800e218:	6820      	ldr	r0, [r4, #0]
 800e21a:	1821      	adds	r1, r4, r0
 800e21c:	428b      	cmp	r3, r1
 800e21e:	bf01      	itttt	eq
 800e220:	6819      	ldreq	r1, [r3, #0]
 800e222:	685b      	ldreq	r3, [r3, #4]
 800e224:	1809      	addeq	r1, r1, r0
 800e226:	6021      	streq	r1, [r4, #0]
 800e228:	e7ed      	b.n	800e206 <_free_r+0x1e>
 800e22a:	461a      	mov	r2, r3
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	b10b      	cbz	r3, 800e234 <_free_r+0x4c>
 800e230:	42a3      	cmp	r3, r4
 800e232:	d9fa      	bls.n	800e22a <_free_r+0x42>
 800e234:	6811      	ldr	r1, [r2, #0]
 800e236:	1850      	adds	r0, r2, r1
 800e238:	42a0      	cmp	r0, r4
 800e23a:	d10b      	bne.n	800e254 <_free_r+0x6c>
 800e23c:	6820      	ldr	r0, [r4, #0]
 800e23e:	4401      	add	r1, r0
 800e240:	1850      	adds	r0, r2, r1
 800e242:	4283      	cmp	r3, r0
 800e244:	6011      	str	r1, [r2, #0]
 800e246:	d1e0      	bne.n	800e20a <_free_r+0x22>
 800e248:	6818      	ldr	r0, [r3, #0]
 800e24a:	685b      	ldr	r3, [r3, #4]
 800e24c:	4408      	add	r0, r1
 800e24e:	6010      	str	r0, [r2, #0]
 800e250:	6053      	str	r3, [r2, #4]
 800e252:	e7da      	b.n	800e20a <_free_r+0x22>
 800e254:	d902      	bls.n	800e25c <_free_r+0x74>
 800e256:	230c      	movs	r3, #12
 800e258:	602b      	str	r3, [r5, #0]
 800e25a:	e7d6      	b.n	800e20a <_free_r+0x22>
 800e25c:	6820      	ldr	r0, [r4, #0]
 800e25e:	1821      	adds	r1, r4, r0
 800e260:	428b      	cmp	r3, r1
 800e262:	bf01      	itttt	eq
 800e264:	6819      	ldreq	r1, [r3, #0]
 800e266:	685b      	ldreq	r3, [r3, #4]
 800e268:	1809      	addeq	r1, r1, r0
 800e26a:	6021      	streq	r1, [r4, #0]
 800e26c:	6063      	str	r3, [r4, #4]
 800e26e:	6054      	str	r4, [r2, #4]
 800e270:	e7cb      	b.n	800e20a <_free_r+0x22>
 800e272:	bd38      	pop	{r3, r4, r5, pc}
 800e274:	200007b4 	.word	0x200007b4

0800e278 <malloc>:
 800e278:	4b02      	ldr	r3, [pc, #8]	@ (800e284 <malloc+0xc>)
 800e27a:	4601      	mov	r1, r0
 800e27c:	6818      	ldr	r0, [r3, #0]
 800e27e:	f000 b82d 	b.w	800e2dc <_malloc_r>
 800e282:	bf00      	nop
 800e284:	20000020 	.word	0x20000020

0800e288 <free>:
 800e288:	4b02      	ldr	r3, [pc, #8]	@ (800e294 <free+0xc>)
 800e28a:	4601      	mov	r1, r0
 800e28c:	6818      	ldr	r0, [r3, #0]
 800e28e:	f7ff bfab 	b.w	800e1e8 <_free_r>
 800e292:	bf00      	nop
 800e294:	20000020 	.word	0x20000020

0800e298 <sbrk_aligned>:
 800e298:	b570      	push	{r4, r5, r6, lr}
 800e29a:	4e0f      	ldr	r6, [pc, #60]	@ (800e2d8 <sbrk_aligned+0x40>)
 800e29c:	460c      	mov	r4, r1
 800e29e:	6831      	ldr	r1, [r6, #0]
 800e2a0:	4605      	mov	r5, r0
 800e2a2:	b911      	cbnz	r1, 800e2aa <sbrk_aligned+0x12>
 800e2a4:	f001 fc4c 	bl	800fb40 <_sbrk_r>
 800e2a8:	6030      	str	r0, [r6, #0]
 800e2aa:	4621      	mov	r1, r4
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	f001 fc47 	bl	800fb40 <_sbrk_r>
 800e2b2:	1c43      	adds	r3, r0, #1
 800e2b4:	d103      	bne.n	800e2be <sbrk_aligned+0x26>
 800e2b6:	f04f 34ff 	mov.w	r4, #4294967295
 800e2ba:	4620      	mov	r0, r4
 800e2bc:	bd70      	pop	{r4, r5, r6, pc}
 800e2be:	1cc4      	adds	r4, r0, #3
 800e2c0:	f024 0403 	bic.w	r4, r4, #3
 800e2c4:	42a0      	cmp	r0, r4
 800e2c6:	d0f8      	beq.n	800e2ba <sbrk_aligned+0x22>
 800e2c8:	1a21      	subs	r1, r4, r0
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	f001 fc38 	bl	800fb40 <_sbrk_r>
 800e2d0:	3001      	adds	r0, #1
 800e2d2:	d1f2      	bne.n	800e2ba <sbrk_aligned+0x22>
 800e2d4:	e7ef      	b.n	800e2b6 <sbrk_aligned+0x1e>
 800e2d6:	bf00      	nop
 800e2d8:	200007b0 	.word	0x200007b0

0800e2dc <_malloc_r>:
 800e2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2e0:	1ccd      	adds	r5, r1, #3
 800e2e2:	f025 0503 	bic.w	r5, r5, #3
 800e2e6:	3508      	adds	r5, #8
 800e2e8:	2d0c      	cmp	r5, #12
 800e2ea:	bf38      	it	cc
 800e2ec:	250c      	movcc	r5, #12
 800e2ee:	2d00      	cmp	r5, #0
 800e2f0:	4606      	mov	r6, r0
 800e2f2:	db01      	blt.n	800e2f8 <_malloc_r+0x1c>
 800e2f4:	42a9      	cmp	r1, r5
 800e2f6:	d904      	bls.n	800e302 <_malloc_r+0x26>
 800e2f8:	230c      	movs	r3, #12
 800e2fa:	6033      	str	r3, [r6, #0]
 800e2fc:	2000      	movs	r0, #0
 800e2fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e302:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e3d8 <_malloc_r+0xfc>
 800e306:	f000 f869 	bl	800e3dc <__malloc_lock>
 800e30a:	f8d8 3000 	ldr.w	r3, [r8]
 800e30e:	461c      	mov	r4, r3
 800e310:	bb44      	cbnz	r4, 800e364 <_malloc_r+0x88>
 800e312:	4629      	mov	r1, r5
 800e314:	4630      	mov	r0, r6
 800e316:	f7ff ffbf 	bl	800e298 <sbrk_aligned>
 800e31a:	1c43      	adds	r3, r0, #1
 800e31c:	4604      	mov	r4, r0
 800e31e:	d158      	bne.n	800e3d2 <_malloc_r+0xf6>
 800e320:	f8d8 4000 	ldr.w	r4, [r8]
 800e324:	4627      	mov	r7, r4
 800e326:	2f00      	cmp	r7, #0
 800e328:	d143      	bne.n	800e3b2 <_malloc_r+0xd6>
 800e32a:	2c00      	cmp	r4, #0
 800e32c:	d04b      	beq.n	800e3c6 <_malloc_r+0xea>
 800e32e:	6823      	ldr	r3, [r4, #0]
 800e330:	4639      	mov	r1, r7
 800e332:	4630      	mov	r0, r6
 800e334:	eb04 0903 	add.w	r9, r4, r3
 800e338:	f001 fc02 	bl	800fb40 <_sbrk_r>
 800e33c:	4581      	cmp	r9, r0
 800e33e:	d142      	bne.n	800e3c6 <_malloc_r+0xea>
 800e340:	6821      	ldr	r1, [r4, #0]
 800e342:	4630      	mov	r0, r6
 800e344:	1a6d      	subs	r5, r5, r1
 800e346:	4629      	mov	r1, r5
 800e348:	f7ff ffa6 	bl	800e298 <sbrk_aligned>
 800e34c:	3001      	adds	r0, #1
 800e34e:	d03a      	beq.n	800e3c6 <_malloc_r+0xea>
 800e350:	6823      	ldr	r3, [r4, #0]
 800e352:	442b      	add	r3, r5
 800e354:	6023      	str	r3, [r4, #0]
 800e356:	f8d8 3000 	ldr.w	r3, [r8]
 800e35a:	685a      	ldr	r2, [r3, #4]
 800e35c:	bb62      	cbnz	r2, 800e3b8 <_malloc_r+0xdc>
 800e35e:	f8c8 7000 	str.w	r7, [r8]
 800e362:	e00f      	b.n	800e384 <_malloc_r+0xa8>
 800e364:	6822      	ldr	r2, [r4, #0]
 800e366:	1b52      	subs	r2, r2, r5
 800e368:	d420      	bmi.n	800e3ac <_malloc_r+0xd0>
 800e36a:	2a0b      	cmp	r2, #11
 800e36c:	d917      	bls.n	800e39e <_malloc_r+0xc2>
 800e36e:	1961      	adds	r1, r4, r5
 800e370:	42a3      	cmp	r3, r4
 800e372:	6025      	str	r5, [r4, #0]
 800e374:	bf18      	it	ne
 800e376:	6059      	strne	r1, [r3, #4]
 800e378:	6863      	ldr	r3, [r4, #4]
 800e37a:	bf08      	it	eq
 800e37c:	f8c8 1000 	streq.w	r1, [r8]
 800e380:	5162      	str	r2, [r4, r5]
 800e382:	604b      	str	r3, [r1, #4]
 800e384:	4630      	mov	r0, r6
 800e386:	f000 f82f 	bl	800e3e8 <__malloc_unlock>
 800e38a:	f104 000b 	add.w	r0, r4, #11
 800e38e:	1d23      	adds	r3, r4, #4
 800e390:	f020 0007 	bic.w	r0, r0, #7
 800e394:	1ac2      	subs	r2, r0, r3
 800e396:	bf1c      	itt	ne
 800e398:	1a1b      	subne	r3, r3, r0
 800e39a:	50a3      	strne	r3, [r4, r2]
 800e39c:	e7af      	b.n	800e2fe <_malloc_r+0x22>
 800e39e:	6862      	ldr	r2, [r4, #4]
 800e3a0:	42a3      	cmp	r3, r4
 800e3a2:	bf0c      	ite	eq
 800e3a4:	f8c8 2000 	streq.w	r2, [r8]
 800e3a8:	605a      	strne	r2, [r3, #4]
 800e3aa:	e7eb      	b.n	800e384 <_malloc_r+0xa8>
 800e3ac:	4623      	mov	r3, r4
 800e3ae:	6864      	ldr	r4, [r4, #4]
 800e3b0:	e7ae      	b.n	800e310 <_malloc_r+0x34>
 800e3b2:	463c      	mov	r4, r7
 800e3b4:	687f      	ldr	r7, [r7, #4]
 800e3b6:	e7b6      	b.n	800e326 <_malloc_r+0x4a>
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	685b      	ldr	r3, [r3, #4]
 800e3bc:	42a3      	cmp	r3, r4
 800e3be:	d1fb      	bne.n	800e3b8 <_malloc_r+0xdc>
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	6053      	str	r3, [r2, #4]
 800e3c4:	e7de      	b.n	800e384 <_malloc_r+0xa8>
 800e3c6:	230c      	movs	r3, #12
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	6033      	str	r3, [r6, #0]
 800e3cc:	f000 f80c 	bl	800e3e8 <__malloc_unlock>
 800e3d0:	e794      	b.n	800e2fc <_malloc_r+0x20>
 800e3d2:	6005      	str	r5, [r0, #0]
 800e3d4:	e7d6      	b.n	800e384 <_malloc_r+0xa8>
 800e3d6:	bf00      	nop
 800e3d8:	200007b4 	.word	0x200007b4

0800e3dc <__malloc_lock>:
 800e3dc:	4801      	ldr	r0, [pc, #4]	@ (800e3e4 <__malloc_lock+0x8>)
 800e3de:	f7ff b89e 	b.w	800d51e <__retarget_lock_acquire_recursive>
 800e3e2:	bf00      	nop
 800e3e4:	200007ac 	.word	0x200007ac

0800e3e8 <__malloc_unlock>:
 800e3e8:	4801      	ldr	r0, [pc, #4]	@ (800e3f0 <__malloc_unlock+0x8>)
 800e3ea:	f7ff b89e 	b.w	800d52a <__retarget_lock_release_recursive>
 800e3ee:	bf00      	nop
 800e3f0:	200007ac 	.word	0x200007ac

0800e3f4 <_Balloc>:
 800e3f4:	b570      	push	{r4, r5, r6, lr}
 800e3f6:	69c6      	ldr	r6, [r0, #28]
 800e3f8:	4604      	mov	r4, r0
 800e3fa:	460d      	mov	r5, r1
 800e3fc:	b976      	cbnz	r6, 800e41c <_Balloc+0x28>
 800e3fe:	2010      	movs	r0, #16
 800e400:	f7ff ff3a 	bl	800e278 <malloc>
 800e404:	4602      	mov	r2, r0
 800e406:	61e0      	str	r0, [r4, #28]
 800e408:	b920      	cbnz	r0, 800e414 <_Balloc+0x20>
 800e40a:	216b      	movs	r1, #107	@ 0x6b
 800e40c:	4b17      	ldr	r3, [pc, #92]	@ (800e46c <_Balloc+0x78>)
 800e40e:	4818      	ldr	r0, [pc, #96]	@ (800e470 <_Balloc+0x7c>)
 800e410:	f001 fbb4 	bl	800fb7c <__assert_func>
 800e414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e418:	6006      	str	r6, [r0, #0]
 800e41a:	60c6      	str	r6, [r0, #12]
 800e41c:	69e6      	ldr	r6, [r4, #28]
 800e41e:	68f3      	ldr	r3, [r6, #12]
 800e420:	b183      	cbz	r3, 800e444 <_Balloc+0x50>
 800e422:	69e3      	ldr	r3, [r4, #28]
 800e424:	68db      	ldr	r3, [r3, #12]
 800e426:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e42a:	b9b8      	cbnz	r0, 800e45c <_Balloc+0x68>
 800e42c:	2101      	movs	r1, #1
 800e42e:	fa01 f605 	lsl.w	r6, r1, r5
 800e432:	1d72      	adds	r2, r6, #5
 800e434:	4620      	mov	r0, r4
 800e436:	0092      	lsls	r2, r2, #2
 800e438:	f001 fbc3 	bl	800fbc2 <_calloc_r>
 800e43c:	b160      	cbz	r0, 800e458 <_Balloc+0x64>
 800e43e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e442:	e00e      	b.n	800e462 <_Balloc+0x6e>
 800e444:	2221      	movs	r2, #33	@ 0x21
 800e446:	2104      	movs	r1, #4
 800e448:	4620      	mov	r0, r4
 800e44a:	f001 fbba 	bl	800fbc2 <_calloc_r>
 800e44e:	69e3      	ldr	r3, [r4, #28]
 800e450:	60f0      	str	r0, [r6, #12]
 800e452:	68db      	ldr	r3, [r3, #12]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d1e4      	bne.n	800e422 <_Balloc+0x2e>
 800e458:	2000      	movs	r0, #0
 800e45a:	bd70      	pop	{r4, r5, r6, pc}
 800e45c:	6802      	ldr	r2, [r0, #0]
 800e45e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e462:	2300      	movs	r3, #0
 800e464:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e468:	e7f7      	b.n	800e45a <_Balloc+0x66>
 800e46a:	bf00      	nop
 800e46c:	08010cd4 	.word	0x08010cd4
 800e470:	08010d54 	.word	0x08010d54

0800e474 <_Bfree>:
 800e474:	b570      	push	{r4, r5, r6, lr}
 800e476:	69c6      	ldr	r6, [r0, #28]
 800e478:	4605      	mov	r5, r0
 800e47a:	460c      	mov	r4, r1
 800e47c:	b976      	cbnz	r6, 800e49c <_Bfree+0x28>
 800e47e:	2010      	movs	r0, #16
 800e480:	f7ff fefa 	bl	800e278 <malloc>
 800e484:	4602      	mov	r2, r0
 800e486:	61e8      	str	r0, [r5, #28]
 800e488:	b920      	cbnz	r0, 800e494 <_Bfree+0x20>
 800e48a:	218f      	movs	r1, #143	@ 0x8f
 800e48c:	4b08      	ldr	r3, [pc, #32]	@ (800e4b0 <_Bfree+0x3c>)
 800e48e:	4809      	ldr	r0, [pc, #36]	@ (800e4b4 <_Bfree+0x40>)
 800e490:	f001 fb74 	bl	800fb7c <__assert_func>
 800e494:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e498:	6006      	str	r6, [r0, #0]
 800e49a:	60c6      	str	r6, [r0, #12]
 800e49c:	b13c      	cbz	r4, 800e4ae <_Bfree+0x3a>
 800e49e:	69eb      	ldr	r3, [r5, #28]
 800e4a0:	6862      	ldr	r2, [r4, #4]
 800e4a2:	68db      	ldr	r3, [r3, #12]
 800e4a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e4a8:	6021      	str	r1, [r4, #0]
 800e4aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e4ae:	bd70      	pop	{r4, r5, r6, pc}
 800e4b0:	08010cd4 	.word	0x08010cd4
 800e4b4:	08010d54 	.word	0x08010d54

0800e4b8 <__multadd>:
 800e4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4bc:	4607      	mov	r7, r0
 800e4be:	460c      	mov	r4, r1
 800e4c0:	461e      	mov	r6, r3
 800e4c2:	2000      	movs	r0, #0
 800e4c4:	690d      	ldr	r5, [r1, #16]
 800e4c6:	f101 0c14 	add.w	ip, r1, #20
 800e4ca:	f8dc 3000 	ldr.w	r3, [ip]
 800e4ce:	3001      	adds	r0, #1
 800e4d0:	b299      	uxth	r1, r3
 800e4d2:	fb02 6101 	mla	r1, r2, r1, r6
 800e4d6:	0c1e      	lsrs	r6, r3, #16
 800e4d8:	0c0b      	lsrs	r3, r1, #16
 800e4da:	fb02 3306 	mla	r3, r2, r6, r3
 800e4de:	b289      	uxth	r1, r1
 800e4e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e4e4:	4285      	cmp	r5, r0
 800e4e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e4ea:	f84c 1b04 	str.w	r1, [ip], #4
 800e4ee:	dcec      	bgt.n	800e4ca <__multadd+0x12>
 800e4f0:	b30e      	cbz	r6, 800e536 <__multadd+0x7e>
 800e4f2:	68a3      	ldr	r3, [r4, #8]
 800e4f4:	42ab      	cmp	r3, r5
 800e4f6:	dc19      	bgt.n	800e52c <__multadd+0x74>
 800e4f8:	6861      	ldr	r1, [r4, #4]
 800e4fa:	4638      	mov	r0, r7
 800e4fc:	3101      	adds	r1, #1
 800e4fe:	f7ff ff79 	bl	800e3f4 <_Balloc>
 800e502:	4680      	mov	r8, r0
 800e504:	b928      	cbnz	r0, 800e512 <__multadd+0x5a>
 800e506:	4602      	mov	r2, r0
 800e508:	21ba      	movs	r1, #186	@ 0xba
 800e50a:	4b0c      	ldr	r3, [pc, #48]	@ (800e53c <__multadd+0x84>)
 800e50c:	480c      	ldr	r0, [pc, #48]	@ (800e540 <__multadd+0x88>)
 800e50e:	f001 fb35 	bl	800fb7c <__assert_func>
 800e512:	6922      	ldr	r2, [r4, #16]
 800e514:	f104 010c 	add.w	r1, r4, #12
 800e518:	3202      	adds	r2, #2
 800e51a:	0092      	lsls	r2, r2, #2
 800e51c:	300c      	adds	r0, #12
 800e51e:	f001 fb1f 	bl	800fb60 <memcpy>
 800e522:	4621      	mov	r1, r4
 800e524:	4638      	mov	r0, r7
 800e526:	f7ff ffa5 	bl	800e474 <_Bfree>
 800e52a:	4644      	mov	r4, r8
 800e52c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e530:	3501      	adds	r5, #1
 800e532:	615e      	str	r6, [r3, #20]
 800e534:	6125      	str	r5, [r4, #16]
 800e536:	4620      	mov	r0, r4
 800e538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e53c:	08010d43 	.word	0x08010d43
 800e540:	08010d54 	.word	0x08010d54

0800e544 <__s2b>:
 800e544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e548:	4615      	mov	r5, r2
 800e54a:	2209      	movs	r2, #9
 800e54c:	461f      	mov	r7, r3
 800e54e:	3308      	adds	r3, #8
 800e550:	460c      	mov	r4, r1
 800e552:	fb93 f3f2 	sdiv	r3, r3, r2
 800e556:	4606      	mov	r6, r0
 800e558:	2201      	movs	r2, #1
 800e55a:	2100      	movs	r1, #0
 800e55c:	429a      	cmp	r2, r3
 800e55e:	db09      	blt.n	800e574 <__s2b+0x30>
 800e560:	4630      	mov	r0, r6
 800e562:	f7ff ff47 	bl	800e3f4 <_Balloc>
 800e566:	b940      	cbnz	r0, 800e57a <__s2b+0x36>
 800e568:	4602      	mov	r2, r0
 800e56a:	21d3      	movs	r1, #211	@ 0xd3
 800e56c:	4b18      	ldr	r3, [pc, #96]	@ (800e5d0 <__s2b+0x8c>)
 800e56e:	4819      	ldr	r0, [pc, #100]	@ (800e5d4 <__s2b+0x90>)
 800e570:	f001 fb04 	bl	800fb7c <__assert_func>
 800e574:	0052      	lsls	r2, r2, #1
 800e576:	3101      	adds	r1, #1
 800e578:	e7f0      	b.n	800e55c <__s2b+0x18>
 800e57a:	9b08      	ldr	r3, [sp, #32]
 800e57c:	2d09      	cmp	r5, #9
 800e57e:	6143      	str	r3, [r0, #20]
 800e580:	f04f 0301 	mov.w	r3, #1
 800e584:	6103      	str	r3, [r0, #16]
 800e586:	dd16      	ble.n	800e5b6 <__s2b+0x72>
 800e588:	f104 0909 	add.w	r9, r4, #9
 800e58c:	46c8      	mov	r8, r9
 800e58e:	442c      	add	r4, r5
 800e590:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e594:	4601      	mov	r1, r0
 800e596:	220a      	movs	r2, #10
 800e598:	4630      	mov	r0, r6
 800e59a:	3b30      	subs	r3, #48	@ 0x30
 800e59c:	f7ff ff8c 	bl	800e4b8 <__multadd>
 800e5a0:	45a0      	cmp	r8, r4
 800e5a2:	d1f5      	bne.n	800e590 <__s2b+0x4c>
 800e5a4:	f1a5 0408 	sub.w	r4, r5, #8
 800e5a8:	444c      	add	r4, r9
 800e5aa:	1b2d      	subs	r5, r5, r4
 800e5ac:	1963      	adds	r3, r4, r5
 800e5ae:	42bb      	cmp	r3, r7
 800e5b0:	db04      	blt.n	800e5bc <__s2b+0x78>
 800e5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5b6:	2509      	movs	r5, #9
 800e5b8:	340a      	adds	r4, #10
 800e5ba:	e7f6      	b.n	800e5aa <__s2b+0x66>
 800e5bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e5c0:	4601      	mov	r1, r0
 800e5c2:	220a      	movs	r2, #10
 800e5c4:	4630      	mov	r0, r6
 800e5c6:	3b30      	subs	r3, #48	@ 0x30
 800e5c8:	f7ff ff76 	bl	800e4b8 <__multadd>
 800e5cc:	e7ee      	b.n	800e5ac <__s2b+0x68>
 800e5ce:	bf00      	nop
 800e5d0:	08010d43 	.word	0x08010d43
 800e5d4:	08010d54 	.word	0x08010d54

0800e5d8 <__hi0bits>:
 800e5d8:	4603      	mov	r3, r0
 800e5da:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e5de:	bf3a      	itte	cc
 800e5e0:	0403      	lslcc	r3, r0, #16
 800e5e2:	2010      	movcc	r0, #16
 800e5e4:	2000      	movcs	r0, #0
 800e5e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e5ea:	bf3c      	itt	cc
 800e5ec:	021b      	lslcc	r3, r3, #8
 800e5ee:	3008      	addcc	r0, #8
 800e5f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e5f4:	bf3c      	itt	cc
 800e5f6:	011b      	lslcc	r3, r3, #4
 800e5f8:	3004      	addcc	r0, #4
 800e5fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5fe:	bf3c      	itt	cc
 800e600:	009b      	lslcc	r3, r3, #2
 800e602:	3002      	addcc	r0, #2
 800e604:	2b00      	cmp	r3, #0
 800e606:	db05      	blt.n	800e614 <__hi0bits+0x3c>
 800e608:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e60c:	f100 0001 	add.w	r0, r0, #1
 800e610:	bf08      	it	eq
 800e612:	2020      	moveq	r0, #32
 800e614:	4770      	bx	lr

0800e616 <__lo0bits>:
 800e616:	6803      	ldr	r3, [r0, #0]
 800e618:	4602      	mov	r2, r0
 800e61a:	f013 0007 	ands.w	r0, r3, #7
 800e61e:	d00b      	beq.n	800e638 <__lo0bits+0x22>
 800e620:	07d9      	lsls	r1, r3, #31
 800e622:	d421      	bmi.n	800e668 <__lo0bits+0x52>
 800e624:	0798      	lsls	r0, r3, #30
 800e626:	bf49      	itett	mi
 800e628:	085b      	lsrmi	r3, r3, #1
 800e62a:	089b      	lsrpl	r3, r3, #2
 800e62c:	2001      	movmi	r0, #1
 800e62e:	6013      	strmi	r3, [r2, #0]
 800e630:	bf5c      	itt	pl
 800e632:	2002      	movpl	r0, #2
 800e634:	6013      	strpl	r3, [r2, #0]
 800e636:	4770      	bx	lr
 800e638:	b299      	uxth	r1, r3
 800e63a:	b909      	cbnz	r1, 800e640 <__lo0bits+0x2a>
 800e63c:	2010      	movs	r0, #16
 800e63e:	0c1b      	lsrs	r3, r3, #16
 800e640:	b2d9      	uxtb	r1, r3
 800e642:	b909      	cbnz	r1, 800e648 <__lo0bits+0x32>
 800e644:	3008      	adds	r0, #8
 800e646:	0a1b      	lsrs	r3, r3, #8
 800e648:	0719      	lsls	r1, r3, #28
 800e64a:	bf04      	itt	eq
 800e64c:	091b      	lsreq	r3, r3, #4
 800e64e:	3004      	addeq	r0, #4
 800e650:	0799      	lsls	r1, r3, #30
 800e652:	bf04      	itt	eq
 800e654:	089b      	lsreq	r3, r3, #2
 800e656:	3002      	addeq	r0, #2
 800e658:	07d9      	lsls	r1, r3, #31
 800e65a:	d403      	bmi.n	800e664 <__lo0bits+0x4e>
 800e65c:	085b      	lsrs	r3, r3, #1
 800e65e:	f100 0001 	add.w	r0, r0, #1
 800e662:	d003      	beq.n	800e66c <__lo0bits+0x56>
 800e664:	6013      	str	r3, [r2, #0]
 800e666:	4770      	bx	lr
 800e668:	2000      	movs	r0, #0
 800e66a:	4770      	bx	lr
 800e66c:	2020      	movs	r0, #32
 800e66e:	4770      	bx	lr

0800e670 <__i2b>:
 800e670:	b510      	push	{r4, lr}
 800e672:	460c      	mov	r4, r1
 800e674:	2101      	movs	r1, #1
 800e676:	f7ff febd 	bl	800e3f4 <_Balloc>
 800e67a:	4602      	mov	r2, r0
 800e67c:	b928      	cbnz	r0, 800e68a <__i2b+0x1a>
 800e67e:	f240 1145 	movw	r1, #325	@ 0x145
 800e682:	4b04      	ldr	r3, [pc, #16]	@ (800e694 <__i2b+0x24>)
 800e684:	4804      	ldr	r0, [pc, #16]	@ (800e698 <__i2b+0x28>)
 800e686:	f001 fa79 	bl	800fb7c <__assert_func>
 800e68a:	2301      	movs	r3, #1
 800e68c:	6144      	str	r4, [r0, #20]
 800e68e:	6103      	str	r3, [r0, #16]
 800e690:	bd10      	pop	{r4, pc}
 800e692:	bf00      	nop
 800e694:	08010d43 	.word	0x08010d43
 800e698:	08010d54 	.word	0x08010d54

0800e69c <__multiply>:
 800e69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a0:	4614      	mov	r4, r2
 800e6a2:	690a      	ldr	r2, [r1, #16]
 800e6a4:	6923      	ldr	r3, [r4, #16]
 800e6a6:	460f      	mov	r7, r1
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	bfa2      	ittt	ge
 800e6ac:	4623      	movge	r3, r4
 800e6ae:	460c      	movge	r4, r1
 800e6b0:	461f      	movge	r7, r3
 800e6b2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e6b6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e6ba:	68a3      	ldr	r3, [r4, #8]
 800e6bc:	6861      	ldr	r1, [r4, #4]
 800e6be:	eb0a 0609 	add.w	r6, sl, r9
 800e6c2:	42b3      	cmp	r3, r6
 800e6c4:	b085      	sub	sp, #20
 800e6c6:	bfb8      	it	lt
 800e6c8:	3101      	addlt	r1, #1
 800e6ca:	f7ff fe93 	bl	800e3f4 <_Balloc>
 800e6ce:	b930      	cbnz	r0, 800e6de <__multiply+0x42>
 800e6d0:	4602      	mov	r2, r0
 800e6d2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e6d6:	4b43      	ldr	r3, [pc, #268]	@ (800e7e4 <__multiply+0x148>)
 800e6d8:	4843      	ldr	r0, [pc, #268]	@ (800e7e8 <__multiply+0x14c>)
 800e6da:	f001 fa4f 	bl	800fb7c <__assert_func>
 800e6de:	f100 0514 	add.w	r5, r0, #20
 800e6e2:	462b      	mov	r3, r5
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e6ea:	4543      	cmp	r3, r8
 800e6ec:	d321      	bcc.n	800e732 <__multiply+0x96>
 800e6ee:	f107 0114 	add.w	r1, r7, #20
 800e6f2:	f104 0214 	add.w	r2, r4, #20
 800e6f6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e6fa:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e6fe:	9302      	str	r3, [sp, #8]
 800e700:	1b13      	subs	r3, r2, r4
 800e702:	3b15      	subs	r3, #21
 800e704:	f023 0303 	bic.w	r3, r3, #3
 800e708:	3304      	adds	r3, #4
 800e70a:	f104 0715 	add.w	r7, r4, #21
 800e70e:	42ba      	cmp	r2, r7
 800e710:	bf38      	it	cc
 800e712:	2304      	movcc	r3, #4
 800e714:	9301      	str	r3, [sp, #4]
 800e716:	9b02      	ldr	r3, [sp, #8]
 800e718:	9103      	str	r1, [sp, #12]
 800e71a:	428b      	cmp	r3, r1
 800e71c:	d80c      	bhi.n	800e738 <__multiply+0x9c>
 800e71e:	2e00      	cmp	r6, #0
 800e720:	dd03      	ble.n	800e72a <__multiply+0x8e>
 800e722:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e726:	2b00      	cmp	r3, #0
 800e728:	d05a      	beq.n	800e7e0 <__multiply+0x144>
 800e72a:	6106      	str	r6, [r0, #16]
 800e72c:	b005      	add	sp, #20
 800e72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e732:	f843 2b04 	str.w	r2, [r3], #4
 800e736:	e7d8      	b.n	800e6ea <__multiply+0x4e>
 800e738:	f8b1 a000 	ldrh.w	sl, [r1]
 800e73c:	f1ba 0f00 	cmp.w	sl, #0
 800e740:	d023      	beq.n	800e78a <__multiply+0xee>
 800e742:	46a9      	mov	r9, r5
 800e744:	f04f 0c00 	mov.w	ip, #0
 800e748:	f104 0e14 	add.w	lr, r4, #20
 800e74c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e750:	f8d9 3000 	ldr.w	r3, [r9]
 800e754:	fa1f fb87 	uxth.w	fp, r7
 800e758:	b29b      	uxth	r3, r3
 800e75a:	fb0a 330b 	mla	r3, sl, fp, r3
 800e75e:	4463      	add	r3, ip
 800e760:	f8d9 c000 	ldr.w	ip, [r9]
 800e764:	0c3f      	lsrs	r7, r7, #16
 800e766:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800e76a:	fb0a c707 	mla	r7, sl, r7, ip
 800e76e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e772:	b29b      	uxth	r3, r3
 800e774:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e778:	4572      	cmp	r2, lr
 800e77a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e77e:	f849 3b04 	str.w	r3, [r9], #4
 800e782:	d8e3      	bhi.n	800e74c <__multiply+0xb0>
 800e784:	9b01      	ldr	r3, [sp, #4]
 800e786:	f845 c003 	str.w	ip, [r5, r3]
 800e78a:	9b03      	ldr	r3, [sp, #12]
 800e78c:	3104      	adds	r1, #4
 800e78e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e792:	f1b9 0f00 	cmp.w	r9, #0
 800e796:	d021      	beq.n	800e7dc <__multiply+0x140>
 800e798:	46ae      	mov	lr, r5
 800e79a:	f04f 0a00 	mov.w	sl, #0
 800e79e:	682b      	ldr	r3, [r5, #0]
 800e7a0:	f104 0c14 	add.w	ip, r4, #20
 800e7a4:	f8bc b000 	ldrh.w	fp, [ip]
 800e7a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	fb09 770b 	mla	r7, r9, fp, r7
 800e7b2:	4457      	add	r7, sl
 800e7b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e7b8:	f84e 3b04 	str.w	r3, [lr], #4
 800e7bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e7c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e7c4:	f8be 3000 	ldrh.w	r3, [lr]
 800e7c8:	4562      	cmp	r2, ip
 800e7ca:	fb09 330a 	mla	r3, r9, sl, r3
 800e7ce:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e7d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e7d6:	d8e5      	bhi.n	800e7a4 <__multiply+0x108>
 800e7d8:	9f01      	ldr	r7, [sp, #4]
 800e7da:	51eb      	str	r3, [r5, r7]
 800e7dc:	3504      	adds	r5, #4
 800e7de:	e79a      	b.n	800e716 <__multiply+0x7a>
 800e7e0:	3e01      	subs	r6, #1
 800e7e2:	e79c      	b.n	800e71e <__multiply+0x82>
 800e7e4:	08010d43 	.word	0x08010d43
 800e7e8:	08010d54 	.word	0x08010d54

0800e7ec <__pow5mult>:
 800e7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7f0:	4615      	mov	r5, r2
 800e7f2:	f012 0203 	ands.w	r2, r2, #3
 800e7f6:	4607      	mov	r7, r0
 800e7f8:	460e      	mov	r6, r1
 800e7fa:	d007      	beq.n	800e80c <__pow5mult+0x20>
 800e7fc:	4c25      	ldr	r4, [pc, #148]	@ (800e894 <__pow5mult+0xa8>)
 800e7fe:	3a01      	subs	r2, #1
 800e800:	2300      	movs	r3, #0
 800e802:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e806:	f7ff fe57 	bl	800e4b8 <__multadd>
 800e80a:	4606      	mov	r6, r0
 800e80c:	10ad      	asrs	r5, r5, #2
 800e80e:	d03d      	beq.n	800e88c <__pow5mult+0xa0>
 800e810:	69fc      	ldr	r4, [r7, #28]
 800e812:	b97c      	cbnz	r4, 800e834 <__pow5mult+0x48>
 800e814:	2010      	movs	r0, #16
 800e816:	f7ff fd2f 	bl	800e278 <malloc>
 800e81a:	4602      	mov	r2, r0
 800e81c:	61f8      	str	r0, [r7, #28]
 800e81e:	b928      	cbnz	r0, 800e82c <__pow5mult+0x40>
 800e820:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e824:	4b1c      	ldr	r3, [pc, #112]	@ (800e898 <__pow5mult+0xac>)
 800e826:	481d      	ldr	r0, [pc, #116]	@ (800e89c <__pow5mult+0xb0>)
 800e828:	f001 f9a8 	bl	800fb7c <__assert_func>
 800e82c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e830:	6004      	str	r4, [r0, #0]
 800e832:	60c4      	str	r4, [r0, #12]
 800e834:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e838:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e83c:	b94c      	cbnz	r4, 800e852 <__pow5mult+0x66>
 800e83e:	f240 2171 	movw	r1, #625	@ 0x271
 800e842:	4638      	mov	r0, r7
 800e844:	f7ff ff14 	bl	800e670 <__i2b>
 800e848:	2300      	movs	r3, #0
 800e84a:	4604      	mov	r4, r0
 800e84c:	f8c8 0008 	str.w	r0, [r8, #8]
 800e850:	6003      	str	r3, [r0, #0]
 800e852:	f04f 0900 	mov.w	r9, #0
 800e856:	07eb      	lsls	r3, r5, #31
 800e858:	d50a      	bpl.n	800e870 <__pow5mult+0x84>
 800e85a:	4631      	mov	r1, r6
 800e85c:	4622      	mov	r2, r4
 800e85e:	4638      	mov	r0, r7
 800e860:	f7ff ff1c 	bl	800e69c <__multiply>
 800e864:	4680      	mov	r8, r0
 800e866:	4631      	mov	r1, r6
 800e868:	4638      	mov	r0, r7
 800e86a:	f7ff fe03 	bl	800e474 <_Bfree>
 800e86e:	4646      	mov	r6, r8
 800e870:	106d      	asrs	r5, r5, #1
 800e872:	d00b      	beq.n	800e88c <__pow5mult+0xa0>
 800e874:	6820      	ldr	r0, [r4, #0]
 800e876:	b938      	cbnz	r0, 800e888 <__pow5mult+0x9c>
 800e878:	4622      	mov	r2, r4
 800e87a:	4621      	mov	r1, r4
 800e87c:	4638      	mov	r0, r7
 800e87e:	f7ff ff0d 	bl	800e69c <__multiply>
 800e882:	6020      	str	r0, [r4, #0]
 800e884:	f8c0 9000 	str.w	r9, [r0]
 800e888:	4604      	mov	r4, r0
 800e88a:	e7e4      	b.n	800e856 <__pow5mult+0x6a>
 800e88c:	4630      	mov	r0, r6
 800e88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e892:	bf00      	nop
 800e894:	08010db0 	.word	0x08010db0
 800e898:	08010cd4 	.word	0x08010cd4
 800e89c:	08010d54 	.word	0x08010d54

0800e8a0 <__lshift>:
 800e8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8a4:	460c      	mov	r4, r1
 800e8a6:	4607      	mov	r7, r0
 800e8a8:	4691      	mov	r9, r2
 800e8aa:	6923      	ldr	r3, [r4, #16]
 800e8ac:	6849      	ldr	r1, [r1, #4]
 800e8ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e8b2:	68a3      	ldr	r3, [r4, #8]
 800e8b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e8b8:	f108 0601 	add.w	r6, r8, #1
 800e8bc:	42b3      	cmp	r3, r6
 800e8be:	db0b      	blt.n	800e8d8 <__lshift+0x38>
 800e8c0:	4638      	mov	r0, r7
 800e8c2:	f7ff fd97 	bl	800e3f4 <_Balloc>
 800e8c6:	4605      	mov	r5, r0
 800e8c8:	b948      	cbnz	r0, 800e8de <__lshift+0x3e>
 800e8ca:	4602      	mov	r2, r0
 800e8cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e8d0:	4b27      	ldr	r3, [pc, #156]	@ (800e970 <__lshift+0xd0>)
 800e8d2:	4828      	ldr	r0, [pc, #160]	@ (800e974 <__lshift+0xd4>)
 800e8d4:	f001 f952 	bl	800fb7c <__assert_func>
 800e8d8:	3101      	adds	r1, #1
 800e8da:	005b      	lsls	r3, r3, #1
 800e8dc:	e7ee      	b.n	800e8bc <__lshift+0x1c>
 800e8de:	2300      	movs	r3, #0
 800e8e0:	f100 0114 	add.w	r1, r0, #20
 800e8e4:	f100 0210 	add.w	r2, r0, #16
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	4553      	cmp	r3, sl
 800e8ec:	db33      	blt.n	800e956 <__lshift+0xb6>
 800e8ee:	6920      	ldr	r0, [r4, #16]
 800e8f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e8f4:	f104 0314 	add.w	r3, r4, #20
 800e8f8:	f019 091f 	ands.w	r9, r9, #31
 800e8fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e900:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e904:	d02b      	beq.n	800e95e <__lshift+0xbe>
 800e906:	468a      	mov	sl, r1
 800e908:	2200      	movs	r2, #0
 800e90a:	f1c9 0e20 	rsb	lr, r9, #32
 800e90e:	6818      	ldr	r0, [r3, #0]
 800e910:	fa00 f009 	lsl.w	r0, r0, r9
 800e914:	4310      	orrs	r0, r2
 800e916:	f84a 0b04 	str.w	r0, [sl], #4
 800e91a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e91e:	459c      	cmp	ip, r3
 800e920:	fa22 f20e 	lsr.w	r2, r2, lr
 800e924:	d8f3      	bhi.n	800e90e <__lshift+0x6e>
 800e926:	ebac 0304 	sub.w	r3, ip, r4
 800e92a:	3b15      	subs	r3, #21
 800e92c:	f023 0303 	bic.w	r3, r3, #3
 800e930:	3304      	adds	r3, #4
 800e932:	f104 0015 	add.w	r0, r4, #21
 800e936:	4584      	cmp	ip, r0
 800e938:	bf38      	it	cc
 800e93a:	2304      	movcc	r3, #4
 800e93c:	50ca      	str	r2, [r1, r3]
 800e93e:	b10a      	cbz	r2, 800e944 <__lshift+0xa4>
 800e940:	f108 0602 	add.w	r6, r8, #2
 800e944:	3e01      	subs	r6, #1
 800e946:	4638      	mov	r0, r7
 800e948:	4621      	mov	r1, r4
 800e94a:	612e      	str	r6, [r5, #16]
 800e94c:	f7ff fd92 	bl	800e474 <_Bfree>
 800e950:	4628      	mov	r0, r5
 800e952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e956:	f842 0f04 	str.w	r0, [r2, #4]!
 800e95a:	3301      	adds	r3, #1
 800e95c:	e7c5      	b.n	800e8ea <__lshift+0x4a>
 800e95e:	3904      	subs	r1, #4
 800e960:	f853 2b04 	ldr.w	r2, [r3], #4
 800e964:	459c      	cmp	ip, r3
 800e966:	f841 2f04 	str.w	r2, [r1, #4]!
 800e96a:	d8f9      	bhi.n	800e960 <__lshift+0xc0>
 800e96c:	e7ea      	b.n	800e944 <__lshift+0xa4>
 800e96e:	bf00      	nop
 800e970:	08010d43 	.word	0x08010d43
 800e974:	08010d54 	.word	0x08010d54

0800e978 <__mcmp>:
 800e978:	4603      	mov	r3, r0
 800e97a:	690a      	ldr	r2, [r1, #16]
 800e97c:	6900      	ldr	r0, [r0, #16]
 800e97e:	b530      	push	{r4, r5, lr}
 800e980:	1a80      	subs	r0, r0, r2
 800e982:	d10e      	bne.n	800e9a2 <__mcmp+0x2a>
 800e984:	3314      	adds	r3, #20
 800e986:	3114      	adds	r1, #20
 800e988:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e98c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e990:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e994:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e998:	4295      	cmp	r5, r2
 800e99a:	d003      	beq.n	800e9a4 <__mcmp+0x2c>
 800e99c:	d205      	bcs.n	800e9aa <__mcmp+0x32>
 800e99e:	f04f 30ff 	mov.w	r0, #4294967295
 800e9a2:	bd30      	pop	{r4, r5, pc}
 800e9a4:	42a3      	cmp	r3, r4
 800e9a6:	d3f3      	bcc.n	800e990 <__mcmp+0x18>
 800e9a8:	e7fb      	b.n	800e9a2 <__mcmp+0x2a>
 800e9aa:	2001      	movs	r0, #1
 800e9ac:	e7f9      	b.n	800e9a2 <__mcmp+0x2a>
	...

0800e9b0 <__mdiff>:
 800e9b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b4:	4689      	mov	r9, r1
 800e9b6:	4606      	mov	r6, r0
 800e9b8:	4611      	mov	r1, r2
 800e9ba:	4648      	mov	r0, r9
 800e9bc:	4614      	mov	r4, r2
 800e9be:	f7ff ffdb 	bl	800e978 <__mcmp>
 800e9c2:	1e05      	subs	r5, r0, #0
 800e9c4:	d112      	bne.n	800e9ec <__mdiff+0x3c>
 800e9c6:	4629      	mov	r1, r5
 800e9c8:	4630      	mov	r0, r6
 800e9ca:	f7ff fd13 	bl	800e3f4 <_Balloc>
 800e9ce:	4602      	mov	r2, r0
 800e9d0:	b928      	cbnz	r0, 800e9de <__mdiff+0x2e>
 800e9d2:	f240 2137 	movw	r1, #567	@ 0x237
 800e9d6:	4b3e      	ldr	r3, [pc, #248]	@ (800ead0 <__mdiff+0x120>)
 800e9d8:	483e      	ldr	r0, [pc, #248]	@ (800ead4 <__mdiff+0x124>)
 800e9da:	f001 f8cf 	bl	800fb7c <__assert_func>
 800e9de:	2301      	movs	r3, #1
 800e9e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e9e4:	4610      	mov	r0, r2
 800e9e6:	b003      	add	sp, #12
 800e9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ec:	bfbc      	itt	lt
 800e9ee:	464b      	movlt	r3, r9
 800e9f0:	46a1      	movlt	r9, r4
 800e9f2:	4630      	mov	r0, r6
 800e9f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e9f8:	bfba      	itte	lt
 800e9fa:	461c      	movlt	r4, r3
 800e9fc:	2501      	movlt	r5, #1
 800e9fe:	2500      	movge	r5, #0
 800ea00:	f7ff fcf8 	bl	800e3f4 <_Balloc>
 800ea04:	4602      	mov	r2, r0
 800ea06:	b918      	cbnz	r0, 800ea10 <__mdiff+0x60>
 800ea08:	f240 2145 	movw	r1, #581	@ 0x245
 800ea0c:	4b30      	ldr	r3, [pc, #192]	@ (800ead0 <__mdiff+0x120>)
 800ea0e:	e7e3      	b.n	800e9d8 <__mdiff+0x28>
 800ea10:	f100 0b14 	add.w	fp, r0, #20
 800ea14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ea18:	f109 0310 	add.w	r3, r9, #16
 800ea1c:	60c5      	str	r5, [r0, #12]
 800ea1e:	f04f 0c00 	mov.w	ip, #0
 800ea22:	f109 0514 	add.w	r5, r9, #20
 800ea26:	46d9      	mov	r9, fp
 800ea28:	6926      	ldr	r6, [r4, #16]
 800ea2a:	f104 0e14 	add.w	lr, r4, #20
 800ea2e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ea32:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ea36:	9301      	str	r3, [sp, #4]
 800ea38:	9b01      	ldr	r3, [sp, #4]
 800ea3a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ea3e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ea42:	b281      	uxth	r1, r0
 800ea44:	9301      	str	r3, [sp, #4]
 800ea46:	fa1f f38a 	uxth.w	r3, sl
 800ea4a:	1a5b      	subs	r3, r3, r1
 800ea4c:	0c00      	lsrs	r0, r0, #16
 800ea4e:	4463      	add	r3, ip
 800ea50:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ea54:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ea5e:	4576      	cmp	r6, lr
 800ea60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ea64:	f849 3b04 	str.w	r3, [r9], #4
 800ea68:	d8e6      	bhi.n	800ea38 <__mdiff+0x88>
 800ea6a:	1b33      	subs	r3, r6, r4
 800ea6c:	3b15      	subs	r3, #21
 800ea6e:	f023 0303 	bic.w	r3, r3, #3
 800ea72:	3415      	adds	r4, #21
 800ea74:	3304      	adds	r3, #4
 800ea76:	42a6      	cmp	r6, r4
 800ea78:	bf38      	it	cc
 800ea7a:	2304      	movcc	r3, #4
 800ea7c:	441d      	add	r5, r3
 800ea7e:	445b      	add	r3, fp
 800ea80:	461e      	mov	r6, r3
 800ea82:	462c      	mov	r4, r5
 800ea84:	4544      	cmp	r4, r8
 800ea86:	d30e      	bcc.n	800eaa6 <__mdiff+0xf6>
 800ea88:	f108 0103 	add.w	r1, r8, #3
 800ea8c:	1b49      	subs	r1, r1, r5
 800ea8e:	f021 0103 	bic.w	r1, r1, #3
 800ea92:	3d03      	subs	r5, #3
 800ea94:	45a8      	cmp	r8, r5
 800ea96:	bf38      	it	cc
 800ea98:	2100      	movcc	r1, #0
 800ea9a:	440b      	add	r3, r1
 800ea9c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eaa0:	b199      	cbz	r1, 800eaca <__mdiff+0x11a>
 800eaa2:	6117      	str	r7, [r2, #16]
 800eaa4:	e79e      	b.n	800e9e4 <__mdiff+0x34>
 800eaa6:	46e6      	mov	lr, ip
 800eaa8:	f854 1b04 	ldr.w	r1, [r4], #4
 800eaac:	fa1f fc81 	uxth.w	ip, r1
 800eab0:	44f4      	add	ip, lr
 800eab2:	0c08      	lsrs	r0, r1, #16
 800eab4:	4471      	add	r1, lr
 800eab6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800eaba:	b289      	uxth	r1, r1
 800eabc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800eac0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eac4:	f846 1b04 	str.w	r1, [r6], #4
 800eac8:	e7dc      	b.n	800ea84 <__mdiff+0xd4>
 800eaca:	3f01      	subs	r7, #1
 800eacc:	e7e6      	b.n	800ea9c <__mdiff+0xec>
 800eace:	bf00      	nop
 800ead0:	08010d43 	.word	0x08010d43
 800ead4:	08010d54 	.word	0x08010d54

0800ead8 <__ulp>:
 800ead8:	4b0e      	ldr	r3, [pc, #56]	@ (800eb14 <__ulp+0x3c>)
 800eada:	400b      	ands	r3, r1
 800eadc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	dc08      	bgt.n	800eaf6 <__ulp+0x1e>
 800eae4:	425b      	negs	r3, r3
 800eae6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800eaea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800eaee:	da04      	bge.n	800eafa <__ulp+0x22>
 800eaf0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800eaf4:	4113      	asrs	r3, r2
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	e008      	b.n	800eb0c <__ulp+0x34>
 800eafa:	f1a2 0314 	sub.w	r3, r2, #20
 800eafe:	2b1e      	cmp	r3, #30
 800eb00:	bfd6      	itet	le
 800eb02:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800eb06:	2201      	movgt	r2, #1
 800eb08:	40da      	lsrle	r2, r3
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	4610      	mov	r0, r2
 800eb10:	4770      	bx	lr
 800eb12:	bf00      	nop
 800eb14:	7ff00000 	.word	0x7ff00000

0800eb18 <__b2d>:
 800eb18:	6902      	ldr	r2, [r0, #16]
 800eb1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb1c:	f100 0614 	add.w	r6, r0, #20
 800eb20:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800eb24:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800eb28:	4f1e      	ldr	r7, [pc, #120]	@ (800eba4 <__b2d+0x8c>)
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	f7ff fd54 	bl	800e5d8 <__hi0bits>
 800eb30:	4603      	mov	r3, r0
 800eb32:	f1c0 0020 	rsb	r0, r0, #32
 800eb36:	2b0a      	cmp	r3, #10
 800eb38:	f1a2 0504 	sub.w	r5, r2, #4
 800eb3c:	6008      	str	r0, [r1, #0]
 800eb3e:	dc12      	bgt.n	800eb66 <__b2d+0x4e>
 800eb40:	42ae      	cmp	r6, r5
 800eb42:	bf2c      	ite	cs
 800eb44:	2200      	movcs	r2, #0
 800eb46:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800eb4a:	f1c3 0c0b 	rsb	ip, r3, #11
 800eb4e:	3315      	adds	r3, #21
 800eb50:	fa24 fe0c 	lsr.w	lr, r4, ip
 800eb54:	fa04 f303 	lsl.w	r3, r4, r3
 800eb58:	fa22 f20c 	lsr.w	r2, r2, ip
 800eb5c:	ea4e 0107 	orr.w	r1, lr, r7
 800eb60:	431a      	orrs	r2, r3
 800eb62:	4610      	mov	r0, r2
 800eb64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb66:	42ae      	cmp	r6, r5
 800eb68:	bf36      	itet	cc
 800eb6a:	f1a2 0508 	subcc.w	r5, r2, #8
 800eb6e:	2200      	movcs	r2, #0
 800eb70:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800eb74:	3b0b      	subs	r3, #11
 800eb76:	d012      	beq.n	800eb9e <__b2d+0x86>
 800eb78:	f1c3 0720 	rsb	r7, r3, #32
 800eb7c:	fa22 f107 	lsr.w	r1, r2, r7
 800eb80:	409c      	lsls	r4, r3
 800eb82:	430c      	orrs	r4, r1
 800eb84:	42b5      	cmp	r5, r6
 800eb86:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800eb8a:	bf94      	ite	ls
 800eb8c:	2400      	movls	r4, #0
 800eb8e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800eb92:	409a      	lsls	r2, r3
 800eb94:	40fc      	lsrs	r4, r7
 800eb96:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800eb9a:	4322      	orrs	r2, r4
 800eb9c:	e7e1      	b.n	800eb62 <__b2d+0x4a>
 800eb9e:	ea44 0107 	orr.w	r1, r4, r7
 800eba2:	e7de      	b.n	800eb62 <__b2d+0x4a>
 800eba4:	3ff00000 	.word	0x3ff00000

0800eba8 <__d2b>:
 800eba8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800ebac:	2101      	movs	r1, #1
 800ebae:	4690      	mov	r8, r2
 800ebb0:	4699      	mov	r9, r3
 800ebb2:	9e08      	ldr	r6, [sp, #32]
 800ebb4:	f7ff fc1e 	bl	800e3f4 <_Balloc>
 800ebb8:	4604      	mov	r4, r0
 800ebba:	b930      	cbnz	r0, 800ebca <__d2b+0x22>
 800ebbc:	4602      	mov	r2, r0
 800ebbe:	f240 310f 	movw	r1, #783	@ 0x30f
 800ebc2:	4b23      	ldr	r3, [pc, #140]	@ (800ec50 <__d2b+0xa8>)
 800ebc4:	4823      	ldr	r0, [pc, #140]	@ (800ec54 <__d2b+0xac>)
 800ebc6:	f000 ffd9 	bl	800fb7c <__assert_func>
 800ebca:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ebce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ebd2:	b10d      	cbz	r5, 800ebd8 <__d2b+0x30>
 800ebd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ebd8:	9301      	str	r3, [sp, #4]
 800ebda:	f1b8 0300 	subs.w	r3, r8, #0
 800ebde:	d024      	beq.n	800ec2a <__d2b+0x82>
 800ebe0:	4668      	mov	r0, sp
 800ebe2:	9300      	str	r3, [sp, #0]
 800ebe4:	f7ff fd17 	bl	800e616 <__lo0bits>
 800ebe8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ebec:	b1d8      	cbz	r0, 800ec26 <__d2b+0x7e>
 800ebee:	f1c0 0320 	rsb	r3, r0, #32
 800ebf2:	fa02 f303 	lsl.w	r3, r2, r3
 800ebf6:	430b      	orrs	r3, r1
 800ebf8:	40c2      	lsrs	r2, r0
 800ebfa:	6163      	str	r3, [r4, #20]
 800ebfc:	9201      	str	r2, [sp, #4]
 800ebfe:	9b01      	ldr	r3, [sp, #4]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	bf0c      	ite	eq
 800ec04:	2201      	moveq	r2, #1
 800ec06:	2202      	movne	r2, #2
 800ec08:	61a3      	str	r3, [r4, #24]
 800ec0a:	6122      	str	r2, [r4, #16]
 800ec0c:	b1ad      	cbz	r5, 800ec3a <__d2b+0x92>
 800ec0e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ec12:	4405      	add	r5, r0
 800ec14:	6035      	str	r5, [r6, #0]
 800ec16:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ec1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec1c:	6018      	str	r0, [r3, #0]
 800ec1e:	4620      	mov	r0, r4
 800ec20:	b002      	add	sp, #8
 800ec22:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800ec26:	6161      	str	r1, [r4, #20]
 800ec28:	e7e9      	b.n	800ebfe <__d2b+0x56>
 800ec2a:	a801      	add	r0, sp, #4
 800ec2c:	f7ff fcf3 	bl	800e616 <__lo0bits>
 800ec30:	9b01      	ldr	r3, [sp, #4]
 800ec32:	2201      	movs	r2, #1
 800ec34:	6163      	str	r3, [r4, #20]
 800ec36:	3020      	adds	r0, #32
 800ec38:	e7e7      	b.n	800ec0a <__d2b+0x62>
 800ec3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ec3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ec42:	6030      	str	r0, [r6, #0]
 800ec44:	6918      	ldr	r0, [r3, #16]
 800ec46:	f7ff fcc7 	bl	800e5d8 <__hi0bits>
 800ec4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ec4e:	e7e4      	b.n	800ec1a <__d2b+0x72>
 800ec50:	08010d43 	.word	0x08010d43
 800ec54:	08010d54 	.word	0x08010d54

0800ec58 <__ratio>:
 800ec58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec5c:	b085      	sub	sp, #20
 800ec5e:	e9cd 1000 	strd	r1, r0, [sp]
 800ec62:	a902      	add	r1, sp, #8
 800ec64:	f7ff ff58 	bl	800eb18 <__b2d>
 800ec68:	468b      	mov	fp, r1
 800ec6a:	4606      	mov	r6, r0
 800ec6c:	460f      	mov	r7, r1
 800ec6e:	9800      	ldr	r0, [sp, #0]
 800ec70:	a903      	add	r1, sp, #12
 800ec72:	f7ff ff51 	bl	800eb18 <__b2d>
 800ec76:	460d      	mov	r5, r1
 800ec78:	9b01      	ldr	r3, [sp, #4]
 800ec7a:	4689      	mov	r9, r1
 800ec7c:	6919      	ldr	r1, [r3, #16]
 800ec7e:	9b00      	ldr	r3, [sp, #0]
 800ec80:	4604      	mov	r4, r0
 800ec82:	691b      	ldr	r3, [r3, #16]
 800ec84:	4630      	mov	r0, r6
 800ec86:	1ac9      	subs	r1, r1, r3
 800ec88:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ec8c:	1a9b      	subs	r3, r3, r2
 800ec8e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	bfcd      	iteet	gt
 800ec96:	463a      	movgt	r2, r7
 800ec98:	462a      	movle	r2, r5
 800ec9a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ec9e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800eca2:	bfd8      	it	le
 800eca4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800eca8:	464b      	mov	r3, r9
 800ecaa:	4622      	mov	r2, r4
 800ecac:	4659      	mov	r1, fp
 800ecae:	f7f1 ffd9 	bl	8000c64 <__aeabi_ddiv>
 800ecb2:	b005      	add	sp, #20
 800ecb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ecb8 <_mprec_log10>:
 800ecb8:	2817      	cmp	r0, #23
 800ecba:	b5d0      	push	{r4, r6, r7, lr}
 800ecbc:	4604      	mov	r4, r0
 800ecbe:	dc05      	bgt.n	800eccc <_mprec_log10+0x14>
 800ecc0:	4b08      	ldr	r3, [pc, #32]	@ (800ece4 <_mprec_log10+0x2c>)
 800ecc2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800ecc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ecca:	bdd0      	pop	{r4, r6, r7, pc}
 800eccc:	2000      	movs	r0, #0
 800ecce:	2600      	movs	r6, #0
 800ecd0:	4905      	ldr	r1, [pc, #20]	@ (800ece8 <_mprec_log10+0x30>)
 800ecd2:	4f06      	ldr	r7, [pc, #24]	@ (800ecec <_mprec_log10+0x34>)
 800ecd4:	4632      	mov	r2, r6
 800ecd6:	463b      	mov	r3, r7
 800ecd8:	f7f1 fe9a 	bl	8000a10 <__aeabi_dmul>
 800ecdc:	3c01      	subs	r4, #1
 800ecde:	d1f9      	bne.n	800ecd4 <_mprec_log10+0x1c>
 800ece0:	e7f3      	b.n	800ecca <_mprec_log10+0x12>
 800ece2:	bf00      	nop
 800ece4:	08010e10 	.word	0x08010e10
 800ece8:	3ff00000 	.word	0x3ff00000
 800ecec:	40240000 	.word	0x40240000

0800ecf0 <__copybits>:
 800ecf0:	3901      	subs	r1, #1
 800ecf2:	b570      	push	{r4, r5, r6, lr}
 800ecf4:	1149      	asrs	r1, r1, #5
 800ecf6:	6914      	ldr	r4, [r2, #16]
 800ecf8:	3101      	adds	r1, #1
 800ecfa:	f102 0314 	add.w	r3, r2, #20
 800ecfe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ed02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ed06:	1f05      	subs	r5, r0, #4
 800ed08:	42a3      	cmp	r3, r4
 800ed0a:	d30c      	bcc.n	800ed26 <__copybits+0x36>
 800ed0c:	1aa3      	subs	r3, r4, r2
 800ed0e:	3b11      	subs	r3, #17
 800ed10:	f023 0303 	bic.w	r3, r3, #3
 800ed14:	3211      	adds	r2, #17
 800ed16:	42a2      	cmp	r2, r4
 800ed18:	bf88      	it	hi
 800ed1a:	2300      	movhi	r3, #0
 800ed1c:	4418      	add	r0, r3
 800ed1e:	2300      	movs	r3, #0
 800ed20:	4288      	cmp	r0, r1
 800ed22:	d305      	bcc.n	800ed30 <__copybits+0x40>
 800ed24:	bd70      	pop	{r4, r5, r6, pc}
 800ed26:	f853 6b04 	ldr.w	r6, [r3], #4
 800ed2a:	f845 6f04 	str.w	r6, [r5, #4]!
 800ed2e:	e7eb      	b.n	800ed08 <__copybits+0x18>
 800ed30:	f840 3b04 	str.w	r3, [r0], #4
 800ed34:	e7f4      	b.n	800ed20 <__copybits+0x30>

0800ed36 <__any_on>:
 800ed36:	f100 0214 	add.w	r2, r0, #20
 800ed3a:	6900      	ldr	r0, [r0, #16]
 800ed3c:	114b      	asrs	r3, r1, #5
 800ed3e:	4298      	cmp	r0, r3
 800ed40:	b510      	push	{r4, lr}
 800ed42:	db11      	blt.n	800ed68 <__any_on+0x32>
 800ed44:	dd0a      	ble.n	800ed5c <__any_on+0x26>
 800ed46:	f011 011f 	ands.w	r1, r1, #31
 800ed4a:	d007      	beq.n	800ed5c <__any_on+0x26>
 800ed4c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ed50:	fa24 f001 	lsr.w	r0, r4, r1
 800ed54:	fa00 f101 	lsl.w	r1, r0, r1
 800ed58:	428c      	cmp	r4, r1
 800ed5a:	d10b      	bne.n	800ed74 <__any_on+0x3e>
 800ed5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed60:	4293      	cmp	r3, r2
 800ed62:	d803      	bhi.n	800ed6c <__any_on+0x36>
 800ed64:	2000      	movs	r0, #0
 800ed66:	bd10      	pop	{r4, pc}
 800ed68:	4603      	mov	r3, r0
 800ed6a:	e7f7      	b.n	800ed5c <__any_on+0x26>
 800ed6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ed70:	2900      	cmp	r1, #0
 800ed72:	d0f5      	beq.n	800ed60 <__any_on+0x2a>
 800ed74:	2001      	movs	r0, #1
 800ed76:	e7f6      	b.n	800ed66 <__any_on+0x30>

0800ed78 <__ssputs_r>:
 800ed78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed7c:	461f      	mov	r7, r3
 800ed7e:	688e      	ldr	r6, [r1, #8]
 800ed80:	4682      	mov	sl, r0
 800ed82:	42be      	cmp	r6, r7
 800ed84:	460c      	mov	r4, r1
 800ed86:	4690      	mov	r8, r2
 800ed88:	680b      	ldr	r3, [r1, #0]
 800ed8a:	d82d      	bhi.n	800ede8 <__ssputs_r+0x70>
 800ed8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ed94:	d026      	beq.n	800ede4 <__ssputs_r+0x6c>
 800ed96:	6965      	ldr	r5, [r4, #20]
 800ed98:	6909      	ldr	r1, [r1, #16]
 800ed9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed9e:	eba3 0901 	sub.w	r9, r3, r1
 800eda2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eda6:	1c7b      	adds	r3, r7, #1
 800eda8:	444b      	add	r3, r9
 800edaa:	106d      	asrs	r5, r5, #1
 800edac:	429d      	cmp	r5, r3
 800edae:	bf38      	it	cc
 800edb0:	461d      	movcc	r5, r3
 800edb2:	0553      	lsls	r3, r2, #21
 800edb4:	d527      	bpl.n	800ee06 <__ssputs_r+0x8e>
 800edb6:	4629      	mov	r1, r5
 800edb8:	f7ff fa90 	bl	800e2dc <_malloc_r>
 800edbc:	4606      	mov	r6, r0
 800edbe:	b360      	cbz	r0, 800ee1a <__ssputs_r+0xa2>
 800edc0:	464a      	mov	r2, r9
 800edc2:	6921      	ldr	r1, [r4, #16]
 800edc4:	f000 fecc 	bl	800fb60 <memcpy>
 800edc8:	89a3      	ldrh	r3, [r4, #12]
 800edca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800edce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edd2:	81a3      	strh	r3, [r4, #12]
 800edd4:	6126      	str	r6, [r4, #16]
 800edd6:	444e      	add	r6, r9
 800edd8:	6026      	str	r6, [r4, #0]
 800edda:	463e      	mov	r6, r7
 800eddc:	6165      	str	r5, [r4, #20]
 800edde:	eba5 0509 	sub.w	r5, r5, r9
 800ede2:	60a5      	str	r5, [r4, #8]
 800ede4:	42be      	cmp	r6, r7
 800ede6:	d900      	bls.n	800edea <__ssputs_r+0x72>
 800ede8:	463e      	mov	r6, r7
 800edea:	4632      	mov	r2, r6
 800edec:	4641      	mov	r1, r8
 800edee:	6820      	ldr	r0, [r4, #0]
 800edf0:	f000 fe60 	bl	800fab4 <memmove>
 800edf4:	2000      	movs	r0, #0
 800edf6:	68a3      	ldr	r3, [r4, #8]
 800edf8:	1b9b      	subs	r3, r3, r6
 800edfa:	60a3      	str	r3, [r4, #8]
 800edfc:	6823      	ldr	r3, [r4, #0]
 800edfe:	4433      	add	r3, r6
 800ee00:	6023      	str	r3, [r4, #0]
 800ee02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee06:	462a      	mov	r2, r5
 800ee08:	f000 ff0c 	bl	800fc24 <_realloc_r>
 800ee0c:	4606      	mov	r6, r0
 800ee0e:	2800      	cmp	r0, #0
 800ee10:	d1e0      	bne.n	800edd4 <__ssputs_r+0x5c>
 800ee12:	4650      	mov	r0, sl
 800ee14:	6921      	ldr	r1, [r4, #16]
 800ee16:	f7ff f9e7 	bl	800e1e8 <_free_r>
 800ee1a:	230c      	movs	r3, #12
 800ee1c:	f8ca 3000 	str.w	r3, [sl]
 800ee20:	89a3      	ldrh	r3, [r4, #12]
 800ee22:	f04f 30ff 	mov.w	r0, #4294967295
 800ee26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee2a:	81a3      	strh	r3, [r4, #12]
 800ee2c:	e7e9      	b.n	800ee02 <__ssputs_r+0x8a>

0800ee2e <__ssprint_r>:
 800ee2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee32:	6893      	ldr	r3, [r2, #8]
 800ee34:	460c      	mov	r4, r1
 800ee36:	4617      	mov	r7, r2
 800ee38:	f8d2 b000 	ldr.w	fp, [r2]
 800ee3c:	9001      	str	r0, [sp, #4]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d157      	bne.n	800eef2 <__ssprint_r+0xc4>
 800ee42:	2000      	movs	r0, #0
 800ee44:	2300      	movs	r3, #0
 800ee46:	607b      	str	r3, [r7, #4]
 800ee48:	b003      	add	sp, #12
 800ee4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee4e:	e9db a800 	ldrd	sl, r8, [fp]
 800ee52:	f10b 0b08 	add.w	fp, fp, #8
 800ee56:	68a6      	ldr	r6, [r4, #8]
 800ee58:	6820      	ldr	r0, [r4, #0]
 800ee5a:	f1b8 0f00 	cmp.w	r8, #0
 800ee5e:	d0f6      	beq.n	800ee4e <__ssprint_r+0x20>
 800ee60:	45b0      	cmp	r8, r6
 800ee62:	d32e      	bcc.n	800eec2 <__ssprint_r+0x94>
 800ee64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ee6c:	d029      	beq.n	800eec2 <__ssprint_r+0x94>
 800ee6e:	6921      	ldr	r1, [r4, #16]
 800ee70:	6965      	ldr	r5, [r4, #20]
 800ee72:	eba0 0901 	sub.w	r9, r0, r1
 800ee76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee7e:	f109 0001 	add.w	r0, r9, #1
 800ee82:	106d      	asrs	r5, r5, #1
 800ee84:	4440      	add	r0, r8
 800ee86:	4285      	cmp	r5, r0
 800ee88:	bf38      	it	cc
 800ee8a:	4605      	movcc	r5, r0
 800ee8c:	0553      	lsls	r3, r2, #21
 800ee8e:	d534      	bpl.n	800eefa <__ssprint_r+0xcc>
 800ee90:	4629      	mov	r1, r5
 800ee92:	9801      	ldr	r0, [sp, #4]
 800ee94:	f7ff fa22 	bl	800e2dc <_malloc_r>
 800ee98:	4606      	mov	r6, r0
 800ee9a:	2800      	cmp	r0, #0
 800ee9c:	d038      	beq.n	800ef10 <__ssprint_r+0xe2>
 800ee9e:	464a      	mov	r2, r9
 800eea0:	6921      	ldr	r1, [r4, #16]
 800eea2:	f000 fe5d 	bl	800fb60 <memcpy>
 800eea6:	89a2      	ldrh	r2, [r4, #12]
 800eea8:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800eeac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800eeb0:	81a2      	strh	r2, [r4, #12]
 800eeb2:	6126      	str	r6, [r4, #16]
 800eeb4:	444e      	add	r6, r9
 800eeb6:	6026      	str	r6, [r4, #0]
 800eeb8:	4646      	mov	r6, r8
 800eeba:	6165      	str	r5, [r4, #20]
 800eebc:	eba5 0509 	sub.w	r5, r5, r9
 800eec0:	60a5      	str	r5, [r4, #8]
 800eec2:	4546      	cmp	r6, r8
 800eec4:	bf28      	it	cs
 800eec6:	4646      	movcs	r6, r8
 800eec8:	4651      	mov	r1, sl
 800eeca:	4632      	mov	r2, r6
 800eecc:	6820      	ldr	r0, [r4, #0]
 800eece:	f000 fdf1 	bl	800fab4 <memmove>
 800eed2:	68a2      	ldr	r2, [r4, #8]
 800eed4:	44c2      	add	sl, r8
 800eed6:	1b92      	subs	r2, r2, r6
 800eed8:	60a2      	str	r2, [r4, #8]
 800eeda:	6822      	ldr	r2, [r4, #0]
 800eedc:	4432      	add	r2, r6
 800eede:	6022      	str	r2, [r4, #0]
 800eee0:	68ba      	ldr	r2, [r7, #8]
 800eee2:	eba2 0308 	sub.w	r3, r2, r8
 800eee6:	60bb      	str	r3, [r7, #8]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d0aa      	beq.n	800ee42 <__ssprint_r+0x14>
 800eeec:	f04f 0800 	mov.w	r8, #0
 800eef0:	e7b1      	b.n	800ee56 <__ssprint_r+0x28>
 800eef2:	f04f 0a00 	mov.w	sl, #0
 800eef6:	46d0      	mov	r8, sl
 800eef8:	e7ad      	b.n	800ee56 <__ssprint_r+0x28>
 800eefa:	462a      	mov	r2, r5
 800eefc:	9801      	ldr	r0, [sp, #4]
 800eefe:	f000 fe91 	bl	800fc24 <_realloc_r>
 800ef02:	4606      	mov	r6, r0
 800ef04:	2800      	cmp	r0, #0
 800ef06:	d1d4      	bne.n	800eeb2 <__ssprint_r+0x84>
 800ef08:	6921      	ldr	r1, [r4, #16]
 800ef0a:	9801      	ldr	r0, [sp, #4]
 800ef0c:	f7ff f96c 	bl	800e1e8 <_free_r>
 800ef10:	230c      	movs	r3, #12
 800ef12:	9a01      	ldr	r2, [sp, #4]
 800ef14:	f04f 30ff 	mov.w	r0, #4294967295
 800ef18:	6013      	str	r3, [r2, #0]
 800ef1a:	89a3      	ldrh	r3, [r4, #12]
 800ef1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef20:	81a3      	strh	r3, [r4, #12]
 800ef22:	2300      	movs	r3, #0
 800ef24:	60bb      	str	r3, [r7, #8]
 800ef26:	e78d      	b.n	800ee44 <__ssprint_r+0x16>

0800ef28 <_svfiprintf_r>:
 800ef28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef2c:	4698      	mov	r8, r3
 800ef2e:	898b      	ldrh	r3, [r1, #12]
 800ef30:	4607      	mov	r7, r0
 800ef32:	061b      	lsls	r3, r3, #24
 800ef34:	460d      	mov	r5, r1
 800ef36:	4614      	mov	r4, r2
 800ef38:	b09d      	sub	sp, #116	@ 0x74
 800ef3a:	d510      	bpl.n	800ef5e <_svfiprintf_r+0x36>
 800ef3c:	690b      	ldr	r3, [r1, #16]
 800ef3e:	b973      	cbnz	r3, 800ef5e <_svfiprintf_r+0x36>
 800ef40:	2140      	movs	r1, #64	@ 0x40
 800ef42:	f7ff f9cb 	bl	800e2dc <_malloc_r>
 800ef46:	6028      	str	r0, [r5, #0]
 800ef48:	6128      	str	r0, [r5, #16]
 800ef4a:	b930      	cbnz	r0, 800ef5a <_svfiprintf_r+0x32>
 800ef4c:	230c      	movs	r3, #12
 800ef4e:	603b      	str	r3, [r7, #0]
 800ef50:	f04f 30ff 	mov.w	r0, #4294967295
 800ef54:	b01d      	add	sp, #116	@ 0x74
 800ef56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef5a:	2340      	movs	r3, #64	@ 0x40
 800ef5c:	616b      	str	r3, [r5, #20]
 800ef5e:	2300      	movs	r3, #0
 800ef60:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef62:	2320      	movs	r3, #32
 800ef64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef68:	2330      	movs	r3, #48	@ 0x30
 800ef6a:	f04f 0901 	mov.w	r9, #1
 800ef6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef72:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800f10c <_svfiprintf_r+0x1e4>
 800ef76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ef7a:	4623      	mov	r3, r4
 800ef7c:	469a      	mov	sl, r3
 800ef7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef82:	b10a      	cbz	r2, 800ef88 <_svfiprintf_r+0x60>
 800ef84:	2a25      	cmp	r2, #37	@ 0x25
 800ef86:	d1f9      	bne.n	800ef7c <_svfiprintf_r+0x54>
 800ef88:	ebba 0b04 	subs.w	fp, sl, r4
 800ef8c:	d00b      	beq.n	800efa6 <_svfiprintf_r+0x7e>
 800ef8e:	465b      	mov	r3, fp
 800ef90:	4622      	mov	r2, r4
 800ef92:	4629      	mov	r1, r5
 800ef94:	4638      	mov	r0, r7
 800ef96:	f7ff feef 	bl	800ed78 <__ssputs_r>
 800ef9a:	3001      	adds	r0, #1
 800ef9c:	f000 80a7 	beq.w	800f0ee <_svfiprintf_r+0x1c6>
 800efa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800efa2:	445a      	add	r2, fp
 800efa4:	9209      	str	r2, [sp, #36]	@ 0x24
 800efa6:	f89a 3000 	ldrb.w	r3, [sl]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	f000 809f 	beq.w	800f0ee <_svfiprintf_r+0x1c6>
 800efb0:	2300      	movs	r3, #0
 800efb2:	f04f 32ff 	mov.w	r2, #4294967295
 800efb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efba:	f10a 0a01 	add.w	sl, sl, #1
 800efbe:	9304      	str	r3, [sp, #16]
 800efc0:	9307      	str	r3, [sp, #28]
 800efc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800efc6:	931a      	str	r3, [sp, #104]	@ 0x68
 800efc8:	4654      	mov	r4, sl
 800efca:	2205      	movs	r2, #5
 800efcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efd0:	484e      	ldr	r0, [pc, #312]	@ (800f10c <_svfiprintf_r+0x1e4>)
 800efd2:	f7fe faab 	bl	800d52c <memchr>
 800efd6:	9a04      	ldr	r2, [sp, #16]
 800efd8:	b9d8      	cbnz	r0, 800f012 <_svfiprintf_r+0xea>
 800efda:	06d0      	lsls	r0, r2, #27
 800efdc:	bf44      	itt	mi
 800efde:	2320      	movmi	r3, #32
 800efe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efe4:	0711      	lsls	r1, r2, #28
 800efe6:	bf44      	itt	mi
 800efe8:	232b      	movmi	r3, #43	@ 0x2b
 800efea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efee:	f89a 3000 	ldrb.w	r3, [sl]
 800eff2:	2b2a      	cmp	r3, #42	@ 0x2a
 800eff4:	d015      	beq.n	800f022 <_svfiprintf_r+0xfa>
 800eff6:	4654      	mov	r4, sl
 800eff8:	2000      	movs	r0, #0
 800effa:	f04f 0c0a 	mov.w	ip, #10
 800effe:	9a07      	ldr	r2, [sp, #28]
 800f000:	4621      	mov	r1, r4
 800f002:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f006:	3b30      	subs	r3, #48	@ 0x30
 800f008:	2b09      	cmp	r3, #9
 800f00a:	d94b      	bls.n	800f0a4 <_svfiprintf_r+0x17c>
 800f00c:	b1b0      	cbz	r0, 800f03c <_svfiprintf_r+0x114>
 800f00e:	9207      	str	r2, [sp, #28]
 800f010:	e014      	b.n	800f03c <_svfiprintf_r+0x114>
 800f012:	eba0 0308 	sub.w	r3, r0, r8
 800f016:	fa09 f303 	lsl.w	r3, r9, r3
 800f01a:	4313      	orrs	r3, r2
 800f01c:	46a2      	mov	sl, r4
 800f01e:	9304      	str	r3, [sp, #16]
 800f020:	e7d2      	b.n	800efc8 <_svfiprintf_r+0xa0>
 800f022:	9b03      	ldr	r3, [sp, #12]
 800f024:	1d19      	adds	r1, r3, #4
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	9103      	str	r1, [sp, #12]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	bfbb      	ittet	lt
 800f02e:	425b      	neglt	r3, r3
 800f030:	f042 0202 	orrlt.w	r2, r2, #2
 800f034:	9307      	strge	r3, [sp, #28]
 800f036:	9307      	strlt	r3, [sp, #28]
 800f038:	bfb8      	it	lt
 800f03a:	9204      	strlt	r2, [sp, #16]
 800f03c:	7823      	ldrb	r3, [r4, #0]
 800f03e:	2b2e      	cmp	r3, #46	@ 0x2e
 800f040:	d10a      	bne.n	800f058 <_svfiprintf_r+0x130>
 800f042:	7863      	ldrb	r3, [r4, #1]
 800f044:	2b2a      	cmp	r3, #42	@ 0x2a
 800f046:	d132      	bne.n	800f0ae <_svfiprintf_r+0x186>
 800f048:	9b03      	ldr	r3, [sp, #12]
 800f04a:	3402      	adds	r4, #2
 800f04c:	1d1a      	adds	r2, r3, #4
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	9203      	str	r2, [sp, #12]
 800f052:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f056:	9305      	str	r3, [sp, #20]
 800f058:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800f110 <_svfiprintf_r+0x1e8>
 800f05c:	2203      	movs	r2, #3
 800f05e:	4650      	mov	r0, sl
 800f060:	7821      	ldrb	r1, [r4, #0]
 800f062:	f7fe fa63 	bl	800d52c <memchr>
 800f066:	b138      	cbz	r0, 800f078 <_svfiprintf_r+0x150>
 800f068:	2240      	movs	r2, #64	@ 0x40
 800f06a:	9b04      	ldr	r3, [sp, #16]
 800f06c:	eba0 000a 	sub.w	r0, r0, sl
 800f070:	4082      	lsls	r2, r0
 800f072:	4313      	orrs	r3, r2
 800f074:	3401      	adds	r4, #1
 800f076:	9304      	str	r3, [sp, #16]
 800f078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f07c:	2206      	movs	r2, #6
 800f07e:	4825      	ldr	r0, [pc, #148]	@ (800f114 <_svfiprintf_r+0x1ec>)
 800f080:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f084:	f7fe fa52 	bl	800d52c <memchr>
 800f088:	2800      	cmp	r0, #0
 800f08a:	d036      	beq.n	800f0fa <_svfiprintf_r+0x1d2>
 800f08c:	4b22      	ldr	r3, [pc, #136]	@ (800f118 <_svfiprintf_r+0x1f0>)
 800f08e:	bb1b      	cbnz	r3, 800f0d8 <_svfiprintf_r+0x1b0>
 800f090:	9b03      	ldr	r3, [sp, #12]
 800f092:	3307      	adds	r3, #7
 800f094:	f023 0307 	bic.w	r3, r3, #7
 800f098:	3308      	adds	r3, #8
 800f09a:	9303      	str	r3, [sp, #12]
 800f09c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f09e:	4433      	add	r3, r6
 800f0a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0a2:	e76a      	b.n	800ef7a <_svfiprintf_r+0x52>
 800f0a4:	460c      	mov	r4, r1
 800f0a6:	2001      	movs	r0, #1
 800f0a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0ac:	e7a8      	b.n	800f000 <_svfiprintf_r+0xd8>
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	f04f 0c0a 	mov.w	ip, #10
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	3401      	adds	r4, #1
 800f0b8:	9305      	str	r3, [sp, #20]
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0c0:	3a30      	subs	r2, #48	@ 0x30
 800f0c2:	2a09      	cmp	r2, #9
 800f0c4:	d903      	bls.n	800f0ce <_svfiprintf_r+0x1a6>
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d0c6      	beq.n	800f058 <_svfiprintf_r+0x130>
 800f0ca:	9105      	str	r1, [sp, #20]
 800f0cc:	e7c4      	b.n	800f058 <_svfiprintf_r+0x130>
 800f0ce:	4604      	mov	r4, r0
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0d6:	e7f0      	b.n	800f0ba <_svfiprintf_r+0x192>
 800f0d8:	ab03      	add	r3, sp, #12
 800f0da:	9300      	str	r3, [sp, #0]
 800f0dc:	462a      	mov	r2, r5
 800f0de:	4638      	mov	r0, r7
 800f0e0:	4b0e      	ldr	r3, [pc, #56]	@ (800f11c <_svfiprintf_r+0x1f4>)
 800f0e2:	a904      	add	r1, sp, #16
 800f0e4:	f7fd fb02 	bl	800c6ec <_printf_float>
 800f0e8:	1c42      	adds	r2, r0, #1
 800f0ea:	4606      	mov	r6, r0
 800f0ec:	d1d6      	bne.n	800f09c <_svfiprintf_r+0x174>
 800f0ee:	89ab      	ldrh	r3, [r5, #12]
 800f0f0:	065b      	lsls	r3, r3, #25
 800f0f2:	f53f af2d 	bmi.w	800ef50 <_svfiprintf_r+0x28>
 800f0f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f0f8:	e72c      	b.n	800ef54 <_svfiprintf_r+0x2c>
 800f0fa:	ab03      	add	r3, sp, #12
 800f0fc:	9300      	str	r3, [sp, #0]
 800f0fe:	462a      	mov	r2, r5
 800f100:	4638      	mov	r0, r7
 800f102:	4b06      	ldr	r3, [pc, #24]	@ (800f11c <_svfiprintf_r+0x1f4>)
 800f104:	a904      	add	r1, sp, #16
 800f106:	f7fd fd8f 	bl	800cc28 <_printf_i>
 800f10a:	e7ed      	b.n	800f0e8 <_svfiprintf_r+0x1c0>
 800f10c:	08010ed8 	.word	0x08010ed8
 800f110:	08010ede 	.word	0x08010ede
 800f114:	08010ee2 	.word	0x08010ee2
 800f118:	0800c6ed 	.word	0x0800c6ed
 800f11c:	0800ed79 	.word	0x0800ed79

0800f120 <_sungetc_r>:
 800f120:	b538      	push	{r3, r4, r5, lr}
 800f122:	1c4b      	adds	r3, r1, #1
 800f124:	4614      	mov	r4, r2
 800f126:	d103      	bne.n	800f130 <_sungetc_r+0x10>
 800f128:	f04f 35ff 	mov.w	r5, #4294967295
 800f12c:	4628      	mov	r0, r5
 800f12e:	bd38      	pop	{r3, r4, r5, pc}
 800f130:	8993      	ldrh	r3, [r2, #12]
 800f132:	b2cd      	uxtb	r5, r1
 800f134:	f023 0320 	bic.w	r3, r3, #32
 800f138:	8193      	strh	r3, [r2, #12]
 800f13a:	6853      	ldr	r3, [r2, #4]
 800f13c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800f13e:	b18a      	cbz	r2, 800f164 <_sungetc_r+0x44>
 800f140:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800f142:	429a      	cmp	r2, r3
 800f144:	dd08      	ble.n	800f158 <_sungetc_r+0x38>
 800f146:	6823      	ldr	r3, [r4, #0]
 800f148:	1e5a      	subs	r2, r3, #1
 800f14a:	6022      	str	r2, [r4, #0]
 800f14c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f150:	6863      	ldr	r3, [r4, #4]
 800f152:	3301      	adds	r3, #1
 800f154:	6063      	str	r3, [r4, #4]
 800f156:	e7e9      	b.n	800f12c <_sungetc_r+0xc>
 800f158:	4621      	mov	r1, r4
 800f15a:	f000 fbec 	bl	800f936 <__submore>
 800f15e:	2800      	cmp	r0, #0
 800f160:	d0f1      	beq.n	800f146 <_sungetc_r+0x26>
 800f162:	e7e1      	b.n	800f128 <_sungetc_r+0x8>
 800f164:	6921      	ldr	r1, [r4, #16]
 800f166:	6822      	ldr	r2, [r4, #0]
 800f168:	b141      	cbz	r1, 800f17c <_sungetc_r+0x5c>
 800f16a:	4291      	cmp	r1, r2
 800f16c:	d206      	bcs.n	800f17c <_sungetc_r+0x5c>
 800f16e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800f172:	42a9      	cmp	r1, r5
 800f174:	d102      	bne.n	800f17c <_sungetc_r+0x5c>
 800f176:	3a01      	subs	r2, #1
 800f178:	6022      	str	r2, [r4, #0]
 800f17a:	e7ea      	b.n	800f152 <_sungetc_r+0x32>
 800f17c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800f180:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f184:	6363      	str	r3, [r4, #52]	@ 0x34
 800f186:	2303      	movs	r3, #3
 800f188:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f18a:	4623      	mov	r3, r4
 800f18c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f190:	6023      	str	r3, [r4, #0]
 800f192:	2301      	movs	r3, #1
 800f194:	e7de      	b.n	800f154 <_sungetc_r+0x34>

0800f196 <__ssrefill_r>:
 800f196:	b510      	push	{r4, lr}
 800f198:	460c      	mov	r4, r1
 800f19a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f19c:	b169      	cbz	r1, 800f1ba <__ssrefill_r+0x24>
 800f19e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f1a2:	4299      	cmp	r1, r3
 800f1a4:	d001      	beq.n	800f1aa <__ssrefill_r+0x14>
 800f1a6:	f7ff f81f 	bl	800e1e8 <_free_r>
 800f1aa:	2000      	movs	r0, #0
 800f1ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f1ae:	6360      	str	r0, [r4, #52]	@ 0x34
 800f1b0:	6063      	str	r3, [r4, #4]
 800f1b2:	b113      	cbz	r3, 800f1ba <__ssrefill_r+0x24>
 800f1b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f1b6:	6023      	str	r3, [r4, #0]
 800f1b8:	bd10      	pop	{r4, pc}
 800f1ba:	6923      	ldr	r3, [r4, #16]
 800f1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f1c0:	6023      	str	r3, [r4, #0]
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	6063      	str	r3, [r4, #4]
 800f1c6:	89a3      	ldrh	r3, [r4, #12]
 800f1c8:	f043 0320 	orr.w	r3, r3, #32
 800f1cc:	81a3      	strh	r3, [r4, #12]
 800f1ce:	e7f3      	b.n	800f1b8 <__ssrefill_r+0x22>

0800f1d0 <__ssvfiscanf_r>:
 800f1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1d4:	460c      	mov	r4, r1
 800f1d6:	2100      	movs	r1, #0
 800f1d8:	4606      	mov	r6, r0
 800f1da:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800f1de:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800f1e2:	49aa      	ldr	r1, [pc, #680]	@ (800f48c <__ssvfiscanf_r+0x2bc>)
 800f1e4:	f10d 0804 	add.w	r8, sp, #4
 800f1e8:	91a0      	str	r1, [sp, #640]	@ 0x280
 800f1ea:	49a9      	ldr	r1, [pc, #676]	@ (800f490 <__ssvfiscanf_r+0x2c0>)
 800f1ec:	4fa9      	ldr	r7, [pc, #676]	@ (800f494 <__ssvfiscanf_r+0x2c4>)
 800f1ee:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800f1f2:	91a1      	str	r1, [sp, #644]	@ 0x284
 800f1f4:	9300      	str	r3, [sp, #0]
 800f1f6:	7813      	ldrb	r3, [r2, #0]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	f000 8159 	beq.w	800f4b0 <__ssvfiscanf_r+0x2e0>
 800f1fe:	5cf9      	ldrb	r1, [r7, r3]
 800f200:	1c55      	adds	r5, r2, #1
 800f202:	f011 0108 	ands.w	r1, r1, #8
 800f206:	d019      	beq.n	800f23c <__ssvfiscanf_r+0x6c>
 800f208:	6863      	ldr	r3, [r4, #4]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	dd0f      	ble.n	800f22e <__ssvfiscanf_r+0x5e>
 800f20e:	6823      	ldr	r3, [r4, #0]
 800f210:	781a      	ldrb	r2, [r3, #0]
 800f212:	5cba      	ldrb	r2, [r7, r2]
 800f214:	0712      	lsls	r2, r2, #28
 800f216:	d401      	bmi.n	800f21c <__ssvfiscanf_r+0x4c>
 800f218:	462a      	mov	r2, r5
 800f21a:	e7ec      	b.n	800f1f6 <__ssvfiscanf_r+0x26>
 800f21c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f21e:	3301      	adds	r3, #1
 800f220:	3201      	adds	r2, #1
 800f222:	9245      	str	r2, [sp, #276]	@ 0x114
 800f224:	6862      	ldr	r2, [r4, #4]
 800f226:	6023      	str	r3, [r4, #0]
 800f228:	3a01      	subs	r2, #1
 800f22a:	6062      	str	r2, [r4, #4]
 800f22c:	e7ec      	b.n	800f208 <__ssvfiscanf_r+0x38>
 800f22e:	4621      	mov	r1, r4
 800f230:	4630      	mov	r0, r6
 800f232:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f234:	4798      	blx	r3
 800f236:	2800      	cmp	r0, #0
 800f238:	d0e9      	beq.n	800f20e <__ssvfiscanf_r+0x3e>
 800f23a:	e7ed      	b.n	800f218 <__ssvfiscanf_r+0x48>
 800f23c:	2b25      	cmp	r3, #37	@ 0x25
 800f23e:	d012      	beq.n	800f266 <__ssvfiscanf_r+0x96>
 800f240:	4699      	mov	r9, r3
 800f242:	6863      	ldr	r3, [r4, #4]
 800f244:	2b00      	cmp	r3, #0
 800f246:	f340 8094 	ble.w	800f372 <__ssvfiscanf_r+0x1a2>
 800f24a:	6822      	ldr	r2, [r4, #0]
 800f24c:	7813      	ldrb	r3, [r2, #0]
 800f24e:	454b      	cmp	r3, r9
 800f250:	f040 812e 	bne.w	800f4b0 <__ssvfiscanf_r+0x2e0>
 800f254:	6863      	ldr	r3, [r4, #4]
 800f256:	3201      	adds	r2, #1
 800f258:	3b01      	subs	r3, #1
 800f25a:	6063      	str	r3, [r4, #4]
 800f25c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800f25e:	6022      	str	r2, [r4, #0]
 800f260:	3301      	adds	r3, #1
 800f262:	9345      	str	r3, [sp, #276]	@ 0x114
 800f264:	e7d8      	b.n	800f218 <__ssvfiscanf_r+0x48>
 800f266:	9141      	str	r1, [sp, #260]	@ 0x104
 800f268:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f26a:	7853      	ldrb	r3, [r2, #1]
 800f26c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f26e:	bf04      	itt	eq
 800f270:	2310      	moveq	r3, #16
 800f272:	1c95      	addeq	r5, r2, #2
 800f274:	f04f 020a 	mov.w	r2, #10
 800f278:	bf08      	it	eq
 800f27a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800f27c:	46a9      	mov	r9, r5
 800f27e:	f819 1b01 	ldrb.w	r1, [r9], #1
 800f282:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800f286:	2b09      	cmp	r3, #9
 800f288:	d91e      	bls.n	800f2c8 <__ssvfiscanf_r+0xf8>
 800f28a:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800f498 <__ssvfiscanf_r+0x2c8>
 800f28e:	2203      	movs	r2, #3
 800f290:	4650      	mov	r0, sl
 800f292:	f7fe f94b 	bl	800d52c <memchr>
 800f296:	b138      	cbz	r0, 800f2a8 <__ssvfiscanf_r+0xd8>
 800f298:	2301      	movs	r3, #1
 800f29a:	464d      	mov	r5, r9
 800f29c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f29e:	eba0 000a 	sub.w	r0, r0, sl
 800f2a2:	4083      	lsls	r3, r0
 800f2a4:	4313      	orrs	r3, r2
 800f2a6:	9341      	str	r3, [sp, #260]	@ 0x104
 800f2a8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f2ac:	2b78      	cmp	r3, #120	@ 0x78
 800f2ae:	d806      	bhi.n	800f2be <__ssvfiscanf_r+0xee>
 800f2b0:	2b57      	cmp	r3, #87	@ 0x57
 800f2b2:	d810      	bhi.n	800f2d6 <__ssvfiscanf_r+0x106>
 800f2b4:	2b25      	cmp	r3, #37	@ 0x25
 800f2b6:	d0c3      	beq.n	800f240 <__ssvfiscanf_r+0x70>
 800f2b8:	d856      	bhi.n	800f368 <__ssvfiscanf_r+0x198>
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d064      	beq.n	800f388 <__ssvfiscanf_r+0x1b8>
 800f2be:	2303      	movs	r3, #3
 800f2c0:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f2c2:	230a      	movs	r3, #10
 800f2c4:	9342      	str	r3, [sp, #264]	@ 0x108
 800f2c6:	e077      	b.n	800f3b8 <__ssvfiscanf_r+0x1e8>
 800f2c8:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800f2ca:	464d      	mov	r5, r9
 800f2cc:	fb02 1103 	mla	r1, r2, r3, r1
 800f2d0:	3930      	subs	r1, #48	@ 0x30
 800f2d2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f2d4:	e7d2      	b.n	800f27c <__ssvfiscanf_r+0xac>
 800f2d6:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800f2da:	2a20      	cmp	r2, #32
 800f2dc:	d8ef      	bhi.n	800f2be <__ssvfiscanf_r+0xee>
 800f2de:	a101      	add	r1, pc, #4	@ (adr r1, 800f2e4 <__ssvfiscanf_r+0x114>)
 800f2e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f2e4:	0800f397 	.word	0x0800f397
 800f2e8:	0800f2bf 	.word	0x0800f2bf
 800f2ec:	0800f2bf 	.word	0x0800f2bf
 800f2f0:	0800f3f1 	.word	0x0800f3f1
 800f2f4:	0800f2bf 	.word	0x0800f2bf
 800f2f8:	0800f2bf 	.word	0x0800f2bf
 800f2fc:	0800f2bf 	.word	0x0800f2bf
 800f300:	0800f2bf 	.word	0x0800f2bf
 800f304:	0800f2bf 	.word	0x0800f2bf
 800f308:	0800f2bf 	.word	0x0800f2bf
 800f30c:	0800f2bf 	.word	0x0800f2bf
 800f310:	0800f407 	.word	0x0800f407
 800f314:	0800f3ed 	.word	0x0800f3ed
 800f318:	0800f36f 	.word	0x0800f36f
 800f31c:	0800f36f 	.word	0x0800f36f
 800f320:	0800f36f 	.word	0x0800f36f
 800f324:	0800f2bf 	.word	0x0800f2bf
 800f328:	0800f3a9 	.word	0x0800f3a9
 800f32c:	0800f2bf 	.word	0x0800f2bf
 800f330:	0800f2bf 	.word	0x0800f2bf
 800f334:	0800f2bf 	.word	0x0800f2bf
 800f338:	0800f2bf 	.word	0x0800f2bf
 800f33c:	0800f417 	.word	0x0800f417
 800f340:	0800f3b1 	.word	0x0800f3b1
 800f344:	0800f38f 	.word	0x0800f38f
 800f348:	0800f2bf 	.word	0x0800f2bf
 800f34c:	0800f2bf 	.word	0x0800f2bf
 800f350:	0800f413 	.word	0x0800f413
 800f354:	0800f2bf 	.word	0x0800f2bf
 800f358:	0800f3ed 	.word	0x0800f3ed
 800f35c:	0800f2bf 	.word	0x0800f2bf
 800f360:	0800f2bf 	.word	0x0800f2bf
 800f364:	0800f397 	.word	0x0800f397
 800f368:	3b45      	subs	r3, #69	@ 0x45
 800f36a:	2b02      	cmp	r3, #2
 800f36c:	d8a7      	bhi.n	800f2be <__ssvfiscanf_r+0xee>
 800f36e:	2305      	movs	r3, #5
 800f370:	e021      	b.n	800f3b6 <__ssvfiscanf_r+0x1e6>
 800f372:	4621      	mov	r1, r4
 800f374:	4630      	mov	r0, r6
 800f376:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f378:	4798      	blx	r3
 800f37a:	2800      	cmp	r0, #0
 800f37c:	f43f af65 	beq.w	800f24a <__ssvfiscanf_r+0x7a>
 800f380:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f382:	2800      	cmp	r0, #0
 800f384:	f040 808c 	bne.w	800f4a0 <__ssvfiscanf_r+0x2d0>
 800f388:	f04f 30ff 	mov.w	r0, #4294967295
 800f38c:	e08c      	b.n	800f4a8 <__ssvfiscanf_r+0x2d8>
 800f38e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f390:	f042 0220 	orr.w	r2, r2, #32
 800f394:	9241      	str	r2, [sp, #260]	@ 0x104
 800f396:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f398:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f39c:	9241      	str	r2, [sp, #260]	@ 0x104
 800f39e:	2210      	movs	r2, #16
 800f3a0:	2b6e      	cmp	r3, #110	@ 0x6e
 800f3a2:	9242      	str	r2, [sp, #264]	@ 0x108
 800f3a4:	d902      	bls.n	800f3ac <__ssvfiscanf_r+0x1dc>
 800f3a6:	e005      	b.n	800f3b4 <__ssvfiscanf_r+0x1e4>
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	9342      	str	r3, [sp, #264]	@ 0x108
 800f3ac:	2303      	movs	r3, #3
 800f3ae:	e002      	b.n	800f3b6 <__ssvfiscanf_r+0x1e6>
 800f3b0:	2308      	movs	r3, #8
 800f3b2:	9342      	str	r3, [sp, #264]	@ 0x108
 800f3b4:	2304      	movs	r3, #4
 800f3b6:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f3b8:	6863      	ldr	r3, [r4, #4]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	dd39      	ble.n	800f432 <__ssvfiscanf_r+0x262>
 800f3be:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f3c0:	0659      	lsls	r1, r3, #25
 800f3c2:	d404      	bmi.n	800f3ce <__ssvfiscanf_r+0x1fe>
 800f3c4:	6823      	ldr	r3, [r4, #0]
 800f3c6:	781a      	ldrb	r2, [r3, #0]
 800f3c8:	5cba      	ldrb	r2, [r7, r2]
 800f3ca:	0712      	lsls	r2, r2, #28
 800f3cc:	d438      	bmi.n	800f440 <__ssvfiscanf_r+0x270>
 800f3ce:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800f3d0:	2b02      	cmp	r3, #2
 800f3d2:	dc47      	bgt.n	800f464 <__ssvfiscanf_r+0x294>
 800f3d4:	466b      	mov	r3, sp
 800f3d6:	4622      	mov	r2, r4
 800f3d8:	4630      	mov	r0, r6
 800f3da:	a941      	add	r1, sp, #260	@ 0x104
 800f3dc:	f000 f86a 	bl	800f4b4 <_scanf_chars>
 800f3e0:	2801      	cmp	r0, #1
 800f3e2:	d065      	beq.n	800f4b0 <__ssvfiscanf_r+0x2e0>
 800f3e4:	2802      	cmp	r0, #2
 800f3e6:	f47f af17 	bne.w	800f218 <__ssvfiscanf_r+0x48>
 800f3ea:	e7c9      	b.n	800f380 <__ssvfiscanf_r+0x1b0>
 800f3ec:	220a      	movs	r2, #10
 800f3ee:	e7d7      	b.n	800f3a0 <__ssvfiscanf_r+0x1d0>
 800f3f0:	4629      	mov	r1, r5
 800f3f2:	4640      	mov	r0, r8
 800f3f4:	f000 fa66 	bl	800f8c4 <__sccl>
 800f3f8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f3fa:	4605      	mov	r5, r0
 800f3fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f400:	9341      	str	r3, [sp, #260]	@ 0x104
 800f402:	2301      	movs	r3, #1
 800f404:	e7d7      	b.n	800f3b6 <__ssvfiscanf_r+0x1e6>
 800f406:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f40c:	9341      	str	r3, [sp, #260]	@ 0x104
 800f40e:	2300      	movs	r3, #0
 800f410:	e7d1      	b.n	800f3b6 <__ssvfiscanf_r+0x1e6>
 800f412:	2302      	movs	r3, #2
 800f414:	e7cf      	b.n	800f3b6 <__ssvfiscanf_r+0x1e6>
 800f416:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800f418:	06c3      	lsls	r3, r0, #27
 800f41a:	f53f aefd 	bmi.w	800f218 <__ssvfiscanf_r+0x48>
 800f41e:	9b00      	ldr	r3, [sp, #0]
 800f420:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f422:	1d19      	adds	r1, r3, #4
 800f424:	9100      	str	r1, [sp, #0]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	07c0      	lsls	r0, r0, #31
 800f42a:	bf4c      	ite	mi
 800f42c:	801a      	strhmi	r2, [r3, #0]
 800f42e:	601a      	strpl	r2, [r3, #0]
 800f430:	e6f2      	b.n	800f218 <__ssvfiscanf_r+0x48>
 800f432:	4621      	mov	r1, r4
 800f434:	4630      	mov	r0, r6
 800f436:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f438:	4798      	blx	r3
 800f43a:	2800      	cmp	r0, #0
 800f43c:	d0bf      	beq.n	800f3be <__ssvfiscanf_r+0x1ee>
 800f43e:	e79f      	b.n	800f380 <__ssvfiscanf_r+0x1b0>
 800f440:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f442:	3201      	adds	r2, #1
 800f444:	9245      	str	r2, [sp, #276]	@ 0x114
 800f446:	6862      	ldr	r2, [r4, #4]
 800f448:	3a01      	subs	r2, #1
 800f44a:	2a00      	cmp	r2, #0
 800f44c:	6062      	str	r2, [r4, #4]
 800f44e:	dd02      	ble.n	800f456 <__ssvfiscanf_r+0x286>
 800f450:	3301      	adds	r3, #1
 800f452:	6023      	str	r3, [r4, #0]
 800f454:	e7b6      	b.n	800f3c4 <__ssvfiscanf_r+0x1f4>
 800f456:	4621      	mov	r1, r4
 800f458:	4630      	mov	r0, r6
 800f45a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f45c:	4798      	blx	r3
 800f45e:	2800      	cmp	r0, #0
 800f460:	d0b0      	beq.n	800f3c4 <__ssvfiscanf_r+0x1f4>
 800f462:	e78d      	b.n	800f380 <__ssvfiscanf_r+0x1b0>
 800f464:	2b04      	cmp	r3, #4
 800f466:	dc06      	bgt.n	800f476 <__ssvfiscanf_r+0x2a6>
 800f468:	466b      	mov	r3, sp
 800f46a:	4622      	mov	r2, r4
 800f46c:	4630      	mov	r0, r6
 800f46e:	a941      	add	r1, sp, #260	@ 0x104
 800f470:	f000 f87a 	bl	800f568 <_scanf_i>
 800f474:	e7b4      	b.n	800f3e0 <__ssvfiscanf_r+0x210>
 800f476:	4b09      	ldr	r3, [pc, #36]	@ (800f49c <__ssvfiscanf_r+0x2cc>)
 800f478:	2b00      	cmp	r3, #0
 800f47a:	f43f aecd 	beq.w	800f218 <__ssvfiscanf_r+0x48>
 800f47e:	466b      	mov	r3, sp
 800f480:	4622      	mov	r2, r4
 800f482:	4630      	mov	r0, r6
 800f484:	a941      	add	r1, sp, #260	@ 0x104
 800f486:	f3af 8000 	nop.w
 800f48a:	e7a9      	b.n	800f3e0 <__ssvfiscanf_r+0x210>
 800f48c:	0800f121 	.word	0x0800f121
 800f490:	0800f197 	.word	0x0800f197
 800f494:	08010b95 	.word	0x08010b95
 800f498:	08010ede 	.word	0x08010ede
 800f49c:	00000000 	.word	0x00000000
 800f4a0:	89a3      	ldrh	r3, [r4, #12]
 800f4a2:	065b      	lsls	r3, r3, #25
 800f4a4:	f53f af70 	bmi.w	800f388 <__ssvfiscanf_r+0x1b8>
 800f4a8:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4b0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f4b2:	e7f9      	b.n	800f4a8 <__ssvfiscanf_r+0x2d8>

0800f4b4 <_scanf_chars>:
 800f4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4b8:	4615      	mov	r5, r2
 800f4ba:	688a      	ldr	r2, [r1, #8]
 800f4bc:	4680      	mov	r8, r0
 800f4be:	460c      	mov	r4, r1
 800f4c0:	b932      	cbnz	r2, 800f4d0 <_scanf_chars+0x1c>
 800f4c2:	698a      	ldr	r2, [r1, #24]
 800f4c4:	2a00      	cmp	r2, #0
 800f4c6:	bf14      	ite	ne
 800f4c8:	f04f 32ff 	movne.w	r2, #4294967295
 800f4cc:	2201      	moveq	r2, #1
 800f4ce:	608a      	str	r2, [r1, #8]
 800f4d0:	2700      	movs	r7, #0
 800f4d2:	6822      	ldr	r2, [r4, #0]
 800f4d4:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800f564 <_scanf_chars+0xb0>
 800f4d8:	06d1      	lsls	r1, r2, #27
 800f4da:	bf5f      	itttt	pl
 800f4dc:	681a      	ldrpl	r2, [r3, #0]
 800f4de:	1d11      	addpl	r1, r2, #4
 800f4e0:	6019      	strpl	r1, [r3, #0]
 800f4e2:	6816      	ldrpl	r6, [r2, #0]
 800f4e4:	69a0      	ldr	r0, [r4, #24]
 800f4e6:	b188      	cbz	r0, 800f50c <_scanf_chars+0x58>
 800f4e8:	2801      	cmp	r0, #1
 800f4ea:	d107      	bne.n	800f4fc <_scanf_chars+0x48>
 800f4ec:	682b      	ldr	r3, [r5, #0]
 800f4ee:	781a      	ldrb	r2, [r3, #0]
 800f4f0:	6963      	ldr	r3, [r4, #20]
 800f4f2:	5c9b      	ldrb	r3, [r3, r2]
 800f4f4:	b953      	cbnz	r3, 800f50c <_scanf_chars+0x58>
 800f4f6:	2f00      	cmp	r7, #0
 800f4f8:	d031      	beq.n	800f55e <_scanf_chars+0xaa>
 800f4fa:	e022      	b.n	800f542 <_scanf_chars+0x8e>
 800f4fc:	2802      	cmp	r0, #2
 800f4fe:	d120      	bne.n	800f542 <_scanf_chars+0x8e>
 800f500:	682b      	ldr	r3, [r5, #0]
 800f502:	781b      	ldrb	r3, [r3, #0]
 800f504:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f508:	071b      	lsls	r3, r3, #28
 800f50a:	d41a      	bmi.n	800f542 <_scanf_chars+0x8e>
 800f50c:	6823      	ldr	r3, [r4, #0]
 800f50e:	3701      	adds	r7, #1
 800f510:	06da      	lsls	r2, r3, #27
 800f512:	bf5e      	ittt	pl
 800f514:	682b      	ldrpl	r3, [r5, #0]
 800f516:	781b      	ldrbpl	r3, [r3, #0]
 800f518:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f51c:	682a      	ldr	r2, [r5, #0]
 800f51e:	686b      	ldr	r3, [r5, #4]
 800f520:	3201      	adds	r2, #1
 800f522:	602a      	str	r2, [r5, #0]
 800f524:	68a2      	ldr	r2, [r4, #8]
 800f526:	3b01      	subs	r3, #1
 800f528:	3a01      	subs	r2, #1
 800f52a:	606b      	str	r3, [r5, #4]
 800f52c:	60a2      	str	r2, [r4, #8]
 800f52e:	b142      	cbz	r2, 800f542 <_scanf_chars+0x8e>
 800f530:	2b00      	cmp	r3, #0
 800f532:	dcd7      	bgt.n	800f4e4 <_scanf_chars+0x30>
 800f534:	4629      	mov	r1, r5
 800f536:	4640      	mov	r0, r8
 800f538:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f53c:	4798      	blx	r3
 800f53e:	2800      	cmp	r0, #0
 800f540:	d0d0      	beq.n	800f4e4 <_scanf_chars+0x30>
 800f542:	6823      	ldr	r3, [r4, #0]
 800f544:	f013 0310 	ands.w	r3, r3, #16
 800f548:	d105      	bne.n	800f556 <_scanf_chars+0xa2>
 800f54a:	68e2      	ldr	r2, [r4, #12]
 800f54c:	3201      	adds	r2, #1
 800f54e:	60e2      	str	r2, [r4, #12]
 800f550:	69a2      	ldr	r2, [r4, #24]
 800f552:	b102      	cbz	r2, 800f556 <_scanf_chars+0xa2>
 800f554:	7033      	strb	r3, [r6, #0]
 800f556:	2000      	movs	r0, #0
 800f558:	6923      	ldr	r3, [r4, #16]
 800f55a:	443b      	add	r3, r7
 800f55c:	6123      	str	r3, [r4, #16]
 800f55e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f562:	bf00      	nop
 800f564:	08010b95 	.word	0x08010b95

0800f568 <_scanf_i>:
 800f568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f56c:	460c      	mov	r4, r1
 800f56e:	4698      	mov	r8, r3
 800f570:	4b72      	ldr	r3, [pc, #456]	@ (800f73c <_scanf_i+0x1d4>)
 800f572:	b087      	sub	sp, #28
 800f574:	4682      	mov	sl, r0
 800f576:	4616      	mov	r6, r2
 800f578:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f57c:	ab03      	add	r3, sp, #12
 800f57e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f582:	4b6f      	ldr	r3, [pc, #444]	@ (800f740 <_scanf_i+0x1d8>)
 800f584:	69a1      	ldr	r1, [r4, #24]
 800f586:	4a6f      	ldr	r2, [pc, #444]	@ (800f744 <_scanf_i+0x1dc>)
 800f588:	4627      	mov	r7, r4
 800f58a:	2903      	cmp	r1, #3
 800f58c:	bf08      	it	eq
 800f58e:	461a      	moveq	r2, r3
 800f590:	68a3      	ldr	r3, [r4, #8]
 800f592:	9201      	str	r2, [sp, #4]
 800f594:	1e5a      	subs	r2, r3, #1
 800f596:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f59a:	bf81      	itttt	hi
 800f59c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f5a0:	eb03 0905 	addhi.w	r9, r3, r5
 800f5a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f5a8:	60a3      	strhi	r3, [r4, #8]
 800f5aa:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f5ae:	bf98      	it	ls
 800f5b0:	f04f 0900 	movls.w	r9, #0
 800f5b4:	463d      	mov	r5, r7
 800f5b6:	f04f 0b00 	mov.w	fp, #0
 800f5ba:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800f5be:	6023      	str	r3, [r4, #0]
 800f5c0:	6831      	ldr	r1, [r6, #0]
 800f5c2:	ab03      	add	r3, sp, #12
 800f5c4:	2202      	movs	r2, #2
 800f5c6:	7809      	ldrb	r1, [r1, #0]
 800f5c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f5cc:	f7fd ffae 	bl	800d52c <memchr>
 800f5d0:	b328      	cbz	r0, 800f61e <_scanf_i+0xb6>
 800f5d2:	f1bb 0f01 	cmp.w	fp, #1
 800f5d6:	d159      	bne.n	800f68c <_scanf_i+0x124>
 800f5d8:	6862      	ldr	r2, [r4, #4]
 800f5da:	b92a      	cbnz	r2, 800f5e8 <_scanf_i+0x80>
 800f5dc:	2108      	movs	r1, #8
 800f5de:	6822      	ldr	r2, [r4, #0]
 800f5e0:	6061      	str	r1, [r4, #4]
 800f5e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f5e6:	6022      	str	r2, [r4, #0]
 800f5e8:	6822      	ldr	r2, [r4, #0]
 800f5ea:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800f5ee:	6022      	str	r2, [r4, #0]
 800f5f0:	68a2      	ldr	r2, [r4, #8]
 800f5f2:	1e51      	subs	r1, r2, #1
 800f5f4:	60a1      	str	r1, [r4, #8]
 800f5f6:	b192      	cbz	r2, 800f61e <_scanf_i+0xb6>
 800f5f8:	6832      	ldr	r2, [r6, #0]
 800f5fa:	1c51      	adds	r1, r2, #1
 800f5fc:	6031      	str	r1, [r6, #0]
 800f5fe:	7812      	ldrb	r2, [r2, #0]
 800f600:	f805 2b01 	strb.w	r2, [r5], #1
 800f604:	6872      	ldr	r2, [r6, #4]
 800f606:	3a01      	subs	r2, #1
 800f608:	2a00      	cmp	r2, #0
 800f60a:	6072      	str	r2, [r6, #4]
 800f60c:	dc07      	bgt.n	800f61e <_scanf_i+0xb6>
 800f60e:	4631      	mov	r1, r6
 800f610:	4650      	mov	r0, sl
 800f612:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800f616:	4790      	blx	r2
 800f618:	2800      	cmp	r0, #0
 800f61a:	f040 8085 	bne.w	800f728 <_scanf_i+0x1c0>
 800f61e:	f10b 0b01 	add.w	fp, fp, #1
 800f622:	f1bb 0f03 	cmp.w	fp, #3
 800f626:	d1cb      	bne.n	800f5c0 <_scanf_i+0x58>
 800f628:	6863      	ldr	r3, [r4, #4]
 800f62a:	b90b      	cbnz	r3, 800f630 <_scanf_i+0xc8>
 800f62c:	230a      	movs	r3, #10
 800f62e:	6063      	str	r3, [r4, #4]
 800f630:	6863      	ldr	r3, [r4, #4]
 800f632:	4945      	ldr	r1, [pc, #276]	@ (800f748 <_scanf_i+0x1e0>)
 800f634:	6960      	ldr	r0, [r4, #20]
 800f636:	1ac9      	subs	r1, r1, r3
 800f638:	f000 f944 	bl	800f8c4 <__sccl>
 800f63c:	f04f 0b00 	mov.w	fp, #0
 800f640:	68a3      	ldr	r3, [r4, #8]
 800f642:	6822      	ldr	r2, [r4, #0]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d03d      	beq.n	800f6c4 <_scanf_i+0x15c>
 800f648:	6831      	ldr	r1, [r6, #0]
 800f64a:	6960      	ldr	r0, [r4, #20]
 800f64c:	f891 c000 	ldrb.w	ip, [r1]
 800f650:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f654:	2800      	cmp	r0, #0
 800f656:	d035      	beq.n	800f6c4 <_scanf_i+0x15c>
 800f658:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800f65c:	d124      	bne.n	800f6a8 <_scanf_i+0x140>
 800f65e:	0510      	lsls	r0, r2, #20
 800f660:	d522      	bpl.n	800f6a8 <_scanf_i+0x140>
 800f662:	f10b 0b01 	add.w	fp, fp, #1
 800f666:	f1b9 0f00 	cmp.w	r9, #0
 800f66a:	d003      	beq.n	800f674 <_scanf_i+0x10c>
 800f66c:	3301      	adds	r3, #1
 800f66e:	f109 39ff 	add.w	r9, r9, #4294967295
 800f672:	60a3      	str	r3, [r4, #8]
 800f674:	6873      	ldr	r3, [r6, #4]
 800f676:	3b01      	subs	r3, #1
 800f678:	2b00      	cmp	r3, #0
 800f67a:	6073      	str	r3, [r6, #4]
 800f67c:	dd1b      	ble.n	800f6b6 <_scanf_i+0x14e>
 800f67e:	6833      	ldr	r3, [r6, #0]
 800f680:	3301      	adds	r3, #1
 800f682:	6033      	str	r3, [r6, #0]
 800f684:	68a3      	ldr	r3, [r4, #8]
 800f686:	3b01      	subs	r3, #1
 800f688:	60a3      	str	r3, [r4, #8]
 800f68a:	e7d9      	b.n	800f640 <_scanf_i+0xd8>
 800f68c:	f1bb 0f02 	cmp.w	fp, #2
 800f690:	d1ae      	bne.n	800f5f0 <_scanf_i+0x88>
 800f692:	6822      	ldr	r2, [r4, #0]
 800f694:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800f698:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800f69c:	d1bf      	bne.n	800f61e <_scanf_i+0xb6>
 800f69e:	2110      	movs	r1, #16
 800f6a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f6a4:	6061      	str	r1, [r4, #4]
 800f6a6:	e7a2      	b.n	800f5ee <_scanf_i+0x86>
 800f6a8:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800f6ac:	6022      	str	r2, [r4, #0]
 800f6ae:	780b      	ldrb	r3, [r1, #0]
 800f6b0:	f805 3b01 	strb.w	r3, [r5], #1
 800f6b4:	e7de      	b.n	800f674 <_scanf_i+0x10c>
 800f6b6:	4631      	mov	r1, r6
 800f6b8:	4650      	mov	r0, sl
 800f6ba:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f6be:	4798      	blx	r3
 800f6c0:	2800      	cmp	r0, #0
 800f6c2:	d0df      	beq.n	800f684 <_scanf_i+0x11c>
 800f6c4:	6823      	ldr	r3, [r4, #0]
 800f6c6:	05d9      	lsls	r1, r3, #23
 800f6c8:	d50d      	bpl.n	800f6e6 <_scanf_i+0x17e>
 800f6ca:	42bd      	cmp	r5, r7
 800f6cc:	d909      	bls.n	800f6e2 <_scanf_i+0x17a>
 800f6ce:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f6d2:	4632      	mov	r2, r6
 800f6d4:	4650      	mov	r0, sl
 800f6d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f6da:	f105 39ff 	add.w	r9, r5, #4294967295
 800f6de:	4798      	blx	r3
 800f6e0:	464d      	mov	r5, r9
 800f6e2:	42bd      	cmp	r5, r7
 800f6e4:	d028      	beq.n	800f738 <_scanf_i+0x1d0>
 800f6e6:	6822      	ldr	r2, [r4, #0]
 800f6e8:	f012 0210 	ands.w	r2, r2, #16
 800f6ec:	d113      	bne.n	800f716 <_scanf_i+0x1ae>
 800f6ee:	702a      	strb	r2, [r5, #0]
 800f6f0:	4639      	mov	r1, r7
 800f6f2:	6863      	ldr	r3, [r4, #4]
 800f6f4:	4650      	mov	r0, sl
 800f6f6:	9e01      	ldr	r6, [sp, #4]
 800f6f8:	47b0      	blx	r6
 800f6fa:	f8d8 3000 	ldr.w	r3, [r8]
 800f6fe:	6821      	ldr	r1, [r4, #0]
 800f700:	1d1a      	adds	r2, r3, #4
 800f702:	f8c8 2000 	str.w	r2, [r8]
 800f706:	f011 0f20 	tst.w	r1, #32
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	d00f      	beq.n	800f72e <_scanf_i+0x1c6>
 800f70e:	6018      	str	r0, [r3, #0]
 800f710:	68e3      	ldr	r3, [r4, #12]
 800f712:	3301      	adds	r3, #1
 800f714:	60e3      	str	r3, [r4, #12]
 800f716:	2000      	movs	r0, #0
 800f718:	6923      	ldr	r3, [r4, #16]
 800f71a:	1bed      	subs	r5, r5, r7
 800f71c:	445d      	add	r5, fp
 800f71e:	442b      	add	r3, r5
 800f720:	6123      	str	r3, [r4, #16]
 800f722:	b007      	add	sp, #28
 800f724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f728:	f04f 0b00 	mov.w	fp, #0
 800f72c:	e7ca      	b.n	800f6c4 <_scanf_i+0x15c>
 800f72e:	07ca      	lsls	r2, r1, #31
 800f730:	bf4c      	ite	mi
 800f732:	8018      	strhmi	r0, [r3, #0]
 800f734:	6018      	strpl	r0, [r3, #0]
 800f736:	e7eb      	b.n	800f710 <_scanf_i+0x1a8>
 800f738:	2001      	movs	r0, #1
 800f73a:	e7f2      	b.n	800f722 <_scanf_i+0x1ba>
 800f73c:	08010754 	.word	0x08010754
 800f740:	0800c585 	.word	0x0800c585
 800f744:	0800fd5d 	.word	0x0800fd5d
 800f748:	08010ef9 	.word	0x08010ef9

0800f74c <__sflush_r>:
 800f74c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f752:	0716      	lsls	r6, r2, #28
 800f754:	4605      	mov	r5, r0
 800f756:	460c      	mov	r4, r1
 800f758:	d454      	bmi.n	800f804 <__sflush_r+0xb8>
 800f75a:	684b      	ldr	r3, [r1, #4]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	dc02      	bgt.n	800f766 <__sflush_r+0x1a>
 800f760:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f762:	2b00      	cmp	r3, #0
 800f764:	dd48      	ble.n	800f7f8 <__sflush_r+0xac>
 800f766:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f768:	2e00      	cmp	r6, #0
 800f76a:	d045      	beq.n	800f7f8 <__sflush_r+0xac>
 800f76c:	2300      	movs	r3, #0
 800f76e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f772:	682f      	ldr	r7, [r5, #0]
 800f774:	6a21      	ldr	r1, [r4, #32]
 800f776:	602b      	str	r3, [r5, #0]
 800f778:	d030      	beq.n	800f7dc <__sflush_r+0x90>
 800f77a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f77c:	89a3      	ldrh	r3, [r4, #12]
 800f77e:	0759      	lsls	r1, r3, #29
 800f780:	d505      	bpl.n	800f78e <__sflush_r+0x42>
 800f782:	6863      	ldr	r3, [r4, #4]
 800f784:	1ad2      	subs	r2, r2, r3
 800f786:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f788:	b10b      	cbz	r3, 800f78e <__sflush_r+0x42>
 800f78a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f78c:	1ad2      	subs	r2, r2, r3
 800f78e:	2300      	movs	r3, #0
 800f790:	4628      	mov	r0, r5
 800f792:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f794:	6a21      	ldr	r1, [r4, #32]
 800f796:	47b0      	blx	r6
 800f798:	1c43      	adds	r3, r0, #1
 800f79a:	89a3      	ldrh	r3, [r4, #12]
 800f79c:	d106      	bne.n	800f7ac <__sflush_r+0x60>
 800f79e:	6829      	ldr	r1, [r5, #0]
 800f7a0:	291d      	cmp	r1, #29
 800f7a2:	d82b      	bhi.n	800f7fc <__sflush_r+0xb0>
 800f7a4:	4a28      	ldr	r2, [pc, #160]	@ (800f848 <__sflush_r+0xfc>)
 800f7a6:	410a      	asrs	r2, r1
 800f7a8:	07d6      	lsls	r6, r2, #31
 800f7aa:	d427      	bmi.n	800f7fc <__sflush_r+0xb0>
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	6062      	str	r2, [r4, #4]
 800f7b0:	6922      	ldr	r2, [r4, #16]
 800f7b2:	04d9      	lsls	r1, r3, #19
 800f7b4:	6022      	str	r2, [r4, #0]
 800f7b6:	d504      	bpl.n	800f7c2 <__sflush_r+0x76>
 800f7b8:	1c42      	adds	r2, r0, #1
 800f7ba:	d101      	bne.n	800f7c0 <__sflush_r+0x74>
 800f7bc:	682b      	ldr	r3, [r5, #0]
 800f7be:	b903      	cbnz	r3, 800f7c2 <__sflush_r+0x76>
 800f7c0:	6560      	str	r0, [r4, #84]	@ 0x54
 800f7c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f7c4:	602f      	str	r7, [r5, #0]
 800f7c6:	b1b9      	cbz	r1, 800f7f8 <__sflush_r+0xac>
 800f7c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f7cc:	4299      	cmp	r1, r3
 800f7ce:	d002      	beq.n	800f7d6 <__sflush_r+0x8a>
 800f7d0:	4628      	mov	r0, r5
 800f7d2:	f7fe fd09 	bl	800e1e8 <_free_r>
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800f7da:	e00d      	b.n	800f7f8 <__sflush_r+0xac>
 800f7dc:	2301      	movs	r3, #1
 800f7de:	4628      	mov	r0, r5
 800f7e0:	47b0      	blx	r6
 800f7e2:	4602      	mov	r2, r0
 800f7e4:	1c50      	adds	r0, r2, #1
 800f7e6:	d1c9      	bne.n	800f77c <__sflush_r+0x30>
 800f7e8:	682b      	ldr	r3, [r5, #0]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d0c6      	beq.n	800f77c <__sflush_r+0x30>
 800f7ee:	2b1d      	cmp	r3, #29
 800f7f0:	d001      	beq.n	800f7f6 <__sflush_r+0xaa>
 800f7f2:	2b16      	cmp	r3, #22
 800f7f4:	d11d      	bne.n	800f832 <__sflush_r+0xe6>
 800f7f6:	602f      	str	r7, [r5, #0]
 800f7f8:	2000      	movs	r0, #0
 800f7fa:	e021      	b.n	800f840 <__sflush_r+0xf4>
 800f7fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f800:	b21b      	sxth	r3, r3
 800f802:	e01a      	b.n	800f83a <__sflush_r+0xee>
 800f804:	690f      	ldr	r7, [r1, #16]
 800f806:	2f00      	cmp	r7, #0
 800f808:	d0f6      	beq.n	800f7f8 <__sflush_r+0xac>
 800f80a:	0793      	lsls	r3, r2, #30
 800f80c:	bf18      	it	ne
 800f80e:	2300      	movne	r3, #0
 800f810:	680e      	ldr	r6, [r1, #0]
 800f812:	bf08      	it	eq
 800f814:	694b      	ldreq	r3, [r1, #20]
 800f816:	1bf6      	subs	r6, r6, r7
 800f818:	600f      	str	r7, [r1, #0]
 800f81a:	608b      	str	r3, [r1, #8]
 800f81c:	2e00      	cmp	r6, #0
 800f81e:	ddeb      	ble.n	800f7f8 <__sflush_r+0xac>
 800f820:	4633      	mov	r3, r6
 800f822:	463a      	mov	r2, r7
 800f824:	4628      	mov	r0, r5
 800f826:	6a21      	ldr	r1, [r4, #32]
 800f828:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800f82c:	47e0      	blx	ip
 800f82e:	2800      	cmp	r0, #0
 800f830:	dc07      	bgt.n	800f842 <__sflush_r+0xf6>
 800f832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f83a:	f04f 30ff 	mov.w	r0, #4294967295
 800f83e:	81a3      	strh	r3, [r4, #12]
 800f840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f842:	4407      	add	r7, r0
 800f844:	1a36      	subs	r6, r6, r0
 800f846:	e7e9      	b.n	800f81c <__sflush_r+0xd0>
 800f848:	dfbffffe 	.word	0xdfbffffe

0800f84c <_fflush_r>:
 800f84c:	b538      	push	{r3, r4, r5, lr}
 800f84e:	690b      	ldr	r3, [r1, #16]
 800f850:	4605      	mov	r5, r0
 800f852:	460c      	mov	r4, r1
 800f854:	b913      	cbnz	r3, 800f85c <_fflush_r+0x10>
 800f856:	2500      	movs	r5, #0
 800f858:	4628      	mov	r0, r5
 800f85a:	bd38      	pop	{r3, r4, r5, pc}
 800f85c:	b118      	cbz	r0, 800f866 <_fflush_r+0x1a>
 800f85e:	6a03      	ldr	r3, [r0, #32]
 800f860:	b90b      	cbnz	r3, 800f866 <_fflush_r+0x1a>
 800f862:	f7fd fbf7 	bl	800d054 <__sinit>
 800f866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d0f3      	beq.n	800f856 <_fflush_r+0xa>
 800f86e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f870:	07d0      	lsls	r0, r2, #31
 800f872:	d404      	bmi.n	800f87e <_fflush_r+0x32>
 800f874:	0599      	lsls	r1, r3, #22
 800f876:	d402      	bmi.n	800f87e <_fflush_r+0x32>
 800f878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f87a:	f7fd fe50 	bl	800d51e <__retarget_lock_acquire_recursive>
 800f87e:	4628      	mov	r0, r5
 800f880:	4621      	mov	r1, r4
 800f882:	f7ff ff63 	bl	800f74c <__sflush_r>
 800f886:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f888:	4605      	mov	r5, r0
 800f88a:	07da      	lsls	r2, r3, #31
 800f88c:	d4e4      	bmi.n	800f858 <_fflush_r+0xc>
 800f88e:	89a3      	ldrh	r3, [r4, #12]
 800f890:	059b      	lsls	r3, r3, #22
 800f892:	d4e1      	bmi.n	800f858 <_fflush_r+0xc>
 800f894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f896:	f7fd fe48 	bl	800d52a <__retarget_lock_release_recursive>
 800f89a:	e7dd      	b.n	800f858 <_fflush_r+0xc>

0800f89c <fflush>:
 800f89c:	4601      	mov	r1, r0
 800f89e:	b920      	cbnz	r0, 800f8aa <fflush+0xe>
 800f8a0:	4a04      	ldr	r2, [pc, #16]	@ (800f8b4 <fflush+0x18>)
 800f8a2:	4905      	ldr	r1, [pc, #20]	@ (800f8b8 <fflush+0x1c>)
 800f8a4:	4805      	ldr	r0, [pc, #20]	@ (800f8bc <fflush+0x20>)
 800f8a6:	f7fd bc09 	b.w	800d0bc <_fwalk_sglue>
 800f8aa:	4b05      	ldr	r3, [pc, #20]	@ (800f8c0 <fflush+0x24>)
 800f8ac:	6818      	ldr	r0, [r3, #0]
 800f8ae:	f7ff bfcd 	b.w	800f84c <_fflush_r>
 800f8b2:	bf00      	nop
 800f8b4:	20000014 	.word	0x20000014
 800f8b8:	0800f84d 	.word	0x0800f84d
 800f8bc:	20000024 	.word	0x20000024
 800f8c0:	20000020 	.word	0x20000020

0800f8c4 <__sccl>:
 800f8c4:	b570      	push	{r4, r5, r6, lr}
 800f8c6:	780b      	ldrb	r3, [r1, #0]
 800f8c8:	4604      	mov	r4, r0
 800f8ca:	2b5e      	cmp	r3, #94	@ 0x5e
 800f8cc:	bf0b      	itete	eq
 800f8ce:	784b      	ldrbeq	r3, [r1, #1]
 800f8d0:	1c4a      	addne	r2, r1, #1
 800f8d2:	1c8a      	addeq	r2, r1, #2
 800f8d4:	2100      	movne	r1, #0
 800f8d6:	bf08      	it	eq
 800f8d8:	2101      	moveq	r1, #1
 800f8da:	3801      	subs	r0, #1
 800f8dc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800f8e0:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f8e4:	42a8      	cmp	r0, r5
 800f8e6:	d1fb      	bne.n	800f8e0 <__sccl+0x1c>
 800f8e8:	b90b      	cbnz	r3, 800f8ee <__sccl+0x2a>
 800f8ea:	1e50      	subs	r0, r2, #1
 800f8ec:	bd70      	pop	{r4, r5, r6, pc}
 800f8ee:	f081 0101 	eor.w	r1, r1, #1
 800f8f2:	4610      	mov	r0, r2
 800f8f4:	54e1      	strb	r1, [r4, r3]
 800f8f6:	4602      	mov	r2, r0
 800f8f8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f8fc:	2d2d      	cmp	r5, #45	@ 0x2d
 800f8fe:	d005      	beq.n	800f90c <__sccl+0x48>
 800f900:	2d5d      	cmp	r5, #93	@ 0x5d
 800f902:	d016      	beq.n	800f932 <__sccl+0x6e>
 800f904:	2d00      	cmp	r5, #0
 800f906:	d0f1      	beq.n	800f8ec <__sccl+0x28>
 800f908:	462b      	mov	r3, r5
 800f90a:	e7f2      	b.n	800f8f2 <__sccl+0x2e>
 800f90c:	7846      	ldrb	r6, [r0, #1]
 800f90e:	2e5d      	cmp	r6, #93	@ 0x5d
 800f910:	d0fa      	beq.n	800f908 <__sccl+0x44>
 800f912:	42b3      	cmp	r3, r6
 800f914:	dcf8      	bgt.n	800f908 <__sccl+0x44>
 800f916:	461a      	mov	r2, r3
 800f918:	3002      	adds	r0, #2
 800f91a:	3201      	adds	r2, #1
 800f91c:	4296      	cmp	r6, r2
 800f91e:	54a1      	strb	r1, [r4, r2]
 800f920:	dcfb      	bgt.n	800f91a <__sccl+0x56>
 800f922:	1af2      	subs	r2, r6, r3
 800f924:	3a01      	subs	r2, #1
 800f926:	42b3      	cmp	r3, r6
 800f928:	bfa8      	it	ge
 800f92a:	2200      	movge	r2, #0
 800f92c:	1c5d      	adds	r5, r3, #1
 800f92e:	18ab      	adds	r3, r5, r2
 800f930:	e7e1      	b.n	800f8f6 <__sccl+0x32>
 800f932:	4610      	mov	r0, r2
 800f934:	e7da      	b.n	800f8ec <__sccl+0x28>

0800f936 <__submore>:
 800f936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f93a:	460c      	mov	r4, r1
 800f93c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f93e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f942:	4299      	cmp	r1, r3
 800f944:	d11b      	bne.n	800f97e <__submore+0x48>
 800f946:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f94a:	f7fe fcc7 	bl	800e2dc <_malloc_r>
 800f94e:	b918      	cbnz	r0, 800f958 <__submore+0x22>
 800f950:	f04f 30ff 	mov.w	r0, #4294967295
 800f954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f958:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f95c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f95e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800f962:	6360      	str	r0, [r4, #52]	@ 0x34
 800f964:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800f968:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f96c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800f970:	7043      	strb	r3, [r0, #1]
 800f972:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f976:	7003      	strb	r3, [r0, #0]
 800f978:	6020      	str	r0, [r4, #0]
 800f97a:	2000      	movs	r0, #0
 800f97c:	e7ea      	b.n	800f954 <__submore+0x1e>
 800f97e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800f980:	0077      	lsls	r7, r6, #1
 800f982:	463a      	mov	r2, r7
 800f984:	f000 f94e 	bl	800fc24 <_realloc_r>
 800f988:	4605      	mov	r5, r0
 800f98a:	2800      	cmp	r0, #0
 800f98c:	d0e0      	beq.n	800f950 <__submore+0x1a>
 800f98e:	eb00 0806 	add.w	r8, r0, r6
 800f992:	4601      	mov	r1, r0
 800f994:	4632      	mov	r2, r6
 800f996:	4640      	mov	r0, r8
 800f998:	f000 f8e2 	bl	800fb60 <memcpy>
 800f99c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800f9a0:	f8c4 8000 	str.w	r8, [r4]
 800f9a4:	e7e9      	b.n	800f97a <__submore+0x44>

0800f9a6 <_ungetc_r>:
 800f9a6:	b570      	push	{r4, r5, r6, lr}
 800f9a8:	460d      	mov	r5, r1
 800f9aa:	1c69      	adds	r1, r5, #1
 800f9ac:	4606      	mov	r6, r0
 800f9ae:	4614      	mov	r4, r2
 800f9b0:	d01e      	beq.n	800f9f0 <_ungetc_r+0x4a>
 800f9b2:	b118      	cbz	r0, 800f9bc <_ungetc_r+0x16>
 800f9b4:	6a03      	ldr	r3, [r0, #32]
 800f9b6:	b90b      	cbnz	r3, 800f9bc <_ungetc_r+0x16>
 800f9b8:	f7fd fb4c 	bl	800d054 <__sinit>
 800f9bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f9be:	07da      	lsls	r2, r3, #31
 800f9c0:	d405      	bmi.n	800f9ce <_ungetc_r+0x28>
 800f9c2:	89a3      	ldrh	r3, [r4, #12]
 800f9c4:	059b      	lsls	r3, r3, #22
 800f9c6:	d402      	bmi.n	800f9ce <_ungetc_r+0x28>
 800f9c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f9ca:	f7fd fda8 	bl	800d51e <__retarget_lock_acquire_recursive>
 800f9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9d2:	f023 0220 	bic.w	r2, r3, #32
 800f9d6:	0758      	lsls	r0, r3, #29
 800f9d8:	81a2      	strh	r2, [r4, #12]
 800f9da:	d422      	bmi.n	800fa22 <_ungetc_r+0x7c>
 800f9dc:	06d9      	lsls	r1, r3, #27
 800f9de:	d40a      	bmi.n	800f9f6 <_ungetc_r+0x50>
 800f9e0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f9e2:	07d2      	lsls	r2, r2, #31
 800f9e4:	d404      	bmi.n	800f9f0 <_ungetc_r+0x4a>
 800f9e6:	0599      	lsls	r1, r3, #22
 800f9e8:	d402      	bmi.n	800f9f0 <_ungetc_r+0x4a>
 800f9ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f9ec:	f7fd fd9d 	bl	800d52a <__retarget_lock_release_recursive>
 800f9f0:	f04f 35ff 	mov.w	r5, #4294967295
 800f9f4:	e046      	b.n	800fa84 <_ungetc_r+0xde>
 800f9f6:	071b      	lsls	r3, r3, #28
 800f9f8:	d50f      	bpl.n	800fa1a <_ungetc_r+0x74>
 800f9fa:	4621      	mov	r1, r4
 800f9fc:	4630      	mov	r0, r6
 800f9fe:	f7ff ff25 	bl	800f84c <_fflush_r>
 800fa02:	b120      	cbz	r0, 800fa0e <_ungetc_r+0x68>
 800fa04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fa06:	07d8      	lsls	r0, r3, #31
 800fa08:	d4f2      	bmi.n	800f9f0 <_ungetc_r+0x4a>
 800fa0a:	89a3      	ldrh	r3, [r4, #12]
 800fa0c:	e7eb      	b.n	800f9e6 <_ungetc_r+0x40>
 800fa0e:	89a3      	ldrh	r3, [r4, #12]
 800fa10:	60a0      	str	r0, [r4, #8]
 800fa12:	f023 0308 	bic.w	r3, r3, #8
 800fa16:	81a3      	strh	r3, [r4, #12]
 800fa18:	61a0      	str	r0, [r4, #24]
 800fa1a:	89a3      	ldrh	r3, [r4, #12]
 800fa1c:	f043 0304 	orr.w	r3, r3, #4
 800fa20:	81a3      	strh	r3, [r4, #12]
 800fa22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fa24:	6862      	ldr	r2, [r4, #4]
 800fa26:	b2ed      	uxtb	r5, r5
 800fa28:	b1d3      	cbz	r3, 800fa60 <_ungetc_r+0xba>
 800fa2a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800fa2c:	4293      	cmp	r3, r2
 800fa2e:	dc05      	bgt.n	800fa3c <_ungetc_r+0x96>
 800fa30:	4621      	mov	r1, r4
 800fa32:	4630      	mov	r0, r6
 800fa34:	f7ff ff7f 	bl	800f936 <__submore>
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	d1e3      	bne.n	800fa04 <_ungetc_r+0x5e>
 800fa3c:	6823      	ldr	r3, [r4, #0]
 800fa3e:	1e5a      	subs	r2, r3, #1
 800fa40:	6022      	str	r2, [r4, #0]
 800fa42:	f803 5c01 	strb.w	r5, [r3, #-1]
 800fa46:	6863      	ldr	r3, [r4, #4]
 800fa48:	3301      	adds	r3, #1
 800fa4a:	6063      	str	r3, [r4, #4]
 800fa4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fa4e:	07da      	lsls	r2, r3, #31
 800fa50:	d418      	bmi.n	800fa84 <_ungetc_r+0xde>
 800fa52:	89a3      	ldrh	r3, [r4, #12]
 800fa54:	059b      	lsls	r3, r3, #22
 800fa56:	d415      	bmi.n	800fa84 <_ungetc_r+0xde>
 800fa58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa5a:	f7fd fd66 	bl	800d52a <__retarget_lock_release_recursive>
 800fa5e:	e011      	b.n	800fa84 <_ungetc_r+0xde>
 800fa60:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800fa62:	6920      	ldr	r0, [r4, #16]
 800fa64:	6823      	ldr	r3, [r4, #0]
 800fa66:	f001 0101 	and.w	r1, r1, #1
 800fa6a:	b168      	cbz	r0, 800fa88 <_ungetc_r+0xe2>
 800fa6c:	4298      	cmp	r0, r3
 800fa6e:	d20b      	bcs.n	800fa88 <_ungetc_r+0xe2>
 800fa70:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800fa74:	42a8      	cmp	r0, r5
 800fa76:	d107      	bne.n	800fa88 <_ungetc_r+0xe2>
 800fa78:	3b01      	subs	r3, #1
 800fa7a:	3201      	adds	r2, #1
 800fa7c:	6023      	str	r3, [r4, #0]
 800fa7e:	6062      	str	r2, [r4, #4]
 800fa80:	2900      	cmp	r1, #0
 800fa82:	d0e6      	beq.n	800fa52 <_ungetc_r+0xac>
 800fa84:	4628      	mov	r0, r5
 800fa86:	bd70      	pop	{r4, r5, r6, pc}
 800fa88:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800fa8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa90:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa92:	2303      	movs	r3, #3
 800fa94:	63a3      	str	r3, [r4, #56]	@ 0x38
 800fa96:	4623      	mov	r3, r4
 800fa98:	f803 5f46 	strb.w	r5, [r3, #70]!
 800fa9c:	6023      	str	r3, [r4, #0]
 800fa9e:	2301      	movs	r3, #1
 800faa0:	6063      	str	r3, [r4, #4]
 800faa2:	e7ed      	b.n	800fa80 <_ungetc_r+0xda>

0800faa4 <ungetc>:
 800faa4:	4b02      	ldr	r3, [pc, #8]	@ (800fab0 <ungetc+0xc>)
 800faa6:	460a      	mov	r2, r1
 800faa8:	4601      	mov	r1, r0
 800faaa:	6818      	ldr	r0, [r3, #0]
 800faac:	f7ff bf7b 	b.w	800f9a6 <_ungetc_r>
 800fab0:	20000020 	.word	0x20000020

0800fab4 <memmove>:
 800fab4:	4288      	cmp	r0, r1
 800fab6:	b510      	push	{r4, lr}
 800fab8:	eb01 0402 	add.w	r4, r1, r2
 800fabc:	d902      	bls.n	800fac4 <memmove+0x10>
 800fabe:	4284      	cmp	r4, r0
 800fac0:	4623      	mov	r3, r4
 800fac2:	d807      	bhi.n	800fad4 <memmove+0x20>
 800fac4:	1e43      	subs	r3, r0, #1
 800fac6:	42a1      	cmp	r1, r4
 800fac8:	d008      	beq.n	800fadc <memmove+0x28>
 800faca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800face:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fad2:	e7f8      	b.n	800fac6 <memmove+0x12>
 800fad4:	4601      	mov	r1, r0
 800fad6:	4402      	add	r2, r0
 800fad8:	428a      	cmp	r2, r1
 800fada:	d100      	bne.n	800fade <memmove+0x2a>
 800fadc:	bd10      	pop	{r4, pc}
 800fade:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fae2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fae6:	e7f7      	b.n	800fad8 <memmove+0x24>

0800fae8 <_setlocale_r>:
 800fae8:	b510      	push	{r4, lr}
 800faea:	4614      	mov	r4, r2
 800faec:	b122      	cbz	r2, 800faf8 <_setlocale_r+0x10>
 800faee:	4610      	mov	r0, r2
 800faf0:	4909      	ldr	r1, [pc, #36]	@ (800fb18 <_setlocale_r+0x30>)
 800faf2:	f7f0 fbe1 	bl	80002b8 <strcmp>
 800faf6:	b908      	cbnz	r0, 800fafc <_setlocale_r+0x14>
 800faf8:	4808      	ldr	r0, [pc, #32]	@ (800fb1c <_setlocale_r+0x34>)
 800fafa:	bd10      	pop	{r4, pc}
 800fafc:	4620      	mov	r0, r4
 800fafe:	4907      	ldr	r1, [pc, #28]	@ (800fb1c <_setlocale_r+0x34>)
 800fb00:	f7f0 fbda 	bl	80002b8 <strcmp>
 800fb04:	2800      	cmp	r0, #0
 800fb06:	d0f7      	beq.n	800faf8 <_setlocale_r+0x10>
 800fb08:	4620      	mov	r0, r4
 800fb0a:	4905      	ldr	r1, [pc, #20]	@ (800fb20 <_setlocale_r+0x38>)
 800fb0c:	f7f0 fbd4 	bl	80002b8 <strcmp>
 800fb10:	2800      	cmp	r0, #0
 800fb12:	d0f1      	beq.n	800faf8 <_setlocale_r+0x10>
 800fb14:	2000      	movs	r0, #0
 800fb16:	e7f0      	b.n	800fafa <_setlocale_r+0x12>
 800fb18:	08010f06 	.word	0x08010f06
 800fb1c:	08010f04 	.word	0x08010f04
 800fb20:	08010f49 	.word	0x08010f49

0800fb24 <__locale_mb_cur_max>:
 800fb24:	4b01      	ldr	r3, [pc, #4]	@ (800fb2c <__locale_mb_cur_max+0x8>)
 800fb26:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 800fb2a:	4770      	bx	lr
 800fb2c:	20000070 	.word	0x20000070

0800fb30 <setlocale>:
 800fb30:	4b02      	ldr	r3, [pc, #8]	@ (800fb3c <setlocale+0xc>)
 800fb32:	460a      	mov	r2, r1
 800fb34:	4601      	mov	r1, r0
 800fb36:	6818      	ldr	r0, [r3, #0]
 800fb38:	f7ff bfd6 	b.w	800fae8 <_setlocale_r>
 800fb3c:	20000020 	.word	0x20000020

0800fb40 <_sbrk_r>:
 800fb40:	b538      	push	{r3, r4, r5, lr}
 800fb42:	2300      	movs	r3, #0
 800fb44:	4d05      	ldr	r5, [pc, #20]	@ (800fb5c <_sbrk_r+0x1c>)
 800fb46:	4604      	mov	r4, r0
 800fb48:	4608      	mov	r0, r1
 800fb4a:	602b      	str	r3, [r5, #0]
 800fb4c:	f7f2 ff14 	bl	8002978 <_sbrk>
 800fb50:	1c43      	adds	r3, r0, #1
 800fb52:	d102      	bne.n	800fb5a <_sbrk_r+0x1a>
 800fb54:	682b      	ldr	r3, [r5, #0]
 800fb56:	b103      	cbz	r3, 800fb5a <_sbrk_r+0x1a>
 800fb58:	6023      	str	r3, [r4, #0]
 800fb5a:	bd38      	pop	{r3, r4, r5, pc}
 800fb5c:	200007a4 	.word	0x200007a4

0800fb60 <memcpy>:
 800fb60:	440a      	add	r2, r1
 800fb62:	4291      	cmp	r1, r2
 800fb64:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb68:	d100      	bne.n	800fb6c <memcpy+0xc>
 800fb6a:	4770      	bx	lr
 800fb6c:	b510      	push	{r4, lr}
 800fb6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb72:	4291      	cmp	r1, r2
 800fb74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb78:	d1f9      	bne.n	800fb6e <memcpy+0xe>
 800fb7a:	bd10      	pop	{r4, pc}

0800fb7c <__assert_func>:
 800fb7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb7e:	4614      	mov	r4, r2
 800fb80:	461a      	mov	r2, r3
 800fb82:	4b09      	ldr	r3, [pc, #36]	@ (800fba8 <__assert_func+0x2c>)
 800fb84:	4605      	mov	r5, r0
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	68d8      	ldr	r0, [r3, #12]
 800fb8a:	b954      	cbnz	r4, 800fba2 <__assert_func+0x26>
 800fb8c:	4b07      	ldr	r3, [pc, #28]	@ (800fbac <__assert_func+0x30>)
 800fb8e:	461c      	mov	r4, r3
 800fb90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fb94:	9100      	str	r1, [sp, #0]
 800fb96:	462b      	mov	r3, r5
 800fb98:	4905      	ldr	r1, [pc, #20]	@ (800fbb0 <__assert_func+0x34>)
 800fb9a:	f000 f919 	bl	800fdd0 <fiprintf>
 800fb9e:	f000 f929 	bl	800fdf4 <abort>
 800fba2:	4b04      	ldr	r3, [pc, #16]	@ (800fbb4 <__assert_func+0x38>)
 800fba4:	e7f4      	b.n	800fb90 <__assert_func+0x14>
 800fba6:	bf00      	nop
 800fba8:	20000020 	.word	0x20000020
 800fbac:	08010f49 	.word	0x08010f49
 800fbb0:	08010f1b 	.word	0x08010f1b
 800fbb4:	08010f0e 	.word	0x08010f0e

0800fbb8 <__assert>:
 800fbb8:	b508      	push	{r3, lr}
 800fbba:	4613      	mov	r3, r2
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	f7ff ffdd 	bl	800fb7c <__assert_func>

0800fbc2 <_calloc_r>:
 800fbc2:	b570      	push	{r4, r5, r6, lr}
 800fbc4:	fba1 5402 	umull	r5, r4, r1, r2
 800fbc8:	b93c      	cbnz	r4, 800fbda <_calloc_r+0x18>
 800fbca:	4629      	mov	r1, r5
 800fbcc:	f7fe fb86 	bl	800e2dc <_malloc_r>
 800fbd0:	4606      	mov	r6, r0
 800fbd2:	b928      	cbnz	r0, 800fbe0 <_calloc_r+0x1e>
 800fbd4:	2600      	movs	r6, #0
 800fbd6:	4630      	mov	r0, r6
 800fbd8:	bd70      	pop	{r4, r5, r6, pc}
 800fbda:	220c      	movs	r2, #12
 800fbdc:	6002      	str	r2, [r0, #0]
 800fbde:	e7f9      	b.n	800fbd4 <_calloc_r+0x12>
 800fbe0:	462a      	mov	r2, r5
 800fbe2:	4621      	mov	r1, r4
 800fbe4:	f7fd fbbe 	bl	800d364 <memset>
 800fbe8:	e7f5      	b.n	800fbd6 <_calloc_r+0x14>
	...

0800fbec <_mbtowc_r>:
 800fbec:	b410      	push	{r4}
 800fbee:	4c03      	ldr	r4, [pc, #12]	@ (800fbfc <_mbtowc_r+0x10>)
 800fbf0:	f8d4 40e4 	ldr.w	r4, [r4, #228]	@ 0xe4
 800fbf4:	46a4      	mov	ip, r4
 800fbf6:	bc10      	pop	{r4}
 800fbf8:	4760      	bx	ip
 800fbfa:	bf00      	nop
 800fbfc:	20000070 	.word	0x20000070

0800fc00 <__ascii_mbtowc>:
 800fc00:	b082      	sub	sp, #8
 800fc02:	b901      	cbnz	r1, 800fc06 <__ascii_mbtowc+0x6>
 800fc04:	a901      	add	r1, sp, #4
 800fc06:	b142      	cbz	r2, 800fc1a <__ascii_mbtowc+0x1a>
 800fc08:	b14b      	cbz	r3, 800fc1e <__ascii_mbtowc+0x1e>
 800fc0a:	7813      	ldrb	r3, [r2, #0]
 800fc0c:	600b      	str	r3, [r1, #0]
 800fc0e:	7812      	ldrb	r2, [r2, #0]
 800fc10:	1e10      	subs	r0, r2, #0
 800fc12:	bf18      	it	ne
 800fc14:	2001      	movne	r0, #1
 800fc16:	b002      	add	sp, #8
 800fc18:	4770      	bx	lr
 800fc1a:	4610      	mov	r0, r2
 800fc1c:	e7fb      	b.n	800fc16 <__ascii_mbtowc+0x16>
 800fc1e:	f06f 0001 	mvn.w	r0, #1
 800fc22:	e7f8      	b.n	800fc16 <__ascii_mbtowc+0x16>

0800fc24 <_realloc_r>:
 800fc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc28:	4680      	mov	r8, r0
 800fc2a:	4615      	mov	r5, r2
 800fc2c:	460c      	mov	r4, r1
 800fc2e:	b921      	cbnz	r1, 800fc3a <_realloc_r+0x16>
 800fc30:	4611      	mov	r1, r2
 800fc32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc36:	f7fe bb51 	b.w	800e2dc <_malloc_r>
 800fc3a:	b92a      	cbnz	r2, 800fc48 <_realloc_r+0x24>
 800fc3c:	f7fe fad4 	bl	800e1e8 <_free_r>
 800fc40:	2400      	movs	r4, #0
 800fc42:	4620      	mov	r0, r4
 800fc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc48:	f000 f8db 	bl	800fe02 <_malloc_usable_size_r>
 800fc4c:	4285      	cmp	r5, r0
 800fc4e:	4606      	mov	r6, r0
 800fc50:	d802      	bhi.n	800fc58 <_realloc_r+0x34>
 800fc52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fc56:	d8f4      	bhi.n	800fc42 <_realloc_r+0x1e>
 800fc58:	4629      	mov	r1, r5
 800fc5a:	4640      	mov	r0, r8
 800fc5c:	f7fe fb3e 	bl	800e2dc <_malloc_r>
 800fc60:	4607      	mov	r7, r0
 800fc62:	2800      	cmp	r0, #0
 800fc64:	d0ec      	beq.n	800fc40 <_realloc_r+0x1c>
 800fc66:	42b5      	cmp	r5, r6
 800fc68:	462a      	mov	r2, r5
 800fc6a:	4621      	mov	r1, r4
 800fc6c:	bf28      	it	cs
 800fc6e:	4632      	movcs	r2, r6
 800fc70:	f7ff ff76 	bl	800fb60 <memcpy>
 800fc74:	4621      	mov	r1, r4
 800fc76:	4640      	mov	r0, r8
 800fc78:	f7fe fab6 	bl	800e1e8 <_free_r>
 800fc7c:	463c      	mov	r4, r7
 800fc7e:	e7e0      	b.n	800fc42 <_realloc_r+0x1e>

0800fc80 <_strtoul_l.constprop.0>:
 800fc80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc84:	4686      	mov	lr, r0
 800fc86:	460d      	mov	r5, r1
 800fc88:	4e33      	ldr	r6, [pc, #204]	@ (800fd58 <_strtoul_l.constprop.0+0xd8>)
 800fc8a:	4628      	mov	r0, r5
 800fc8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc90:	5d37      	ldrb	r7, [r6, r4]
 800fc92:	f017 0708 	ands.w	r7, r7, #8
 800fc96:	d1f8      	bne.n	800fc8a <_strtoul_l.constprop.0+0xa>
 800fc98:	2c2d      	cmp	r4, #45	@ 0x2d
 800fc9a:	d12f      	bne.n	800fcfc <_strtoul_l.constprop.0+0x7c>
 800fc9c:	2701      	movs	r7, #1
 800fc9e:	782c      	ldrb	r4, [r5, #0]
 800fca0:	1c85      	adds	r5, r0, #2
 800fca2:	f033 0010 	bics.w	r0, r3, #16
 800fca6:	d109      	bne.n	800fcbc <_strtoul_l.constprop.0+0x3c>
 800fca8:	2c30      	cmp	r4, #48	@ 0x30
 800fcaa:	d12c      	bne.n	800fd06 <_strtoul_l.constprop.0+0x86>
 800fcac:	7828      	ldrb	r0, [r5, #0]
 800fcae:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800fcb2:	2858      	cmp	r0, #88	@ 0x58
 800fcb4:	d127      	bne.n	800fd06 <_strtoul_l.constprop.0+0x86>
 800fcb6:	2310      	movs	r3, #16
 800fcb8:	786c      	ldrb	r4, [r5, #1]
 800fcba:	3502      	adds	r5, #2
 800fcbc:	f04f 38ff 	mov.w	r8, #4294967295
 800fcc0:	fbb8 f8f3 	udiv	r8, r8, r3
 800fcc4:	2600      	movs	r6, #0
 800fcc6:	fb03 f908 	mul.w	r9, r3, r8
 800fcca:	4630      	mov	r0, r6
 800fccc:	ea6f 0909 	mvn.w	r9, r9
 800fcd0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800fcd4:	f1bc 0f09 	cmp.w	ip, #9
 800fcd8:	d81c      	bhi.n	800fd14 <_strtoul_l.constprop.0+0x94>
 800fcda:	4664      	mov	r4, ip
 800fcdc:	42a3      	cmp	r3, r4
 800fcde:	dd2a      	ble.n	800fd36 <_strtoul_l.constprop.0+0xb6>
 800fce0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800fce4:	d007      	beq.n	800fcf6 <_strtoul_l.constprop.0+0x76>
 800fce6:	4580      	cmp	r8, r0
 800fce8:	d322      	bcc.n	800fd30 <_strtoul_l.constprop.0+0xb0>
 800fcea:	d101      	bne.n	800fcf0 <_strtoul_l.constprop.0+0x70>
 800fcec:	45a1      	cmp	r9, r4
 800fcee:	db1f      	blt.n	800fd30 <_strtoul_l.constprop.0+0xb0>
 800fcf0:	2601      	movs	r6, #1
 800fcf2:	fb00 4003 	mla	r0, r0, r3, r4
 800fcf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fcfa:	e7e9      	b.n	800fcd0 <_strtoul_l.constprop.0+0x50>
 800fcfc:	2c2b      	cmp	r4, #43	@ 0x2b
 800fcfe:	bf04      	itt	eq
 800fd00:	782c      	ldrbeq	r4, [r5, #0]
 800fd02:	1c85      	addeq	r5, r0, #2
 800fd04:	e7cd      	b.n	800fca2 <_strtoul_l.constprop.0+0x22>
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d1d8      	bne.n	800fcbc <_strtoul_l.constprop.0+0x3c>
 800fd0a:	2c30      	cmp	r4, #48	@ 0x30
 800fd0c:	bf0c      	ite	eq
 800fd0e:	2308      	moveq	r3, #8
 800fd10:	230a      	movne	r3, #10
 800fd12:	e7d3      	b.n	800fcbc <_strtoul_l.constprop.0+0x3c>
 800fd14:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800fd18:	f1bc 0f19 	cmp.w	ip, #25
 800fd1c:	d801      	bhi.n	800fd22 <_strtoul_l.constprop.0+0xa2>
 800fd1e:	3c37      	subs	r4, #55	@ 0x37
 800fd20:	e7dc      	b.n	800fcdc <_strtoul_l.constprop.0+0x5c>
 800fd22:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800fd26:	f1bc 0f19 	cmp.w	ip, #25
 800fd2a:	d804      	bhi.n	800fd36 <_strtoul_l.constprop.0+0xb6>
 800fd2c:	3c57      	subs	r4, #87	@ 0x57
 800fd2e:	e7d5      	b.n	800fcdc <_strtoul_l.constprop.0+0x5c>
 800fd30:	f04f 36ff 	mov.w	r6, #4294967295
 800fd34:	e7df      	b.n	800fcf6 <_strtoul_l.constprop.0+0x76>
 800fd36:	1c73      	adds	r3, r6, #1
 800fd38:	d106      	bne.n	800fd48 <_strtoul_l.constprop.0+0xc8>
 800fd3a:	2322      	movs	r3, #34	@ 0x22
 800fd3c:	4630      	mov	r0, r6
 800fd3e:	f8ce 3000 	str.w	r3, [lr]
 800fd42:	b932      	cbnz	r2, 800fd52 <_strtoul_l.constprop.0+0xd2>
 800fd44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd48:	b107      	cbz	r7, 800fd4c <_strtoul_l.constprop.0+0xcc>
 800fd4a:	4240      	negs	r0, r0
 800fd4c:	2a00      	cmp	r2, #0
 800fd4e:	d0f9      	beq.n	800fd44 <_strtoul_l.constprop.0+0xc4>
 800fd50:	b106      	cbz	r6, 800fd54 <_strtoul_l.constprop.0+0xd4>
 800fd52:	1e69      	subs	r1, r5, #1
 800fd54:	6011      	str	r1, [r2, #0]
 800fd56:	e7f5      	b.n	800fd44 <_strtoul_l.constprop.0+0xc4>
 800fd58:	08010b95 	.word	0x08010b95

0800fd5c <_strtoul_r>:
 800fd5c:	f7ff bf90 	b.w	800fc80 <_strtoul_l.constprop.0>

0800fd60 <strtoul_l>:
 800fd60:	4613      	mov	r3, r2
 800fd62:	460a      	mov	r2, r1
 800fd64:	4601      	mov	r1, r0
 800fd66:	4802      	ldr	r0, [pc, #8]	@ (800fd70 <strtoul_l+0x10>)
 800fd68:	6800      	ldr	r0, [r0, #0]
 800fd6a:	f7ff bf89 	b.w	800fc80 <_strtoul_l.constprop.0>
 800fd6e:	bf00      	nop
 800fd70:	20000020 	.word	0x20000020

0800fd74 <strtoul>:
 800fd74:	4613      	mov	r3, r2
 800fd76:	460a      	mov	r2, r1
 800fd78:	4601      	mov	r1, r0
 800fd7a:	4802      	ldr	r0, [pc, #8]	@ (800fd84 <strtoul+0x10>)
 800fd7c:	6800      	ldr	r0, [r0, #0]
 800fd7e:	f7ff bf7f 	b.w	800fc80 <_strtoul_l.constprop.0>
 800fd82:	bf00      	nop
 800fd84:	20000020 	.word	0x20000020

0800fd88 <_wctomb_r>:
 800fd88:	b410      	push	{r4}
 800fd8a:	4c03      	ldr	r4, [pc, #12]	@ (800fd98 <_wctomb_r+0x10>)
 800fd8c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	@ 0xe0
 800fd90:	46a4      	mov	ip, r4
 800fd92:	bc10      	pop	{r4}
 800fd94:	4760      	bx	ip
 800fd96:	bf00      	nop
 800fd98:	20000070 	.word	0x20000070

0800fd9c <__ascii_wctomb>:
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	4608      	mov	r0, r1
 800fda0:	b141      	cbz	r1, 800fdb4 <__ascii_wctomb+0x18>
 800fda2:	2aff      	cmp	r2, #255	@ 0xff
 800fda4:	d904      	bls.n	800fdb0 <__ascii_wctomb+0x14>
 800fda6:	228a      	movs	r2, #138	@ 0x8a
 800fda8:	f04f 30ff 	mov.w	r0, #4294967295
 800fdac:	601a      	str	r2, [r3, #0]
 800fdae:	4770      	bx	lr
 800fdb0:	2001      	movs	r0, #1
 800fdb2:	700a      	strb	r2, [r1, #0]
 800fdb4:	4770      	bx	lr

0800fdb6 <_fiprintf_r>:
 800fdb6:	b40c      	push	{r2, r3}
 800fdb8:	b507      	push	{r0, r1, r2, lr}
 800fdba:	ab04      	add	r3, sp, #16
 800fdbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdc0:	9301      	str	r3, [sp, #4]
 800fdc2:	f000 f85b 	bl	800fe7c <_vfiprintf_r>
 800fdc6:	b003      	add	sp, #12
 800fdc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdcc:	b002      	add	sp, #8
 800fdce:	4770      	bx	lr

0800fdd0 <fiprintf>:
 800fdd0:	b40e      	push	{r1, r2, r3}
 800fdd2:	b503      	push	{r0, r1, lr}
 800fdd4:	4601      	mov	r1, r0
 800fdd6:	ab03      	add	r3, sp, #12
 800fdd8:	4805      	ldr	r0, [pc, #20]	@ (800fdf0 <fiprintf+0x20>)
 800fdda:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdde:	6800      	ldr	r0, [r0, #0]
 800fde0:	9301      	str	r3, [sp, #4]
 800fde2:	f000 f84b 	bl	800fe7c <_vfiprintf_r>
 800fde6:	b002      	add	sp, #8
 800fde8:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdec:	b003      	add	sp, #12
 800fdee:	4770      	bx	lr
 800fdf0:	20000020 	.word	0x20000020

0800fdf4 <abort>:
 800fdf4:	2006      	movs	r0, #6
 800fdf6:	b508      	push	{r3, lr}
 800fdf8:	f000 fbc2 	bl	8010580 <raise>
 800fdfc:	2001      	movs	r0, #1
 800fdfe:	f7f2 fd56 	bl	80028ae <_exit>

0800fe02 <_malloc_usable_size_r>:
 800fe02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe06:	1f18      	subs	r0, r3, #4
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	bfbc      	itt	lt
 800fe0c:	580b      	ldrlt	r3, [r1, r0]
 800fe0e:	18c0      	addlt	r0, r0, r3
 800fe10:	4770      	bx	lr

0800fe12 <__sfputc_r>:
 800fe12:	6893      	ldr	r3, [r2, #8]
 800fe14:	b410      	push	{r4}
 800fe16:	3b01      	subs	r3, #1
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	6093      	str	r3, [r2, #8]
 800fe1c:	da07      	bge.n	800fe2e <__sfputc_r+0x1c>
 800fe1e:	6994      	ldr	r4, [r2, #24]
 800fe20:	42a3      	cmp	r3, r4
 800fe22:	db01      	blt.n	800fe28 <__sfputc_r+0x16>
 800fe24:	290a      	cmp	r1, #10
 800fe26:	d102      	bne.n	800fe2e <__sfputc_r+0x1c>
 800fe28:	bc10      	pop	{r4}
 800fe2a:	f000 ba95 	b.w	8010358 <__swbuf_r>
 800fe2e:	6813      	ldr	r3, [r2, #0]
 800fe30:	1c58      	adds	r0, r3, #1
 800fe32:	6010      	str	r0, [r2, #0]
 800fe34:	7019      	strb	r1, [r3, #0]
 800fe36:	4608      	mov	r0, r1
 800fe38:	bc10      	pop	{r4}
 800fe3a:	4770      	bx	lr

0800fe3c <__sfputs_r>:
 800fe3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe3e:	4606      	mov	r6, r0
 800fe40:	460f      	mov	r7, r1
 800fe42:	4614      	mov	r4, r2
 800fe44:	18d5      	adds	r5, r2, r3
 800fe46:	42ac      	cmp	r4, r5
 800fe48:	d101      	bne.n	800fe4e <__sfputs_r+0x12>
 800fe4a:	2000      	movs	r0, #0
 800fe4c:	e007      	b.n	800fe5e <__sfputs_r+0x22>
 800fe4e:	463a      	mov	r2, r7
 800fe50:	4630      	mov	r0, r6
 800fe52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe56:	f7ff ffdc 	bl	800fe12 <__sfputc_r>
 800fe5a:	1c43      	adds	r3, r0, #1
 800fe5c:	d1f3      	bne.n	800fe46 <__sfputs_r+0xa>
 800fe5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fe60 <__sprint_r>:
 800fe60:	6893      	ldr	r3, [r2, #8]
 800fe62:	b510      	push	{r4, lr}
 800fe64:	4614      	mov	r4, r2
 800fe66:	b133      	cbz	r3, 800fe76 <__sprint_r+0x16>
 800fe68:	f000 f92a 	bl	80100c0 <__sfvwrite_r>
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	60a3      	str	r3, [r4, #8]
 800fe70:	2300      	movs	r3, #0
 800fe72:	6063      	str	r3, [r4, #4]
 800fe74:	bd10      	pop	{r4, pc}
 800fe76:	4618      	mov	r0, r3
 800fe78:	e7fa      	b.n	800fe70 <__sprint_r+0x10>
	...

0800fe7c <_vfiprintf_r>:
 800fe7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe80:	460d      	mov	r5, r1
 800fe82:	4614      	mov	r4, r2
 800fe84:	4698      	mov	r8, r3
 800fe86:	4606      	mov	r6, r0
 800fe88:	b09d      	sub	sp, #116	@ 0x74
 800fe8a:	b118      	cbz	r0, 800fe94 <_vfiprintf_r+0x18>
 800fe8c:	6a03      	ldr	r3, [r0, #32]
 800fe8e:	b90b      	cbnz	r3, 800fe94 <_vfiprintf_r+0x18>
 800fe90:	f7fd f8e0 	bl	800d054 <__sinit>
 800fe94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fe96:	07d9      	lsls	r1, r3, #31
 800fe98:	d405      	bmi.n	800fea6 <_vfiprintf_r+0x2a>
 800fe9a:	89ab      	ldrh	r3, [r5, #12]
 800fe9c:	059a      	lsls	r2, r3, #22
 800fe9e:	d402      	bmi.n	800fea6 <_vfiprintf_r+0x2a>
 800fea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fea2:	f7fd fb3c 	bl	800d51e <__retarget_lock_acquire_recursive>
 800fea6:	89ab      	ldrh	r3, [r5, #12]
 800fea8:	071b      	lsls	r3, r3, #28
 800feaa:	d501      	bpl.n	800feb0 <_vfiprintf_r+0x34>
 800feac:	692b      	ldr	r3, [r5, #16]
 800feae:	b99b      	cbnz	r3, 800fed8 <_vfiprintf_r+0x5c>
 800feb0:	4629      	mov	r1, r5
 800feb2:	4630      	mov	r0, r6
 800feb4:	f000 fa96 	bl	80103e4 <__swsetup_r>
 800feb8:	b170      	cbz	r0, 800fed8 <_vfiprintf_r+0x5c>
 800feba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800febc:	07dc      	lsls	r4, r3, #31
 800febe:	d504      	bpl.n	800feca <_vfiprintf_r+0x4e>
 800fec0:	f04f 30ff 	mov.w	r0, #4294967295
 800fec4:	b01d      	add	sp, #116	@ 0x74
 800fec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feca:	89ab      	ldrh	r3, [r5, #12]
 800fecc:	0598      	lsls	r0, r3, #22
 800fece:	d4f7      	bmi.n	800fec0 <_vfiprintf_r+0x44>
 800fed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fed2:	f7fd fb2a 	bl	800d52a <__retarget_lock_release_recursive>
 800fed6:	e7f3      	b.n	800fec0 <_vfiprintf_r+0x44>
 800fed8:	2300      	movs	r3, #0
 800feda:	9309      	str	r3, [sp, #36]	@ 0x24
 800fedc:	2320      	movs	r3, #32
 800fede:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fee2:	2330      	movs	r3, #48	@ 0x30
 800fee4:	f04f 0901 	mov.w	r9, #1
 800fee8:	f8cd 800c 	str.w	r8, [sp, #12]
 800feec:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8010098 <_vfiprintf_r+0x21c>
 800fef0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fef4:	4623      	mov	r3, r4
 800fef6:	469a      	mov	sl, r3
 800fef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fefc:	b10a      	cbz	r2, 800ff02 <_vfiprintf_r+0x86>
 800fefe:	2a25      	cmp	r2, #37	@ 0x25
 800ff00:	d1f9      	bne.n	800fef6 <_vfiprintf_r+0x7a>
 800ff02:	ebba 0b04 	subs.w	fp, sl, r4
 800ff06:	d00b      	beq.n	800ff20 <_vfiprintf_r+0xa4>
 800ff08:	465b      	mov	r3, fp
 800ff0a:	4622      	mov	r2, r4
 800ff0c:	4629      	mov	r1, r5
 800ff0e:	4630      	mov	r0, r6
 800ff10:	f7ff ff94 	bl	800fe3c <__sfputs_r>
 800ff14:	3001      	adds	r0, #1
 800ff16:	f000 80a7 	beq.w	8010068 <_vfiprintf_r+0x1ec>
 800ff1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff1c:	445a      	add	r2, fp
 800ff1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ff20:	f89a 3000 	ldrb.w	r3, [sl]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	f000 809f 	beq.w	8010068 <_vfiprintf_r+0x1ec>
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ff30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff34:	f10a 0a01 	add.w	sl, sl, #1
 800ff38:	9304      	str	r3, [sp, #16]
 800ff3a:	9307      	str	r3, [sp, #28]
 800ff3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ff40:	931a      	str	r3, [sp, #104]	@ 0x68
 800ff42:	4654      	mov	r4, sl
 800ff44:	2205      	movs	r2, #5
 800ff46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff4a:	4853      	ldr	r0, [pc, #332]	@ (8010098 <_vfiprintf_r+0x21c>)
 800ff4c:	f7fd faee 	bl	800d52c <memchr>
 800ff50:	9a04      	ldr	r2, [sp, #16]
 800ff52:	b9d8      	cbnz	r0, 800ff8c <_vfiprintf_r+0x110>
 800ff54:	06d1      	lsls	r1, r2, #27
 800ff56:	bf44      	itt	mi
 800ff58:	2320      	movmi	r3, #32
 800ff5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff5e:	0713      	lsls	r3, r2, #28
 800ff60:	bf44      	itt	mi
 800ff62:	232b      	movmi	r3, #43	@ 0x2b
 800ff64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff68:	f89a 3000 	ldrb.w	r3, [sl]
 800ff6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff6e:	d015      	beq.n	800ff9c <_vfiprintf_r+0x120>
 800ff70:	4654      	mov	r4, sl
 800ff72:	2000      	movs	r0, #0
 800ff74:	f04f 0c0a 	mov.w	ip, #10
 800ff78:	9a07      	ldr	r2, [sp, #28]
 800ff7a:	4621      	mov	r1, r4
 800ff7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff80:	3b30      	subs	r3, #48	@ 0x30
 800ff82:	2b09      	cmp	r3, #9
 800ff84:	d94b      	bls.n	801001e <_vfiprintf_r+0x1a2>
 800ff86:	b1b0      	cbz	r0, 800ffb6 <_vfiprintf_r+0x13a>
 800ff88:	9207      	str	r2, [sp, #28]
 800ff8a:	e014      	b.n	800ffb6 <_vfiprintf_r+0x13a>
 800ff8c:	eba0 0308 	sub.w	r3, r0, r8
 800ff90:	fa09 f303 	lsl.w	r3, r9, r3
 800ff94:	4313      	orrs	r3, r2
 800ff96:	46a2      	mov	sl, r4
 800ff98:	9304      	str	r3, [sp, #16]
 800ff9a:	e7d2      	b.n	800ff42 <_vfiprintf_r+0xc6>
 800ff9c:	9b03      	ldr	r3, [sp, #12]
 800ff9e:	1d19      	adds	r1, r3, #4
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	9103      	str	r1, [sp, #12]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	bfbb      	ittet	lt
 800ffa8:	425b      	neglt	r3, r3
 800ffaa:	f042 0202 	orrlt.w	r2, r2, #2
 800ffae:	9307      	strge	r3, [sp, #28]
 800ffb0:	9307      	strlt	r3, [sp, #28]
 800ffb2:	bfb8      	it	lt
 800ffb4:	9204      	strlt	r2, [sp, #16]
 800ffb6:	7823      	ldrb	r3, [r4, #0]
 800ffb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800ffba:	d10a      	bne.n	800ffd2 <_vfiprintf_r+0x156>
 800ffbc:	7863      	ldrb	r3, [r4, #1]
 800ffbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800ffc0:	d132      	bne.n	8010028 <_vfiprintf_r+0x1ac>
 800ffc2:	9b03      	ldr	r3, [sp, #12]
 800ffc4:	3402      	adds	r4, #2
 800ffc6:	1d1a      	adds	r2, r3, #4
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	9203      	str	r2, [sp, #12]
 800ffcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ffd0:	9305      	str	r3, [sp, #20]
 800ffd2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 801009c <_vfiprintf_r+0x220>
 800ffd6:	2203      	movs	r2, #3
 800ffd8:	4650      	mov	r0, sl
 800ffda:	7821      	ldrb	r1, [r4, #0]
 800ffdc:	f7fd faa6 	bl	800d52c <memchr>
 800ffe0:	b138      	cbz	r0, 800fff2 <_vfiprintf_r+0x176>
 800ffe2:	2240      	movs	r2, #64	@ 0x40
 800ffe4:	9b04      	ldr	r3, [sp, #16]
 800ffe6:	eba0 000a 	sub.w	r0, r0, sl
 800ffea:	4082      	lsls	r2, r0
 800ffec:	4313      	orrs	r3, r2
 800ffee:	3401      	adds	r4, #1
 800fff0:	9304      	str	r3, [sp, #16]
 800fff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fff6:	2206      	movs	r2, #6
 800fff8:	4829      	ldr	r0, [pc, #164]	@ (80100a0 <_vfiprintf_r+0x224>)
 800fffa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fffe:	f7fd fa95 	bl	800d52c <memchr>
 8010002:	2800      	cmp	r0, #0
 8010004:	d03f      	beq.n	8010086 <_vfiprintf_r+0x20a>
 8010006:	4b27      	ldr	r3, [pc, #156]	@ (80100a4 <_vfiprintf_r+0x228>)
 8010008:	bb1b      	cbnz	r3, 8010052 <_vfiprintf_r+0x1d6>
 801000a:	9b03      	ldr	r3, [sp, #12]
 801000c:	3307      	adds	r3, #7
 801000e:	f023 0307 	bic.w	r3, r3, #7
 8010012:	3308      	adds	r3, #8
 8010014:	9303      	str	r3, [sp, #12]
 8010016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010018:	443b      	add	r3, r7
 801001a:	9309      	str	r3, [sp, #36]	@ 0x24
 801001c:	e76a      	b.n	800fef4 <_vfiprintf_r+0x78>
 801001e:	460c      	mov	r4, r1
 8010020:	2001      	movs	r0, #1
 8010022:	fb0c 3202 	mla	r2, ip, r2, r3
 8010026:	e7a8      	b.n	800ff7a <_vfiprintf_r+0xfe>
 8010028:	2300      	movs	r3, #0
 801002a:	f04f 0c0a 	mov.w	ip, #10
 801002e:	4619      	mov	r1, r3
 8010030:	3401      	adds	r4, #1
 8010032:	9305      	str	r3, [sp, #20]
 8010034:	4620      	mov	r0, r4
 8010036:	f810 2b01 	ldrb.w	r2, [r0], #1
 801003a:	3a30      	subs	r2, #48	@ 0x30
 801003c:	2a09      	cmp	r2, #9
 801003e:	d903      	bls.n	8010048 <_vfiprintf_r+0x1cc>
 8010040:	2b00      	cmp	r3, #0
 8010042:	d0c6      	beq.n	800ffd2 <_vfiprintf_r+0x156>
 8010044:	9105      	str	r1, [sp, #20]
 8010046:	e7c4      	b.n	800ffd2 <_vfiprintf_r+0x156>
 8010048:	4604      	mov	r4, r0
 801004a:	2301      	movs	r3, #1
 801004c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010050:	e7f0      	b.n	8010034 <_vfiprintf_r+0x1b8>
 8010052:	ab03      	add	r3, sp, #12
 8010054:	9300      	str	r3, [sp, #0]
 8010056:	462a      	mov	r2, r5
 8010058:	4630      	mov	r0, r6
 801005a:	4b13      	ldr	r3, [pc, #76]	@ (80100a8 <_vfiprintf_r+0x22c>)
 801005c:	a904      	add	r1, sp, #16
 801005e:	f7fc fb45 	bl	800c6ec <_printf_float>
 8010062:	4607      	mov	r7, r0
 8010064:	1c78      	adds	r0, r7, #1
 8010066:	d1d6      	bne.n	8010016 <_vfiprintf_r+0x19a>
 8010068:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801006a:	07d9      	lsls	r1, r3, #31
 801006c:	d405      	bmi.n	801007a <_vfiprintf_r+0x1fe>
 801006e:	89ab      	ldrh	r3, [r5, #12]
 8010070:	059a      	lsls	r2, r3, #22
 8010072:	d402      	bmi.n	801007a <_vfiprintf_r+0x1fe>
 8010074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010076:	f7fd fa58 	bl	800d52a <__retarget_lock_release_recursive>
 801007a:	89ab      	ldrh	r3, [r5, #12]
 801007c:	065b      	lsls	r3, r3, #25
 801007e:	f53f af1f 	bmi.w	800fec0 <_vfiprintf_r+0x44>
 8010082:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010084:	e71e      	b.n	800fec4 <_vfiprintf_r+0x48>
 8010086:	ab03      	add	r3, sp, #12
 8010088:	9300      	str	r3, [sp, #0]
 801008a:	462a      	mov	r2, r5
 801008c:	4630      	mov	r0, r6
 801008e:	4b06      	ldr	r3, [pc, #24]	@ (80100a8 <_vfiprintf_r+0x22c>)
 8010090:	a904      	add	r1, sp, #16
 8010092:	f7fc fdc9 	bl	800cc28 <_printf_i>
 8010096:	e7e4      	b.n	8010062 <_vfiprintf_r+0x1e6>
 8010098:	08010ed8 	.word	0x08010ed8
 801009c:	08010ede 	.word	0x08010ede
 80100a0:	08010ee2 	.word	0x08010ee2
 80100a4:	0800c6ed 	.word	0x0800c6ed
 80100a8:	0800fe3d 	.word	0x0800fe3d

080100ac <vfiprintf>:
 80100ac:	4613      	mov	r3, r2
 80100ae:	460a      	mov	r2, r1
 80100b0:	4601      	mov	r1, r0
 80100b2:	4802      	ldr	r0, [pc, #8]	@ (80100bc <vfiprintf+0x10>)
 80100b4:	6800      	ldr	r0, [r0, #0]
 80100b6:	f7ff bee1 	b.w	800fe7c <_vfiprintf_r>
 80100ba:	bf00      	nop
 80100bc:	20000020 	.word	0x20000020

080100c0 <__sfvwrite_r>:
 80100c0:	6893      	ldr	r3, [r2, #8]
 80100c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100c6:	4606      	mov	r6, r0
 80100c8:	460c      	mov	r4, r1
 80100ca:	4691      	mov	r9, r2
 80100cc:	b91b      	cbnz	r3, 80100d6 <__sfvwrite_r+0x16>
 80100ce:	2000      	movs	r0, #0
 80100d0:	b003      	add	sp, #12
 80100d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100d6:	898b      	ldrh	r3, [r1, #12]
 80100d8:	0718      	lsls	r0, r3, #28
 80100da:	d550      	bpl.n	801017e <__sfvwrite_r+0xbe>
 80100dc:	690b      	ldr	r3, [r1, #16]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d04d      	beq.n	801017e <__sfvwrite_r+0xbe>
 80100e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100e6:	f8d9 8000 	ldr.w	r8, [r9]
 80100ea:	f013 0702 	ands.w	r7, r3, #2
 80100ee:	d16b      	bne.n	80101c8 <__sfvwrite_r+0x108>
 80100f0:	f013 0301 	ands.w	r3, r3, #1
 80100f4:	f000 809c 	beq.w	8010230 <__sfvwrite_r+0x170>
 80100f8:	4638      	mov	r0, r7
 80100fa:	46ba      	mov	sl, r7
 80100fc:	46bb      	mov	fp, r7
 80100fe:	f1bb 0f00 	cmp.w	fp, #0
 8010102:	f000 8103 	beq.w	801030c <__sfvwrite_r+0x24c>
 8010106:	b950      	cbnz	r0, 801011e <__sfvwrite_r+0x5e>
 8010108:	465a      	mov	r2, fp
 801010a:	210a      	movs	r1, #10
 801010c:	4650      	mov	r0, sl
 801010e:	f7fd fa0d 	bl	800d52c <memchr>
 8010112:	2800      	cmp	r0, #0
 8010114:	f000 8100 	beq.w	8010318 <__sfvwrite_r+0x258>
 8010118:	3001      	adds	r0, #1
 801011a:	eba0 070a 	sub.w	r7, r0, sl
 801011e:	6820      	ldr	r0, [r4, #0]
 8010120:	6921      	ldr	r1, [r4, #16]
 8010122:	455f      	cmp	r7, fp
 8010124:	463a      	mov	r2, r7
 8010126:	bf28      	it	cs
 8010128:	465a      	movcs	r2, fp
 801012a:	4288      	cmp	r0, r1
 801012c:	68a5      	ldr	r5, [r4, #8]
 801012e:	6963      	ldr	r3, [r4, #20]
 8010130:	f240 80f5 	bls.w	801031e <__sfvwrite_r+0x25e>
 8010134:	441d      	add	r5, r3
 8010136:	42aa      	cmp	r2, r5
 8010138:	f340 80f1 	ble.w	801031e <__sfvwrite_r+0x25e>
 801013c:	4651      	mov	r1, sl
 801013e:	462a      	mov	r2, r5
 8010140:	f7ff fcb8 	bl	800fab4 <memmove>
 8010144:	6823      	ldr	r3, [r4, #0]
 8010146:	4621      	mov	r1, r4
 8010148:	442b      	add	r3, r5
 801014a:	4630      	mov	r0, r6
 801014c:	6023      	str	r3, [r4, #0]
 801014e:	f7ff fb7d 	bl	800f84c <_fflush_r>
 8010152:	2800      	cmp	r0, #0
 8010154:	d167      	bne.n	8010226 <__sfvwrite_r+0x166>
 8010156:	1b7f      	subs	r7, r7, r5
 8010158:	f040 80f9 	bne.w	801034e <__sfvwrite_r+0x28e>
 801015c:	4621      	mov	r1, r4
 801015e:	4630      	mov	r0, r6
 8010160:	f7ff fb74 	bl	800f84c <_fflush_r>
 8010164:	2800      	cmp	r0, #0
 8010166:	d15e      	bne.n	8010226 <__sfvwrite_r+0x166>
 8010168:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801016c:	44aa      	add	sl, r5
 801016e:	1b5b      	subs	r3, r3, r5
 8010170:	ebab 0b05 	sub.w	fp, fp, r5
 8010174:	f8c9 3008 	str.w	r3, [r9, #8]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d1c0      	bne.n	80100fe <__sfvwrite_r+0x3e>
 801017c:	e7a7      	b.n	80100ce <__sfvwrite_r+0xe>
 801017e:	4621      	mov	r1, r4
 8010180:	4630      	mov	r0, r6
 8010182:	f000 f92f 	bl	80103e4 <__swsetup_r>
 8010186:	2800      	cmp	r0, #0
 8010188:	d0ab      	beq.n	80100e2 <__sfvwrite_r+0x22>
 801018a:	f04f 30ff 	mov.w	r0, #4294967295
 801018e:	e79f      	b.n	80100d0 <__sfvwrite_r+0x10>
 8010190:	e9d8 a500 	ldrd	sl, r5, [r8]
 8010194:	f108 0808 	add.w	r8, r8, #8
 8010198:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 801019c:	6a21      	ldr	r1, [r4, #32]
 801019e:	2d00      	cmp	r5, #0
 80101a0:	d0f6      	beq.n	8010190 <__sfvwrite_r+0xd0>
 80101a2:	42bd      	cmp	r5, r7
 80101a4:	462b      	mov	r3, r5
 80101a6:	4652      	mov	r2, sl
 80101a8:	bf28      	it	cs
 80101aa:	463b      	movcs	r3, r7
 80101ac:	4630      	mov	r0, r6
 80101ae:	47d8      	blx	fp
 80101b0:	2800      	cmp	r0, #0
 80101b2:	dd38      	ble.n	8010226 <__sfvwrite_r+0x166>
 80101b4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80101b8:	4482      	add	sl, r0
 80101ba:	1a1b      	subs	r3, r3, r0
 80101bc:	1a2d      	subs	r5, r5, r0
 80101be:	f8c9 3008 	str.w	r3, [r9, #8]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d1e8      	bne.n	8010198 <__sfvwrite_r+0xd8>
 80101c6:	e782      	b.n	80100ce <__sfvwrite_r+0xe>
 80101c8:	f04f 0a00 	mov.w	sl, #0
 80101cc:	4f61      	ldr	r7, [pc, #388]	@ (8010354 <__sfvwrite_r+0x294>)
 80101ce:	4655      	mov	r5, sl
 80101d0:	e7e2      	b.n	8010198 <__sfvwrite_r+0xd8>
 80101d2:	e9d8 7a00 	ldrd	r7, sl, [r8]
 80101d6:	f108 0808 	add.w	r8, r8, #8
 80101da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101de:	6820      	ldr	r0, [r4, #0]
 80101e0:	68a2      	ldr	r2, [r4, #8]
 80101e2:	f1ba 0f00 	cmp.w	sl, #0
 80101e6:	d0f4      	beq.n	80101d2 <__sfvwrite_r+0x112>
 80101e8:	0599      	lsls	r1, r3, #22
 80101ea:	d563      	bpl.n	80102b4 <__sfvwrite_r+0x1f4>
 80101ec:	4552      	cmp	r2, sl
 80101ee:	d836      	bhi.n	801025e <__sfvwrite_r+0x19e>
 80101f0:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 80101f4:	d033      	beq.n	801025e <__sfvwrite_r+0x19e>
 80101f6:	6921      	ldr	r1, [r4, #16]
 80101f8:	6965      	ldr	r5, [r4, #20]
 80101fa:	eba0 0b01 	sub.w	fp, r0, r1
 80101fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010202:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010206:	f10b 0201 	add.w	r2, fp, #1
 801020a:	106d      	asrs	r5, r5, #1
 801020c:	4452      	add	r2, sl
 801020e:	4295      	cmp	r5, r2
 8010210:	bf38      	it	cc
 8010212:	4615      	movcc	r5, r2
 8010214:	055b      	lsls	r3, r3, #21
 8010216:	d53d      	bpl.n	8010294 <__sfvwrite_r+0x1d4>
 8010218:	4629      	mov	r1, r5
 801021a:	4630      	mov	r0, r6
 801021c:	f7fe f85e 	bl	800e2dc <_malloc_r>
 8010220:	b948      	cbnz	r0, 8010236 <__sfvwrite_r+0x176>
 8010222:	230c      	movs	r3, #12
 8010224:	6033      	str	r3, [r6, #0]
 8010226:	89a3      	ldrh	r3, [r4, #12]
 8010228:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801022c:	81a3      	strh	r3, [r4, #12]
 801022e:	e7ac      	b.n	801018a <__sfvwrite_r+0xca>
 8010230:	461f      	mov	r7, r3
 8010232:	469a      	mov	sl, r3
 8010234:	e7d1      	b.n	80101da <__sfvwrite_r+0x11a>
 8010236:	465a      	mov	r2, fp
 8010238:	6921      	ldr	r1, [r4, #16]
 801023a:	9001      	str	r0, [sp, #4]
 801023c:	f7ff fc90 	bl	800fb60 <memcpy>
 8010240:	89a2      	ldrh	r2, [r4, #12]
 8010242:	9b01      	ldr	r3, [sp, #4]
 8010244:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8010248:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801024c:	81a2      	strh	r2, [r4, #12]
 801024e:	4652      	mov	r2, sl
 8010250:	6123      	str	r3, [r4, #16]
 8010252:	6165      	str	r5, [r4, #20]
 8010254:	445b      	add	r3, fp
 8010256:	eba5 050b 	sub.w	r5, r5, fp
 801025a:	6023      	str	r3, [r4, #0]
 801025c:	60a5      	str	r5, [r4, #8]
 801025e:	4552      	cmp	r2, sl
 8010260:	bf28      	it	cs
 8010262:	4652      	movcs	r2, sl
 8010264:	4655      	mov	r5, sl
 8010266:	4639      	mov	r1, r7
 8010268:	6820      	ldr	r0, [r4, #0]
 801026a:	9201      	str	r2, [sp, #4]
 801026c:	f7ff fc22 	bl	800fab4 <memmove>
 8010270:	68a3      	ldr	r3, [r4, #8]
 8010272:	9a01      	ldr	r2, [sp, #4]
 8010274:	1a9b      	subs	r3, r3, r2
 8010276:	60a3      	str	r3, [r4, #8]
 8010278:	6823      	ldr	r3, [r4, #0]
 801027a:	4413      	add	r3, r2
 801027c:	6023      	str	r3, [r4, #0]
 801027e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010282:	442f      	add	r7, r5
 8010284:	1b5b      	subs	r3, r3, r5
 8010286:	ebaa 0a05 	sub.w	sl, sl, r5
 801028a:	f8c9 3008 	str.w	r3, [r9, #8]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d1a3      	bne.n	80101da <__sfvwrite_r+0x11a>
 8010292:	e71c      	b.n	80100ce <__sfvwrite_r+0xe>
 8010294:	462a      	mov	r2, r5
 8010296:	4630      	mov	r0, r6
 8010298:	f7ff fcc4 	bl	800fc24 <_realloc_r>
 801029c:	4603      	mov	r3, r0
 801029e:	2800      	cmp	r0, #0
 80102a0:	d1d5      	bne.n	801024e <__sfvwrite_r+0x18e>
 80102a2:	4630      	mov	r0, r6
 80102a4:	6921      	ldr	r1, [r4, #16]
 80102a6:	f7fd ff9f 	bl	800e1e8 <_free_r>
 80102aa:	89a3      	ldrh	r3, [r4, #12]
 80102ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80102b0:	81a3      	strh	r3, [r4, #12]
 80102b2:	e7b6      	b.n	8010222 <__sfvwrite_r+0x162>
 80102b4:	6923      	ldr	r3, [r4, #16]
 80102b6:	4283      	cmp	r3, r0
 80102b8:	d302      	bcc.n	80102c0 <__sfvwrite_r+0x200>
 80102ba:	6961      	ldr	r1, [r4, #20]
 80102bc:	4551      	cmp	r1, sl
 80102be:	d915      	bls.n	80102ec <__sfvwrite_r+0x22c>
 80102c0:	4552      	cmp	r2, sl
 80102c2:	bf28      	it	cs
 80102c4:	4652      	movcs	r2, sl
 80102c6:	4615      	mov	r5, r2
 80102c8:	4639      	mov	r1, r7
 80102ca:	f7ff fbf3 	bl	800fab4 <memmove>
 80102ce:	68a3      	ldr	r3, [r4, #8]
 80102d0:	6822      	ldr	r2, [r4, #0]
 80102d2:	1b5b      	subs	r3, r3, r5
 80102d4:	442a      	add	r2, r5
 80102d6:	60a3      	str	r3, [r4, #8]
 80102d8:	6022      	str	r2, [r4, #0]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d1cf      	bne.n	801027e <__sfvwrite_r+0x1be>
 80102de:	4621      	mov	r1, r4
 80102e0:	4630      	mov	r0, r6
 80102e2:	f7ff fab3 	bl	800f84c <_fflush_r>
 80102e6:	2800      	cmp	r0, #0
 80102e8:	d0c9      	beq.n	801027e <__sfvwrite_r+0x1be>
 80102ea:	e79c      	b.n	8010226 <__sfvwrite_r+0x166>
 80102ec:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80102f0:	4553      	cmp	r3, sl
 80102f2:	bf28      	it	cs
 80102f4:	4653      	movcs	r3, sl
 80102f6:	fb93 f3f1 	sdiv	r3, r3, r1
 80102fa:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80102fc:	434b      	muls	r3, r1
 80102fe:	463a      	mov	r2, r7
 8010300:	4630      	mov	r0, r6
 8010302:	6a21      	ldr	r1, [r4, #32]
 8010304:	47a8      	blx	r5
 8010306:	1e05      	subs	r5, r0, #0
 8010308:	dcb9      	bgt.n	801027e <__sfvwrite_r+0x1be>
 801030a:	e78c      	b.n	8010226 <__sfvwrite_r+0x166>
 801030c:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8010310:	2000      	movs	r0, #0
 8010312:	f108 0808 	add.w	r8, r8, #8
 8010316:	e6f2      	b.n	80100fe <__sfvwrite_r+0x3e>
 8010318:	f10b 0701 	add.w	r7, fp, #1
 801031c:	e6ff      	b.n	801011e <__sfvwrite_r+0x5e>
 801031e:	4293      	cmp	r3, r2
 8010320:	dc08      	bgt.n	8010334 <__sfvwrite_r+0x274>
 8010322:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8010324:	4652      	mov	r2, sl
 8010326:	4630      	mov	r0, r6
 8010328:	6a21      	ldr	r1, [r4, #32]
 801032a:	47a8      	blx	r5
 801032c:	1e05      	subs	r5, r0, #0
 801032e:	f73f af12 	bgt.w	8010156 <__sfvwrite_r+0x96>
 8010332:	e778      	b.n	8010226 <__sfvwrite_r+0x166>
 8010334:	4651      	mov	r1, sl
 8010336:	9201      	str	r2, [sp, #4]
 8010338:	f7ff fbbc 	bl	800fab4 <memmove>
 801033c:	9a01      	ldr	r2, [sp, #4]
 801033e:	68a3      	ldr	r3, [r4, #8]
 8010340:	4615      	mov	r5, r2
 8010342:	1a9b      	subs	r3, r3, r2
 8010344:	60a3      	str	r3, [r4, #8]
 8010346:	6823      	ldr	r3, [r4, #0]
 8010348:	4413      	add	r3, r2
 801034a:	6023      	str	r3, [r4, #0]
 801034c:	e703      	b.n	8010156 <__sfvwrite_r+0x96>
 801034e:	2001      	movs	r0, #1
 8010350:	e70a      	b.n	8010168 <__sfvwrite_r+0xa8>
 8010352:	bf00      	nop
 8010354:	7ffffc00 	.word	0x7ffffc00

08010358 <__swbuf_r>:
 8010358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801035a:	460e      	mov	r6, r1
 801035c:	4614      	mov	r4, r2
 801035e:	4605      	mov	r5, r0
 8010360:	b118      	cbz	r0, 801036a <__swbuf_r+0x12>
 8010362:	6a03      	ldr	r3, [r0, #32]
 8010364:	b90b      	cbnz	r3, 801036a <__swbuf_r+0x12>
 8010366:	f7fc fe75 	bl	800d054 <__sinit>
 801036a:	69a3      	ldr	r3, [r4, #24]
 801036c:	60a3      	str	r3, [r4, #8]
 801036e:	89a3      	ldrh	r3, [r4, #12]
 8010370:	071a      	lsls	r2, r3, #28
 8010372:	d501      	bpl.n	8010378 <__swbuf_r+0x20>
 8010374:	6923      	ldr	r3, [r4, #16]
 8010376:	b943      	cbnz	r3, 801038a <__swbuf_r+0x32>
 8010378:	4621      	mov	r1, r4
 801037a:	4628      	mov	r0, r5
 801037c:	f000 f832 	bl	80103e4 <__swsetup_r>
 8010380:	b118      	cbz	r0, 801038a <__swbuf_r+0x32>
 8010382:	f04f 37ff 	mov.w	r7, #4294967295
 8010386:	4638      	mov	r0, r7
 8010388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801038a:	6823      	ldr	r3, [r4, #0]
 801038c:	6922      	ldr	r2, [r4, #16]
 801038e:	b2f6      	uxtb	r6, r6
 8010390:	1a98      	subs	r0, r3, r2
 8010392:	6963      	ldr	r3, [r4, #20]
 8010394:	4637      	mov	r7, r6
 8010396:	4283      	cmp	r3, r0
 8010398:	dc05      	bgt.n	80103a6 <__swbuf_r+0x4e>
 801039a:	4621      	mov	r1, r4
 801039c:	4628      	mov	r0, r5
 801039e:	f7ff fa55 	bl	800f84c <_fflush_r>
 80103a2:	2800      	cmp	r0, #0
 80103a4:	d1ed      	bne.n	8010382 <__swbuf_r+0x2a>
 80103a6:	68a3      	ldr	r3, [r4, #8]
 80103a8:	3b01      	subs	r3, #1
 80103aa:	60a3      	str	r3, [r4, #8]
 80103ac:	6823      	ldr	r3, [r4, #0]
 80103ae:	1c5a      	adds	r2, r3, #1
 80103b0:	6022      	str	r2, [r4, #0]
 80103b2:	701e      	strb	r6, [r3, #0]
 80103b4:	6962      	ldr	r2, [r4, #20]
 80103b6:	1c43      	adds	r3, r0, #1
 80103b8:	429a      	cmp	r2, r3
 80103ba:	d004      	beq.n	80103c6 <__swbuf_r+0x6e>
 80103bc:	89a3      	ldrh	r3, [r4, #12]
 80103be:	07db      	lsls	r3, r3, #31
 80103c0:	d5e1      	bpl.n	8010386 <__swbuf_r+0x2e>
 80103c2:	2e0a      	cmp	r6, #10
 80103c4:	d1df      	bne.n	8010386 <__swbuf_r+0x2e>
 80103c6:	4621      	mov	r1, r4
 80103c8:	4628      	mov	r0, r5
 80103ca:	f7ff fa3f 	bl	800f84c <_fflush_r>
 80103ce:	2800      	cmp	r0, #0
 80103d0:	d0d9      	beq.n	8010386 <__swbuf_r+0x2e>
 80103d2:	e7d6      	b.n	8010382 <__swbuf_r+0x2a>

080103d4 <__swbuf>:
 80103d4:	4b02      	ldr	r3, [pc, #8]	@ (80103e0 <__swbuf+0xc>)
 80103d6:	460a      	mov	r2, r1
 80103d8:	4601      	mov	r1, r0
 80103da:	6818      	ldr	r0, [r3, #0]
 80103dc:	f7ff bfbc 	b.w	8010358 <__swbuf_r>
 80103e0:	20000020 	.word	0x20000020

080103e4 <__swsetup_r>:
 80103e4:	b538      	push	{r3, r4, r5, lr}
 80103e6:	4b29      	ldr	r3, [pc, #164]	@ (801048c <__swsetup_r+0xa8>)
 80103e8:	4605      	mov	r5, r0
 80103ea:	6818      	ldr	r0, [r3, #0]
 80103ec:	460c      	mov	r4, r1
 80103ee:	b118      	cbz	r0, 80103f8 <__swsetup_r+0x14>
 80103f0:	6a03      	ldr	r3, [r0, #32]
 80103f2:	b90b      	cbnz	r3, 80103f8 <__swsetup_r+0x14>
 80103f4:	f7fc fe2e 	bl	800d054 <__sinit>
 80103f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103fc:	0719      	lsls	r1, r3, #28
 80103fe:	d422      	bmi.n	8010446 <__swsetup_r+0x62>
 8010400:	06da      	lsls	r2, r3, #27
 8010402:	d407      	bmi.n	8010414 <__swsetup_r+0x30>
 8010404:	2209      	movs	r2, #9
 8010406:	602a      	str	r2, [r5, #0]
 8010408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801040c:	f04f 30ff 	mov.w	r0, #4294967295
 8010410:	81a3      	strh	r3, [r4, #12]
 8010412:	e033      	b.n	801047c <__swsetup_r+0x98>
 8010414:	0758      	lsls	r0, r3, #29
 8010416:	d512      	bpl.n	801043e <__swsetup_r+0x5a>
 8010418:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801041a:	b141      	cbz	r1, 801042e <__swsetup_r+0x4a>
 801041c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010420:	4299      	cmp	r1, r3
 8010422:	d002      	beq.n	801042a <__swsetup_r+0x46>
 8010424:	4628      	mov	r0, r5
 8010426:	f7fd fedf 	bl	800e1e8 <_free_r>
 801042a:	2300      	movs	r3, #0
 801042c:	6363      	str	r3, [r4, #52]	@ 0x34
 801042e:	89a3      	ldrh	r3, [r4, #12]
 8010430:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010434:	81a3      	strh	r3, [r4, #12]
 8010436:	2300      	movs	r3, #0
 8010438:	6063      	str	r3, [r4, #4]
 801043a:	6923      	ldr	r3, [r4, #16]
 801043c:	6023      	str	r3, [r4, #0]
 801043e:	89a3      	ldrh	r3, [r4, #12]
 8010440:	f043 0308 	orr.w	r3, r3, #8
 8010444:	81a3      	strh	r3, [r4, #12]
 8010446:	6923      	ldr	r3, [r4, #16]
 8010448:	b94b      	cbnz	r3, 801045e <__swsetup_r+0x7a>
 801044a:	89a3      	ldrh	r3, [r4, #12]
 801044c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010454:	d003      	beq.n	801045e <__swsetup_r+0x7a>
 8010456:	4621      	mov	r1, r4
 8010458:	4628      	mov	r0, r5
 801045a:	f000 f8e8 	bl	801062e <__smakebuf_r>
 801045e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010462:	f013 0201 	ands.w	r2, r3, #1
 8010466:	d00a      	beq.n	801047e <__swsetup_r+0x9a>
 8010468:	2200      	movs	r2, #0
 801046a:	60a2      	str	r2, [r4, #8]
 801046c:	6962      	ldr	r2, [r4, #20]
 801046e:	4252      	negs	r2, r2
 8010470:	61a2      	str	r2, [r4, #24]
 8010472:	6922      	ldr	r2, [r4, #16]
 8010474:	b942      	cbnz	r2, 8010488 <__swsetup_r+0xa4>
 8010476:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801047a:	d1c5      	bne.n	8010408 <__swsetup_r+0x24>
 801047c:	bd38      	pop	{r3, r4, r5, pc}
 801047e:	0799      	lsls	r1, r3, #30
 8010480:	bf58      	it	pl
 8010482:	6962      	ldrpl	r2, [r4, #20]
 8010484:	60a2      	str	r2, [r4, #8]
 8010486:	e7f4      	b.n	8010472 <__swsetup_r+0x8e>
 8010488:	2000      	movs	r0, #0
 801048a:	e7f7      	b.n	801047c <__swsetup_r+0x98>
 801048c:	20000020 	.word	0x20000020

08010490 <_init_signal_r>:
 8010490:	b538      	push	{r3, r4, r5, lr}
 8010492:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8010494:	4604      	mov	r4, r0
 8010496:	b955      	cbnz	r5, 80104ae <_init_signal_r+0x1e>
 8010498:	2180      	movs	r1, #128	@ 0x80
 801049a:	f7fd ff1f 	bl	800e2dc <_malloc_r>
 801049e:	63e0      	str	r0, [r4, #60]	@ 0x3c
 80104a0:	b138      	cbz	r0, 80104b2 <_init_signal_r+0x22>
 80104a2:	1f03      	subs	r3, r0, #4
 80104a4:	307c      	adds	r0, #124	@ 0x7c
 80104a6:	f843 5f04 	str.w	r5, [r3, #4]!
 80104aa:	4283      	cmp	r3, r0
 80104ac:	d1fb      	bne.n	80104a6 <_init_signal_r+0x16>
 80104ae:	2000      	movs	r0, #0
 80104b0:	bd38      	pop	{r3, r4, r5, pc}
 80104b2:	f04f 30ff 	mov.w	r0, #4294967295
 80104b6:	e7fb      	b.n	80104b0 <_init_signal_r+0x20>

080104b8 <_signal_r>:
 80104b8:	291f      	cmp	r1, #31
 80104ba:	b570      	push	{r4, r5, r6, lr}
 80104bc:	4604      	mov	r4, r0
 80104be:	460d      	mov	r5, r1
 80104c0:	4616      	mov	r6, r2
 80104c2:	d904      	bls.n	80104ce <_signal_r+0x16>
 80104c4:	2316      	movs	r3, #22
 80104c6:	6003      	str	r3, [r0, #0]
 80104c8:	f04f 30ff 	mov.w	r0, #4294967295
 80104cc:	e006      	b.n	80104dc <_signal_r+0x24>
 80104ce:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80104d0:	b12b      	cbz	r3, 80104de <_signal_r+0x26>
 80104d2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80104d4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80104d8:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 80104dc:	bd70      	pop	{r4, r5, r6, pc}
 80104de:	f7ff ffd7 	bl	8010490 <_init_signal_r>
 80104e2:	2800      	cmp	r0, #0
 80104e4:	d0f5      	beq.n	80104d2 <_signal_r+0x1a>
 80104e6:	e7ef      	b.n	80104c8 <_signal_r+0x10>

080104e8 <_raise_r>:
 80104e8:	291f      	cmp	r1, #31
 80104ea:	b538      	push	{r3, r4, r5, lr}
 80104ec:	4605      	mov	r5, r0
 80104ee:	460c      	mov	r4, r1
 80104f0:	d904      	bls.n	80104fc <_raise_r+0x14>
 80104f2:	2316      	movs	r3, #22
 80104f4:	6003      	str	r3, [r0, #0]
 80104f6:	f04f 30ff 	mov.w	r0, #4294967295
 80104fa:	bd38      	pop	{r3, r4, r5, pc}
 80104fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80104fe:	b112      	cbz	r2, 8010506 <_raise_r+0x1e>
 8010500:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010504:	b94b      	cbnz	r3, 801051a <_raise_r+0x32>
 8010506:	4628      	mov	r0, r5
 8010508:	f000 f86a 	bl	80105e0 <_getpid_r>
 801050c:	4622      	mov	r2, r4
 801050e:	4601      	mov	r1, r0
 8010510:	4628      	mov	r0, r5
 8010512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010516:	f000 b851 	b.w	80105bc <_kill_r>
 801051a:	2b01      	cmp	r3, #1
 801051c:	d00a      	beq.n	8010534 <_raise_r+0x4c>
 801051e:	1c59      	adds	r1, r3, #1
 8010520:	d103      	bne.n	801052a <_raise_r+0x42>
 8010522:	2316      	movs	r3, #22
 8010524:	6003      	str	r3, [r0, #0]
 8010526:	2001      	movs	r0, #1
 8010528:	e7e7      	b.n	80104fa <_raise_r+0x12>
 801052a:	2100      	movs	r1, #0
 801052c:	4620      	mov	r0, r4
 801052e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010532:	4798      	blx	r3
 8010534:	2000      	movs	r0, #0
 8010536:	e7e0      	b.n	80104fa <_raise_r+0x12>

08010538 <__sigtramp_r>:
 8010538:	291f      	cmp	r1, #31
 801053a:	b538      	push	{r3, r4, r5, lr}
 801053c:	4604      	mov	r4, r0
 801053e:	460d      	mov	r5, r1
 8010540:	d902      	bls.n	8010548 <__sigtramp_r+0x10>
 8010542:	f04f 30ff 	mov.w	r0, #4294967295
 8010546:	bd38      	pop	{r3, r4, r5, pc}
 8010548:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801054a:	b12b      	cbz	r3, 8010558 <__sigtramp_r+0x20>
 801054c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801054e:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 8010552:	b933      	cbnz	r3, 8010562 <__sigtramp_r+0x2a>
 8010554:	2001      	movs	r0, #1
 8010556:	e7f6      	b.n	8010546 <__sigtramp_r+0xe>
 8010558:	f7ff ff9a 	bl	8010490 <_init_signal_r>
 801055c:	2800      	cmp	r0, #0
 801055e:	d0f5      	beq.n	801054c <__sigtramp_r+0x14>
 8010560:	e7ef      	b.n	8010542 <__sigtramp_r+0xa>
 8010562:	1c59      	adds	r1, r3, #1
 8010564:	d008      	beq.n	8010578 <__sigtramp_r+0x40>
 8010566:	2b01      	cmp	r3, #1
 8010568:	d008      	beq.n	801057c <__sigtramp_r+0x44>
 801056a:	2400      	movs	r4, #0
 801056c:	4628      	mov	r0, r5
 801056e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010572:	4798      	blx	r3
 8010574:	4620      	mov	r0, r4
 8010576:	e7e6      	b.n	8010546 <__sigtramp_r+0xe>
 8010578:	2002      	movs	r0, #2
 801057a:	e7e4      	b.n	8010546 <__sigtramp_r+0xe>
 801057c:	2003      	movs	r0, #3
 801057e:	e7e2      	b.n	8010546 <__sigtramp_r+0xe>

08010580 <raise>:
 8010580:	4b02      	ldr	r3, [pc, #8]	@ (801058c <raise+0xc>)
 8010582:	4601      	mov	r1, r0
 8010584:	6818      	ldr	r0, [r3, #0]
 8010586:	f7ff bfaf 	b.w	80104e8 <_raise_r>
 801058a:	bf00      	nop
 801058c:	20000020 	.word	0x20000020

08010590 <signal>:
 8010590:	4b02      	ldr	r3, [pc, #8]	@ (801059c <signal+0xc>)
 8010592:	460a      	mov	r2, r1
 8010594:	4601      	mov	r1, r0
 8010596:	6818      	ldr	r0, [r3, #0]
 8010598:	f7ff bf8e 	b.w	80104b8 <_signal_r>
 801059c:	20000020 	.word	0x20000020

080105a0 <_init_signal>:
 80105a0:	4b01      	ldr	r3, [pc, #4]	@ (80105a8 <_init_signal+0x8>)
 80105a2:	6818      	ldr	r0, [r3, #0]
 80105a4:	f7ff bf74 	b.w	8010490 <_init_signal_r>
 80105a8:	20000020 	.word	0x20000020

080105ac <__sigtramp>:
 80105ac:	4b02      	ldr	r3, [pc, #8]	@ (80105b8 <__sigtramp+0xc>)
 80105ae:	4601      	mov	r1, r0
 80105b0:	6818      	ldr	r0, [r3, #0]
 80105b2:	f7ff bfc1 	b.w	8010538 <__sigtramp_r>
 80105b6:	bf00      	nop
 80105b8:	20000020 	.word	0x20000020

080105bc <_kill_r>:
 80105bc:	b538      	push	{r3, r4, r5, lr}
 80105be:	2300      	movs	r3, #0
 80105c0:	4d06      	ldr	r5, [pc, #24]	@ (80105dc <_kill_r+0x20>)
 80105c2:	4604      	mov	r4, r0
 80105c4:	4608      	mov	r0, r1
 80105c6:	4611      	mov	r1, r2
 80105c8:	602b      	str	r3, [r5, #0]
 80105ca:	f7f2 f968 	bl	800289e <_kill>
 80105ce:	1c43      	adds	r3, r0, #1
 80105d0:	d102      	bne.n	80105d8 <_kill_r+0x1c>
 80105d2:	682b      	ldr	r3, [r5, #0]
 80105d4:	b103      	cbz	r3, 80105d8 <_kill_r+0x1c>
 80105d6:	6023      	str	r3, [r4, #0]
 80105d8:	bd38      	pop	{r3, r4, r5, pc}
 80105da:	bf00      	nop
 80105dc:	200007a4 	.word	0x200007a4

080105e0 <_getpid_r>:
 80105e0:	f7f2 b95b 	b.w	800289a <_getpid>

080105e4 <__swhatbuf_r>:
 80105e4:	b570      	push	{r4, r5, r6, lr}
 80105e6:	460c      	mov	r4, r1
 80105e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105ec:	4615      	mov	r5, r2
 80105ee:	2900      	cmp	r1, #0
 80105f0:	461e      	mov	r6, r3
 80105f2:	b096      	sub	sp, #88	@ 0x58
 80105f4:	da0c      	bge.n	8010610 <__swhatbuf_r+0x2c>
 80105f6:	89a3      	ldrh	r3, [r4, #12]
 80105f8:	2100      	movs	r1, #0
 80105fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80105fe:	bf14      	ite	ne
 8010600:	2340      	movne	r3, #64	@ 0x40
 8010602:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010606:	2000      	movs	r0, #0
 8010608:	6031      	str	r1, [r6, #0]
 801060a:	602b      	str	r3, [r5, #0]
 801060c:	b016      	add	sp, #88	@ 0x58
 801060e:	bd70      	pop	{r4, r5, r6, pc}
 8010610:	466a      	mov	r2, sp
 8010612:	f000 f849 	bl	80106a8 <_fstat_r>
 8010616:	2800      	cmp	r0, #0
 8010618:	dbed      	blt.n	80105f6 <__swhatbuf_r+0x12>
 801061a:	9901      	ldr	r1, [sp, #4]
 801061c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010620:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010624:	4259      	negs	r1, r3
 8010626:	4159      	adcs	r1, r3
 8010628:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801062c:	e7eb      	b.n	8010606 <__swhatbuf_r+0x22>

0801062e <__smakebuf_r>:
 801062e:	898b      	ldrh	r3, [r1, #12]
 8010630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010632:	079d      	lsls	r5, r3, #30
 8010634:	4606      	mov	r6, r0
 8010636:	460c      	mov	r4, r1
 8010638:	d507      	bpl.n	801064a <__smakebuf_r+0x1c>
 801063a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801063e:	6023      	str	r3, [r4, #0]
 8010640:	6123      	str	r3, [r4, #16]
 8010642:	2301      	movs	r3, #1
 8010644:	6163      	str	r3, [r4, #20]
 8010646:	b003      	add	sp, #12
 8010648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801064a:	466a      	mov	r2, sp
 801064c:	ab01      	add	r3, sp, #4
 801064e:	f7ff ffc9 	bl	80105e4 <__swhatbuf_r>
 8010652:	9f00      	ldr	r7, [sp, #0]
 8010654:	4605      	mov	r5, r0
 8010656:	4639      	mov	r1, r7
 8010658:	4630      	mov	r0, r6
 801065a:	f7fd fe3f 	bl	800e2dc <_malloc_r>
 801065e:	b948      	cbnz	r0, 8010674 <__smakebuf_r+0x46>
 8010660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010664:	059a      	lsls	r2, r3, #22
 8010666:	d4ee      	bmi.n	8010646 <__smakebuf_r+0x18>
 8010668:	f023 0303 	bic.w	r3, r3, #3
 801066c:	f043 0302 	orr.w	r3, r3, #2
 8010670:	81a3      	strh	r3, [r4, #12]
 8010672:	e7e2      	b.n	801063a <__smakebuf_r+0xc>
 8010674:	89a3      	ldrh	r3, [r4, #12]
 8010676:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801067a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801067e:	81a3      	strh	r3, [r4, #12]
 8010680:	9b01      	ldr	r3, [sp, #4]
 8010682:	6020      	str	r0, [r4, #0]
 8010684:	b15b      	cbz	r3, 801069e <__smakebuf_r+0x70>
 8010686:	4630      	mov	r0, r6
 8010688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801068c:	f000 f81e 	bl	80106cc <_isatty_r>
 8010690:	b128      	cbz	r0, 801069e <__smakebuf_r+0x70>
 8010692:	89a3      	ldrh	r3, [r4, #12]
 8010694:	f023 0303 	bic.w	r3, r3, #3
 8010698:	f043 0301 	orr.w	r3, r3, #1
 801069c:	81a3      	strh	r3, [r4, #12]
 801069e:	89a3      	ldrh	r3, [r4, #12]
 80106a0:	431d      	orrs	r5, r3
 80106a2:	81a5      	strh	r5, [r4, #12]
 80106a4:	e7cf      	b.n	8010646 <__smakebuf_r+0x18>
	...

080106a8 <_fstat_r>:
 80106a8:	b538      	push	{r3, r4, r5, lr}
 80106aa:	2300      	movs	r3, #0
 80106ac:	4d06      	ldr	r5, [pc, #24]	@ (80106c8 <_fstat_r+0x20>)
 80106ae:	4604      	mov	r4, r0
 80106b0:	4608      	mov	r0, r1
 80106b2:	4611      	mov	r1, r2
 80106b4:	602b      	str	r3, [r5, #0]
 80106b6:	f7f2 f921 	bl	80028fc <_fstat>
 80106ba:	1c43      	adds	r3, r0, #1
 80106bc:	d102      	bne.n	80106c4 <_fstat_r+0x1c>
 80106be:	682b      	ldr	r3, [r5, #0]
 80106c0:	b103      	cbz	r3, 80106c4 <_fstat_r+0x1c>
 80106c2:	6023      	str	r3, [r4, #0]
 80106c4:	bd38      	pop	{r3, r4, r5, pc}
 80106c6:	bf00      	nop
 80106c8:	200007a4 	.word	0x200007a4

080106cc <_isatty_r>:
 80106cc:	b538      	push	{r3, r4, r5, lr}
 80106ce:	2300      	movs	r3, #0
 80106d0:	4d05      	ldr	r5, [pc, #20]	@ (80106e8 <_isatty_r+0x1c>)
 80106d2:	4604      	mov	r4, r0
 80106d4:	4608      	mov	r0, r1
 80106d6:	602b      	str	r3, [r5, #0]
 80106d8:	f7f2 f915 	bl	8002906 <_isatty>
 80106dc:	1c43      	adds	r3, r0, #1
 80106de:	d102      	bne.n	80106e6 <_isatty_r+0x1a>
 80106e0:	682b      	ldr	r3, [r5, #0]
 80106e2:	b103      	cbz	r3, 80106e6 <_isatty_r+0x1a>
 80106e4:	6023      	str	r3, [r4, #0]
 80106e6:	bd38      	pop	{r3, r4, r5, pc}
 80106e8:	200007a4 	.word	0x200007a4

080106ec <__EH_FRAME_BEGIN__>:
 80106ec:	00000010 00000000 00527a01 010e7c02     .........zR..|..
 80106fc:	000d0c1b 00000010 00000018 fffefbc4     ................
 801070c:	00000010 00000000                       ........

08010714 <__FRAME_END__>:
 8010714:	00000000                                ....

08010718 <_init>:
 8010718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801071a:	bf00      	nop
 801071c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801071e:	bc08      	pop	{r3}
 8010720:	469e      	mov	lr, r3
 8010722:	4770      	bx	lr

08010724 <_fini>:
 8010724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010726:	bf00      	nop
 8010728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801072a:	bc08      	pop	{r3}
 801072c:	469e      	mov	lr, r3
 801072e:	4770      	bx	lr
